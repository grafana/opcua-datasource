# most of this is generated from https://github.com/grafana/grafana-drone-extension
# Built for opcua-datasource
image_pull_secrets:
    - dockerconfigjson
kind: pipeline
name: test-pr
platform:
    arch: amd64
    os: linux
steps:
    - commands:
        - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.2.7; fi
        - mkdir -p bin
        - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
        - chmod +x bin/grabpl
        - . /root/.nvm/nvm.sh
        - mkdir ci
        - nvm use 18.18.2
        - npm i -g yarn || true
        - ln -s /opt/google-cloud-sdk/platform/bundledpythonunix/bin/python3 /usr/bin/python3
        - yarn install --frozen-lockfile --no-progress
        - rm -rf node_modules/@grafana/data/node_modules
      image: node:21-bullseye-slim 
      name: initialize
    - commands:
        - yarn build
        - ls -alR ci
      depends_on:
        - initialize
      image: grafana/grafana-plugin-ci:latest
      name: build-and-test-frontend
    - commands:
        - ./scripts/ci-build-plugin.sh
      depends_on:
        - initialize
      image: mcr.microsoft.com/dotnet/sdk:6.0-bullseye-slim
      name: build-backend
    - commands:
        - echo "Starting veracode scan..."
        - apk add curl
        - '# Increase heap size or the scanner will die.'
        - export _JAVA_OPTIONS=-Xmx4g
        - mkdir -p ci/jobs/security_scan
        - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
        - '##'
        - '# Not failing builds now if we detect items we deem a problem in the scan output, but the following'
        - '# Would be an example'
        - '#'
        - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
      depends_on:
        - build-and-test-frontend
        - build-backend
      environment:
        SRCCLR_API_TOKEN:
            from_secret: srcclr_api_token
      image: jitesoft/node-yarn:18
      name: security-scan
    - commands:
        - ./scripts/ci-package-plugin.sh
      depends_on:
        - build-and-test-frontend
        - build-backend
      environment:
        GRAFANA_API_KEY:
            from_secret: grafana_api_key
      image: grafana/grafana-build:latest
      name: package
    - commands:
        - apt-get update --allow-releaseinfo-change
        - apt-get install -y jq
        - PLUGIN_NAME=`jq -r .id ci/dist/plugin.json`
        - VERSION=`jq -r .info.version ci/dist/plugin.json`
        - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
        - printenv GCP_KEY > /tmp/gcpkey.json
        - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
        - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
        - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
        - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
        - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
        - if [ $DRONE_BRANCH = "master" ] || [ $DRONE_BRANCH = "main" ]; then gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest/** || true; gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest; fi
        - gsutil ls -r gs://integration-artifacts/$${PLUGIN_NAME}
      depends_on:
        - package
      environment:
        GCP_KEY:
            from_secret: gcp_key
      image: google/cloud-sdk:353.0.0
      name: publish-gcs-artifacts
    - commands:
        - apt-get update --allow-releaseinfo-change
        - apt-get install -y jq
        - GRAFANA_DEPENDENCY=`jq -r .dependencies.grafanaDependency src/plugin.json`
        - E2E_VERSION=`jq -r '.devDependencies."@grafana/e2e"' ./package.json`
        - npm install -g find-versions-cli
        - export E2E_GRAFANA_VERSION=`find-versions "$GRAFANA_DEPENDENCY"`
        - E2E_VER=`echo $E2E_VERSION | sed -e 's/\.//g'`
        - GRA_VER=`echo $E2E_GRAFANA_VERSION | sed -e 's/\.//g'`
        - if [ $E2E_VER -gt $GRA_VER ]; then export E2E_GRAFANA_VERSION=$E2E_VERSION; fi
        - ./bin/grabpl plugin e2etests
      depends_on:
        - package
      environment:
        GRAFANA_LICENSE_KEY:
            from_secret: license_key
      image: grafana/grafana-plugin-ci-e2e:latest
      name: run-e2e
    - commands:
        - printenv GCP_KEY > /tmp/gcpkey.json
        - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
        - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/meta/plugin.json
        - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/packages
        - if [ -d cypress ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/artifacts; fi
        - if [ -d cypress ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/artifacts; fi
      depends_on:
        - run-e2e
      environment:
        GCP_KEY:
            from_secret: gcp_key
      image: grafana/grafana-plugin-ci:latest
      name: upload-artifacts
    - commands:
        - if [ -f failed ]; then return 1; else return 0; fi
      depends_on:
        - upload-artifacts
      image: grafana/grafana-plugin-ci:latest
      name: check-e2e
trigger:
    event:
        - pull_request
type: docker

---
depends_on:
    - test-pr
kind: pipeline
name: register-pr-build
platform:
    arch: amd64
    os: linux
steps:
    - commands:
        - mkdir -p bin
        - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.2.7; fi
        - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
        - chmod +x bin/grabpl
        - ./bin/grabpl plugin report-build
      environment:
        GCP_KEY:
            from_secret: gcp_key
      image: grafana/grafana-plugin-ci:latest
      name: report-build
trigger:
    branch:
        - feature/*
    event:
        - pull_request
    status:
        - success
        - failure
type: docker

---
image_pull_secrets:
    - dockerconfigjson
kind: pipeline
name: test-main
platform:
    arch: amd64
    os: linux
steps:
    - commands:
        - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.2.7; fi
        - mkdir -p bin
        - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
        - chmod +x bin/grabpl
        - mkdir ci
        - yarn install --frozen-lockfile --no-progress
        - rm -rf node_modules/@grafana/data/node_modules
      image: grafana/grafana-plugin-ci:latest
      name: initialize
    - commands:
        - ./node_modules/.bin/grafana-toolkit plugin:ci-build
        - ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      depends_on:
        - initialize
      image: grafana/grafana-plugin-ci:latest
      name: build-and-test-frontend
    - commands:
        - ./scripts/ci-build-plugin.sh
      depends_on:
        - initialize
      image: mcr.microsoft.com/dotnet/sdk:6.0-bullseye-slim
      name: build-backend
    - commands:
        - echo "Starting veracode scan..."
        - apk add curl
        - '# Increase heap size or the scanner will die.'
        - export _JAVA_OPTIONS=-Xmx4g
        - mkdir -p ci/jobs/security_scan
        - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
        - '##'
        - '# Not failing builds now if we detect items we deem a problem in the scan output, but the following'
        - '# Would be an example'
        - '#'
        - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
      depends_on:
        - build-and-test-frontend
        - build-backend
      environment:
        SRCCLR_API_TOKEN:
            from_secret: srcclr_api_token
      image: grafana/grafana-plugin-ci:latest
      name: security-scan
    - commands:
        - ./scripts/ci-package-plugin.sh
      depends_on:
        - build-and-test-frontend
        - build-backend
      environment:
        GRAFANA_API_KEY:
            from_secret: grafana_api_key
      image: grafana/grafana-plugin-ci:latest
      name: package
    - commands:
        - apt-get update
        - apt-get install -y jq git-lfs
        - PLUGIN_NAME=`jq -r .id ci/dist/plugin.json`
        - VERSION=`jq -r .info.version ci/dist/plugin.json`
        - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
        - printenv GCP_KEY > /tmp/gcpkey.json
        - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
        - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
        - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
        - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
        - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
        - if [ $DRONE_BRANCH = "master" ] || [ $DRONE_BRANCH = "main" ]; then gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest/** || true; gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest; fi
        - gsutil ls -r gs://integration-artifacts/$${PLUGIN_NAME}
      depends_on:
        - package
      environment:
        GCP_KEY:
            from_secret: gcp_key
      image: google/cloud-sdk:352.0.0
      name: publish-gcs-artifacts
    - commands:
        - apt-get update
        - apt-get install -y jq git-lfs
        - GRAFANA_DEPENDENCY=`jq -r .dependencies.grafanaDependency src/plugin.json`
        - E2E_VERSION=`jq -r '.devDependencies."@grafana/e2e"' ./package.json`
        - npm install -g find-versions-cli
        - export E2E_GRAFANA_VERSION=`find-versions "$GRAFANA_DEPENDENCY"`
        - E2E_VER=`echo $E2E_VERSION | sed -e 's/\.//g'`
        - GRA_VER=`echo $E2E_GRAFANA_VERSION | sed -e 's/\.//g'`
        - if [ $E2E_VER -gt $GRA_VER ]; then export E2E_GRAFANA_VERSION=$E2E_VERSION; fi
        - ./bin/grabpl plugin e2etests
      depends_on:
        - package
      environment:
        GRAFANA_LICENSE_KEY:
            from_secret: license_key
      image: grafana/grafana-plugin-ci-e2e:latest
      name: run-e2e
    - commands:
        - printenv GCP_KEY > /tmp/gcpkey.json
        - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
        - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/meta/plugin.json
        - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/packages
        - if [ -d cypress ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts; fi
        - if [ -d cypress ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts; fi
      depends_on:
        - run-e2e
      environment:
        GCP_KEY:
            from_secret: gcp_key
      image: grafana/grafana-plugin-ci:latest
      name: upload-artifacts
    - commands:
        - if [ -f failed ]; then return 1; else return 0; fi
      depends_on:
        - upload-artifacts
      image: grafana/grafana-plugin-ci:latest
      name: check-e2e
    - commands:
        - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
        - integration-bot.js update-enterprise-master $PLUGIN_NAME $DRONE_REPO_NAME
      depends_on:
        - publish-gcs-artifacts
        - check-e2e
      environment:
        GCLOUD_SERVICE_KEY:
            from_secret: gcp_key
        GITHUB_BOT_EMAIL: grafanabot@grafana.com
        GITHUB_BOT_TOKEN:
            from_secret: github_token
        GITHUB_BOT_USER: grafanabot
      image: us.gcr.io/kubernetes-dev/integration-bot:v10
      name: integration-bot-main
trigger:
    branch:
        - master
        - main
    event:
        - push
type: docker

---
depends_on:
    - test-main
kind: pipeline
name: register-main-build
platform:
    arch: amd64
    os: linux
steps:
    - commands:
        - mkdir -p bin
        - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.2.7; fi
        - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
        - chmod +x bin/grabpl
        - ./bin/grabpl plugin report-build
      environment:
        GCP_KEY:
            from_secret: gcp_key
      image: grafana/grafana-plugin-ci:latest
      name: report-build
trigger:
    branch:
        - feature/*
    event:
        - push
    status:
        - success
        - failure
type: docker

---
get:
    name: grafana_api_key
    path: infra/data/ci/drone-plugins
kind: secret
name: grafana_api_key

---
get:
    name: gcp_key
    path: infra/data/ci/drone-plugins
kind: secret
name: gcp_key

---
get:
    name: license_key
    path: infra/data/ci/drone-plugins
kind: secret
name: license_key

---
get:
    name: github_token
    path: infra/data/ci/drone-plugins
kind: secret
name: github_token

---
get:
    name: .dockerconfigjson
    path: secret/data/common/gcr
kind: secret
name: dockerconfigjson

---
image_pull_secrets:
    - dockerconfigjson
kind: pipeline
name: deploy-publish
platform:
    arch: amd64
    os: linux
steps:
    - commands:
        - '[ -z "$GRABPL_VERSION" ] && GRABPL_VERSION=2.2.7 || true'
        - '[ ! -d bin ] && mkdir -pv bin || true'
        - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$${GRABPL_VERSION}/grabpl && chmod 0755 bin/grabpl
      environment:
        GRABPL_VERSION:
            from_secret: grabpl_version
      image: cibuilds/github:0.13.0
      name: get-grabpl
    - commands:
        - mkdir -p /hugo/content/docs/plugins/temp-name/v1.0.0
        - cp -r docs/sources /hugo/content/docs/plugins/temp-name/v1.0.0
        - make -C /hugo prod
      image: grafana/docs-base:latest
      name: build-docs
      pull: if-not-exists
    - commands:
        - echo "start publish GCS release"
        - apt-get update 
        - apt-get install -y jq
        - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
        - printenv GCP_KEY > /tmp/gcpkey.json
        - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
        - CI_BUCKET=gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_PARENT}
        - mkdir ci
        - gsutil cp -r "$CI_BUCKET/meta" ci
        - gsutil cp -r "$CI_BUCKET/packages" ci
        - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
        - VERSION=`jq -r .info.version ci/meta/plugin.json`
        - echo "Copying artifacts to $PLUGIN_NAME/release/$VERSION"
        - gsutil -m cp -r ci/packages/*windows* gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/windows
        - gsutil -m cp -r ci/packages/*linux* gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/linux
      depends_on:
        - build-docs
      environment:
        GCP_KEY:
            from_secret: gcp_key
      image: google/cloud-sdk:352.0.0
      name: publish-gcs-release
    - commands:
        - echo "start publish github release"
        - mkdir -p artifacts
        - cp ci/packages/* artifacts
        - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
        - VERSION=`jq -r .info.version ci/meta/plugin.json`
        - RELEASE_NOTES=`bin/grabpl plugin parse-changelog --changelog CHANGELOG.md --changelog-index 0`
        - git config user.email "grafanabot@grafana.com"
        - git config user.name "grafanabot"
        - git config user.password "$GITHUB_TOKEN"
        - git config --global credential.helper "/bin/sh /git_creds.sh"
        - 'echo #!/bin/sh > /git_creds.sh'
        - echo "sleep 1" >> /git_creds.sh
        - echo "echo username=grafanabot" >> /git_creds.sh
        - echo "echo password=$GITHUB_TOKEN" >> /git_creds.sh
        - git checkout -b release-$${VERSION}
        - '# add dist, it is needed to get the right plugin.json info during gcom publish'
        - mkdir -p dist
        - cp -rp ci/meta/* dist/
        - git add --force dist/
        - git commit -m "automated release $${VERSION}"
        - git push -f origin release-$${VERSION}
        - git tag -f v$${VERSION}
        - git push -f origin v$${VERSION}
        - ghr -t $${GITHUB_TOKEN} -u $${DRONE_REPO_NAMESPACE} -r $${DRONE_REPO_NAME} -c $${DRONE_COMMIT_SHA} -n "$${PLUGIN_NAME} v$${VERSION}" -b "$RELEASE_NOTES" -delete v$${VERSION} ./artifacts/
      depends_on:
        - get-grabpl
        - publish-gcs-release
      environment:
        GITHUB_TOKEN:
            from_secret: github_token
      image: cibuilds/github:0.13.0
      name: publish-github-release
    - commands:
        - echo "start publish to GCOM"
        - if [ -z "$GCOM_PUBLISH_TOKEN" ]; then echo "Missing GCOM Publish Key"; exit -1; fi
        - if [ -z "$GITHUB_TOKEN" ]; then echo "Missing GITHUB_TOKEN"; exit -1; fi
        - if [ -z "$GCLOUD_SERVICE_KEY" ]; then echo "Missing GCLOUD_SERVICE_KEY"; exit -1; fi
        - printenv GCLOUD_SERVICE_KEY > /tmp/gcpkey.json
        - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
        - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
        - VERSION=`jq -r .info.version ci/meta/plugin.json`
        - /root/app/bin/grafana-publisher.js --auto publishremote $PLUGIN_NAME $VERSION $DRONE_REPO_NAME
      depends_on:
        - publish-github-release
      environment:
        GCLOUD_SERVICE_KEY:
            from_secret: gcp_key
        GCOM_PUBLISH_TOKEN:
            from_secret: gcom_publish_token
        GITHUB_TOKEN:
            from_secret: github_token
      image: grafana/integration-grafana-publisher:v7
      name: publish-to-gcom
    - commands:
        - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
        - VERSION=`jq -r .info.version ci/meta/plugin.json`
        - bin/grabpl plugin publish-docs --github-token $GITHUB_TOKEN --commit-author-name grafanabot --commit-author-email grafanabot@grafana.com --plugin-version $VERSION --plugin-id $PLUGIN_NAME
      depends_on:
        - get-grabpl
        - publish-to-gcom
      environment:
        GITHUB_TOKEN:
            from_secret: github_token
      image: grafana/integration-grafana-publisher:v7
      name: publish-docs-to-gcom
    - commands:
        - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
        - integration-bot.js update-enterprise-latest $PLUGIN_NAME $DRONE_REPO_NAME
      depends_on:
        - publish-to-gcom
      environment:
        GCLOUD_SERVICE_KEY:
            from_secret: gcp_key
        GITHUB_BOT_EMAIL: grafanabot@grafana.com
        GITHUB_BOT_TOKEN:
            from_secret: github_token
        GITHUB_BOT_USER: grafanabot
      image: us.gcr.io/kubernetes-dev/integration-bot:v10
      name: integration-bot-latest
trigger:
    event:
        - promote
    target:
        - publish
type: docker

---
get:
    name: grafana_api_key
    path: infra/data/ci/drone-plugins
kind: secret
name: grafana_api_key

---
get:
    name: gcp_key
    path: infra/data/ci/drone-plugins
kind: secret
name: gcp_key

---
get:
    name: license_key
    path: infra/data/ci/drone-plugins
kind: secret
name: license_key

---
get:
    name: github_token
    path: infra/data/ci/drone-plugins
kind: secret
name: github_token

---
get:
    name: gcom_publish_token
    path: infra/data/ci/drone-plugins
kind: secret
name: gcom_publish_token

---
get:
    name: srcclr_api_token
    path: infra/data/ci/drone-plugins
kind: secret
name: srcclr_api_token
