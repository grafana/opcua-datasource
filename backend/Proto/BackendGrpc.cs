// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: backend.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Pluginv2 {
  public static partial class Resource
  {
    static readonly string __ServiceName = "pluginv2.Resource";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Pluginv2.CallResourceRequest> __Marshaller_pluginv2_CallResourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.CallResourceRequest.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.CallResourceResponse> __Marshaller_pluginv2_CallResourceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.CallResourceResponse.Parser));

    static readonly grpc::Method<global::Pluginv2.CallResourceRequest, global::Pluginv2.CallResourceResponse> __Method_CallResource = new grpc::Method<global::Pluginv2.CallResourceRequest, global::Pluginv2.CallResourceResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CallResource",
        __Marshaller_pluginv2_CallResourceRequest,
        __Marshaller_pluginv2_CallResourceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pluginv2.BackendReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Resource</summary>
    [grpc::BindServiceMethod(typeof(Resource), "BindService")]
    public abstract partial class ResourceBase
    {
      public virtual global::System.Threading.Tasks.Task CallResource(global::Pluginv2.CallResourceRequest request, grpc::IServerStreamWriter<global::Pluginv2.CallResourceResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Resource</summary>
    public partial class ResourceClient : grpc::ClientBase<ResourceClient>
    {
      /// <summary>Creates a new client for Resource</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ResourceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Resource that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ResourceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ResourceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ResourceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Pluginv2.CallResourceResponse> CallResource(global::Pluginv2.CallResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Pluginv2.CallResourceResponse> CallResource(global::Pluginv2.CallResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CallResource, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ResourceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ResourceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ResourceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CallResource, serviceImpl.CallResource).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ResourceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CallResource, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Pluginv2.CallResourceRequest, global::Pluginv2.CallResourceResponse>(serviceImpl.CallResource));
    }

  }
  public static partial class Data
  {
    static readonly string __ServiceName = "pluginv2.Data";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Pluginv2.QueryDataRequest> __Marshaller_pluginv2_QueryDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.QueryDataRequest.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.QueryDataResponse> __Marshaller_pluginv2_QueryDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.QueryDataResponse.Parser));

    static readonly grpc::Method<global::Pluginv2.QueryDataRequest, global::Pluginv2.QueryDataResponse> __Method_QueryData = new grpc::Method<global::Pluginv2.QueryDataRequest, global::Pluginv2.QueryDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryData",
        __Marshaller_pluginv2_QueryDataRequest,
        __Marshaller_pluginv2_QueryDataResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pluginv2.BackendReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Data</summary>
    [grpc::BindServiceMethod(typeof(Data), "BindService")]
    public abstract partial class DataBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Pluginv2.QueryDataResponse> QueryData(global::Pluginv2.QueryDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Data</summary>
    public partial class DataClient : grpc::ClientBase<DataClient>
    {
      /// <summary>Creates a new client for Data</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Data that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Pluginv2.QueryDataResponse QueryData(global::Pluginv2.QueryDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Pluginv2.QueryDataResponse QueryData(global::Pluginv2.QueryDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.QueryDataResponse> QueryDataAsync(global::Pluginv2.QueryDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.QueryDataResponse> QueryDataAsync(global::Pluginv2.QueryDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryData, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DataClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DataBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_QueryData, serviceImpl.QueryData).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_QueryData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pluginv2.QueryDataRequest, global::Pluginv2.QueryDataResponse>(serviceImpl.QueryData));
    }

  }
  public static partial class Diagnostics
  {
    static readonly string __ServiceName = "pluginv2.Diagnostics";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Pluginv2.CheckHealthRequest> __Marshaller_pluginv2_CheckHealthRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.CheckHealthRequest.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.CheckHealthResponse> __Marshaller_pluginv2_CheckHealthResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.CheckHealthResponse.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.CollectMetricsRequest> __Marshaller_pluginv2_CollectMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.CollectMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.CollectMetricsResponse> __Marshaller_pluginv2_CollectMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.CollectMetricsResponse.Parser));

    static readonly grpc::Method<global::Pluginv2.CheckHealthRequest, global::Pluginv2.CheckHealthResponse> __Method_CheckHealth = new grpc::Method<global::Pluginv2.CheckHealthRequest, global::Pluginv2.CheckHealthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckHealth",
        __Marshaller_pluginv2_CheckHealthRequest,
        __Marshaller_pluginv2_CheckHealthResponse);

    static readonly grpc::Method<global::Pluginv2.CollectMetricsRequest, global::Pluginv2.CollectMetricsResponse> __Method_CollectMetrics = new grpc::Method<global::Pluginv2.CollectMetricsRequest, global::Pluginv2.CollectMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CollectMetrics",
        __Marshaller_pluginv2_CollectMetricsRequest,
        __Marshaller_pluginv2_CollectMetricsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pluginv2.BackendReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Diagnostics</summary>
    [grpc::BindServiceMethod(typeof(Diagnostics), "BindService")]
    public abstract partial class DiagnosticsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Pluginv2.CheckHealthResponse> CheckHealth(global::Pluginv2.CheckHealthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Pluginv2.CollectMetricsResponse> CollectMetrics(global::Pluginv2.CollectMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Diagnostics</summary>
    public partial class DiagnosticsClient : grpc::ClientBase<DiagnosticsClient>
    {
      /// <summary>Creates a new client for Diagnostics</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DiagnosticsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Diagnostics that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DiagnosticsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DiagnosticsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DiagnosticsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Pluginv2.CheckHealthResponse CheckHealth(global::Pluginv2.CheckHealthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckHealth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Pluginv2.CheckHealthResponse CheckHealth(global::Pluginv2.CheckHealthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckHealth, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.CheckHealthResponse> CheckHealthAsync(global::Pluginv2.CheckHealthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckHealthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.CheckHealthResponse> CheckHealthAsync(global::Pluginv2.CheckHealthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckHealth, null, options, request);
      }
      public virtual global::Pluginv2.CollectMetricsResponse CollectMetrics(global::Pluginv2.CollectMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CollectMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Pluginv2.CollectMetricsResponse CollectMetrics(global::Pluginv2.CollectMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CollectMetrics, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.CollectMetricsResponse> CollectMetricsAsync(global::Pluginv2.CollectMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CollectMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.CollectMetricsResponse> CollectMetricsAsync(global::Pluginv2.CollectMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CollectMetrics, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DiagnosticsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DiagnosticsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DiagnosticsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CheckHealth, serviceImpl.CheckHealth)
          .AddMethod(__Method_CollectMetrics, serviceImpl.CollectMetrics).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DiagnosticsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CheckHealth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pluginv2.CheckHealthRequest, global::Pluginv2.CheckHealthResponse>(serviceImpl.CheckHealth));
      serviceBinder.AddMethod(__Method_CollectMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pluginv2.CollectMetricsRequest, global::Pluginv2.CollectMetricsResponse>(serviceImpl.CollectMetrics));
    }

  }
  public static partial class Stream
  {
    static readonly string __ServiceName = "pluginv2.Stream";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Pluginv2.SubscribeStreamRequest> __Marshaller_pluginv2_SubscribeStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.SubscribeStreamRequest.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.SubscribeStreamResponse> __Marshaller_pluginv2_SubscribeStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.SubscribeStreamResponse.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.RunStreamRequest> __Marshaller_pluginv2_RunStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.RunStreamRequest.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.StreamPacket> __Marshaller_pluginv2_StreamPacket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.StreamPacket.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.PublishStreamRequest> __Marshaller_pluginv2_PublishStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.PublishStreamRequest.Parser));
    static readonly grpc::Marshaller<global::Pluginv2.PublishStreamResponse> __Marshaller_pluginv2_PublishStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Pluginv2.PublishStreamResponse.Parser));

    static readonly grpc::Method<global::Pluginv2.SubscribeStreamRequest, global::Pluginv2.SubscribeStreamResponse> __Method_SubscribeStream = new grpc::Method<global::Pluginv2.SubscribeStreamRequest, global::Pluginv2.SubscribeStreamResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeStream",
        __Marshaller_pluginv2_SubscribeStreamRequest,
        __Marshaller_pluginv2_SubscribeStreamResponse);

    static readonly grpc::Method<global::Pluginv2.RunStreamRequest, global::Pluginv2.StreamPacket> __Method_RunStream = new grpc::Method<global::Pluginv2.RunStreamRequest, global::Pluginv2.StreamPacket>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RunStream",
        __Marshaller_pluginv2_RunStreamRequest,
        __Marshaller_pluginv2_StreamPacket);

    static readonly grpc::Method<global::Pluginv2.PublishStreamRequest, global::Pluginv2.PublishStreamResponse> __Method_PublishStream = new grpc::Method<global::Pluginv2.PublishStreamRequest, global::Pluginv2.PublishStreamResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PublishStream",
        __Marshaller_pluginv2_PublishStreamRequest,
        __Marshaller_pluginv2_PublishStreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pluginv2.BackendReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of Stream</summary>
    [grpc::BindServiceMethod(typeof(Stream), "BindService")]
    public abstract partial class StreamBase
    {
      /// <summary>
      /// SubscribeStream called when a user tries to subscribe to a plugin/datasource
      /// managed channel path – thus plugin can check subscribe permissions and communicate
      /// options with Grafana Core. When the first subscriber joins a channel, RunStream
      /// will be called. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pluginv2.SubscribeStreamResponse> SubscribeStream(global::Pluginv2.SubscribeStreamRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RunStream will be initiated by Grafana to consume a stream. RunStream will be
      /// called once for the first client successfully subscribed to a channel path.
      /// When Grafana detects that there are no longer any subscribers inside a channel,
      /// the call will be terminated until next active subscriber appears. Call termination
      /// can happen with a delay.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task RunStream(global::Pluginv2.RunStreamRequest request, grpc::IServerStreamWriter<global::Pluginv2.StreamPacket> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PublishStream called when a user tries to publish to a plugin/datasource
      /// managed channel path. Here plugin can check publish permissions and
      /// modify publication data if required.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pluginv2.PublishStreamResponse> PublishStream(global::Pluginv2.PublishStreamRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Stream</summary>
    public partial class StreamClient : grpc::ClientBase<StreamClient>
    {
      /// <summary>Creates a new client for Stream</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StreamClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Stream that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StreamClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StreamClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StreamClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// SubscribeStream called when a user tries to subscribe to a plugin/datasource
      /// managed channel path – thus plugin can check subscribe permissions and communicate
      /// options with Grafana Core. When the first subscriber joins a channel, RunStream
      /// will be called. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pluginv2.SubscribeStreamResponse SubscribeStream(global::Pluginv2.SubscribeStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubscribeStream called when a user tries to subscribe to a plugin/datasource
      /// managed channel path – thus plugin can check subscribe permissions and communicate
      /// options with Grafana Core. When the first subscriber joins a channel, RunStream
      /// will be called. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pluginv2.SubscribeStreamResponse SubscribeStream(global::Pluginv2.SubscribeStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeStream, null, options, request);
      }
      /// <summary>
      /// SubscribeStream called when a user tries to subscribe to a plugin/datasource
      /// managed channel path – thus plugin can check subscribe permissions and communicate
      /// options with Grafana Core. When the first subscriber joins a channel, RunStream
      /// will be called. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.SubscribeStreamResponse> SubscribeStreamAsync(global::Pluginv2.SubscribeStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeStreamAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubscribeStream called when a user tries to subscribe to a plugin/datasource
      /// managed channel path – thus plugin can check subscribe permissions and communicate
      /// options with Grafana Core. When the first subscriber joins a channel, RunStream
      /// will be called. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.SubscribeStreamResponse> SubscribeStreamAsync(global::Pluginv2.SubscribeStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeStream, null, options, request);
      }
      /// <summary>
      /// RunStream will be initiated by Grafana to consume a stream. RunStream will be
      /// called once for the first client successfully subscribed to a channel path.
      /// When Grafana detects that there are no longer any subscribers inside a channel,
      /// the call will be terminated until next active subscriber appears. Call termination
      /// can happen with a delay.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pluginv2.StreamPacket> RunStream(global::Pluginv2.RunStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RunStream will be initiated by Grafana to consume a stream. RunStream will be
      /// called once for the first client successfully subscribed to a channel path.
      /// When Grafana detects that there are no longer any subscribers inside a channel,
      /// the call will be terminated until next active subscriber appears. Call termination
      /// can happen with a delay.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pluginv2.StreamPacket> RunStream(global::Pluginv2.RunStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RunStream, null, options, request);
      }
      /// <summary>
      /// PublishStream called when a user tries to publish to a plugin/datasource
      /// managed channel path. Here plugin can check publish permissions and
      /// modify publication data if required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pluginv2.PublishStreamResponse PublishStream(global::Pluginv2.PublishStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PublishStream called when a user tries to publish to a plugin/datasource
      /// managed channel path. Here plugin can check publish permissions and
      /// modify publication data if required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pluginv2.PublishStreamResponse PublishStream(global::Pluginv2.PublishStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PublishStream, null, options, request);
      }
      /// <summary>
      /// PublishStream called when a user tries to publish to a plugin/datasource
      /// managed channel path. Here plugin can check publish permissions and
      /// modify publication data if required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.PublishStreamResponse> PublishStreamAsync(global::Pluginv2.PublishStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishStreamAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PublishStream called when a user tries to publish to a plugin/datasource
      /// managed channel path. Here plugin can check publish permissions and
      /// modify publication data if required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pluginv2.PublishStreamResponse> PublishStreamAsync(global::Pluginv2.PublishStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PublishStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StreamClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StreamClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StreamBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeStream, serviceImpl.SubscribeStream)
          .AddMethod(__Method_RunStream, serviceImpl.RunStream)
          .AddMethod(__Method_PublishStream, serviceImpl.PublishStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StreamBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeStream, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pluginv2.SubscribeStreamRequest, global::Pluginv2.SubscribeStreamResponse>(serviceImpl.SubscribeStream));
      serviceBinder.AddMethod(__Method_RunStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Pluginv2.RunStreamRequest, global::Pluginv2.StreamPacket>(serviceImpl.RunStream));
      serviceBinder.AddMethod(__Method_PublishStream, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pluginv2.PublishStreamRequest, global::Pluginv2.PublishStreamResponse>(serviceImpl.PublishStream));
    }

  }
}
#endregion
