// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: opc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from opc.proto</summary>
public static partial class OpcReflection {

  #region Descriptor
  /// <summary>File descriptor for opc.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OpcReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglvcGMucHJvdG8iOQoPVW5zcGVjaWZpZWRUeXBlEhYKDmJhc2VPYmplY3RU",
          "eXBlGAEgAigJEg4KBm9iamVjdBgCIAIoDCKtAQoWQWdncmVnYXRlQ29uZmln",
          "dXJhdGlvbhIWCg5QZXJjZW50RGF0YUJhZBgBIAEoDRIXCg9QZXJjZW50RGF0",
          "YUdvb2QYAiABKA0SGwoTVHJlYXRVbmNlcnRhaW5Bc0JhZBgDIAEoCBIlCh1V",
          "c2VTZXJ2ZXJDYXBhYmlsaXRpZXNEZWZhdWx0cxgEIAEoCBIeChZVc2VTbG9w",
          "ZWRFeHRyYXBvbGF0aW9uGAUgASgIIpQBChVBZ2dyZWdhdGVGaWx0ZXJSZXN1",
          "bHQSPgodUmV2aXNlZEFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24YASABKAsyFy5B",
          "Z2dyZWdhdGVDb25maWd1cmF0aW9uEiEKGVJldmlzZWRQcm9jZXNzaW5nSW50",
          "ZXJ2YWwYAiABKAESGAoQUmV2aXNlZFN0YXJ0VGltZRgDIAEoAyJHCgpBbm5v",
          "dGF0aW9uEhYKDkFubm90YXRpb25UaW1lGAEgASgDEg8KB01lc3NhZ2UYAiAB",
          "KAkSEAoIVXNlck5hbWUYAyABKAkiKgoWQW5vbnltb3VzSWRlbnRpdHlUb2tl",
          "bhIQCghQb2xpY3lJZBgBIAEoCSIKCghCb2R5VHlwZSJaCiFCcm9rZXJDb25u",
          "ZWN0aW9uVHJhbnNwb3J0RGF0YVR5cGUSIAoYQXV0aGVudGljYXRpb25Qcm9m",
          "aWxlVXJpGAEgASgJEhMKC1Jlc291cmNlVXJpGAIgASgJIpgECiRCcm9rZXJE",
          "YXRhU2V0UmVhZGVyVHJhbnNwb3J0RGF0YVR5cGUSIAoYQXV0aGVudGljYXRp",
          "b25Qcm9maWxlVXJpGAEgASgJEhkKEU1ldGFEYXRhUXVldWVOYW1lGAIgASgJ",
          "EhEKCVF1ZXVlTmFtZRgDIAEoCRJpChpSZXF1ZXN0ZWREZWxpdmVyeUd1YXJh",
          "bnRlZRgEIAEoDjJFLkJyb2tlckRhdGFTZXRSZWFkZXJUcmFuc3BvcnREYXRh",
          "VHlwZS5Ccm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlEhMKC1Jlc291",
          "cmNlVXJpGAUgASgJIp8CCh9Ccm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2",
          "aWNlEjEKLUJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2VfQXRMZWFz",
          "dE9uY2VfMhABEjAKLEJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2Vf",
          "QXRNb3N0T25jZV8zEAISMAosQnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2Vy",
          "dmljZV9CZXN0RWZmb3J0XzEQAxIxCi1Ccm9rZXJUcmFuc3BvcnRRdWFsaXR5",
          "T2ZTZXJ2aWNlX0V4YWN0bHlPbmNlXzQQBBIyCi5Ccm9rZXJUcmFuc3BvcnRR",
          "dWFsaXR5T2ZTZXJ2aWNlX05vdFNwZWNpZmllZF8wEAUitAQKJEJyb2tlckRh",
          "dGFTZXRXcml0ZXJUcmFuc3BvcnREYXRhVHlwZRIgChhBdXRoZW50aWNhdGlv",
          "blByb2ZpbGVVcmkYASABKAkSGQoRTWV0YURhdGFRdWV1ZU5hbWUYAiABKAkS",
          "GgoSTWV0YURhdGFVcGRhdGVUaW1lGAMgASgBEhEKCVF1ZXVlTmFtZRgEIAEo",
          "CRJpChpSZXF1ZXN0ZWREZWxpdmVyeUd1YXJhbnRlZRgFIAEoDjJFLkJyb2tl",
          "ckRhdGFTZXRXcml0ZXJUcmFuc3BvcnREYXRhVHlwZS5Ccm9rZXJUcmFuc3Bv",
          "cnRRdWFsaXR5T2ZTZXJ2aWNlEhMKC1Jlc291cmNlVXJpGAYgASgJIp8CCh9C",
          "cm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlEjEKLUJyb2tlclRyYW5z",
          "cG9ydFF1YWxpdHlPZlNlcnZpY2VfQXRMZWFzdE9uY2VfMhABEjAKLEJyb2tl",
          "clRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2VfQXRNb3N0T25jZV8zEAISMAos",
          "QnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2VydmljZV9CZXN0RWZmb3J0XzEQ",
          "AxIxCi1Ccm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlX0V4YWN0bHlP",
          "bmNlXzQQBBIyCi5Ccm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlX05v",
          "dFNwZWNpZmllZF8wEAUi+QMKIkJyb2tlcldyaXRlckdyb3VwVHJhbnNwb3J0",
          "RGF0YVR5cGUSIAoYQXV0aGVudGljYXRpb25Qcm9maWxlVXJpGAEgASgJEhEK",
          "CVF1ZXVlTmFtZRgCIAEoCRJnChpSZXF1ZXN0ZWREZWxpdmVyeUd1YXJhbnRl",
          "ZRgDIAEoDjJDLkJyb2tlcldyaXRlckdyb3VwVHJhbnNwb3J0RGF0YVR5cGUu",
          "QnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2VydmljZRITCgtSZXNvdXJjZVVy",
          "aRgEIAEoCSKfAgofQnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2VydmljZRIx",
          "Ci1Ccm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlX0F0TGVhc3RPbmNl",
          "XzIQARIwCixCcm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlX0F0TW9z",
          "dE9uY2VfMxACEjAKLEJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2Vf",
          "QmVzdEVmZm9ydF8xEAMSMQotQnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2Vy",
          "dmljZV9FeGFjdGx5T25jZV80EAQSMgouQnJva2VyVHJhbnNwb3J0UXVhbGl0",
          "eU9mU2VydmljZV9Ob3RTcGVjaWZpZWRfMBAFIo8BCglCdWlsZEluZm8SEQoJ",
          "QnVpbGREYXRlGAEgASgDEhMKC0J1aWxkTnVtYmVyGAIgASgJEhgKEE1hbnVm",
          "YWN0dXJlck5hbWUYAyABKAkSEwoLUHJvZHVjdE5hbWUYBCABKAkSEgoKUHJv",
          "ZHVjdFVyaRgFIAEoCRIXCg9Tb2Z0d2FyZVZlcnNpb24YBiABKAkiNwoUQ2Fy",
          "dGVzaWFuQ29vcmRpbmF0ZXMSCQoBWBgBIAEoARIJCgFZGAIgASgBEgkKAVoY",
          "AyABKAEiZgoUQ2hhbm5lbFNlY3VyaXR5VG9rZW4SEQoJQ2hhbm5lbElkGAEg",
          "ASgNEhEKCUNyZWF0ZWRBdBgCIAEoAxIXCg9SZXZpc2VkTGlmZXRpbWUYAyAB",
          "KA0SDwoHVG9rZW5JZBgEIAEoDSI0ChFDb21wbGV4TnVtYmVyVHlwZRIRCglJ",
          "bWFnaW5hcnkYASABKAISDAoEUmVhbBgCIAEoAiJKChxDb25maWd1cmF0aW9u",
          "VmVyc2lvbkRhdGFUeXBlEhQKDE1ham9yVmVyc2lvbhgBIAEoDRIUCgxNaW5v",
          "clZlcnNpb24YAiABKA0i/gEKEERhdGFDaGFuZ2VGaWx0ZXISFAoMRGVhZGJh",
          "bmRUeXBlGAEgASgNEhUKDURlYWRiYW5kVmFsdWUYAiABKAESNAoHVHJpZ2dl",
          "chgDIAEoDjIjLkRhdGFDaGFuZ2VGaWx0ZXIuRGF0YUNoYW5nZVRyaWdnZXIi",
          "hgEKEURhdGFDaGFuZ2VUcmlnZ2VyEiwKKERhdGFDaGFuZ2VUcmlnZ2VyX1N0",
          "YXR1c1ZhbHVlVGltZXN0YW1wXzIQARIjCh9EYXRhQ2hhbmdlVHJpZ2dlcl9T",
          "dGF0dXNWYWx1ZV8xEAISHgoaRGF0YUNoYW5nZVRyaWdnZXJfU3RhdHVzXzAQ",
          "AyKMBAoeRGF0YVNldFJlYWRlclRyYW5zcG9ydERhdGFUeXBlEiAKGEF1dGhl",
          "bnRpY2F0aW9uUHJvZmlsZVVyaRgBIAEoCRIZChFNZXRhRGF0YVF1ZXVlTmFt",
          "ZRgCIAEoCRIRCglRdWV1ZU5hbWUYAyABKAkSYwoaUmVxdWVzdGVkRGVsaXZl",
          "cnlHdWFyYW50ZWUYBCABKA4yPy5EYXRhU2V0UmVhZGVyVHJhbnNwb3J0RGF0",
          "YVR5cGUuQnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2VydmljZRITCgtSZXNv",
          "dXJjZVVyaRgFIAEoCSKfAgofQnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2Vy",
          "dmljZRIxCi1Ccm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlX0F0TGVh",
          "c3RPbmNlXzIQARIwCixCcm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNl",
          "X0F0TW9zdE9uY2VfMxACEjAKLEJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNl",
          "cnZpY2VfQmVzdEVmZm9ydF8xEAMSMQotQnJva2VyVHJhbnNwb3J0UXVhbGl0",
          "eU9mU2VydmljZV9FeGFjdGx5T25jZV80EAQSMgouQnJva2VyVHJhbnNwb3J0",
          "UXVhbGl0eU9mU2VydmljZV9Ob3RTcGVjaWZpZWRfMBAFIo4BChxEYXRhU2V0",
          "V3JpdGVyTWVzc2FnZURhdGFUeXBlEhYKDkNvbmZpZ3VyZWRTaXplGAEgASgN",
          "EiEKGURhdGFTZXRNZXNzYWdlQ29udGVudE1hc2sYAiABKA0SFQoNRGF0YVNl",
          "dE9mZnNldBgDIAEoDRIcChROZXR3b3JrTWVzc2FnZU51bWJlchgEIAEoDSKo",
          "BAoeRGF0YVNldFdyaXRlclRyYW5zcG9ydERhdGFUeXBlEiAKGEF1dGhlbnRp",
          "Y2F0aW9uUHJvZmlsZVVyaRgBIAEoCRIZChFNZXRhRGF0YVF1ZXVlTmFtZRgC",
          "IAEoCRIaChJNZXRhRGF0YVVwZGF0ZVRpbWUYAyABKAESEQoJUXVldWVOYW1l",
          "GAQgASgJEmMKGlJlcXVlc3RlZERlbGl2ZXJ5R3VhcmFudGVlGAUgASgOMj8u",
          "RGF0YVNldFdyaXRlclRyYW5zcG9ydERhdGFUeXBlLkJyb2tlclRyYW5zcG9y",
          "dFF1YWxpdHlPZlNlcnZpY2USEwoLUmVzb3VyY2VVcmkYBiABKAkinwIKH0Jy",
          "b2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2USMQotQnJva2VyVHJhbnNw",
          "b3J0UXVhbGl0eU9mU2VydmljZV9BdExlYXN0T25jZV8yEAESMAosQnJva2Vy",
          "VHJhbnNwb3J0UXVhbGl0eU9mU2VydmljZV9BdE1vc3RPbmNlXzMQAhIwCixC",
          "cm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlX0Jlc3RFZmZvcnRfMRAD",
          "EjEKLUJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2VfRXhhY3RseU9u",
          "Y2VfNBAEEjIKLkJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2VfTm90",
          "U3BlY2lmaWVkXzAQBSJeCiREYXRhZ3JhbVdyaXRlckdyb3VwVHJhbnNwb3J0",
          "RGF0YVR5cGUSGgoSTWVzc2FnZVJlcGVhdENvdW50GAEgASgNEhoKEk1lc3Nh",
          "Z2VSZXBlYXREZWxheRgCIAEoASIvCg9EZWNpbWFsRGF0YVR5cGUSDQoFU2Nh",
          "bGUYASABKAUSDQoFVmFsdWUYAiABKAwiOgoXRG91YmxlQ29tcGxleE51bWJl",
          "clR5cGUSEQoJSW1hZ2luYXJ5GAEgASgBEgwKBFJlYWwYAiABKAEiHwoORWxl",
          "bWVudE9wZXJhbmQSDQoFSW5kZXgYASABKA0igQIKFUVuZHBvaW50Q29uZmln",
          "dXJhdGlvbhIXCg9DaGFubmVsTGlmZXRpbWUYASABKAUSFgoOTWF4QXJyYXlM",
          "ZW5ndGgYAiABKAUSFQoNTWF4QnVmZmVyU2l6ZRgDIAEoBRIbChNNYXhCeXRl",
          "U3RyaW5nTGVuZ3RoGAQgASgFEhYKDk1heE1lc3NhZ2VTaXplGAUgASgFEhcK",
          "D01heFN0cmluZ0xlbmd0aBgGIAEoBRIYChBPcGVyYXRpb25UaW1lb3V0GAcg",
          "ASgFEh0KFVNlY3VyaXR5VG9rZW5MaWZldGltZRgIIAEoBRIZChFVc2VCaW5h",
          "cnlFbmNvZGluZxgJIAEoCCK5AgoMRW5kcG9pbnRUeXBlEhMKC0VuZHBvaW50",
          "VXJsGAEgASgJEjcKDFNlY3VyaXR5TW9kZRgCIAEoDjIhLkVuZHBvaW50VHlw",
          "ZS5NZXNzYWdlU2VjdXJpdHlNb2RlEhkKEVNlY3VyaXR5UG9saWN5VXJpGAMg",
          "ASgJEhsKE1RyYW5zcG9ydFByb2ZpbGVVcmkYBCABKAkiogEKE01lc3NhZ2VT",
          "ZWN1cml0eU1vZGUSIQodTWVzc2FnZVNlY3VyaXR5TW9kZV9JbnZhbGlkXzAQ",
          "ARIeChpNZXNzYWdlU2VjdXJpdHlNb2RlX05vbmVfMRACEigKJE1lc3NhZ2VT",
          "ZWN1cml0eU1vZGVfU2lnbkFuZEVuY3J5cHRfMxADEh4KGk1lc3NhZ2VTZWN1",
          "cml0eU1vZGVfU2lnbl8yEAQiOAoQRXBoZW1lcmFsS2V5VHlwZRIRCglQdWJs",
          "aWNLZXkYASABKAwSEQoJU2lnbmF0dXJlGAIgASgMIiQKDkV4cGFuZGVkTm9k",
          "ZUlkEhIKCklkZW50aWZpZXIYASABKAkiFgoER3VpZBIOCgZTdHJpbmcYASAB",
          "KAkilgMKF0lkZW50aXR5TWFwcGluZ1J1bGVUeXBlEhAKCENyaXRlcmlhGAEg",
          "ASgJEkMKDENyaXRlcmlhVHlwZRgCIAEoDjItLklkZW50aXR5TWFwcGluZ1J1",
          "bGVUeXBlLklkZW50aXR5Q3JpdGVyaWFUeXBlIqMCChRJZGVudGl0eUNyaXRl",
          "cmlhVHlwZRIkCiBJZGVudGl0eUNyaXRlcmlhVHlwZV9Bbm9ueW1vdXNfNRAB",
          "EiYKIklkZW50aXR5Q3JpdGVyaWFUeXBlX0FwcGxpY2F0aW9uXzcQAhIsCihJ",
          "ZGVudGl0eUNyaXRlcmlhVHlwZV9BdXRoZW50aWNhdGVkVXNlcl82EAMSIgoe",
          "SWRlbnRpdHlDcml0ZXJpYVR5cGVfR3JvdXBJZF80EAQSHwobSWRlbnRpdHlD",
          "cml0ZXJpYVR5cGVfUm9sZV8zEAUSJQohSWRlbnRpdHlDcml0ZXJpYVR5cGVf",
          "VGh1bWJwcmludF8yEAYSIwofSWRlbnRpdHlDcml0ZXJpYVR5cGVfVXNlck5h",
          "bWVfMRAHIlcKE0lzc3VlZElkZW50aXR5VG9rZW4SGwoTRW5jcnlwdGlvbkFs",
          "Z29yaXRobRgBIAEoCRIQCghQb2xpY3lJZBgCIAEoCRIRCglUb2tlbkRhdGEY",
          "AyABKAwiaAogSnNvbkRhdGFTZXRSZWFkZXJNZXNzYWdlRGF0YVR5cGUSIQoZ",
          "RGF0YVNldE1lc3NhZ2VDb250ZW50TWFzaxgBIAEoDRIhChlOZXR3b3JrTWVz",
          "c2FnZUNvbnRlbnRNYXNrGAIgASgNIkUKIEpzb25EYXRhU2V0V3JpdGVyTWVz",
          "c2FnZURhdGFUeXBlEiEKGURhdGFTZXRNZXNzYWdlQ29udGVudE1hc2sYASAB",
          "KA0iQwoeSnNvbldyaXRlckdyb3VwTWVzc2FnZURhdGFUeXBlEiEKGU5ldHdv",
          "cmtNZXNzYWdlQ29udGVudE1hc2sYASABKA0iIAoNTGlzdE9mQm9vbGVhbhIP",
          "CgdCb29sZWFuGAEgAygIInkKJ0xpc3RPZkJyb2tlckNvbm5lY3Rpb25UcmFu",
          "c3BvcnREYXRhVHlwZRJOCiJfQnJva2VyQ29ubmVjdGlvblRyYW5zcG9ydERh",
          "dGFUeXBlGAEgAygLMiIuQnJva2VyQ29ubmVjdGlvblRyYW5zcG9ydERhdGFU",
          "eXBlIoIBCipMaXN0T2ZCcm9rZXJEYXRhU2V0UmVhZGVyVHJhbnNwb3J0RGF0",
          "YVR5cGUSVAolX0Jyb2tlckRhdGFTZXRSZWFkZXJUcmFuc3BvcnREYXRhVHlw",
          "ZRgBIAMoCzIlLkJyb2tlckRhdGFTZXRSZWFkZXJUcmFuc3BvcnREYXRhVHlw",
          "ZSKCAQoqTGlzdE9mQnJva2VyRGF0YVNldFdyaXRlclRyYW5zcG9ydERhdGFU",
          "eXBlElQKJV9Ccm9rZXJEYXRhU2V0V3JpdGVyVHJhbnNwb3J0RGF0YVR5cGUY",
          "ASADKAsyJS5Ccm9rZXJEYXRhU2V0V3JpdGVyVHJhbnNwb3J0RGF0YVR5cGUi",
          "uwMKJUxpc3RPZkJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2UScAog",
          "X0Jyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2UYASADKA4yRi5MaXN0",
          "T2ZCcm9rZXJUcmFuc3BvcnRRdWFsaXR5T2ZTZXJ2aWNlLkJyb2tlclRyYW5z",
          "cG9ydFF1YWxpdHlPZlNlcnZpY2UinwIKH0Jyb2tlclRyYW5zcG9ydFF1YWxp",
          "dHlPZlNlcnZpY2USMQotQnJva2VyVHJhbnNwb3J0UXVhbGl0eU9mU2Vydmlj",
          "ZV9BdExlYXN0T25jZV8yEAESMAosQnJva2VyVHJhbnNwb3J0UXVhbGl0eU9m",
          "U2VydmljZV9BdE1vc3RPbmNlXzMQAhIwCixCcm9rZXJUcmFuc3BvcnRRdWFs",
          "aXR5T2ZTZXJ2aWNlX0Jlc3RFZmZvcnRfMRADEjEKLUJyb2tlclRyYW5zcG9y",
          "dFF1YWxpdHlPZlNlcnZpY2VfRXhhY3RseU9uY2VfNBAEEjIKLkJyb2tlclRy",
          "YW5zcG9ydFF1YWxpdHlPZlNlcnZpY2VfTm90U3BlY2lmaWVkXzAQBSJ8CihM",
          "aXN0T2ZCcm9rZXJXcml0ZXJHcm91cFRyYW5zcG9ydERhdGFUeXBlElAKI19C",
          "cm9rZXJXcml0ZXJHcm91cFRyYW5zcG9ydERhdGFUeXBlGAEgAygLMiMuQnJv",
          "a2VyV3JpdGVyR3JvdXBUcmFuc3BvcnREYXRhVHlwZSIaCgpMaXN0T2ZCeXRl",
          "EgwKBEJ5dGUYASADKA0iJgoQTGlzdE9mQnl0ZVN0cmluZxISCgpCeXRlU3Ry",
          "aW5nGAEgAygMIlIKGkxpc3RPZkNhcnRlc2lhbkNvb3JkaW5hdGVzEjQKFV9D",
          "YXJ0ZXNpYW5Db29yZGluYXRlcxgBIAMoCzIVLkNhcnRlc2lhbkNvb3JkaW5h",
          "dGVzImoKIkxpc3RPZkNvbmZpZ3VyYXRpb25WZXJzaW9uRGF0YVR5cGUSRAod",
          "X0NvbmZpZ3VyYXRpb25WZXJzaW9uRGF0YVR5cGUYASADKAsyHS5Db25maWd1",
          "cmF0aW9uVmVyc2lvbkRhdGFUeXBlIkAKHUxpc3RPZkRhdGFTZXRGaWVsZENv",
          "bnRlbnRNYXNrEh8KF0RhdGFTZXRGaWVsZENvbnRlbnRNYXNrGAEgAygNIoYC",
          "ChlMaXN0T2ZEYXRhU2V0T3JkZXJpbmdUeXBlEkwKFF9EYXRhU2V0T3JkZXJp",
          "bmdUeXBlGAEgAygOMi4uTGlzdE9mRGF0YVNldE9yZGVyaW5nVHlwZS5EYXRh",
          "U2V0T3JkZXJpbmdUeXBlIpoBChNEYXRhU2V0T3JkZXJpbmdUeXBlEjEKLURh",
          "dGFTZXRPcmRlcmluZ1R5cGVfQXNjZW5kaW5nV3JpdGVySWRTaW5nbGVfMhAB",
          "EisKJ0RhdGFTZXRPcmRlcmluZ1R5cGVfQXNjZW5kaW5nV3JpdGVySWRfMRAC",
          "EiMKH0RhdGFTZXRPcmRlcmluZ1R5cGVfVW5kZWZpbmVkXzAQAyJwCiRMaXN0",
          "T2ZEYXRhU2V0UmVhZGVyVHJhbnNwb3J0RGF0YVR5cGUSSAofX0RhdGFTZXRS",
          "ZWFkZXJUcmFuc3BvcnREYXRhVHlwZRgBIAMoCzIfLkRhdGFTZXRSZWFkZXJU",
          "cmFuc3BvcnREYXRhVHlwZSJqCiJMaXN0T2ZEYXRhU2V0V3JpdGVyTWVzc2Fn",
          "ZURhdGFUeXBlEkQKHV9EYXRhU2V0V3JpdGVyTWVzc2FnZURhdGFUeXBlGAEg",
          "AygLMh0uRGF0YVNldFdyaXRlck1lc3NhZ2VEYXRhVHlwZSJwCiRMaXN0T2ZE",
          "YXRhU2V0V3JpdGVyVHJhbnNwb3J0RGF0YVR5cGUSSAofX0RhdGFTZXRXcml0",
          "ZXJUcmFuc3BvcnREYXRhVHlwZRgBIAMoCzIfLkRhdGFTZXRXcml0ZXJUcmFu",
          "c3BvcnREYXRhVHlwZSKCAQoqTGlzdE9mRGF0YWdyYW1Xcml0ZXJHcm91cFRy",
          "YW5zcG9ydERhdGFUeXBlElQKJV9EYXRhZ3JhbVdyaXRlckdyb3VwVHJhbnNw",
          "b3J0RGF0YVR5cGUYASADKAsyJS5EYXRhZ3JhbVdyaXRlckdyb3VwVHJhbnNw",
          "b3J0RGF0YVR5cGUiIgoOTGlzdE9mRGF0ZVRpbWUSEAoIRGF0ZVRpbWUYASAD",
          "KAMiiAIKFkxpc3RPZkRpYWdub3N0aWNzTGV2ZWwSQwoRX0RpYWdub3N0aWNz",
          "TGV2ZWwYASADKA4yKC5MaXN0T2ZEaWFnbm9zdGljc0xldmVsLkRpYWdub3N0",
          "aWNzTGV2ZWwiqAEKEERpYWdub3N0aWNzTGV2ZWwSHwobRGlhZ25vc3RpY3NM",
          "ZXZlbF9BZHZhbmNlZF8xEAESHAoYRGlhZ25vc3RpY3NMZXZlbF9CYXNpY18w",
          "EAISHAoYRGlhZ25vc3RpY3NMZXZlbF9EZWJ1Z180EAMSGwoXRGlhZ25vc3Rp",
          "Y3NMZXZlbF9JbmZvXzIQBBIaChZEaWFnbm9zdGljc0xldmVsX0xvZ18zEAUi",
          "HgoMTGlzdE9mRG91YmxlEg4KBkRvdWJsZRgBIAMoASJ7CgxMaXN0T2ZEdXBs",
          "ZXgSJQoHX0R1cGxleBgBIAMoDjIULkxpc3RPZkR1cGxleC5EdXBsZXgiRAoG",
          "RHVwbGV4EhEKDUR1cGxleF9GdWxsXzAQARIRCg1EdXBsZXhfSGFsZl8xEAIS",
          "FAoQRHVwbGV4X1Vua25vd25fMhADIlUKG0xpc3RPZkVuZHBvaW50Q29uZmln",
          "dXJhdGlvbhI2ChZfRW5kcG9pbnRDb25maWd1cmF0aW9uGAEgAygLMhYuRW5k",
          "cG9pbnRDb25maWd1cmF0aW9uIjoKEkxpc3RPZkVuZHBvaW50VHlwZRIkCg1f",
          "RW5kcG9pbnRUeXBlGAEgAygLMg0uRW5kcG9pbnRUeXBlIkAKFExpc3RPZkV4",
          "cGFuZGVkTm9kZUlkEigKD19FeHBhbmRlZE5vZGVJZBgBIAMoCzIPLkV4cGFu",
          "ZGVkTm9kZUlkIhwKC0xpc3RPZkZsb2F0Eg0KBUZsb2F0GAEgAygCIiIKCkxp",
          "c3RPZkd1aWQSFAoFX0d1aWQYASADKAsyBS5HdWlkIpIBCgxMaXN0T2ZJZFR5",
          "cGUSJQoHX0lkVHlwZRgBIAMoDjIULkxpc3RPZklkVHlwZS5JZFR5cGUiWwoG",
          "SWRUeXBlEhEKDUlkVHlwZV9HdWlkXzIQARIUChBJZFR5cGVfTnVtZXJpY18w",
          "EAISEwoPSWRUeXBlX09wYXF1ZV8zEAMSEwoPSWRUeXBlX1N0cmluZ18xEAQi",
          "kwMKGkxpc3RPZklkZW50aXR5Q3JpdGVyaWFUeXBlEk8KFV9JZGVudGl0eUNy",
          "aXRlcmlhVHlwZRgBIAMoDjIwLkxpc3RPZklkZW50aXR5Q3JpdGVyaWFUeXBl",
          "LklkZW50aXR5Q3JpdGVyaWFUeXBlIqMCChRJZGVudGl0eUNyaXRlcmlhVHlw",
          "ZRIkCiBJZGVudGl0eUNyaXRlcmlhVHlwZV9Bbm9ueW1vdXNfNRABEiYKIklk",
          "ZW50aXR5Q3JpdGVyaWFUeXBlX0FwcGxpY2F0aW9uXzcQAhIsCihJZGVudGl0",
          "eUNyaXRlcmlhVHlwZV9BdXRoZW50aWNhdGVkVXNlcl82EAMSIgoeSWRlbnRp",
          "dHlDcml0ZXJpYVR5cGVfR3JvdXBJZF80EAQSHwobSWRlbnRpdHlDcml0ZXJp",
          "YVR5cGVfUm9sZV8zEAUSJQohSWRlbnRpdHlDcml0ZXJpYVR5cGVfVGh1bWJw",
          "cmludF8yEAYSIwofSWRlbnRpdHlDcml0ZXJpYVR5cGVfVXNlck5hbWVfMRAH",
          "IlsKHUxpc3RPZklkZW50aXR5TWFwcGluZ1J1bGVUeXBlEjoKGF9JZGVudGl0",
          "eU1hcHBpbmdSdWxlVHlwZRgBIAMoCzIYLklkZW50aXR5TWFwcGluZ1J1bGVU",
          "eXBlIhwKC0xpc3RPZkludDE2Eg0KBUludDE2GAEgAygFIhwKC0xpc3RPZklu",
          "dDMyEg0KBUludDMyGAEgAygFIhwKC0xpc3RPZkludDY0Eg0KBUludDY0GAEg",
          "AygDIukBChpMaXN0T2ZJbnRlcmZhY2VBZG1pblN0YXR1cxJPChVfSW50ZXJm",
          "YWNlQWRtaW5TdGF0dXMYASADKA4yMC5MaXN0T2ZJbnRlcmZhY2VBZG1pblN0",
          "YXR1cy5JbnRlcmZhY2VBZG1pblN0YXR1cyJ6ChRJbnRlcmZhY2VBZG1pblN0",
          "YXR1cxIfChtJbnRlcmZhY2VBZG1pblN0YXR1c19Eb3duXzEQARIiCh5JbnRl",
          "cmZhY2VBZG1pblN0YXR1c19UZXN0aW5nXzIQAhIdChlJbnRlcmZhY2VBZG1p",
          "blN0YXR1c19VcF8wEAMi+AIKGUxpc3RPZkludGVyZmFjZU9wZXJTdGF0dXMS",
          "TAoUX0ludGVyZmFjZU9wZXJTdGF0dXMYASADKA4yLi5MaXN0T2ZJbnRlcmZh",
          "Y2VPcGVyU3RhdHVzLkludGVyZmFjZU9wZXJTdGF0dXMijAIKE0ludGVyZmFj",
          "ZU9wZXJTdGF0dXMSIQodSW50ZXJmYWNlT3BlclN0YXR1c19Eb3JtYW50XzQQ",
          "ARIeChpJbnRlcmZhY2VPcGVyU3RhdHVzX0Rvd25fMRACEigKJEludGVyZmFj",
          "ZU9wZXJTdGF0dXNfTG93ZXJMYXllckRvd25fNhADEiQKIEludGVyZmFjZU9w",
          "ZXJTdGF0dXNfTm90UHJlc2VudF81EAQSIQodSW50ZXJmYWNlT3BlclN0YXR1",
          "c19UZXN0aW5nXzIQBRIhCh1JbnRlcmZhY2VPcGVyU3RhdHVzX1Vua25vd25f",
          "MxAGEhwKGEludGVyZmFjZU9wZXJTdGF0dXNfVXBfMBAHIkwKI0xpc3RPZkpz",
          "b25EYXRhU2V0TWVzc2FnZUNvbnRlbnRNYXNrEiUKHUpzb25EYXRhU2V0TWVz",
          "c2FnZUNvbnRlbnRNYXNrGAEgAygNInYKJkxpc3RPZkpzb25EYXRhU2V0UmVh",
          "ZGVyTWVzc2FnZURhdGFUeXBlEkwKIV9Kc29uRGF0YVNldFJlYWRlck1lc3Nh",
          "Z2VEYXRhVHlwZRgBIAMoCzIhLkpzb25EYXRhU2V0UmVhZGVyTWVzc2FnZURh",
          "dGFUeXBlInYKJkxpc3RPZkpzb25EYXRhU2V0V3JpdGVyTWVzc2FnZURhdGFU",
          "eXBlEkwKIV9Kc29uRGF0YVNldFdyaXRlck1lc3NhZ2VEYXRhVHlwZRgBIAMo",
          "CzIhLkpzb25EYXRhU2V0V3JpdGVyTWVzc2FnZURhdGFUeXBlIkwKI0xpc3RP",
          "Zkpzb25OZXR3b3JrTWVzc2FnZUNvbnRlbnRNYXNrEiUKHUpzb25OZXR3b3Jr",
          "TWVzc2FnZUNvbnRlbnRNYXNrGAEgAygNInAKJExpc3RPZkpzb25Xcml0ZXJH",
          "cm91cE1lc3NhZ2VEYXRhVHlwZRJICh9fSnNvbldyaXRlckdyb3VwTWVzc2Fn",
          "ZURhdGFUeXBlGAEgAygLMh8uSnNvbldyaXRlckdyb3VwTWVzc2FnZURhdGFU",
          "eXBlIqUCChdMaXN0T2ZOZWdvdGlhdGlvblN0YXR1cxJGChJfTmVnb3RpYXRp",
          "b25TdGF0dXMYASADKA4yKi5MaXN0T2ZOZWdvdGlhdGlvblN0YXR1cy5OZWdv",
          "dGlhdGlvblN0YXR1cyLBAQoRTmVnb3RpYXRpb25TdGF0dXMSIAocTmVnb3Rp",
          "YXRpb25TdGF0dXNfQ29tcGxldGVfMRABEh4KGk5lZ290aWF0aW9uU3RhdHVz",
          "X0ZhaWxlZF8yEAISIgoeTmVnb3RpYXRpb25TdGF0dXNfSW5Qcm9ncmVzc18w",
          "EAMSJQohTmVnb3RpYXRpb25TdGF0dXNfTm9OZWdvdGlhdGlvbl80EAQSHwob",
          "TmVnb3RpYXRpb25TdGF0dXNfVW5rbm93bl8zEAUizQEKEkxpc3RPZk9wZW5G",
          "aWxlTW9kZRI3Cg1fT3BlbkZpbGVNb2RlGAEgAygOMiAuTGlzdE9mT3BlbkZp",
          "bGVNb2RlLk9wZW5GaWxlTW9kZSJ+CgxPcGVuRmlsZU1vZGUSGQoVT3BlbkZp",
          "bGVNb2RlX0FwcGVuZF84EAESIAocT3BlbkZpbGVNb2RlX0VyYXNlRXhpc3Rp",
          "bmdfNBACEhcKE09wZW5GaWxlTW9kZV9SZWFkXzEQAxIYChRPcGVuRmlsZU1v",
          "ZGVfV3JpdGVfMhAEIokCChtMaXN0T2ZPdmVycmlkZVZhbHVlSGFuZGxpbmcS",
          "UgoWX092ZXJyaWRlVmFsdWVIYW5kbGluZxgBIAMoDjIyLkxpc3RPZk92ZXJy",
          "aWRlVmFsdWVIYW5kbGluZy5PdmVycmlkZVZhbHVlSGFuZGxpbmcilQEKFU92",
          "ZXJyaWRlVmFsdWVIYW5kbGluZxIkCiBPdmVycmlkZVZhbHVlSGFuZGxpbmdf",
          "RGlzYWJsZWRfMBABEisKJ092ZXJyaWRlVmFsdWVIYW5kbGluZ19MYXN0VXNh",
          "YmxlVmFsdWVfMRACEikKJU92ZXJyaWRlVmFsdWVIYW5kbGluZ19PdmVycmlk",
          "ZVZhbHVlXzIQAyLPAgosTGlzdE9mUHViU3ViRGlhZ25vc3RpY3NDb3VudGVy",
          "Q2xhc3NpZmljYXRpb24ShQEKJ19QdWJTdWJEaWFnbm9zdGljc0NvdW50ZXJD",
          "bGFzc2lmaWNhdGlvbhgBIAMoDjJULkxpc3RPZlB1YlN1YkRpYWdub3N0aWNz",
          "Q291bnRlckNsYXNzaWZpY2F0aW9uLlB1YlN1YkRpYWdub3N0aWNzQ291bnRl",
          "ckNsYXNzaWZpY2F0aW9uIpYBCiZQdWJTdWJEaWFnbm9zdGljc0NvdW50ZXJD",
          "bGFzc2lmaWNhdGlvbhIyCi5QdWJTdWJEaWFnbm9zdGljc0NvdW50ZXJDbGFz",
          "c2lmaWNhdGlvbl9FcnJvcl8xEAESOAo0UHViU3ViRGlhZ25vc3RpY3NDb3Vu",
          "dGVyQ2xhc3NpZmljYXRpb25fSW5mb3JtYXRpb25fMBACIukBChFMaXN0T2ZQ",
          "dWJTdWJTdGF0ZRI0CgxfUHViU3ViU3RhdGUYASADKA4yHi5MaXN0T2ZQdWJT",
          "dWJTdGF0ZS5QdWJTdWJTdGF0ZSKdAQoLUHViU3ViU3RhdGUSGgoWUHViU3Vi",
          "U3RhdGVfRGlzYWJsZWRfMBABEhcKE1B1YlN1YlN0YXRlX0Vycm9yXzMQAhId",
          "ChlQdWJTdWJTdGF0ZV9PcGVyYXRpb25hbF8yEAMSGAoUUHViU3ViU3RhdGVf",
          "UGF1c2VkXzEQBBIgChxQdWJTdWJTdGF0ZV9QcmVPcGVyYXRpb25hbF80EAUi",
          "HAoLTGlzdE9mU0J5dGUSDQoFU0J5dGUYASADKAwiHgoMTGlzdE9mU3RyaW5n",
          "Eg4KBlN0cmluZxgBIAMoCSKcCgoUTGlzdE9mVHNuRmFpbHVyZUNvZGUSPQoP",
          "X1RzbkZhaWx1cmVDb2RlGAEgAygOMiQuTGlzdE9mVHNuRmFpbHVyZUNvZGUu",
          "VHNuRmFpbHVyZUNvZGUixAkKDlRzbkZhaWx1cmVDb2RlEjMKL1RzbkZhaWx1",
          "cmVDb2RlX0JyaWRnZURvZXNOb3RQcm92aWRlTmV0d29ya0lkXzIyEAESMwov",
          "VHNuRmFpbHVyZUNvZGVfQ2Fubm90U3RvcmVEZXN0aW5hdGlvbkFkZHJlc3Nf",
          "MTIQAhIsCihUc25GYWlsdXJlQ29kZV9FZ3Jlc3NQb3J0Tm90QXZiQ2FwYWJs",
          "ZV84EAMSKgomVHNuRmFpbHVyZUNvZGVfRmVhdHVyZU5vdFByb3BhZ2F0ZWRf",
          "MjAQBBIpCiVUc25GYWlsdXJlQ29kZV9GZWF0dXJlTm90U3VwcG9ydGVkXzI1",
          "EAUSMgouVHNuRmFpbHVyZUNvZGVfRmlyc3RWYWx1ZUNoYW5nZWRGb3JTdHJl",
          "YW1JZF8xNhAGEioKJlRzbkZhaWx1cmVDb2RlX0luc3VmZmljaWVudEJhbmR3",
          "aWR0aF8xEAcSKgomVHNuRmFpbHVyZUNvZGVfSW5zdWZmaWNpZW50UmVzb3Vy",
          "Y2VzXzIQCBI2CjJUc25GYWlsdXJlQ29kZV9JbnN1ZmZpY2llbnRUcmFmZmlj",
          "Q2xhc3NCYW5kd2lkdGhfMxAJEiYKIlRzbkZhaWx1cmVDb2RlX0xhdGVuY3lI",
          "YXNDaGFuZ2VkXzcQChIvCitUc25GYWlsdXJlQ29kZV9NYXhGYW5JblBvcnRz",
          "TGltaXRSZWFjaGVkXzE1EAsSKgomVHNuRmFpbHVyZUNvZGVfTWF4RnJhbWVT",
          "aXplVG9vTGFyZ2VfMTQQDBIoCiRUc25GYWlsdXJlQ29kZV9NYXhMYXRlbmN5",
          "RXhjZWVkZWRfMjEQDRIeChpUc25GYWlsdXJlQ29kZV9Ob0ZhaWx1cmVfMBAO",
          "EigKJFRzbkZhaWx1cmVDb2RlX091dE9mTW1ycFJlc291cmNlc18xMRAPEigK",
          "JFRzbkZhaWx1cmVDb2RlX091dE9mTXNycFJlc291cmNlc18xMBAQEi0KKVRz",
          "bkZhaWx1cmVDb2RlX1ByaW9yaXR5SXNOb3RBblNyY0NsYXNzXzEzEBESLQop",
          "VHNuRmFpbHVyZUNvZGVfU3JDbGFzc1ByaW9yaXR5TWlzbWF0Y2hfMTkQEhIy",
          "Ci5Uc25GYWlsdXJlQ29kZV9TdHJlYW1EZXN0aW5hdGlvbkFkZHJlc3NJblVz",
          "ZV81EBMSIgoeVHNuRmFpbHVyZUNvZGVfU3RyZWFtSWRJblVzZV80EBQSLgoq",
          "VHNuRmFpbHVyZUNvZGVfU3RyZWFtSWRUeXBlTm90U3VwcG9ydGVkXzI0EBUS",
          "MAosVHNuRmFpbHVyZUNvZGVfU3RyZWFtUHJlZW1wdGVkQnlIaWdoZXJSYW5r",
          "XzYQFhIxCi1Uc25GYWlsdXJlQ29kZV9TdHJlYW1UcmFuc2Zvcm1Ob3RTdXBw",
          "b3J0ZWRfMjMQFxIzCi9Uc25GYWlsdXJlQ29kZV9Vc2VEaWZmZXJlbnREZXN0",
          "aW5hdGlvbkFkZHJlc3NfORAYEikKJVRzbkZhaWx1cmVDb2RlX1ZsYW5CbG9j",
          "a2VkT25FZ3Jlc3NfMTcQGRIxCi1Uc25GYWlsdXJlQ29kZV9WbGFuVGFnZ2lu",
          "Z0Rpc2FibGVkT25FZ3Jlc3NfMTgQGiL7AQoXTGlzdE9mVHNuTGlzdGVuZXJT",
          "dGF0dXMSRgoSX1Rzbkxpc3RlbmVyU3RhdHVzGAEgAygOMiouTGlzdE9mVHNu",
          "TGlzdGVuZXJTdGF0dXMuVHNuTGlzdGVuZXJTdGF0dXMilwEKEVRzbkxpc3Rl",
          "bmVyU3RhdHVzEh4KGlRzbkxpc3RlbmVyU3RhdHVzX0ZhaWxlZF8zEAESHAoY",
          "VHNuTGlzdGVuZXJTdGF0dXNfTm9uZV8wEAISJQohVHNuTGlzdGVuZXJTdGF0",
          "dXNfUGFydGlhbEZhaWxlZF8yEAMSHQoZVHNuTGlzdGVuZXJTdGF0dXNfUmVh",
          "ZHlfMRAEIoMCChRMaXN0T2ZUc25TdHJlYW1TdGF0ZRI9Cg9fVHNuU3RyZWFt",
          "U3RhdGUYASADKA4yJC5MaXN0T2ZUc25TdHJlYW1TdGF0ZS5Uc25TdHJlYW1T",
          "dGF0ZSKrAQoOVHNuU3RyZWFtU3RhdGUSIAocVHNuU3RyZWFtU3RhdGVfQ29u",
          "ZmlndXJpbmdfMRABEh0KGVRzblN0cmVhbVN0YXRlX0Rpc2FibGVkXzAQAhIa",
          "ChZUc25TdHJlYW1TdGF0ZV9FcnJvcl80EAMSIAocVHNuU3RyZWFtU3RhdGVf",
          "T3BlcmF0aW9uYWxfMxAEEhoKFlRzblN0cmVhbVN0YXRlX1JlYWR5XzIQBSLD",
          "AQoVTGlzdE9mVHNuVGFsa2VyU3RhdHVzEkAKEF9Uc25UYWxrZXJTdGF0dXMY",
          "ASADKA4yJi5MaXN0T2ZUc25UYWxrZXJTdGF0dXMuVHNuVGFsa2VyU3RhdHVz",
          "ImgKD1RzblRhbGtlclN0YXR1cxIcChhUc25UYWxrZXJTdGF0dXNfRmFpbGVk",
          "XzIQARIaChZUc25UYWxrZXJTdGF0dXNfTm9uZV8wEAISGwoXVHNuVGFsa2Vy",
          "U3RhdHVzX1JlYWR5XzEQAyIeCgxMaXN0T2ZVSW50MTYSDgoGVUludDE2GAEg",
          "AygNIh4KDExpc3RPZlVJbnQzMhIOCgZVSW50MzIYASADKA0iHgoMTGlzdE9m",
          "VUludDY0Eg4KBlVJbnQ2NBgBIAMoBCJMCiNMaXN0T2ZVYWRwRGF0YVNldE1l",
          "c3NhZ2VDb250ZW50TWFzaxIlCh1VYWRwRGF0YVNldE1lc3NhZ2VDb250ZW50",
          "TWFzaxgBIAMoDSJMCiNMaXN0T2ZVYWRwTmV0d29ya01lc3NhZ2VDb250ZW50",
          "TWFzaxIlCh1VYWRwTmV0d29ya01lc3NhZ2VDb250ZW50TWFzaxgBIAMoDSIt",
          "Cg1Mb2NhbGl6ZWRUZXh0Eg4KBkxvY2FsZRgBIAEoCRIMCgRUZXh0GAIgASgJ",
          "Il8KGk1kbnNEaXNjb3ZlcnlDb25maWd1cmF0aW9uEhYKDk1kbnNTZXJ2ZXJO",
          "YW1lGAEgASgJEikKElNlcnZlckNhcGFiaWxpdGllcxgCIAEoCzINLkxpc3RP",
          "ZlN0cmluZyLPAQoQTWV0aG9kQXR0cmlidXRlcxIjCgtEZXNjcmlwdGlvbhgB",
          "IAEoCzIOLkxvY2FsaXplZFRleHQSIwoLRGlzcGxheU5hbWUYAiABKAsyDi5M",
          "b2NhbGl6ZWRUZXh0EhIKCkV4ZWN1dGFibGUYAyABKAgSGwoTU3BlY2lmaWVk",
          "QXR0cmlidXRlcxgEIAEoDRIWCg5Vc2VyRXhlY3V0YWJsZRgFIAEoCBIVCg1V",
          "c2VyV3JpdGVNYXNrGAYgASgNEhEKCVdyaXRlTWFzaxgHIAEoDSKOAgoQTW9k",
          "aWZpY2F0aW9uSW5mbxIYChBNb2RpZmljYXRpb25UaW1lGAEgASgDEjcKClVw",
          "ZGF0ZVR5cGUYAiABKA4yIy5Nb2RpZmljYXRpb25JbmZvLkhpc3RvcnlVcGRh",
          "dGVUeXBlEhAKCFVzZXJOYW1lGAMgASgJIpQBChFIaXN0b3J5VXBkYXRlVHlw",
          "ZRIeChpIaXN0b3J5VXBkYXRlVHlwZV9EZWxldGVfNBABEh4KGkhpc3RvcnlV",
          "cGRhdGVUeXBlX0luc2VydF8xEAISHwobSGlzdG9yeVVwZGF0ZVR5cGVfUmVw",
          "bGFjZV8yEAMSHgoaSGlzdG9yeVVwZGF0ZVR5cGVfVXBkYXRlXzMQBCI/ChZO",
          "ZXR3b3JrQWRkcmVzc0RhdGFUeXBlEhgKEE5ldHdvcmtJbnRlcmZhY2UYASAB",
          "KAkSCwoDVXJsGAIgASgJIkIKGU5ldHdvcmtBZGRyZXNzVXJsRGF0YVR5cGUS",
          "GAoQTmV0d29ya0ludGVyZmFjZRgBIAEoCRILCgNVcmwYAiABKAkiHAoGTm9k",
          "ZUlkEhIKCklkZW50aWZpZXIYASABKAkiugEKEE9iamVjdEF0dHJpYnV0ZXMS",
          "IwoLRGVzY3JpcHRpb24YASABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0Rpc3Bs",
          "YXlOYW1lGAIgASgLMg4uTG9jYWxpemVkVGV4dBIVCg1FdmVudE5vdGlmaWVy",
          "GAMgASgNEhsKE1NwZWNpZmllZEF0dHJpYnV0ZXMYBCABKA0SFQoNVXNlcldy",
          "aXRlTWFzaxgFIAEoDRIRCglXcml0ZU1hc2sYBiABKA0iuwEKFE9iamVjdFR5",
          "cGVBdHRyaWJ1dGVzEiMKC0Rlc2NyaXB0aW9uGAEgASgLMg4uTG9jYWxpemVk",
          "VGV4dBIjCgtEaXNwbGF5TmFtZRgCIAEoCzIOLkxvY2FsaXplZFRleHQSEgoK",
          "SXNBYnN0cmFjdBgDIAEoCBIbChNTcGVjaWZpZWRBdHRyaWJ1dGVzGAQgASgN",
          "EhUKDVVzZXJXcml0ZU1hc2sYBSABKA0SEQoJV3JpdGVNYXNrGAYgASgNIi0K",
          "CU9wdGlvblNldBIRCglWYWxpZEJpdHMYASABKAwSDQoFVmFsdWUYAiABKAwi",
          "LgoLT3JpZW50YXRpb24SCQoBQRgBIAEoARIJCgFCGAIgASgBEgkKAUMYAyAB",
          "KAEiNQoNUXVhbGlmaWVkTmFtZRIMCgROYW1lGAEgASgJEhYKDk5hbWVzcGFj",
          "ZUluZGV4GAIgASgNIiIKBVJhbmdlEgwKBEhpZ2gYASABKAESCwoDTG93GAIg",
          "ASgBIjgKDlJhdGlvbmFsTnVtYmVyEhMKC0Rlbm9taW5hdG9yGAEgASgNEhEK",
          "CU51bWVyYXRvchgCIAEoBSI+ChlSZWFkQW5ub3RhdGlvbkRhdGFEZXRhaWxz",
          "EiEKCFJlcVRpbWVzGAEgASgLMg8uTGlzdE9mRGF0ZVRpbWUiTwoRUmVhZEF0",
          "VGltZURldGFpbHMSIQoIUmVxVGltZXMYASABKAsyDy5MaXN0T2ZEYXRlVGlt",
          "ZRIXCg9Vc2VTaW1wbGVCb3VuZHMYAiABKAgihAEKFlJlYWRSYXdNb2RpZmll",
          "ZERldGFpbHMSDwoHRW5kVGltZRgBIAEoAxIWCg5Jc1JlYWRNb2RpZmllZBgC",
          "IAEoCBIYChBOdW1WYWx1ZXNQZXJOb2RlGAMgASgNEhQKDFJldHVybkJvdW5k",
          "cxgEIAEoCBIRCglTdGFydFRpbWUYBSABKAMidgoLUmVhZFZhbHVlSWQSEwoL",
          "QXR0cmlidXRlSWQYASABKA0SJAoMRGF0YUVuY29kaW5nGAIgASgLMg4uUXVh",
          "bGlmaWVkTmFtZRISCgpJbmRleFJhbmdlGAMgASgJEhgKB19Ob2RlSWQYBCAB",
          "KAsyBy5Ob2RlSWQiHAoaUmVhZGVyR3JvdXBNZXNzYWdlRGF0YVR5cGUiHgoc",
          "UmVhZGVyR3JvdXBUcmFuc3BvcnREYXRhVHlwZSL3AgoXUmVkdW5kYW50U2Vy",
          "dmVyRGF0YVR5cGUSEAoIU2VydmVySWQYASABKAkSOgoMX1NlcnZlclN0YXRl",
          "GAIgASgOMiQuUmVkdW5kYW50U2VydmVyRGF0YVR5cGUuU2VydmVyU3RhdGUS",
          "FAoMU2VydmljZUxldmVsGAMgASgNIvcBCgtTZXJ2ZXJTdGF0ZRIkCiBTZXJ2",
          "ZXJTdGF0ZV9Db21tdW5pY2F0aW9uRmF1bHRfNhABEhgKFFNlcnZlclN0YXRl",
          "X0ZhaWxlZF8xEAISIQodU2VydmVyU3RhdGVfTm9Db25maWd1cmF0aW9uXzIQ",
          "AxIZChVTZXJ2ZXJTdGF0ZV9SdW5uaW5nXzAQBBIaChZTZXJ2ZXJTdGF0ZV9T",
          "aHV0ZG93bl80EAUSGwoXU2VydmVyU3RhdGVfU3VzcGVuZGVkXzMQBhIWChJT",
          "ZXJ2ZXJTdGF0ZV9UZXN0XzUQBxIZChVTZXJ2ZXJTdGF0ZV9Vbmtub3duXzcQ",
          "CCKWBAoUUmVmZXJlbmNlRGVzY3JpcHRpb24SIgoKQnJvd3NlTmFtZRgBIAEo",
          "CzIOLlF1YWxpZmllZE5hbWUSIwoLRGlzcGxheU5hbWUYAiABKAsyDi5Mb2Nh",
          "bGl6ZWRUZXh0EhEKCUlzRm9yd2FyZBgDIAEoCBIzCgpfTm9kZUNsYXNzGAQg",
          "ASgOMh8uUmVmZXJlbmNlRGVzY3JpcHRpb24uTm9kZUNsYXNzEh8KBk5vZGVJ",
          "ZBgFIAEoCzIPLkV4cGFuZGVkTm9kZUlkEiAKD1JlZmVyZW5jZVR5cGVJZBgG",
          "IAEoCzIHLk5vZGVJZBInCg5UeXBlRGVmaW5pdGlvbhgHIAEoCzIPLkV4cGFu",
          "ZGVkTm9kZUlkIoACCglOb2RlQ2xhc3MSGQoVTm9kZUNsYXNzX0RhdGFUeXBl",
          "XzY0EAESFgoSTm9kZUNsYXNzX01ldGhvZF80EAISGgoWTm9kZUNsYXNzX09i",
          "amVjdFR5cGVfOBADEhYKEk5vZGVDbGFzc19PYmplY3RfMRAEEh4KGk5vZGVD",
          "bGFzc19SZWZlcmVuY2VUeXBlXzMyEAUSGwoXTm9kZUNsYXNzX1Vuc3BlY2lm",
          "aWVkXzAQBhIdChlOb2RlQ2xhc3NfVmFyaWFibGVUeXBlXzE2EAcSGAoUTm9k",
          "ZUNsYXNzX1ZhcmlhYmxlXzIQCBIWChJOb2RlQ2xhc3NfVmlld18xMjgQCSJn",
          "Cg1SZWZlcmVuY2VOb2RlEhEKCUlzSW52ZXJzZRgBIAEoCBIgCg9SZWZlcmVu",
          "Y2VUeXBlSWQYAiABKAsyBy5Ob2RlSWQSIQoIVGFyZ2V0SWQYAyABKAsyDy5F",
          "eHBhbmRlZE5vZGVJZCL2AQoXUmVmZXJlbmNlVHlwZUF0dHJpYnV0ZXMSIwoL",
          "RGVzY3JpcHRpb24YASABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0Rpc3BsYXlO",
          "YW1lGAIgASgLMg4uTG9jYWxpemVkVGV4dBIjCgtJbnZlcnNlTmFtZRgDIAEo",
          "CzIOLkxvY2FsaXplZFRleHQSEgoKSXNBYnN0cmFjdBgEIAEoCBIbChNTcGVj",
          "aWZpZWRBdHRyaWJ1dGVzGAUgASgNEhEKCVN5bW1ldHJpYxgGIAEoCBIVCg1V",
          "c2VyV3JpdGVNYXNrGAcgASgNEhEKCVdyaXRlTWFzaxgIIAEoDSKHAQoTUmVs",
          "YXRpdmVQYXRoRWxlbWVudBIXCg9JbmNsdWRlU3VidHlwZXMYASABKAgSEQoJ",
          "SXNJbnZlcnNlGAIgASgIEiAKD1JlZmVyZW5jZVR5cGVJZBgDIAEoCzIHLk5v",
          "ZGVJZBIiCgpUYXJnZXROYW1lGAQgASgLMg4uUXVhbGlmaWVkTmFtZSJCChJS",
          "b2xlUGVybWlzc2lvblR5cGUSEwoLUGVybWlzc2lvbnMYASABKA0SFwoGUm9s",
          "ZUlkGAIgASgLMgcuTm9kZUlkIp4BCiNTYW1wbGluZ0ludGVydmFsRGlhZ25v",
          "c3RpY3NEYXRhVHlwZRIiChpEaXNhYmxlZE1vbml0b3JlZEl0ZW1Db3VudBgB",
          "IAEoDRIdChVNYXhNb25pdG9yZWRJdGVtQ291bnQYAiABKA0SGgoSTW9uaXRv",
          "cmVkSXRlbUNvdW50GAMgASgNEhgKEFNhbXBsaW5nSW50ZXJ2YWwYBCABKAEi",
          "WwofU2VtYW50aWNDaGFuZ2VTdHJ1Y3R1cmVEYXRhVHlwZRIZCghBZmZlY3Rl",
          "ZBgBIAEoCzIHLk5vZGVJZBIdCgxBZmZlY3RlZFR5cGUYAiABKAsyBy5Ob2Rl",
          "SWQioAMKIFNlcnZlckRpYWdub3N0aWNzU3VtbWFyeURhdGFUeXBlEh0KFUN1",
          "bXVsYXRlZFNlc3Npb25Db3VudBgBIAEoDRIiChpDdW11bGF0ZWRTdWJzY3Jp",
          "cHRpb25Db3VudBgCIAEoDRIbChNDdXJyZW50U2Vzc2lvbkNvdW50GAMgASgN",
          "EiAKGEN1cnJlbnRTdWJzY3JpcHRpb25Db3VudBgEIAEoDRIfChdQdWJsaXNo",
          "aW5nSW50ZXJ2YWxDb3VudBgFIAEoDRIdChVSZWplY3RlZFJlcXVlc3RzQ291",
          "bnQYBiABKA0SHAoUUmVqZWN0ZWRTZXNzaW9uQ291bnQYByABKA0SJQodU2Vj",
          "dXJpdHlSZWplY3RlZFJlcXVlc3RzQ291bnQYCCABKA0SJAocU2VjdXJpdHlS",
          "ZWplY3RlZFNlc3Npb25Db3VudBgJIAEoDRIXCg9TZXJ2ZXJWaWV3Q291bnQY",
          "CiABKA0SGQoRU2Vzc2lvbkFib3J0Q291bnQYCyABKA0SGwoTU2Vzc2lvblRp",
          "bWVvdXRDb3VudBgMIAEoDSJ4Cg9TZXJ2ZXJPbk5ldHdvcmsSFAoMRGlzY292",
          "ZXJ5VXJsGAEgASgJEhAKCFJlY29yZElkGAIgASgNEikKElNlcnZlckNhcGFi",
          "aWxpdGllcxgDIAEoCzINLkxpc3RPZlN0cmluZxISCgpTZXJ2ZXJOYW1lGAQg",
          "ASgJIs8DChRTZXJ2ZXJTdGF0dXNEYXRhVHlwZRIeCgpfQnVpbGRJbmZvGAEg",
          "ASgLMgouQnVpbGRJbmZvEhMKC0N1cnJlbnRUaW1lGAIgASgDEhsKE1NlY29u",
          "ZHNUaWxsU2h1dGRvd24YAyABKA0SJgoOU2h1dGRvd25SZWFzb24YBCABKAsy",
          "Di5Mb2NhbGl6ZWRUZXh0EhEKCVN0YXJ0VGltZRgFIAEoAxIwCgVTdGF0ZRgG",
          "IAEoDjIhLlNlcnZlclN0YXR1c0RhdGFUeXBlLlNlcnZlclN0YXRlIvcBCgtT",
          "ZXJ2ZXJTdGF0ZRIkCiBTZXJ2ZXJTdGF0ZV9Db21tdW5pY2F0aW9uRmF1bHRf",
          "NhABEhgKFFNlcnZlclN0YXRlX0ZhaWxlZF8xEAISIQodU2VydmVyU3RhdGVf",
          "Tm9Db25maWd1cmF0aW9uXzIQAxIZChVTZXJ2ZXJTdGF0ZV9SdW5uaW5nXzAQ",
          "BBIaChZTZXJ2ZXJTdGF0ZV9TaHV0ZG93bl80EAUSGwoXU2VydmVyU3RhdGVf",
          "U3VzcGVuZGVkXzMQBhIWChJTZXJ2ZXJTdGF0ZV9UZXN0XzUQBxIZChVTZXJ2",
          "ZXJTdGF0ZV9Vbmtub3duXzcQCCJAChZTZXJ2aWNlQ291bnRlckRhdGFUeXBl",
          "EhIKCkVycm9yQ291bnQYASABKA0SEgoKVG90YWxDb3VudBgCIAEoDSKDBAoi",
          "U2Vzc2lvblNlY3VyaXR5RGlhZ25vc3RpY3NEYXRhVHlwZRIfChdBdXRoZW50",
          "aWNhdGlvbk1lY2hhbmlzbRgBIAEoCRIZChFDbGllbnRDZXJ0aWZpY2F0ZRgC",
          "IAEoDBIqChNDbGllbnRVc2VySWRIaXN0b3J5GAMgASgLMg0uTGlzdE9mU3Ry",
          "aW5nEh0KFUNsaWVudFVzZXJJZE9mU2Vzc2lvbhgEIAEoCRIQCghFbmNvZGlu",
          "ZxgFIAEoCRJNCgxTZWN1cml0eU1vZGUYBiABKA4yNy5TZXNzaW9uU2VjdXJp",
          "dHlEaWFnbm9zdGljc0RhdGFUeXBlLk1lc3NhZ2VTZWN1cml0eU1vZGUSGQoR",
          "U2VjdXJpdHlQb2xpY3lVcmkYByABKAkSGgoJU2Vzc2lvbklkGAggASgLMgcu",
          "Tm9kZUlkEhkKEVRyYW5zcG9ydFByb3RvY29sGAkgASgJIqIBChNNZXNzYWdl",
          "U2VjdXJpdHlNb2RlEiEKHU1lc3NhZ2VTZWN1cml0eU1vZGVfSW52YWxpZF8w",
          "EAESHgoaTWVzc2FnZVNlY3VyaXR5TW9kZV9Ob25lXzEQAhIoCiRNZXNzYWdl",
          "U2VjdXJpdHlNb2RlX1NpZ25BbmRFbmNyeXB0XzMQAxIeChpNZXNzYWdlU2Vj",
          "dXJpdHlNb2RlX1NpZ25fMhAEIrEBChxTZXNzaW9ubGVzc0ludm9rZVJlcXVl",
          "c3RUeXBlEiAKCUxvY2FsZUlkcxgBIAEoCzINLkxpc3RPZlN0cmluZxIkCg1O",
          "YW1lc3BhY2VVcmlzGAIgASgLMg0uTGlzdE9mU3RyaW5nEiEKClNlcnZlclVy",
          "aXMYAyABKAsyDS5MaXN0T2ZTdHJpbmcSEQoJU2VydmljZUlkGAQgASgNEhMK",
          "C1VyaXNWZXJzaW9uGAUgASgNInsKHVNlc3Npb25sZXNzSW52b2tlUmVzcG9u",
          "c2VUeXBlEiQKDU5hbWVzcGFjZVVyaXMYASABKAsyDS5MaXN0T2ZTdHJpbmcS",
          "IQoKU2VydmVyVXJpcxgCIAEoCzINLkxpc3RPZlN0cmluZxIRCglTZXJ2aWNl",
          "SWQYAyABKA0iNQoNU2lnbmF0dXJlRGF0YRIRCglBbGdvcml0aG0YASABKAkS",
          "EQoJU2lnbmF0dXJlGAIgASgMIkcKGVNpZ25lZFNvZnR3YXJlQ2VydGlmaWNh",
          "dGUSFwoPQ2VydGlmaWNhdGVEYXRhGAEgASgMEhEKCVNpZ25hdHVyZRgCIAEo",
          "DCKGAQoVU2ltcGxlVHlwZURlc2NyaXB0aW9uEh0KDEJhc2VEYXRhVHlwZRgB",
          "IAEoCzIHLk5vZGVJZBITCgtCdWlsdEluVHlwZRgCIAEoDRIbCgpEYXRhVHlw",
          "ZUlkGAMgASgLMgcuTm9kZUlkEhwKBE5hbWUYBCABKAsyDi5RdWFsaWZpZWRO",
          "YW1lIhoKClN0YXR1c0NvZGUSDAoEQ29kZRgBIAEoDSLGAQoOU3RydWN0dXJl",
          "RmllbGQSJgoPQXJyYXlEaW1lbnNpb25zGAEgASgLMg0uTGlzdE9mVUludDMy",
          "EhkKCERhdGFUeXBlGAIgASgLMgcuTm9kZUlkEiMKC0Rlc2NyaXB0aW9uGAMg",
          "ASgLMg4uTG9jYWxpemVkVGV4dBISCgpJc09wdGlvbmFsGAQgASgIEhcKD01h",
          "eFN0cmluZ0xlbmd0aBgFIAEoDRIMCgROYW1lGAYgASgJEhEKCVZhbHVlUmFu",
          "axgHIAEoBSJNChtTdWJzY3JpcHRpb25BY2tub3dsZWRnZW1lbnQSFgoOU2Vx",
          "dWVuY2VOdW1iZXIYASABKA0SFgoOU3Vic2NyaXB0aW9uSWQYAiABKA0iyAcK",
          "H1N1YnNjcmlwdGlvbkRpYWdub3N0aWNzRGF0YVR5cGUSHQoVQ3VycmVudEtl",
          "ZXBBbGl2ZUNvdW50GAEgASgNEhwKFEN1cnJlbnRMaWZldGltZUNvdW50GAIg",
          "ASgNEiQKHERhdGFDaGFuZ2VOb3RpZmljYXRpb25zQ291bnQYAyABKA0SFAoM",
          "RGlzYWJsZUNvdW50GAQgASgNEiIKGkRpc2FibGVkTW9uaXRvcmVkSXRlbUNv",
          "dW50GAUgASgNEh0KFURpc2NhcmRlZE1lc3NhZ2VDb3VudBgGIAEoDRITCgtF",
          "bmFibGVDb3VudBgHIAEoDRIfChdFdmVudE5vdGlmaWNhdGlvbnNDb3VudBgI",
          "IAEoDRIfChdFdmVudFF1ZXVlT3ZlckZsb3dDb3VudBgJIAEoDRIfChdMYXRl",
          "UHVibGlzaFJlcXVlc3RDb3VudBgKIAEoDRIZChFNYXhLZWVwQWxpdmVDb3Vu",
          "dBgLIAEoDRIYChBNYXhMaWZldGltZUNvdW50GAwgASgNEiIKGk1heE5vdGlm",
          "aWNhdGlvbnNQZXJQdWJsaXNoGA0gASgNEhMKC01vZGlmeUNvdW50GA4gASgN",
          "EhoKEk1vbml0b3JlZEl0ZW1Db3VudBgPIAEoDRIkChxNb25pdG9yaW5nUXVl",
          "dWVPdmVyZmxvd0NvdW50GBAgASgNEhoKEk5leHRTZXF1ZW5jZU51bWJlchgR",
          "IAEoDRIaChJOb3RpZmljYXRpb25zQ291bnQYEiABKA0SEAoIUHJpb3JpdHkY",
          "EyABKA0SGwoTUHVibGlzaFJlcXVlc3RDb3VudBgUIAEoDRIZChFQdWJsaXNo",
          "aW5nRW5hYmxlZBgVIAEoCBIaChJQdWJsaXNoaW5nSW50ZXJ2YWwYFiABKAES",
          "HQoVUmVwdWJsaXNoTWVzc2FnZUNvdW50GBcgASgNEiQKHFJlcHVibGlzaE1l",
          "c3NhZ2VSZXF1ZXN0Q291bnQYGCABKA0SHQoVUmVwdWJsaXNoUmVxdWVzdENv",
          "dW50GBkgASgNEhoKCVNlc3Npb25JZBgaIAEoCzIHLk5vZGVJZBIWCg5TdWJz",
          "Y3JpcHRpb25JZBgbIAEoDRIcChRUcmFuc2ZlclJlcXVlc3RDb3VudBgcIAEo",
          "DRIjChtUcmFuc2ZlcnJlZFRvQWx0Q2xpZW50Q291bnQYHSABKA0SJAocVHJh",
          "bnNmZXJyZWRUb1NhbWVDbGllbnRDb3VudBgeIAEoDRIiChpVbmFja25vd2xl",
          "ZGdlZE1lc3NhZ2VDb3VudBgfIAEoDSI9ChpUaHJlZURDYXJ0ZXNpYW5Db29y",
          "ZGluYXRlcxIJCgFYGAEgASgBEgkKAVkYAiABKAESCQoBWhgDIAEoASI0ChFU",
          "aHJlZURPcmllbnRhdGlvbhIJCgFBGAEgASgBEgkKAUIYAiABKAESCQoBQxgD",
          "IAEoASIvCgxUaHJlZURWZWN0b3ISCQoBWBgBIAEoARIJCgFZGAIgASgBEgkK",
          "AVoYAyABKAEiQgoQVGltZVpvbmVEYXRhVHlwZRIeChZEYXlsaWdodFNhdmlu",
          "Z0luT2Zmc2V0GAEgASgIEg4KBk9mZnNldBgCIAEoBSJjCg5UcmFuc2ZlclJl",
          "c3VsdBIvChhBdmFpbGFibGVTZXF1ZW5jZU51bWJlcnMYASABKAsyDS5MaXN0",
          "T2ZVSW50MzISIAoLX1N0YXR1c0NvZGUYAiABKAsyCy5TdGF0dXNDb2RlItkB",
          "ChFUcnVzdExpc3REYXRhVHlwZRItChJJc3N1ZXJDZXJ0aWZpY2F0ZXMYASAB",
          "KAsyES5MaXN0T2ZCeXRlU3RyaW5nEiUKCklzc3VlckNybHMYAiABKAsyES5M",
          "aXN0T2ZCeXRlU3RyaW5nEhYKDlNwZWNpZmllZExpc3RzGAMgASgNEi4KE1Ry",
          "dXN0ZWRDZXJ0aWZpY2F0ZXMYBCABKAsyES5MaXN0T2ZCeXRlU3RyaW5nEiYK",
          "C1RydXN0ZWRDcmxzGAUgASgLMhEuTGlzdE9mQnl0ZVN0cmluZyKfAgogVWFk",
          "cERhdGFTZXRSZWFkZXJNZXNzYWdlRGF0YVR5cGUSHQoORGF0YVNldENsYXNz",
          "SWQYASABKAsyBS5HdWlkEiEKGURhdGFTZXRNZXNzYWdlQ29udGVudE1hc2sY",
          "AiABKA0SFQoNRGF0YVNldE9mZnNldBgDIAEoDRIUCgxHcm91cFZlcnNpb24Y",
          "BCABKA0SIQoZTmV0d29ya01lc3NhZ2VDb250ZW50TWFzaxgFIAEoDRIcChRO",
          "ZXR3b3JrTWVzc2FnZU51bWJlchgGIAEoDRIYChBQcm9jZXNzaW5nT2Zmc2V0",
          "GAcgASgBEhoKElB1Ymxpc2hpbmdJbnRlcnZhbBgIIAEoARIVCg1SZWNlaXZl",
          "T2Zmc2V0GAkgASgBIpIBCiBVYWRwRGF0YVNldFdyaXRlck1lc3NhZ2VEYXRh",
          "VHlwZRIWCg5Db25maWd1cmVkU2l6ZRgBIAEoDRIhChlEYXRhU2V0TWVzc2Fn",
          "ZUNvbnRlbnRNYXNrGAIgASgNEhUKDURhdGFTZXRPZmZzZXQYAyABKA0SHAoU",
          "TmV0d29ya01lc3NhZ2VOdW1iZXIYBCABKA0ihQMKHlVhZHBXcml0ZXJHcm91",
          "cE1lc3NhZ2VEYXRhVHlwZRJMCg9EYXRhU2V0T3JkZXJpbmcYASABKA4yMy5V",
          "YWRwV3JpdGVyR3JvdXBNZXNzYWdlRGF0YVR5cGUuRGF0YVNldE9yZGVyaW5n",
          "VHlwZRIUCgxHcm91cFZlcnNpb24YAiABKA0SIQoZTmV0d29ya01lc3NhZ2VD",
          "b250ZW50TWFzaxgDIAEoDRInChBQdWJsaXNoaW5nT2Zmc2V0GAQgASgLMg0u",
          "TGlzdE9mRG91YmxlEhYKDlNhbXBsaW5nT2Zmc2V0GAUgASgBIpoBChNEYXRh",
          "U2V0T3JkZXJpbmdUeXBlEjEKLURhdGFTZXRPcmRlcmluZ1R5cGVfQXNjZW5k",
          "aW5nV3JpdGVySWRTaW5nbGVfMhABEisKJ0RhdGFTZXRPcmRlcmluZ1R5cGVf",
          "QXNjZW5kaW5nV3JpdGVySWRfMRACEiMKH0RhdGFTZXRPcmRlcmluZ1R5cGVf",
          "VW5kZWZpbmVkXzAQAyIHCgVVbmlvbiJAChZVbnNpZ25lZFJhdGlvbmFsTnVt",
          "YmVyEhMKC0Rlbm9taW5hdG9yGAEgASgNEhEKCU51bWVyYXRvchgCIAEoDSKS",
          "AQoRVXNlcklkZW50aXR5VG9rZW4SFwoPQ2VydGlmaWNhdGVEYXRhGAEgASgM",
          "EhsKE0VuY3J5cHRpb25BbGdvcml0aG0YAiABKAkSEAoIUGFzc3dvcmQYAyAB",
          "KAwSEAoIUG9saWN5SWQYBCABKAkSEQoJVG9rZW5EYXRhGAUgASgMEhAKCFVz",
          "ZXJOYW1lGAYgASgJImoKFVVzZXJOYW1lSWRlbnRpdHlUb2tlbhIbChNFbmNy",
          "eXB0aW9uQWxnb3JpdGhtGAEgASgJEhAKCFBhc3N3b3JkGAIgASgMEhAKCFBv",
          "bGljeUlkGAMgASgJEhAKCFVzZXJOYW1lGAQgASgJIrYCCg9Vc2VyVG9rZW5Q",
          "b2xpY3kSFwoPSXNzdWVkVG9rZW5UeXBlGAEgASgJEhkKEUlzc3VlckVuZHBv",
          "aW50VXJsGAIgASgJEhAKCFBvbGljeUlkGAMgASgJEhkKEVNlY3VyaXR5UG9s",
          "aWN5VXJpGAQgASgJEjEKCVRva2VuVHlwZRgFIAEoDjIeLlVzZXJUb2tlblBv",
          "bGljeS5Vc2VyVG9rZW5UeXBlIo4BCg1Vc2VyVG9rZW5UeXBlEh0KGVVzZXJU",
          "b2tlblR5cGVfQW5vbnltb3VzXzAQARIfChtVc2VyVG9rZW5UeXBlX0NlcnRp",
          "ZmljYXRlXzIQAhIfChtVc2VyVG9rZW5UeXBlX0lzc3VlZFRva2VuXzMQAxIc",
          "ChhVc2VyVG9rZW5UeXBlX1VzZXJOYW1lXzEQBCILCglWYWx1ZVR5cGUiJAoH",
          "VmFyaWFudBIZCgVWYWx1ZRgBIAEoCzIKLlZhbHVlVHlwZSIpCgZWZWN0b3IS",
          "CQoBWBgBIAEoARIJCgFZGAIgASgBEgkKAVoYAyABKAEi0QEKDlZpZXdBdHRy",
          "aWJ1dGVzEhcKD0NvbnRhaW5zTm9Mb29wcxgBIAEoCBIjCgtEZXNjcmlwdGlv",
          "bhgCIAEoCzIOLkxvY2FsaXplZFRleHQSIwoLRGlzcGxheU5hbWUYAyABKAsy",
          "Di5Mb2NhbGl6ZWRUZXh0EhUKDUV2ZW50Tm90aWZpZXIYBCABKA0SGwoTU3Bl",
          "Y2lmaWVkQXR0cmlidXRlcxgFIAEoDRIVCg1Vc2VyV3JpdGVNYXNrGAYgASgN",
          "EhEKCVdyaXRlTWFzaxgHIAEoDSJSCg9WaWV3RGVzY3JpcHRpb24SEQoJVGlt",
          "ZXN0YW1wGAEgASgDEhcKBlZpZXdJZBgCIAEoCzIHLk5vZGVJZBITCgtWaWV3",
          "VmVyc2lvbhgDIAEoDSL9AgoaV3JpdGVyR3JvdXBNZXNzYWdlRGF0YVR5cGUS",
          "SAoPRGF0YVNldE9yZGVyaW5nGAEgASgOMi8uV3JpdGVyR3JvdXBNZXNzYWdl",
          "RGF0YVR5cGUuRGF0YVNldE9yZGVyaW5nVHlwZRIUCgxHcm91cFZlcnNpb24Y",
          "AiABKA0SIQoZTmV0d29ya01lc3NhZ2VDb250ZW50TWFzaxgDIAEoDRInChBQ",
          "dWJsaXNoaW5nT2Zmc2V0GAQgASgLMg0uTGlzdE9mRG91YmxlEhYKDlNhbXBs",
          "aW5nT2Zmc2V0GAUgASgBIpoBChNEYXRhU2V0T3JkZXJpbmdUeXBlEjEKLURh",
          "dGFTZXRPcmRlcmluZ1R5cGVfQXNjZW5kaW5nV3JpdGVySWRTaW5nbGVfMhAB",
          "EisKJ0RhdGFTZXRPcmRlcmluZ1R5cGVfQXNjZW5kaW5nV3JpdGVySWRfMRAC",
          "EiMKH0RhdGFTZXRPcmRlcmluZ1R5cGVfVW5kZWZpbmVkXzAQAyKlBAocV3Jp",
          "dGVyR3JvdXBUcmFuc3BvcnREYXRhVHlwZRIgChhBdXRoZW50aWNhdGlvblBy",
          "b2ZpbGVVcmkYASABKAkSGgoSTWVzc2FnZVJlcGVhdENvdW50GAIgASgNEhoK",
          "Ek1lc3NhZ2VSZXBlYXREZWxheRgDIAEoARIRCglRdWV1ZU5hbWUYBCABKAkS",
          "YQoaUmVxdWVzdGVkRGVsaXZlcnlHdWFyYW50ZWUYBSABKA4yPS5Xcml0ZXJH",
          "cm91cFRyYW5zcG9ydERhdGFUeXBlLkJyb2tlclRyYW5zcG9ydFF1YWxpdHlP",
          "ZlNlcnZpY2USEwoLUmVzb3VyY2VVcmkYBiABKAkinwIKH0Jyb2tlclRyYW5z",
          "cG9ydFF1YWxpdHlPZlNlcnZpY2USMQotQnJva2VyVHJhbnNwb3J0UXVhbGl0",
          "eU9mU2VydmljZV9BdExlYXN0T25jZV8yEAESMAosQnJva2VyVHJhbnNwb3J0",
          "UXVhbGl0eU9mU2VydmljZV9BdE1vc3RPbmNlXzMQAhIwCixCcm9rZXJUcmFu",
          "c3BvcnRRdWFsaXR5T2ZTZXJ2aWNlX0Jlc3RFZmZvcnRfMRADEjEKLUJyb2tl",
          "clRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2VfRXhhY3RseU9uY2VfNBAEEjIK",
          "LkJyb2tlclRyYW5zcG9ydFF1YWxpdHlPZlNlcnZpY2VfTm90U3BlY2lmaWVk",
          "XzAQBSI+ChFYNTA5SWRlbnRpdHlUb2tlbhIXCg9DZXJ0aWZpY2F0ZURhdGEY",
          "ASABKAwSEAoIUG9saWN5SWQYAiABKAkiIgoGWFZUeXBlEg0KBVZhbHVlGAEg",
          "ASgCEgkKAVgYAiABKAEiEAoOWG1sRWxlbWVudFR5cGUiUAoOQWRkTm9kZXNS",
          "ZXN1bHQSHAoLQWRkZWROb2RlSWQYASABKAsyBy5Ob2RlSWQSIAoLX1N0YXR1",
          "c0NvZGUYAiABKAsyCy5TdGF0dXNDb2RlIuEDChFBZGRSZWZlcmVuY2VzSXRl",
          "bRIRCglJc0ZvcndhcmQYASABKAgSIAoPUmVmZXJlbmNlVHlwZUlkGAIgASgL",
          "MgcuTm9kZUlkEh0KDFNvdXJjZU5vZGVJZBgDIAEoCzIHLk5vZGVJZBI1Cg9U",
          "YXJnZXROb2RlQ2xhc3MYBCABKA4yHC5BZGRSZWZlcmVuY2VzSXRlbS5Ob2Rl",
          "Q2xhc3MSJQoMVGFyZ2V0Tm9kZUlkGAUgASgLMg8uRXhwYW5kZWROb2RlSWQS",
          "FwoPVGFyZ2V0U2VydmVyVXJpGAYgASgJIoACCglOb2RlQ2xhc3MSGQoVTm9k",
          "ZUNsYXNzX0RhdGFUeXBlXzY0EAESFgoSTm9kZUNsYXNzX01ldGhvZF80EAIS",
          "GgoWTm9kZUNsYXNzX09iamVjdFR5cGVfOBADEhYKEk5vZGVDbGFzc19PYmpl",
          "Y3RfMRAEEh4KGk5vZGVDbGFzc19SZWZlcmVuY2VUeXBlXzMyEAUSGwoXTm9k",
          "ZUNsYXNzX1Vuc3BlY2lmaWVkXzAQBhIdChlOb2RlQ2xhc3NfVmFyaWFibGVU",
          "eXBlXzE2EAcSGAoUTm9kZUNsYXNzX1ZhcmlhYmxlXzIQCBIWChJOb2RlQ2xh",
          "c3NfVmlld18xMjgQCSKaAQoPQWdncmVnYXRlRmlsdGVyEjgKF19BZ2dyZWdh",
          "dGVDb25maWd1cmF0aW9uGAEgASgLMhcuQWdncmVnYXRlQ29uZmlndXJhdGlv",
          "bhIeCg1BZ2dyZWdhdGVUeXBlGAIgASgLMgcuTm9kZUlkEhoKElByb2Nlc3Np",
          "bmdJbnRlcnZhbBgDIAEoARIRCglTdGFydFRpbWUYBCABKAMiZgoRQWxpYXNO",
          "YW1lRGF0YVR5cGUSIQoJQWxpYXNOYW1lGAEgASgLMg4uUXVhbGlmaWVkTmFt",
          "ZRIuCg9SZWZlcmVuY2VkTm9kZXMYAiABKAsyFS5MaXN0T2ZFeHBhbmRlZE5v",
          "ZGVJZCKrAwoWQXBwbGljYXRpb25EZXNjcmlwdGlvbhInCg9BcHBsaWNhdGlv",
          "bk5hbWUYASABKAsyDi5Mb2NhbGl6ZWRUZXh0EkEKEF9BcHBsaWNhdGlvblR5",
          "cGUYAiABKA4yJy5BcHBsaWNhdGlvbkRlc2NyaXB0aW9uLkFwcGxpY2F0aW9u",
          "VHlwZRIWCg5BcHBsaWNhdGlvblVyaRgDIAEoCRIbChNEaXNjb3ZlcnlQcm9m",
          "aWxlVXJpGAQgASgJEiQKDURpc2NvdmVyeVVybHMYBSABKAsyDS5MaXN0T2ZT",
          "dHJpbmcSGAoQR2F0ZXdheVNlcnZlclVyaRgGIAEoCRISCgpQcm9kdWN0VXJp",
          "GAcgASgJIpsBCg9BcHBsaWNhdGlvblR5cGUSJQohQXBwbGljYXRpb25UeXBl",
          "X0NsaWVudEFuZFNlcnZlcl8yEAESHAoYQXBwbGljYXRpb25UeXBlX0NsaWVu",
          "dF8xEAISJQohQXBwbGljYXRpb25UeXBlX0Rpc2NvdmVyeVNlcnZlcl8zEAMS",
          "HAoYQXBwbGljYXRpb25UeXBlX1NlcnZlcl8wEAQikwEKCEFyZ3VtZW50EiYK",
          "D0FycmF5RGltZW5zaW9ucxgBIAEoCzINLkxpc3RPZlVJbnQzMhIZCghEYXRh",
          "VHlwZRgCIAEoCzIHLk5vZGVJZBIjCgtEZXNjcmlwdGlvbhgDIAEoCzIOLkxv",
          "Y2FsaXplZFRleHQSDAoETmFtZRgEIAEoCRIRCglWYWx1ZVJhbmsYBSABKAUi",
          "3gIKEUJyb3dzZURlc2NyaXB0aW9uEjwKEF9Ccm93c2VEaXJlY3Rpb24YASAB",
          "KA4yIi5Ccm93c2VEZXNjcmlwdGlvbi5Ccm93c2VEaXJlY3Rpb24SFwoPSW5j",
          "bHVkZVN1YnR5cGVzGAIgASgIEhUKDU5vZGVDbGFzc01hc2sYAyABKA0SGAoH",
          "X05vZGVJZBgEIAEoCzIHLk5vZGVJZBIgCg9SZWZlcmVuY2VUeXBlSWQYBSAB",
          "KAsyBy5Ob2RlSWQSEgoKUmVzdWx0TWFzaxgGIAEoDSKKAQoPQnJvd3NlRGly",
          "ZWN0aW9uEhoKFkJyb3dzZURpcmVjdGlvbl9Cb3RoXzIQARIdChlCcm93c2VE",
          "aXJlY3Rpb25fRm9yd2FyZF8wEAISHQoZQnJvd3NlRGlyZWN0aW9uX0ludmFs",
          "aWRfMxADEh0KGUJyb3dzZURpcmVjdGlvbl9JbnZlcnNlXzEQBCJRChBCcm93",
          "c2VQYXRoVGFyZ2V0EhoKElJlbWFpbmluZ1BhdGhJbmRleBgBIAEoDRIhCghU",
          "YXJnZXRJZBgCIAEoCzIPLkV4cGFuZGVkTm9kZUlkInMKEEN1cnJlbmN5VW5p",
          "dFR5cGUSFgoOQWxwaGFiZXRpY0NvZGUYASABKAkSIAoIQ3VycmVuY3kYAiAB",
          "KAsyDi5Mb2NhbGl6ZWRUZXh0EhAKCEV4cG9uZW50GAMgASgMEhMKC051bWVy",
          "aWNDb2RlGAQgASgFIpsCChxEYXRhU2V0UmVhZGVyTWVzc2FnZURhdGFUeXBl",
          "Eh0KDkRhdGFTZXRDbGFzc0lkGAEgASgLMgUuR3VpZBIhChlEYXRhU2V0TWVz",
          "c2FnZUNvbnRlbnRNYXNrGAIgASgNEhUKDURhdGFTZXRPZmZzZXQYAyABKA0S",
          "FAoMR3JvdXBWZXJzaW9uGAQgASgNEiEKGU5ldHdvcmtNZXNzYWdlQ29udGVu",
          "dE1hc2sYBSABKA0SHAoUTmV0d29ya01lc3NhZ2VOdW1iZXIYBiABKA0SGAoQ",
          "UHJvY2Vzc2luZ09mZnNldBgHIAEoARIaChJQdWJsaXNoaW5nSW50ZXJ2YWwY",
          "CCABKAESFQoNUmVjZWl2ZU9mZnNldBgJIAEoASK5AQoSRGF0YVR5cGVBdHRy",
          "aWJ1dGVzEiMKC0Rlc2NyaXB0aW9uGAEgASgLMg4uTG9jYWxpemVkVGV4dBIj",
          "CgtEaXNwbGF5TmFtZRgCIAEoCzIOLkxvY2FsaXplZFRleHQSEgoKSXNBYnN0",
          "cmFjdBgDIAEoCBIbChNTcGVjaWZpZWRBdHRyaWJ1dGVzGAQgASgNEhUKDVVz",
          "ZXJXcml0ZU1hc2sYBSABKA0SEQoJV3JpdGVNYXNrGAYgASgNIq4BCglEYXRh",
          "VmFsdWUSGQoRU2VydmVyUGljb3NlY29uZHMYASABKA0SFwoPU2VydmVyVGlt",
          "ZXN0YW1wGAIgASgDEhkKEVNvdXJjZVBpY29zZWNvbmRzGAMgASgNEhcKD1Nv",
          "dXJjZVRpbWVzdGFtcBgEIAEoAxIgCgtfU3RhdHVzQ29kZRgFIAEoCzILLlN0",
          "YXR1c0NvZGUSFwoFVmFsdWUYBiABKAsyCC5WYXJpYW50IlIKE0RlbGV0ZUF0",
          "VGltZURldGFpbHMSGAoHX05vZGVJZBgBIAEoCzIHLk5vZGVJZBIhCghSZXFU",
          "aW1lcxgCIAEoCzIPLkxpc3RPZkRhdGVUaW1lIlMKEkRlbGV0ZUV2ZW50RGV0",
          "YWlscxIjCghFdmVudElkcxgBIAEoCzIRLkxpc3RPZkJ5dGVTdHJpbmcSGAoH",
          "X05vZGVJZBgCIAEoCzIHLk5vZGVJZCJLCg9EZWxldGVOb2Rlc0l0ZW0SHgoW",
          "RGVsZXRlVGFyZ2V0UmVmZXJlbmNlcxgBIAEoCBIYCgdfTm9kZUlkGAIgASgL",
          "MgcuTm9kZUlkInIKGERlbGV0ZVJhd01vZGlmaWVkRGV0YWlscxIPCgdFbmRU",
          "aW1lGAEgASgDEhgKEElzRGVsZXRlTW9kaWZpZWQYAiABKAgSGAoHX05vZGVJ",
          "ZBgDIAEoCzIHLk5vZGVJZBIRCglTdGFydFRpbWUYBCABKAMirgEKFERlbGV0",
          "ZVJlZmVyZW5jZXNJdGVtEhsKE0RlbGV0ZUJpZGlyZWN0aW9uYWwYASABKAgS",
          "EQoJSXNGb3J3YXJkGAIgASgIEiAKD1JlZmVyZW5jZVR5cGVJZBgDIAEoCzIH",
          "Lk5vZGVJZBIdCgxTb3VyY2VOb2RlSWQYBCABKAsyBy5Ob2RlSWQSJQoMVGFy",
          "Z2V0Tm9kZUlkGAUgASgLMg8uRXhwYW5kZWROb2RlSWQivAEKDkRpYWdub3N0",
          "aWNJbmZvEhYKDkFkZGl0aW9uYWxJbmZvGAEgASgJEhsKE0lubmVyRGlhZ25v",
          "c3RpY0luZm8YAiABKAwSJAoPSW5uZXJTdGF0dXNDb2RlGAMgASgLMgsuU3Rh",
          "dHVzQ29kZRIOCgZMb2NhbGUYBCABKAUSFQoNTG9jYWxpemVkVGV4dBgFIAEo",
          "BRIUCgxOYW1lc3BhY2VVcmkYBiABKAUSEgoKU3ltYm9saWNJZBgHIAEoBSJb",
          "ChZEaXNjb3ZlcnlDb25maWd1cmF0aW9uEhYKDk1kbnNTZXJ2ZXJOYW1lGAEg",
          "ASgJEikKElNlcnZlckNhcGFiaWxpdGllcxgCIAEoCzINLkxpc3RPZlN0cmlu",
          "ZyJ/Cg1FVUluZm9ybWF0aW9uEiMKC0Rlc2NyaXB0aW9uGAEgASgLMg4uTG9j",
          "YWxpemVkVGV4dBIjCgtEaXNwbGF5TmFtZRgCIAEoCzIOLkxvY2FsaXplZFRl",
          "eHQSFAoMTmFtZXNwYWNlVXJpGAMgASgJEg4KBlVuaXRJZBgEIAEoBSJBChdF",
          "bmRwb2ludFVybExpc3REYXRhVHlwZRImCg9FbmRwb2ludFVybExpc3QYASAB",
          "KAsyDS5MaXN0T2ZTdHJpbmcicgoJRW51bUZpZWxkEiMKC0Rlc2NyaXB0aW9u",
          "GAEgASgLMg4uTG9jYWxpemVkVGV4dBIjCgtEaXNwbGF5TmFtZRgCIAEoCzIO",
          "LkxvY2FsaXplZFRleHQSDAoETmFtZRgDIAEoCRINCgVWYWx1ZRgEIAEoAyJ2",
          "Cg1FbnVtVmFsdWVUeXBlEiMKC0Rlc2NyaXB0aW9uGAEgASgLMg4uTG9jYWxp",
          "emVkVGV4dBIjCgtEaXNwbGF5TmFtZRgCIAEoCzIOLkxvY2FsaXplZFRleHQS",
          "DAoETmFtZRgDIAEoCRINCgVWYWx1ZRgEIAEoAyJDCg9FeHRlbnNpb25PYmpl",
          "Y3QSFwoEQm9keRgBIAEoCzIJLkJvZHlUeXBlEhcKBlR5cGVJZBgCIAEoCzIH",
          "Lk5vZGVJZCKiAwoTRmllbGRUYXJnZXREYXRhVHlwZRITCgtBdHRyaWJ1dGVJ",
          "ZBgBIAEoDRIdCg5EYXRhU2V0RmllbGRJZBgCIAEoCzIFLkd1aWQSHwoNT3Zl",
          "cnJpZGVWYWx1ZRgDIAEoCzIILlZhcmlhbnQSSgoWX092ZXJyaWRlVmFsdWVI",
          "YW5kbGluZxgEIAEoDjIqLkZpZWxkVGFyZ2V0RGF0YVR5cGUuT3ZlcnJpZGVW",
          "YWx1ZUhhbmRsaW5nEhoKElJlY2VpdmVySW5kZXhSYW5nZRgFIAEoCRIdCgxU",
          "YXJnZXROb2RlSWQYBiABKAsyBy5Ob2RlSWQSFwoPV3JpdGVJbmRleFJhbmdl",
          "GAcgASgJIpUBChVPdmVycmlkZVZhbHVlSGFuZGxpbmcSJAogT3ZlcnJpZGVW",
          "YWx1ZUhhbmRsaW5nX0Rpc2FibGVkXzAQARIrCidPdmVycmlkZVZhbHVlSGFu",
          "ZGxpbmdfTGFzdFVzYWJsZVZhbHVlXzEQAhIpCiVPdmVycmlkZVZhbHVlSGFu",
          "ZGxpbmdfT3ZlcnJpZGVWYWx1ZV8yEAMiawoFRnJhbWUSOQoUQ2FydGVzaWFu",
          "Q29vcmRpbmF0ZXMYASABKAsyGy5UaHJlZURDYXJ0ZXNpYW5Db29yZGluYXRl",
          "cxInCgtPcmllbnRhdGlvbhgCIAEoCzISLlRocmVlRE9yaWVudGF0aW9uIkUK",
          "FUdlbmVyaWNBdHRyaWJ1dGVWYWx1ZRITCgtBdHRyaWJ1dGVJZBgBIAEoDRIX",
          "CgVWYWx1ZRgCIAEoCzIILlZhcmlhbnQidwoRSGlzdG9yeVJlYWRSZXN1bHQS",
          "GQoRQ29udGludWF0aW9uUG9pbnQYASABKAwSJQoLSGlzdG9yeURhdGEYAiAB",
          "KAsyEC5FeHRlbnNpb25PYmplY3QSIAoLX1N0YXR1c0NvZGUYAyABKAsyCy5T",
          "dGF0dXNDb2RlIoMBChJIaXN0b3J5UmVhZFZhbHVlSWQSGQoRQ29udGludWF0",
          "aW9uUG9pbnQYASABKAwSJAoMRGF0YUVuY29kaW5nGAIgASgLMg4uUXVhbGlm",
          "aWVkTmFtZRISCgpJbmRleFJhbmdlGAMgASgJEhgKB19Ob2RlSWQYBCABKAsy",
          "By5Ob2RlSWQiRAoMS2V5VmFsdWVQYWlyEhsKA0tleRgBIAEoCzIOLlF1YWxp",
          "ZmllZE5hbWUSFwoFVmFsdWUYAiABKAsyCC5WYXJpYW50IkAKFExpc3RPZkFk",
          "ZE5vZGVzUmVzdWx0EigKD19BZGROb2Rlc1Jlc3VsdBgBIAMoCzIPLkFkZE5v",
          "ZGVzUmVzdWx0IkkKF0xpc3RPZkFkZFJlZmVyZW5jZXNJdGVtEi4KEl9BZGRS",
          "ZWZlcmVuY2VzSXRlbRgBIAMoCzISLkFkZFJlZmVyZW5jZXNJdGVtIkkKF0xp",
          "c3RPZkFsaWFzTmFtZURhdGFUeXBlEi4KEl9BbGlhc05hbWVEYXRhVHlwZRgB",
          "IAMoCzISLkFsaWFzTmFtZURhdGFUeXBlIlgKHExpc3RPZkFwcGxpY2F0aW9u",
          "RGVzY3JpcHRpb24SOAoXX0FwcGxpY2F0aW9uRGVzY3JpcHRpb24YASADKAsy",
          "Fy5BcHBsaWNhdGlvbkRlc2NyaXB0aW9uIi4KDkxpc3RPZkFyZ3VtZW50EhwK",
          "CV9Bcmd1bWVudBgBIAMoCzIJLkFyZ3VtZW50IkkKF0xpc3RPZkJyb3dzZURl",
          "c2NyaXB0aW9uEi4KEl9Ccm93c2VEZXNjcmlwdGlvbhgBIAMoCzISLkJyb3dz",
          "ZURlc2NyaXB0aW9uIkYKFkxpc3RPZkJyb3dzZVBhdGhUYXJnZXQSLAoRX0Jy",
          "b3dzZVBhdGhUYXJnZXQYASADKAsyES5Ccm93c2VQYXRoVGFyZ2V0IkYKFkxp",
          "c3RPZkN1cnJlbmN5VW5pdFR5cGUSLAoRX0N1cnJlbmN5VW5pdFR5cGUYASAD",
          "KAsyES5DdXJyZW5jeVVuaXRUeXBlImoKIkxpc3RPZkRhdGFTZXRSZWFkZXJN",
          "ZXNzYWdlRGF0YVR5cGUSRAodX0RhdGFTZXRSZWFkZXJNZXNzYWdlRGF0YVR5",
          "cGUYASADKAsyHS5EYXRhU2V0UmVhZGVyTWVzc2FnZURhdGFUeXBlIjEKD0xp",
          "c3RPZkRhdGFWYWx1ZRIeCgpfRGF0YVZhbHVlGAEgAygLMgouRGF0YVZhbHVl",
          "IkMKFUxpc3RPZkRlbGV0ZU5vZGVzSXRlbRIqChBfRGVsZXRlTm9kZXNJdGVt",
          "GAEgAygLMhAuRGVsZXRlTm9kZXNJdGVtIlIKGkxpc3RPZkRlbGV0ZVJlZmVy",
          "ZW5jZXNJdGVtEjQKFV9EZWxldGVSZWZlcmVuY2VzSXRlbRgBIAMoCzIVLkRl",
          "bGV0ZVJlZmVyZW5jZXNJdGVtIkAKFExpc3RPZkRpYWdub3N0aWNJbmZvEigK",
          "D19EaWFnbm9zdGljSW5mbxgBIAMoCzIPLkRpYWdub3N0aWNJbmZvIlsKHUxp",
          "c3RPZkVuZHBvaW50VXJsTGlzdERhdGFUeXBlEjoKGF9FbmRwb2ludFVybExp",
          "c3REYXRhVHlwZRgBIAMoCzIYLkVuZHBvaW50VXJsTGlzdERhdGFUeXBlIjEK",
          "D0xpc3RPZkVudW1GaWVsZBIeCgpfRW51bUZpZWxkGAEgAygLMgouRW51bUZp",
          "ZWxkIj0KE0xpc3RPZkVudW1WYWx1ZVR5cGUSJgoOX0VudW1WYWx1ZVR5cGUY",
          "ASADKAsyDi5FbnVtVmFsdWVUeXBlIkMKFUxpc3RPZkV4dGVuc2lvbk9iamVj",
          "dBIqChBfRXh0ZW5zaW9uT2JqZWN0GAEgAygLMhAuRXh0ZW5zaW9uT2JqZWN0",
          "Ik8KGUxpc3RPZkZpZWxkVGFyZ2V0RGF0YVR5cGUSMgoUX0ZpZWxkVGFyZ2V0",
          "RGF0YVR5cGUYASADKAsyFC5GaWVsZFRhcmdldERhdGFUeXBlIiUKC0xpc3RP",
          "ZkZyYW1lEhYKBl9GcmFtZRgBIAMoCzIGLkZyYW1lIlUKG0xpc3RPZkdlbmVy",
          "aWNBdHRyaWJ1dGVWYWx1ZRI2ChZfR2VuZXJpY0F0dHJpYnV0ZVZhbHVlGAEg",
          "AygLMhYuR2VuZXJpY0F0dHJpYnV0ZVZhbHVlIkkKF0xpc3RPZkhpc3RvcnlS",
          "ZWFkUmVzdWx0Ei4KEl9IaXN0b3J5UmVhZFJlc3VsdBgBIAMoCzISLkhpc3Rv",
          "cnlSZWFkUmVzdWx0IkwKGExpc3RPZkhpc3RvcnlSZWFkVmFsdWVJZBIwChNf",
          "SGlzdG9yeVJlYWRWYWx1ZUlkGAEgAygLMhMuSGlzdG9yeVJlYWRWYWx1ZUlk",
          "IjoKEkxpc3RPZktleVZhbHVlUGFpchIkCg1fS2V5VmFsdWVQYWlyGAEgAygL",
          "Mg0uS2V5VmFsdWVQYWlyIj0KE0xpc3RPZkxvY2FsaXplZFRleHQSJgoOX0xv",
          "Y2FsaXplZFRleHQYASADKAsyDi5Mb2NhbGl6ZWRUZXh0IkYKFkxpc3RPZk1v",
          "ZGlmaWNhdGlvbkluZm8SLAoRX01vZGlmaWNhdGlvbkluZm8YASADKAsyES5N",
          "b2RpZmljYXRpb25JbmZvIlgKHExpc3RPZk5ldHdvcmtBZGRyZXNzRGF0YVR5",
          "cGUSOAoXX05ldHdvcmtBZGRyZXNzRGF0YVR5cGUYASADKAsyFy5OZXR3b3Jr",
          "QWRkcmVzc0RhdGFUeXBlImEKH0xpc3RPZk5ldHdvcmtBZGRyZXNzVXJsRGF0",
          "YVR5cGUSPgoaX05ldHdvcmtBZGRyZXNzVXJsRGF0YVR5cGUYASADKAsyGi5O",
          "ZXR3b3JrQWRkcmVzc1VybERhdGFUeXBlIigKDExpc3RPZk5vZGVJZBIYCgdf",
          "Tm9kZUlkGAEgAygLMgcuTm9kZUlkIjEKD0xpc3RPZk9wdGlvblNldBIeCgpf",
          "T3B0aW9uU2V0GAEgAygLMgouT3B0aW9uU2V0IjcKEUxpc3RPZk9yaWVudGF0",
          "aW9uEiIKDF9PcmllbnRhdGlvbhgBIAMoCzIMLk9yaWVudGF0aW9uIj0KE0xp",
          "c3RPZlF1YWxpZmllZE5hbWUSJgoOX1F1YWxpZmllZE5hbWUYASADKAsyDi5R",
          "dWFsaWZpZWROYW1lIkAKFExpc3RPZlJhdGlvbmFsTnVtYmVyEigKD19SYXRp",
          "b25hbE51bWJlchgBIAMoCzIPLlJhdGlvbmFsTnVtYmVyIjcKEUxpc3RPZlJl",
          "YWRWYWx1ZUlkEiIKDF9SZWFkVmFsdWVJZBgBIAMoCzIMLlJlYWRWYWx1ZUlk",
          "ImQKIExpc3RPZlJlYWRlckdyb3VwTWVzc2FnZURhdGFUeXBlEkAKG19SZWFk",
          "ZXJHcm91cE1lc3NhZ2VEYXRhVHlwZRgBIAMoCzIbLlJlYWRlckdyb3VwTWVz",
          "c2FnZURhdGFUeXBlImoKIkxpc3RPZlJlYWRlckdyb3VwVHJhbnNwb3J0RGF0",
          "YVR5cGUSRAodX1JlYWRlckdyb3VwVHJhbnNwb3J0RGF0YVR5cGUYASADKAsy",
          "HS5SZWFkZXJHcm91cFRyYW5zcG9ydERhdGFUeXBlIlsKHUxpc3RPZlJlZHVu",
          "ZGFudFNlcnZlckRhdGFUeXBlEjoKGF9SZWR1bmRhbnRTZXJ2ZXJEYXRhVHlw",
          "ZRgBIAMoCzIYLlJlZHVuZGFudFNlcnZlckRhdGFUeXBlIlIKGkxpc3RPZlJl",
          "ZmVyZW5jZURlc2NyaXB0aW9uEjQKFV9SZWZlcmVuY2VEZXNjcmlwdGlvbhgB",
          "IAMoCzIVLlJlZmVyZW5jZURlc2NyaXB0aW9uIj0KE0xpc3RPZlJlZmVyZW5j",
          "ZU5vZGUSJgoOX1JlZmVyZW5jZU5vZGUYASADKAsyDi5SZWZlcmVuY2VOb2Rl",
          "Ik8KGUxpc3RPZlJlbGF0aXZlUGF0aEVsZW1lbnQSMgoUX1JlbGF0aXZlUGF0",
          "aEVsZW1lbnQYASADKAsyFC5SZWxhdGl2ZVBhdGhFbGVtZW50IkwKGExpc3RP",
          "ZlJvbGVQZXJtaXNzaW9uVHlwZRIwChNfUm9sZVBlcm1pc3Npb25UeXBlGAEg",
          "AygLMhMuUm9sZVBlcm1pc3Npb25UeXBlIn8KKUxpc3RPZlNhbXBsaW5nSW50",
          "ZXJ2YWxEaWFnbm9zdGljc0RhdGFUeXBlElIKJF9TYW1wbGluZ0ludGVydmFs",
          "RGlhZ25vc3RpY3NEYXRhVHlwZRgBIAMoCzIkLlNhbXBsaW5nSW50ZXJ2YWxE",
          "aWFnbm9zdGljc0RhdGFUeXBlInMKJUxpc3RPZlNlbWFudGljQ2hhbmdlU3Ry",
          "dWN0dXJlRGF0YVR5cGUSSgogX1NlbWFudGljQ2hhbmdlU3RydWN0dXJlRGF0",
          "YVR5cGUYASADKAsyIC5TZW1hbnRpY0NoYW5nZVN0cnVjdHVyZURhdGFUeXBl",
          "IkMKFUxpc3RPZlNlcnZlck9uTmV0d29yaxIqChBfU2VydmVyT25OZXR3b3Jr",
          "GAEgAygLMhAuU2VydmVyT25OZXR3b3JrInwKKExpc3RPZlNlc3Npb25TZWN1",
          "cml0eURpYWdub3N0aWNzRGF0YVR5cGUSUAojX1Nlc3Npb25TZWN1cml0eURp",
          "YWdub3N0aWNzRGF0YVR5cGUYASADKAsyIy5TZXNzaW9uU2VjdXJpdHlEaWFn",
          "bm9zdGljc0RhdGFUeXBlImEKH0xpc3RPZlNpZ25lZFNvZnR3YXJlQ2VydGlm",
          "aWNhdGUSPgoaX1NpZ25lZFNvZnR3YXJlQ2VydGlmaWNhdGUYASADKAsyGi5T",
          "aWduZWRTb2Z0d2FyZUNlcnRpZmljYXRlIlUKG0xpc3RPZlNpbXBsZVR5cGVE",
          "ZXNjcmlwdGlvbhI2ChZfU2ltcGxlVHlwZURlc2NyaXB0aW9uGAEgAygLMhYu",
          "U2ltcGxlVHlwZURlc2NyaXB0aW9uIjQKEExpc3RPZlN0YXR1c0NvZGUSIAoL",
          "X1N0YXR1c0NvZGUYASADKAsyCy5TdGF0dXNDb2RlIkAKFExpc3RPZlN0cnVj",
          "dHVyZUZpZWxkEigKD19TdHJ1Y3R1cmVGaWVsZBgBIAMoCzIPLlN0cnVjdHVy",
          "ZUZpZWxkImcKIUxpc3RPZlN1YnNjcmlwdGlvbkFja25vd2xlZGdlbWVudBJC",
          "ChxfU3Vic2NyaXB0aW9uQWNrbm93bGVkZ2VtZW50GAEgAygLMhwuU3Vic2Ny",
          "aXB0aW9uQWNrbm93bGVkZ2VtZW50InMKJUxpc3RPZlN1YnNjcmlwdGlvbkRp",
          "YWdub3N0aWNzRGF0YVR5cGUSSgogX1N1YnNjcmlwdGlvbkRpYWdub3N0aWNz",
          "RGF0YVR5cGUYASADKAsyIC5TdWJzY3JpcHRpb25EaWFnbm9zdGljc0RhdGFU",
          "eXBlImQKIExpc3RPZlRocmVlRENhcnRlc2lhbkNvb3JkaW5hdGVzEkAKG19U",
          "aHJlZURDYXJ0ZXNpYW5Db29yZGluYXRlcxgBIAMoCzIbLlRocmVlRENhcnRl",
          "c2lhbkNvb3JkaW5hdGVzIkkKF0xpc3RPZlRocmVlRE9yaWVudGF0aW9uEi4K",
          "El9UaHJlZURPcmllbnRhdGlvbhgBIAMoCzISLlRocmVlRE9yaWVudGF0aW9u",
          "IjoKEkxpc3RPZlRocmVlRFZlY3RvchIkCg1fVGhyZWVEVmVjdG9yGAEgAygL",
          "Mg0uVGhyZWVEVmVjdG9yIkYKFkxpc3RPZlRpbWVab25lRGF0YVR5cGUSLAoR",
          "X1RpbWVab25lRGF0YVR5cGUYASADKAsyES5UaW1lWm9uZURhdGFUeXBlIkAK",
          "FExpc3RPZlRyYW5zZmVyUmVzdWx0EigKD19UcmFuc2ZlclJlc3VsdBgBIAMo",
          "CzIPLlRyYW5zZmVyUmVzdWx0IkkKF0xpc3RPZlRydXN0TGlzdERhdGFUeXBl",
          "Ei4KEl9UcnVzdExpc3REYXRhVHlwZRgBIAMoCzISLlRydXN0TGlzdERhdGFU",
          "eXBlInYKJkxpc3RPZlVhZHBEYXRhU2V0UmVhZGVyTWVzc2FnZURhdGFUeXBl",
          "EkwKIV9VYWRwRGF0YVNldFJlYWRlck1lc3NhZ2VEYXRhVHlwZRgBIAMoCzIh",
          "LlVhZHBEYXRhU2V0UmVhZGVyTWVzc2FnZURhdGFUeXBlInYKJkxpc3RPZlVh",
          "ZHBEYXRhU2V0V3JpdGVyTWVzc2FnZURhdGFUeXBlEkwKIV9VYWRwRGF0YVNl",
          "dFdyaXRlck1lc3NhZ2VEYXRhVHlwZRgBIAMoCzIhLlVhZHBEYXRhU2V0V3Jp",
          "dGVyTWVzc2FnZURhdGFUeXBlInAKJExpc3RPZlVhZHBXcml0ZXJHcm91cE1l",
          "c3NhZ2VEYXRhVHlwZRJICh9fVWFkcFdyaXRlckdyb3VwTWVzc2FnZURhdGFU",
          "eXBlGAEgAygLMh8uVWFkcFdyaXRlckdyb3VwTWVzc2FnZURhdGFUeXBlIiUK",
          "C0xpc3RPZlVuaW9uEhYKBl9VbmlvbhgBIAMoCzIGLlVuaW9uIlgKHExpc3RP",
          "ZlVuc2lnbmVkUmF0aW9uYWxOdW1iZXISOAoXX1Vuc2lnbmVkUmF0aW9uYWxO",
          "dW1iZXIYASADKAsyFy5VbnNpZ25lZFJhdGlvbmFsTnVtYmVyIkMKFUxpc3RP",
          "ZlVzZXJUb2tlblBvbGljeRIqChBfVXNlclRva2VuUG9saWN5GAEgAygLMhAu",
          "VXNlclRva2VuUG9saWN5IisKDUxpc3RPZlZhcmlhbnQSGgoIX1ZhcmlhbnQY",
          "ASADKAsyCC5WYXJpYW50IigKDExpc3RPZlZlY3RvchIYCgdfVmVjdG9yGAEg",
          "AygLMgcuVmVjdG9yImQKIExpc3RPZldyaXRlckdyb3VwTWVzc2FnZURhdGFU",
          "eXBlEkAKG19Xcml0ZXJHcm91cE1lc3NhZ2VEYXRhVHlwZRgBIAMoCzIbLldy",
          "aXRlckdyb3VwTWVzc2FnZURhdGFUeXBlImoKIkxpc3RPZldyaXRlckdyb3Vw",
          "VHJhbnNwb3J0RGF0YVR5cGUSRAodX1dyaXRlckdyb3VwVHJhbnNwb3J0RGF0",
          "YVR5cGUYASADKAsyHS5Xcml0ZXJHcm91cFRyYW5zcG9ydERhdGFUeXBlIjcK",
          "EExpc3RPZlhtbEVsZW1lbnQSIwoKWG1sRWxlbWVudBgBIAMoCzIPLlhtbEVs",
          "ZW1lbnRUeXBlIikKDkxpdGVyYWxPcGVyYW5kEhcKBVZhbHVlGAEgASgLMggu",
          "VmFyaWFudCLKBQoKTWV0aG9kTm9kZRIaChJBY2Nlc3NSZXN0cmljdGlvbnMY",
          "ASABKA0SIgoKQnJvd3NlTmFtZRgCIAEoCzIOLlF1YWxpZmllZE5hbWUSIwoL",
          "RGVzY3JpcHRpb24YAyABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0Rpc3BsYXlO",
          "YW1lGAQgASgLMg4uTG9jYWxpemVkVGV4dBISCgpFeGVjdXRhYmxlGAUgASgI",
          "EikKCl9Ob2RlQ2xhc3MYBiABKA4yFS5NZXRob2ROb2RlLk5vZGVDbGFzcxIY",
          "CgdfTm9kZUlkGAcgASgLMgcuTm9kZUlkEigKClJlZmVyZW5jZXMYCCABKAsy",
          "FC5MaXN0T2ZSZWZlcmVuY2VOb2RlEjIKD1JvbGVQZXJtaXNzaW9ucxgJIAEo",
          "CzIZLkxpc3RPZlJvbGVQZXJtaXNzaW9uVHlwZRIWCg5Vc2VyRXhlY3V0YWJs",
          "ZRgKIAEoCBI2ChNVc2VyUm9sZVBlcm1pc3Npb25zGAsgASgLMhkuTGlzdE9m",
          "Um9sZVBlcm1pc3Npb25UeXBlEhUKDVVzZXJXcml0ZU1hc2sYDCABKA0SEQoJ",
          "V3JpdGVNYXNrGA0gASgNIoACCglOb2RlQ2xhc3MSGQoVTm9kZUNsYXNzX0Rh",
          "dGFUeXBlXzY0EAESFgoSTm9kZUNsYXNzX01ldGhvZF80EAISGgoWTm9kZUNs",
          "YXNzX09iamVjdFR5cGVfOBADEhYKEk5vZGVDbGFzc19PYmplY3RfMRAEEh4K",
          "Gk5vZGVDbGFzc19SZWZlcmVuY2VUeXBlXzMyEAUSGwoXTm9kZUNsYXNzX1Vu",
          "c3BlY2lmaWVkXzAQBhIdChlOb2RlQ2xhc3NfVmFyaWFibGVUeXBlXzE2EAcS",
          "GAoUTm9kZUNsYXNzX1ZhcmlhYmxlXzIQCBIWChJOb2RlQ2xhc3NfVmlld18x",
          "MjgQCSJmChxNb2RlbENoYW5nZVN0cnVjdHVyZURhdGFUeXBlEhkKCEFmZmVj",
          "dGVkGAEgASgLMgcuTm9kZUlkEh0KDEFmZmVjdGVkVHlwZRgCIAEoCzIHLk5v",
          "ZGVJZBIMCgRWZXJiGAMgASgNIrkBChlNb25pdG9yZWRJdGVtQ3JlYXRlUmVz",
          "dWx0EiYKDEZpbHRlclJlc3VsdBgBIAEoCzIQLkV4dGVuc2lvbk9iamVjdBIX",
          "Cg9Nb25pdG9yZWRJdGVtSWQYAiABKA0SGAoQUmV2aXNlZFF1ZXVlU2l6ZRgD",
          "IAEoDRIfChdSZXZpc2VkU2FtcGxpbmdJbnRlcnZhbBgEIAEoARIgCgtfU3Rh",
          "dHVzQ29kZRgFIAEoCzILLlN0YXR1c0NvZGUioAEKGU1vbml0b3JlZEl0ZW1N",
          "b2RpZnlSZXN1bHQSJgoMRmlsdGVyUmVzdWx0GAEgASgLMhAuRXh0ZW5zaW9u",
          "T2JqZWN0EhgKEFJldmlzZWRRdWV1ZVNpemUYAiABKA0SHwoXUmV2aXNlZFNh",
          "bXBsaW5nSW50ZXJ2YWwYAyABKAESIAoLX1N0YXR1c0NvZGUYBCABKAsyCy5T",
          "dGF0dXNDb2RlIkwKGU1vbml0b3JlZEl0ZW1Ob3RpZmljYXRpb24SFAoMQ2xp",
          "ZW50SGFuZGxlGAEgASgNEhkKBVZhbHVlGAIgASgLMgouRGF0YVZhbHVlIpIB",
          "ChRNb25pdG9yaW5nUGFyYW1ldGVycxIUCgxDbGllbnRIYW5kbGUYASABKA0S",
          "FQoNRGlzY2FyZE9sZGVzdBgCIAEoCBIgCgZGaWx0ZXIYAyABKAsyEC5FeHRl",
          "bnNpb25PYmplY3QSEQoJUXVldWVTaXplGAQgASgNEhgKEFNhbXBsaW5nSW50",
          "ZXJ2YWwYBSABKAEiXwoUTmV0d29ya0dyb3VwRGF0YVR5cGUSNAoMTmV0d29y",
          "a1BhdGhzGAEgASgLMh4uTGlzdE9mRW5kcG9pbnRVcmxMaXN0RGF0YVR5cGUS",
          "EQoJU2VydmVyVXJpGAIgASgJItIICgROb2RlEhMKC0FjY2Vzc0xldmVsGAEg",
          "ASgNEhUKDUFjY2Vzc0xldmVsRXgYAiABKA0SGgoSQWNjZXNzUmVzdHJpY3Rp",
          "b25zGAMgASgNEiYKD0FycmF5RGltZW5zaW9ucxgEIAEoCzINLkxpc3RPZlVJ",
          "bnQzMhIiCgpCcm93c2VOYW1lGAUgASgLMg4uUXVhbGlmaWVkTmFtZRIXCg9D",
          "b250YWluc05vTG9vcHMYBiABKAgSGQoIRGF0YVR5cGUYByABKAsyBy5Ob2Rl",
          "SWQSLAoSRGF0YVR5cGVEZWZpbml0aW9uGAggASgLMhAuRXh0ZW5zaW9uT2Jq",
          "ZWN0EiMKC0Rlc2NyaXB0aW9uGAkgASgLMg4uTG9jYWxpemVkVGV4dBIjCgtE",
          "aXNwbGF5TmFtZRgKIAEoCzIOLkxvY2FsaXplZFRleHQSFQoNRXZlbnROb3Rp",
          "ZmllchgLIAEoDRISCgpFeGVjdXRhYmxlGAwgASgIEhMKC0hpc3Rvcml6aW5n",
          "GA0gASgIEiMKC0ludmVyc2VOYW1lGA4gASgLMg4uTG9jYWxpemVkVGV4dBIS",
          "CgpJc0Fic3RyYWN0GA8gASgIEh8KF01pbmltdW1TYW1wbGluZ0ludGVydmFs",
          "GBAgASgBEiMKCl9Ob2RlQ2xhc3MYESABKA4yDy5Ob2RlLk5vZGVDbGFzcxIY",
          "CgdfTm9kZUlkGBIgASgLMgcuTm9kZUlkEigKClJlZmVyZW5jZXMYEyABKAsy",
          "FC5MaXN0T2ZSZWZlcmVuY2VOb2RlEjIKD1JvbGVQZXJtaXNzaW9ucxgUIAEo",
          "CzIZLkxpc3RPZlJvbGVQZXJtaXNzaW9uVHlwZRIRCglTeW1tZXRyaWMYFSAB",
          "KAgSFwoPVXNlckFjY2Vzc0xldmVsGBYgASgNEhYKDlVzZXJFeGVjdXRhYmxl",
          "GBcgASgIEjYKE1VzZXJSb2xlUGVybWlzc2lvbnMYGCABKAsyGS5MaXN0T2ZS",
          "b2xlUGVybWlzc2lvblR5cGUSFQoNVXNlcldyaXRlTWFzaxgZIAEoDRIXCgVW",
          "YWx1ZRgaIAEoCzIILlZhcmlhbnQSEQoJVmFsdWVSYW5rGBsgASgFEhEKCVdy",
          "aXRlTWFzaxgcIAEoDSKAAgoJTm9kZUNsYXNzEhkKFU5vZGVDbGFzc19EYXRh",
          "VHlwZV82NBABEhYKEk5vZGVDbGFzc19NZXRob2RfNBACEhoKFk5vZGVDbGFz",
          "c19PYmplY3RUeXBlXzgQAxIWChJOb2RlQ2xhc3NfT2JqZWN0XzEQBBIeChpO",
          "b2RlQ2xhc3NfUmVmZXJlbmNlVHlwZV8zMhAFEhsKF05vZGVDbGFzc19VbnNw",
          "ZWNpZmllZF8wEAYSHQoZTm9kZUNsYXNzX1ZhcmlhYmxlVHlwZV8xNhAHEhgK",
          "FE5vZGVDbGFzc19WYXJpYWJsZV8yEAgSFgoSTm9kZUNsYXNzX1ZpZXdfMTI4",
          "EAki0wQKDk5vZGVBdHRyaWJ1dGVzEhMKC0FjY2Vzc0xldmVsGAEgASgNEiYK",
          "D0FycmF5RGltZW5zaW9ucxgCIAEoCzINLkxpc3RPZlVJbnQzMhI1Cg9BdHRy",
          "aWJ1dGVWYWx1ZXMYAyABKAsyHC5MaXN0T2ZHZW5lcmljQXR0cmlidXRlVmFs",
          "dWUSFwoPQ29udGFpbnNOb0xvb3BzGAQgASgIEhkKCERhdGFUeXBlGAUgASgL",
          "MgcuTm9kZUlkEiMKC0Rlc2NyaXB0aW9uGAYgASgLMg4uTG9jYWxpemVkVGV4",
          "dBIjCgtEaXNwbGF5TmFtZRgHIAEoCzIOLkxvY2FsaXplZFRleHQSFQoNRXZl",
          "bnROb3RpZmllchgIIAEoDRISCgpFeGVjdXRhYmxlGAkgASgIEhMKC0hpc3Rv",
          "cml6aW5nGAogASgIEiMKC0ludmVyc2VOYW1lGAsgASgLMg4uTG9jYWxpemVk",
          "VGV4dBISCgpJc0Fic3RyYWN0GAwgASgIEh8KF01pbmltdW1TYW1wbGluZ0lu",
          "dGVydmFsGA0gASgBEhsKE1NwZWNpZmllZEF0dHJpYnV0ZXMYDiABKA0SEQoJ",
          "U3ltbWV0cmljGA8gASgIEhcKD1VzZXJBY2Nlc3NMZXZlbBgQIAEoDRIWCg5V",
          "c2VyRXhlY3V0YWJsZRgRIAEoCBIVCg1Vc2VyV3JpdGVNYXNrGBIgASgNEhcK",
          "BVZhbHVlGBMgASgLMgguVmFyaWFudBIRCglWYWx1ZVJhbmsYFCABKAUSEQoJ",
          "V3JpdGVNYXNrGBUgASgNIogBCg1Ob2RlUmVmZXJlbmNlEhEKCUlzRm9yd2Fy",
          "ZBgBIAEoCBIYCgdfTm9kZUlkGAIgASgLMgcuTm9kZUlkEiAKD1JlZmVyZW5j",
          "ZVR5cGVJZBgDIAEoCzIHLk5vZGVJZBIoChFSZWZlcmVuY2VkTm9kZUlkcxgE",
          "IAEoCzINLkxpc3RPZk5vZGVJZCJ0ChNOb3RpZmljYXRpb25NZXNzYWdlEjAK",
          "EE5vdGlmaWNhdGlvbkRhdGEYASABKAsyFi5MaXN0T2ZFeHRlbnNpb25PYmpl",
          "Y3QSEwoLUHVibGlzaFRpbWUYAiABKAMSFgoOU2VxdWVuY2VOdW1iZXIYAyAB",
          "KA0itQUKCk9iamVjdE5vZGUSGgoSQWNjZXNzUmVzdHJpY3Rpb25zGAEgASgN",
          "EiIKCkJyb3dzZU5hbWUYAiABKAsyDi5RdWFsaWZpZWROYW1lEiMKC0Rlc2Ny",
          "aXB0aW9uGAMgASgLMg4uTG9jYWxpemVkVGV4dBIjCgtEaXNwbGF5TmFtZRgE",
          "IAEoCzIOLkxvY2FsaXplZFRleHQSFQoNRXZlbnROb3RpZmllchgFIAEoDRIp",
          "CgpfTm9kZUNsYXNzGAYgASgOMhUuT2JqZWN0Tm9kZS5Ob2RlQ2xhc3MSGAoH",
          "X05vZGVJZBgHIAEoCzIHLk5vZGVJZBIoCgpSZWZlcmVuY2VzGAggASgLMhQu",
          "TGlzdE9mUmVmZXJlbmNlTm9kZRIyCg9Sb2xlUGVybWlzc2lvbnMYCSABKAsy",
          "GS5MaXN0T2ZSb2xlUGVybWlzc2lvblR5cGUSNgoTVXNlclJvbGVQZXJtaXNz",
          "aW9ucxgKIAEoCzIZLkxpc3RPZlJvbGVQZXJtaXNzaW9uVHlwZRIVCg1Vc2Vy",
          "V3JpdGVNYXNrGAsgASgNEhEKCVdyaXRlTWFzaxgMIAEoDSKAAgoJTm9kZUNs",
          "YXNzEhkKFU5vZGVDbGFzc19EYXRhVHlwZV82NBABEhYKEk5vZGVDbGFzc19N",
          "ZXRob2RfNBACEhoKFk5vZGVDbGFzc19PYmplY3RUeXBlXzgQAxIWChJOb2Rl",
          "Q2xhc3NfT2JqZWN0XzEQBBIeChpOb2RlQ2xhc3NfUmVmZXJlbmNlVHlwZV8z",
          "MhAFEhsKF05vZGVDbGFzc19VbnNwZWNpZmllZF8wEAYSHQoZTm9kZUNsYXNz",
          "X1ZhcmlhYmxlVHlwZV8xNhAHEhgKFE5vZGVDbGFzc19WYXJpYWJsZV8yEAgS",
          "FgoSTm9kZUNsYXNzX1ZpZXdfMTI4EAkiugUKDk9iamVjdFR5cGVOb2RlEhoK",
          "EkFjY2Vzc1Jlc3RyaWN0aW9ucxgBIAEoDRIiCgpCcm93c2VOYW1lGAIgASgL",
          "Mg4uUXVhbGlmaWVkTmFtZRIjCgtEZXNjcmlwdGlvbhgDIAEoCzIOLkxvY2Fs",
          "aXplZFRleHQSIwoLRGlzcGxheU5hbWUYBCABKAsyDi5Mb2NhbGl6ZWRUZXh0",
          "EhIKCklzQWJzdHJhY3QYBSABKAgSLQoKX05vZGVDbGFzcxgGIAEoDjIZLk9i",
          "amVjdFR5cGVOb2RlLk5vZGVDbGFzcxIYCgdfTm9kZUlkGAcgASgLMgcuTm9k",
          "ZUlkEigKClJlZmVyZW5jZXMYCCABKAsyFC5MaXN0T2ZSZWZlcmVuY2VOb2Rl",
          "EjIKD1JvbGVQZXJtaXNzaW9ucxgJIAEoCzIZLkxpc3RPZlJvbGVQZXJtaXNz",
          "aW9uVHlwZRI2ChNVc2VyUm9sZVBlcm1pc3Npb25zGAogASgLMhkuTGlzdE9m",
          "Um9sZVBlcm1pc3Npb25UeXBlEhUKDVVzZXJXcml0ZU1hc2sYCyABKA0SEQoJ",
          "V3JpdGVNYXNrGAwgASgNIoACCglOb2RlQ2xhc3MSGQoVTm9kZUNsYXNzX0Rh",
          "dGFUeXBlXzY0EAESFgoSTm9kZUNsYXNzX01ldGhvZF80EAISGgoWTm9kZUNs",
          "YXNzX09iamVjdFR5cGVfOBADEhYKEk5vZGVDbGFzc19PYmplY3RfMRAEEh4K",
          "Gk5vZGVDbGFzc19SZWZlcmVuY2VUeXBlXzMyEAUSGwoXTm9kZUNsYXNzX1Vu",
          "c3BlY2lmaWVkXzAQBhIdChlOb2RlQ2xhc3NfVmFyaWFibGVUeXBlXzE2EAcS",
          "GAoUTm9kZUNsYXNzX1ZhcmlhYmxlXzIQCBIWChJOb2RlQ2xhc3NfVmlld18x",
          "MjgQCSKRAQoNUGFyc2luZ1Jlc3VsdBIyChNEYXRhRGlhZ25vc3RpY0luZm9z",
          "GAEgASgLMhUuTGlzdE9mRGlhZ25vc3RpY0luZm8SKgoPRGF0YVN0YXR1c0Nv",
          "ZGVzGAIgASgLMhEuTGlzdE9mU3RhdHVzQ29kZRIgCgtfU3RhdHVzQ29kZRgD",
          "IAEoCzILLlN0YXR1c0NvZGUi4QMKGlByb2dyYW1EaWFnbm9zdGljMkRhdGFU",
          "eXBlEhgKEENyZWF0ZUNsaWVudE5hbWUYASABKAkSIAoPQ3JlYXRlU2Vzc2lv",
          "bklkGAIgASgLMgcuTm9kZUlkEh4KFkludm9jYXRpb25DcmVhdGlvblRpbWUY",
          "AyABKAMSFgoOTGFzdE1ldGhvZENhbGwYBCABKAkSGgoSTGFzdE1ldGhvZENh",
          "bGxUaW1lGAUgASgDEjEKGExhc3RNZXRob2RJbnB1dEFyZ3VtZW50cxgGIAEo",
          "CzIPLkxpc3RPZkFyZ3VtZW50Ei0KFUxhc3RNZXRob2RJbnB1dFZhbHVlcxgH",
          "IAEoCzIOLkxpc3RPZlZhcmlhbnQSMgoZTGFzdE1ldGhvZE91dHB1dEFyZ3Vt",
          "ZW50cxgIIAEoCzIPLkxpc3RPZkFyZ3VtZW50Ei4KFkxhc3RNZXRob2RPdXRw",
          "dXRWYWx1ZXMYCSABKAsyDi5MaXN0T2ZWYXJpYW50EisKFkxhc3RNZXRob2RS",
          "ZXR1cm5TdGF0dXMYCiABKAsyCy5TdGF0dXNDb2RlEiQKE0xhc3RNZXRob2RT",
          "ZXNzaW9uSWQYCyABKAsyBy5Ob2RlSWQSGgoSTGFzdFRyYW5zaXRpb25UaW1l",
          "GAwgASgDIogCChlQdWJsaXNoZWRWYXJpYWJsZURhdGFUeXBlEhMKC0F0dHJp",
          "YnV0ZUlkGAEgASgNEhQKDERlYWRiYW5kVHlwZRgCIAEoDRIVCg1EZWFkYmFu",
          "ZFZhbHVlGAMgASgBEhIKCkluZGV4UmFuZ2UYBCABKAkSMAoSTWV0YURhdGFQ",
          "cm9wZXJ0aWVzGAUgASgLMhQuTGlzdE9mUXVhbGlmaWVkTmFtZRIiChFQdWJs",
          "aXNoZWRWYXJpYWJsZRgGIAEoCzIHLk5vZGVJZBIcChRTYW1wbGluZ0ludGVy",
          "dmFsSGludBgHIAEoARIhCg9TdWJzdGl0dXRlVmFsdWUYCCABKAsyCC5WYXJp",
          "YW50InwKDFF1ZXJ5RGF0YVNldBIfCgZOb2RlSWQYASABKAsyDy5FeHBhbmRl",
          "ZE5vZGVJZBIrChJUeXBlRGVmaW5pdGlvbk5vZGUYAiABKAsyDy5FeHBhbmRl",
          "ZE5vZGVJZBIeCgZWYWx1ZXMYAyABKAsyDi5MaXN0T2ZWYXJpYW50IrYBChRS",
          "ZWFkUHJvY2Vzc2VkRGV0YWlscxI4ChdfQWdncmVnYXRlQ29uZmlndXJhdGlv",
          "bhgBIAEoCzIXLkFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24SJAoNQWdncmVnYXRl",
          "VHlwZRgCIAEoCzINLkxpc3RPZk5vZGVJZBIPCgdFbmRUaW1lGAMgASgDEhoK",
          "ElByb2Nlc3NpbmdJbnRlcnZhbBgEIAEoARIRCglTdGFydFRpbWUYBSABKAMi",
          "+AUKEVJlZmVyZW5jZVR5cGVOb2RlEhoKEkFjY2Vzc1Jlc3RyaWN0aW9ucxgB",
          "IAEoDRIiCgpCcm93c2VOYW1lGAIgASgLMg4uUXVhbGlmaWVkTmFtZRIjCgtE",
          "ZXNjcmlwdGlvbhgDIAEoCzIOLkxvY2FsaXplZFRleHQSIwoLRGlzcGxheU5h",
          "bWUYBCABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0ludmVyc2VOYW1lGAUgASgL",
          "Mg4uTG9jYWxpemVkVGV4dBISCgpJc0Fic3RyYWN0GAYgASgIEjAKCl9Ob2Rl",
          "Q2xhc3MYByABKA4yHC5SZWZlcmVuY2VUeXBlTm9kZS5Ob2RlQ2xhc3MSGAoH",
          "X05vZGVJZBgIIAEoCzIHLk5vZGVJZBIoCgpSZWZlcmVuY2VzGAkgASgLMhQu",
          "TGlzdE9mUmVmZXJlbmNlTm9kZRIyCg9Sb2xlUGVybWlzc2lvbnMYCiABKAsy",
          "GS5MaXN0T2ZSb2xlUGVybWlzc2lvblR5cGUSEQoJU3ltbWV0cmljGAsgASgI",
          "EjYKE1VzZXJSb2xlUGVybWlzc2lvbnMYDCABKAsyGS5MaXN0T2ZSb2xlUGVy",
          "bWlzc2lvblR5cGUSFQoNVXNlcldyaXRlTWFzaxgNIAEoDRIRCglXcml0ZU1h",
          "c2sYDiABKA0igAIKCU5vZGVDbGFzcxIZChVOb2RlQ2xhc3NfRGF0YVR5cGVf",
          "NjQQARIWChJOb2RlQ2xhc3NfTWV0aG9kXzQQAhIaChZOb2RlQ2xhc3NfT2Jq",
          "ZWN0VHlwZV84EAMSFgoSTm9kZUNsYXNzX09iamVjdF8xEAQSHgoaTm9kZUNs",
          "YXNzX1JlZmVyZW5jZVR5cGVfMzIQBRIbChdOb2RlQ2xhc3NfVW5zcGVjaWZp",
          "ZWRfMBAGEh0KGU5vZGVDbGFzc19WYXJpYWJsZVR5cGVfMTYQBxIYChROb2Rl",
          "Q2xhc3NfVmFyaWFibGVfMhAIEhYKEk5vZGVDbGFzc19WaWV3XzEyOBAJIqYD",
          "ChBSZWdpc3RlcmVkU2VydmVyEiQKDURpc2NvdmVyeVVybHMYASABKAsyDS5M",
          "aXN0T2ZTdHJpbmcSGAoQR2F0ZXdheVNlcnZlclVyaRgCIAEoCRIQCghJc09u",
          "bGluZRgDIAEoCBISCgpQcm9kdWN0VXJpGAQgASgJEhkKEVNlbWFwaG9yZUZp",
          "bGVQYXRoGAUgASgJEikKC1NlcnZlck5hbWVzGAYgASgLMhQuTGlzdE9mTG9j",
          "YWxpemVkVGV4dBI1CgpTZXJ2ZXJUeXBlGAcgASgOMiEuUmVnaXN0ZXJlZFNl",
          "cnZlci5BcHBsaWNhdGlvblR5cGUSEQoJU2VydmVyVXJpGAggASgJIpsBCg9B",
          "cHBsaWNhdGlvblR5cGUSJQohQXBwbGljYXRpb25UeXBlX0NsaWVudEFuZFNl",
          "cnZlcl8yEAESHAoYQXBwbGljYXRpb25UeXBlX0NsaWVudF8xEAISJQohQXBw",
          "bGljYXRpb25UeXBlX0Rpc2NvdmVyeVNlcnZlcl8zEAMSHAoYQXBwbGljYXRp",
          "b25UeXBlX1NlcnZlcl8wEAQiPAoMUmVsYXRpdmVQYXRoEiwKCEVsZW1lbnRz",
          "GAEgASgLMhouTGlzdE9mUmVsYXRpdmVQYXRoRWxlbWVudCLRAQoNUmVxdWVz",
          "dEhlYWRlchIqChBBZGRpdGlvbmFsSGVhZGVyGAEgASgLMhAuRXh0ZW5zaW9u",
          "T2JqZWN0EhQKDEF1ZGl0RW50cnlJZBgCIAEoCRIkChNBdXRoZW50aWNhdGlv",
          "blRva2VuGAMgASgLMgcuTm9kZUlkEhUKDVJlcXVlc3RIYW5kbGUYBCABKA0S",
          "GQoRUmV0dXJuRGlhZ25vc3RpY3MYBSABKA0SEwoLVGltZW91dEhpbnQYBiAB",
          "KA0SEQoJVGltZXN0YW1wGAcgASgDItsBCg5SZXNwb25zZUhlYWRlchIqChBB",
          "ZGRpdGlvbmFsSGVhZGVyGAEgASgLMhAuRXh0ZW5zaW9uT2JqZWN0EhUKDVJl",
          "cXVlc3RIYW5kbGUYAiABKA0SKwoSU2VydmljZURpYWdub3N0aWNzGAMgASgL",
          "Mg8uRGlhZ25vc3RpY0luZm8SIgoNU2VydmljZVJlc3VsdBgEIAEoCzILLlN0",
          "YXR1c0NvZGUSIgoLU3RyaW5nVGFibGUYBSABKAsyDS5MaXN0T2ZTdHJpbmcS",
          "EQoJVGltZXN0YW1wGAYgASgDIjgKDFNlcnZpY2VGYXVsdBIoCg9fUmVzcG9u",
          "c2VIZWFkZXIYASABKAsyDy5SZXNwb25zZUhlYWRlciLiDwoaU2Vzc2lvbkRp",
          "YWdub3N0aWNzRGF0YVR5cGUSHAoUQWN0dWFsU2Vzc2lvblRpbWVvdXQYASAB",
          "KAESLgoNQWRkTm9kZXNDb3VudBgCIAEoCzIXLlNlcnZpY2VDb3VudGVyRGF0",
          "YVR5cGUSMwoSQWRkUmVmZXJlbmNlc0NvdW50GAMgASgLMhcuU2VydmljZUNv",
          "dW50ZXJEYXRhVHlwZRIsCgtCcm93c2VDb3VudBgEIAEoCzIXLlNlcnZpY2VD",
          "b3VudGVyRGF0YVR5cGUSMAoPQnJvd3NlTmV4dENvdW50GAUgASgLMhcuU2Vy",
          "dmljZUNvdW50ZXJEYXRhVHlwZRIqCglDYWxsQ291bnQYBiABKAsyFy5TZXJ2",
          "aWNlQ291bnRlckRhdGFUeXBlEhwKFENsaWVudENvbm5lY3Rpb25UaW1lGAcg",
          "ASgDEjIKEUNsaWVudERlc2NyaXB0aW9uGAggASgLMhcuQXBwbGljYXRpb25E",
          "ZXNjcmlwdGlvbhIdChVDbGllbnRMYXN0Q29udGFjdFRpbWUYCSABKAMSOgoZ",
          "Q3JlYXRlTW9uaXRvcmVkSXRlbXNDb3VudBgKIAEoCzIXLlNlcnZpY2VDb3Vu",
          "dGVyRGF0YVR5cGUSOAoXQ3JlYXRlU3Vic2NyaXB0aW9uQ291bnQYCyABKAsy",
          "Fy5TZXJ2aWNlQ291bnRlckRhdGFUeXBlEiIKGkN1cnJlbnRNb25pdG9yZWRJ",
          "dGVtc0NvdW50GAwgASgNEiUKHUN1cnJlbnRQdWJsaXNoUmVxdWVzdHNJblF1",
          "ZXVlGA0gASgNEiEKGUN1cnJlbnRTdWJzY3JpcHRpb25zQ291bnQYDiABKA0S",
          "OgoZRGVsZXRlTW9uaXRvcmVkSXRlbXNDb3VudBgPIAEoCzIXLlNlcnZpY2VD",
          "b3VudGVyRGF0YVR5cGUSMQoQRGVsZXRlTm9kZXNDb3VudBgQIAEoCzIXLlNl",
          "cnZpY2VDb3VudGVyRGF0YVR5cGUSNgoVRGVsZXRlUmVmZXJlbmNlc0NvdW50",
          "GBEgASgLMhcuU2VydmljZUNvdW50ZXJEYXRhVHlwZRI5ChhEZWxldGVTdWJz",
          "Y3JpcHRpb25zQ291bnQYEiABKAsyFy5TZXJ2aWNlQ291bnRlckRhdGFUeXBl",
          "EhMKC0VuZHBvaW50VXJsGBMgASgJEjEKEEhpc3RvcnlSZWFkQ291bnQYFCAB",
          "KAsyFy5TZXJ2aWNlQ291bnRlckRhdGFUeXBlEjMKEkhpc3RvcnlVcGRhdGVD",
          "b3VudBgVIAEoCzIXLlNlcnZpY2VDb3VudGVyRGF0YVR5cGUSIAoJTG9jYWxl",
          "SWRzGBYgASgLMg0uTGlzdE9mU3RyaW5nEh4KFk1heFJlc3BvbnNlTWVzc2Fn",
          "ZVNpemUYFyABKA0SOgoZTW9kaWZ5TW9uaXRvcmVkSXRlbXNDb3VudBgYIAEo",
          "CzIXLlNlcnZpY2VDb3VudGVyRGF0YVR5cGUSOAoXTW9kaWZ5U3Vic2NyaXB0",
          "aW9uQ291bnQYGSABKAsyFy5TZXJ2aWNlQ291bnRlckRhdGFUeXBlEi0KDFB1",
          "Ymxpc2hDb3VudBgaIAEoCzIXLlNlcnZpY2VDb3VudGVyRGF0YVR5cGUSMAoP",
          "UXVlcnlGaXJzdENvdW50GBsgASgLMhcuU2VydmljZUNvdW50ZXJEYXRhVHlw",
          "ZRIvCg5RdWVyeU5leHRDb3VudBgcIAEoCzIXLlNlcnZpY2VDb3VudGVyRGF0",
          "YVR5cGUSKgoJUmVhZENvdW50GB0gASgLMhcuU2VydmljZUNvdW50ZXJEYXRh",
          "VHlwZRIzChJSZWdpc3Rlck5vZGVzQ291bnQYHiABKAsyFy5TZXJ2aWNlQ291",
          "bnRlckRhdGFUeXBlEi8KDlJlcHVibGlzaENvdW50GB8gASgLMhcuU2Vydmlj",
          "ZUNvdW50ZXJEYXRhVHlwZRIRCglTZXJ2ZXJVcmkYICABKAkSGgoJU2Vzc2lv",
          "bklkGCEgASgLMgcuTm9kZUlkEhMKC1Nlc3Npb25OYW1lGCIgASgJEjcKFlNl",
          "dE1vbml0b3JpbmdNb2RlQ291bnQYIyABKAsyFy5TZXJ2aWNlQ291bnRlckRh",
          "dGFUeXBlEjcKFlNldFB1Ymxpc2hpbmdNb2RlQ291bnQYJCABKAsyFy5TZXJ2",
          "aWNlQ291bnRlckRhdGFUeXBlEjMKElNldFRyaWdnZXJpbmdDb3VudBglIAEo",
          "CzIXLlNlcnZpY2VDb3VudGVyRGF0YVR5cGUSMgoRVG90YWxSZXF1ZXN0Q291",
          "bnQYJiABKAsyFy5TZXJ2aWNlQ291bnRlckRhdGFUeXBlEjsKGlRyYW5zZmVy",
          "U3Vic2NyaXB0aW9uc0NvdW50GCcgASgLMhcuU2VydmljZUNvdW50ZXJEYXRh",
          "VHlwZRJDCiJUcmFuc2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkc0NvdW50GCgg",
          "ASgLMhcuU2VydmljZUNvdW50ZXJEYXRhVHlwZRIgChhVbmF1dGhvcml6ZWRS",
          "ZXF1ZXN0Q291bnQYKSABKA0SNQoUVW5yZWdpc3Rlck5vZGVzQ291bnQYKiAB",
          "KAsyFy5TZXJ2aWNlQ291bnRlckRhdGFUeXBlEisKCldyaXRlQ291bnQYKyAB",
          "KAsyFy5TZXJ2aWNlQ291bnRlckRhdGFUeXBlIrYCChhTZXRNb25pdG9yaW5n",
          "TW9kZVJlcXVlc3QSJwoQTW9uaXRvcmVkSXRlbUlkcxgBIAEoCzINLkxpc3RP",
          "ZlVJbnQzMhJBCg9fTW9uaXRvcmluZ01vZGUYAiABKA4yKC5TZXRNb25pdG9y",
          "aW5nTW9kZVJlcXVlc3QuTW9uaXRvcmluZ01vZGUSJgoOX1JlcXVlc3RIZWFk",
          "ZXIYAyABKAsyDi5SZXF1ZXN0SGVhZGVyEhYKDlN1YnNjcmlwdGlvbklkGAQg",
          "ASgNIm4KDk1vbml0b3JpbmdNb2RlEh0KGU1vbml0b3JpbmdNb2RlX0Rpc2Fi",
          "bGVkXzAQARIeChpNb25pdG9yaW5nTW9kZV9SZXBvcnRpbmdfMhACEh0KGU1v",
          "bml0b3JpbmdNb2RlX1NhbXBsaW5nXzEQAyKZAQoZU2V0TW9uaXRvcmluZ01v",
          "ZGVSZXNwb25zZRIuCg9EaWFnbm9zdGljSW5mb3MYASABKAsyFS5MaXN0T2ZE",
          "aWFnbm9zdGljSW5mbxIoCg9fUmVzcG9uc2VIZWFkZXIYAiABKAsyDy5SZXNw",
          "b25zZUhlYWRlchIiCgdSZXN1bHRzGAMgASgLMhEuTGlzdE9mU3RhdHVzQ29k",
          "ZSKFAQoYU2V0UHVibGlzaGluZ01vZGVSZXF1ZXN0EhkKEVB1Ymxpc2hpbmdF",
          "bmFibGVkGAEgASgIEiYKDl9SZXF1ZXN0SGVhZGVyGAIgASgLMg4uUmVxdWVz",
          "dEhlYWRlchImCg9TdWJzY3JpcHRpb25JZHMYAyABKAsyDS5MaXN0T2ZVSW50",
          "MzIimQEKGVNldFB1Ymxpc2hpbmdNb2RlUmVzcG9uc2USLgoPRGlhZ25vc3Rp",
          "Y0luZm9zGAEgASgLMhUuTGlzdE9mRGlhZ25vc3RpY0luZm8SKAoPX1Jlc3Bv",
          "bnNlSGVhZGVyGAIgASgLMg8uUmVzcG9uc2VIZWFkZXISIgoHUmVzdWx0cxgD",
          "IAEoCzIRLkxpc3RPZlN0YXR1c0NvZGUiuQEKFFNldFRyaWdnZXJpbmdSZXF1",
          "ZXN0EiEKCkxpbmtzVG9BZGQYASABKAsyDS5MaXN0T2ZVSW50MzISJAoNTGlu",
          "a3NUb1JlbW92ZRgCIAEoCzINLkxpc3RPZlVJbnQzMhImCg5fUmVxdWVzdEhl",
          "YWRlchgDIAEoCzIOLlJlcXVlc3RIZWFkZXISFgoOU3Vic2NyaXB0aW9uSWQY",
          "BCABKA0SGAoQVHJpZ2dlcmluZ0l0ZW1JZBgFIAEoDSL7AQoVU2V0VHJpZ2dl",
          "cmluZ1Jlc3BvbnNlEjEKEkFkZERpYWdub3N0aWNJbmZvcxgBIAEoCzIVLkxp",
          "c3RPZkRpYWdub3N0aWNJbmZvEiUKCkFkZFJlc3VsdHMYAiABKAsyES5MaXN0",
          "T2ZTdGF0dXNDb2RlEjQKFVJlbW92ZURpYWdub3N0aWNJbmZvcxgDIAEoCzIV",
          "Lkxpc3RPZkRpYWdub3N0aWNJbmZvEigKDVJlbW92ZVJlc3VsdHMYBCABKAsy",
          "ES5MaXN0T2ZTdGF0dXNDb2RlEigKD19SZXNwb25zZUhlYWRlchgFIAEoCzIP",
          "LlJlc3BvbnNlSGVhZGVyIo4BChZTaW1wbGVBdHRyaWJ1dGVPcGVyYW5kEhMK",
          "C0F0dHJpYnV0ZUlkGAEgASgNEigKCkJyb3dzZVBhdGgYAiABKAsyFC5MaXN0",
          "T2ZRdWFsaWZpZWROYW1lEhIKCkluZGV4UmFuZ2UYAyABKAkSIQoQVHlwZURl",
          "ZmluaXRpb25JZBgEIAEoCzIHLk5vZGVJZCJhChhTdGF0dXNDaGFuZ2VOb3Rp",
          "ZmljYXRpb24SKAoPX0RpYWdub3N0aWNJbmZvGAEgASgLMg8uRGlhZ25vc3Rp",
          "Y0luZm8SGwoGU3RhdHVzGAIgASgLMgsuU3RhdHVzQ29kZSJaCgxTdGF0dXNS",
          "ZXN1bHQSKAoPX0RpYWdub3N0aWNJbmZvGAEgASgLMg8uRGlhZ25vc3RpY0lu",
          "Zm8SIAoLX1N0YXR1c0NvZGUYAiABKAsyCy5TdGF0dXNDb2RlIpYDChNTdHJ1",
          "Y3R1cmVEZWZpbml0aW9uEh0KDEJhc2VEYXRhVHlwZRgBIAEoCzIHLk5vZGVJ",
          "ZBIiChFEZWZhdWx0RW5jb2RpbmdJZBgCIAEoCzIHLk5vZGVJZBIlCgZGaWVs",
          "ZHMYAyABKAsyFS5MaXN0T2ZTdHJ1Y3R1cmVGaWVsZBI6Cg5fU3RydWN0dXJl",
          "VHlwZRgEIAEoDjIiLlN0cnVjdHVyZURlZmluaXRpb24uU3RydWN0dXJlVHlw",
          "ZSLYAQoNU3RydWN0dXJlVHlwZRIvCitTdHJ1Y3R1cmVUeXBlX1N0cnVjdHVy",
          "ZVdpdGhPcHRpb25hbEZpZWxkc18xEAESLworU3RydWN0dXJlVHlwZV9TdHJ1",
          "Y3R1cmVXaXRoU3VidHlwZWRWYWx1ZXNfMxACEh0KGVN0cnVjdHVyZVR5cGVf",
          "U3RydWN0dXJlXzAQAxIrCidTdHJ1Y3R1cmVUeXBlX1VuaW9uV2l0aFN1YnR5",
          "cGVkVmFsdWVzXzQQBBIZChVTdHJ1Y3R1cmVUeXBlX1VuaW9uXzIQBSKFAQoU",
          "U3RydWN0dXJlRGVzY3JpcHRpb24SGwoKRGF0YVR5cGVJZBgBIAEoCzIHLk5v",
          "ZGVJZBIcCgROYW1lGAIgASgLMg4uUXVhbGlmaWVkTmFtZRIyChRfU3RydWN0",
          "dXJlRGVmaW5pdGlvbhgDIAEoCzIULlN0cnVjdHVyZURlZmluaXRpb24inAEK",
          "GVN1YnNjcmliZWREYXRhU2V0RGF0YVR5cGUSFgoOUGFyZW50Tm9kZU5hbWUY",
          "ASABKAkSMgoPUm9sZVBlcm1pc3Npb25zGAIgASgLMhkuTGlzdE9mUm9sZVBl",
          "cm1pc3Npb25UeXBlEjMKD1RhcmdldFZhcmlhYmxlcxgDIAEoCzIaLkxpc3RP",
          "ZkZpZWxkVGFyZ2V0RGF0YVR5cGUibQofU3Vic2NyaWJlZERhdGFTZXRNaXJy",
          "b3JEYXRhVHlwZRIWCg5QYXJlbnROb2RlTmFtZRgBIAEoCRIyCg9Sb2xlUGVy",
          "bWlzc2lvbnMYAiABKAsyGS5MaXN0T2ZSb2xlUGVybWlzc2lvblR5cGUiTgoX",
          "VGFyZ2V0VmFyaWFibGVzRGF0YVR5cGUSMwoPVGFyZ2V0VmFyaWFibGVzGAEg",
          "ASgLMhouTGlzdE9mRmllbGRUYXJnZXREYXRhVHlwZSJxCgtUaHJlZURGcmFt",
          "ZRI5ChRDYXJ0ZXNpYW5Db29yZGluYXRlcxgBIAEoCzIbLlRocmVlRENhcnRl",
          "c2lhbkNvb3JkaW5hdGVzEicKC09yaWVudGF0aW9uGAIgASgLMhIuVGhyZWVE",
          "T3JpZW50YXRpb24iiQEKHFRyYW5zZmVyU3Vic2NyaXB0aW9uc1JlcXVlc3QS",
          "JgoOX1JlcXVlc3RIZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyEhkKEVNl",
          "bmRJbml0aWFsVmFsdWVzGAIgASgIEiYKD1N1YnNjcmlwdGlvbklkcxgDIAEo",
          "CzINLkxpc3RPZlVJbnQzMiKhAQodVHJhbnNmZXJTdWJzY3JpcHRpb25zUmVz",
          "cG9uc2USLgoPRGlhZ25vc3RpY0luZm9zGAEgASgLMhUuTGlzdE9mRGlhZ25v",
          "c3RpY0luZm8SKAoPX1Jlc3BvbnNlSGVhZGVyGAIgASgLMg8uUmVzcG9uc2VI",
          "ZWFkZXISJgoHUmVzdWx0cxgDIAEoCzIVLkxpc3RPZlRyYW5zZmVyUmVzdWx0",
          "IoMHCghUeXBlTm9kZRIaChJBY2Nlc3NSZXN0cmljdGlvbnMYASABKA0SJgoP",
          "QXJyYXlEaW1lbnNpb25zGAIgASgLMg0uTGlzdE9mVUludDMyEiIKCkJyb3dz",
          "ZU5hbWUYAyABKAsyDi5RdWFsaWZpZWROYW1lEhkKCERhdGFUeXBlGAQgASgL",
          "MgcuTm9kZUlkEiwKEkRhdGFUeXBlRGVmaW5pdGlvbhgFIAEoCzIQLkV4dGVu",
          "c2lvbk9iamVjdBIjCgtEZXNjcmlwdGlvbhgGIAEoCzIOLkxvY2FsaXplZFRl",
          "eHQSIwoLRGlzcGxheU5hbWUYByABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0lu",
          "dmVyc2VOYW1lGAggASgLMg4uTG9jYWxpemVkVGV4dBISCgpJc0Fic3RyYWN0",
          "GAkgASgIEicKCl9Ob2RlQ2xhc3MYCiABKA4yEy5UeXBlTm9kZS5Ob2RlQ2xh",
          "c3MSGAoHX05vZGVJZBgLIAEoCzIHLk5vZGVJZBIoCgpSZWZlcmVuY2VzGAwg",
          "ASgLMhQuTGlzdE9mUmVmZXJlbmNlTm9kZRIyCg9Sb2xlUGVybWlzc2lvbnMY",
          "DSABKAsyGS5MaXN0T2ZSb2xlUGVybWlzc2lvblR5cGUSEQoJU3ltbWV0cmlj",
          "GA4gASgIEjYKE1VzZXJSb2xlUGVybWlzc2lvbnMYDyABKAsyGS5MaXN0T2ZS",
          "b2xlUGVybWlzc2lvblR5cGUSFQoNVXNlcldyaXRlTWFzaxgQIAEoDRIXCgVW",
          "YWx1ZRgRIAEoCzIILlZhcmlhbnQSEQoJVmFsdWVSYW5rGBIgASgFEhEKCVdy",
          "aXRlTWFzaxgTIAEoDSKAAgoJTm9kZUNsYXNzEhkKFU5vZGVDbGFzc19EYXRh",
          "VHlwZV82NBABEhYKEk5vZGVDbGFzc19NZXRob2RfNBACEhoKFk5vZGVDbGFz",
          "c19PYmplY3RUeXBlXzgQAxIWChJOb2RlQ2xhc3NfT2JqZWN0XzEQBBIeChpO",
          "b2RlQ2xhc3NfUmVmZXJlbmNlVHlwZV8zMhAFEhsKF05vZGVDbGFzc19VbnNw",
          "ZWNpZmllZF8wEAYSHQoZTm9kZUNsYXNzX1ZhcmlhYmxlVHlwZV8xNhAHEhgK",
          "FE5vZGVDbGFzc19WYXJpYWJsZV8yEAgSFgoSTm9kZUNsYXNzX1ZpZXdfMTI4",
          "EAkiagoWVW5yZWdpc3Rlck5vZGVzUmVxdWVzdBIoChFOb2Rlc1RvVW5yZWdp",
          "c3RlchgBIAEoCzINLkxpc3RPZk5vZGVJZBImCg5fUmVxdWVzdEhlYWRlchgC",
          "IAEoCzIOLlJlcXVlc3RIZWFkZXIiQwoXVW5yZWdpc3Rlck5vZGVzUmVzcG9u",
          "c2USKAoPX1Jlc3BvbnNlSGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXIi",
          "sAIKEVVwZGF0ZURhdGFEZXRhaWxzEhgKB19Ob2RlSWQYASABKAsyBy5Ob2Rl",
          "SWQSQgoUUGVyZm9ybUluc2VydFJlcGxhY2UYAiABKA4yJC5VcGRhdGVEYXRh",
          "RGV0YWlscy5QZXJmb3JtVXBkYXRlVHlwZRImCgxVcGRhdGVWYWx1ZXMYAyAB",
          "KAsyEC5MaXN0T2ZEYXRhVmFsdWUilAEKEVBlcmZvcm1VcGRhdGVUeXBlEh4K",
          "GlBlcmZvcm1VcGRhdGVUeXBlX0luc2VydF8xEAESHgoaUGVyZm9ybVVwZGF0",
          "ZVR5cGVfUmVtb3ZlXzQQAhIfChtQZXJmb3JtVXBkYXRlVHlwZV9SZXBsYWNl",
          "XzIQAxIeChpQZXJmb3JtVXBkYXRlVHlwZV9VcGRhdGVfMxAEIsICChpVcGRh",
          "dGVTdHJ1Y3R1cmVEYXRhRGV0YWlscxIYCgdfTm9kZUlkGAEgASgLMgcuTm9k",
          "ZUlkEksKFFBlcmZvcm1JbnNlcnRSZXBsYWNlGAIgASgOMi0uVXBkYXRlU3Ry",
          "dWN0dXJlRGF0YURldGFpbHMuUGVyZm9ybVVwZGF0ZVR5cGUSJgoMVXBkYXRl",
          "VmFsdWVzGAMgASgLMhAuTGlzdE9mRGF0YVZhbHVlIpQBChFQZXJmb3JtVXBk",
          "YXRlVHlwZRIeChpQZXJmb3JtVXBkYXRlVHlwZV9JbnNlcnRfMRABEh4KGlBl",
          "cmZvcm1VcGRhdGVUeXBlX1JlbW92ZV80EAISHwobUGVyZm9ybVVwZGF0ZVR5",
          "cGVfUmVwbGFjZV8yEAMSHgoaUGVyZm9ybVVwZGF0ZVR5cGVfVXBkYXRlXzMQ",
          "BCL4AgoSVmFyaWFibGVBdHRyaWJ1dGVzEhMKC0FjY2Vzc0xldmVsGAEgASgN",
          "EiYKD0FycmF5RGltZW5zaW9ucxgCIAEoCzINLkxpc3RPZlVJbnQzMhIZCghE",
          "YXRhVHlwZRgDIAEoCzIHLk5vZGVJZBIjCgtEZXNjcmlwdGlvbhgEIAEoCzIO",
          "LkxvY2FsaXplZFRleHQSIwoLRGlzcGxheU5hbWUYBSABKAsyDi5Mb2NhbGl6",
          "ZWRUZXh0EhMKC0hpc3Rvcml6aW5nGAYgASgIEh8KF01pbmltdW1TYW1wbGlu",
          "Z0ludGVydmFsGAcgASgBEhsKE1NwZWNpZmllZEF0dHJpYnV0ZXMYCCABKA0S",
          "FwoPVXNlckFjY2Vzc0xldmVsGAkgASgNEhUKDVVzZXJXcml0ZU1hc2sYCiAB",
          "KA0SFwoFVmFsdWUYCyABKAsyCC5WYXJpYW50EhEKCVZhbHVlUmFuaxgMIAEo",
          "BRIRCglXcml0ZU1hc2sYDSABKA0ijAcKDFZhcmlhYmxlTm9kZRITCgtBY2Nl",
          "c3NMZXZlbBgBIAEoDRIVCg1BY2Nlc3NMZXZlbEV4GAIgASgNEhoKEkFjY2Vz",
          "c1Jlc3RyaWN0aW9ucxgDIAEoDRImCg9BcnJheURpbWVuc2lvbnMYBCABKAsy",
          "DS5MaXN0T2ZVSW50MzISIgoKQnJvd3NlTmFtZRgFIAEoCzIOLlF1YWxpZmll",
          "ZE5hbWUSGQoIRGF0YVR5cGUYBiABKAsyBy5Ob2RlSWQSIwoLRGVzY3JpcHRp",
          "b24YByABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0Rpc3BsYXlOYW1lGAggASgL",
          "Mg4uTG9jYWxpemVkVGV4dBITCgtIaXN0b3JpemluZxgJIAEoCBIfChdNaW5p",
          "bXVtU2FtcGxpbmdJbnRlcnZhbBgKIAEoARIrCgpfTm9kZUNsYXNzGAsgASgO",
          "MhcuVmFyaWFibGVOb2RlLk5vZGVDbGFzcxIYCgdfTm9kZUlkGAwgASgLMgcu",
          "Tm9kZUlkEigKClJlZmVyZW5jZXMYDSABKAsyFC5MaXN0T2ZSZWZlcmVuY2VO",
          "b2RlEjIKD1JvbGVQZXJtaXNzaW9ucxgOIAEoCzIZLkxpc3RPZlJvbGVQZXJt",
          "aXNzaW9uVHlwZRIXCg9Vc2VyQWNjZXNzTGV2ZWwYDyABKA0SNgoTVXNlclJv",
          "bGVQZXJtaXNzaW9ucxgQIAEoCzIZLkxpc3RPZlJvbGVQZXJtaXNzaW9uVHlw",
          "ZRIVCg1Vc2VyV3JpdGVNYXNrGBEgASgNEhcKBVZhbHVlGBIgASgLMgguVmFy",
          "aWFudBIRCglWYWx1ZVJhbmsYEyABKAUSEQoJV3JpdGVNYXNrGBQgASgNIoAC",
          "CglOb2RlQ2xhc3MSGQoVTm9kZUNsYXNzX0RhdGFUeXBlXzY0EAESFgoSTm9k",
          "ZUNsYXNzX01ldGhvZF80EAISGgoWTm9kZUNsYXNzX09iamVjdFR5cGVfOBAD",
          "EhYKEk5vZGVDbGFzc19PYmplY3RfMRAEEh4KGk5vZGVDbGFzc19SZWZlcmVu",
          "Y2VUeXBlXzMyEAUSGwoXTm9kZUNsYXNzX1Vuc3BlY2lmaWVkXzAQBhIdChlO",
          "b2RlQ2xhc3NfVmFyaWFibGVUeXBlXzE2EAcSGAoUTm9kZUNsYXNzX1Zhcmlh",
          "YmxlXzIQCBIWChJOb2RlQ2xhc3NfVmlld18xMjgQCSKsAgoWVmFyaWFibGVU",
          "eXBlQXR0cmlidXRlcxImCg9BcnJheURpbWVuc2lvbnMYASABKAsyDS5MaXN0",
          "T2ZVSW50MzISGQoIRGF0YVR5cGUYAiABKAsyBy5Ob2RlSWQSIwoLRGVzY3Jp",
          "cHRpb24YAyABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0Rpc3BsYXlOYW1lGAQg",
          "ASgLMg4uTG9jYWxpemVkVGV4dBISCgpJc0Fic3RyYWN0GAUgASgIEhsKE1Nw",
          "ZWNpZmllZEF0dHJpYnV0ZXMYBiABKA0SFQoNVXNlcldyaXRlTWFzaxgHIAEo",
          "DRIXCgVWYWx1ZRgIIAEoCzIILlZhcmlhbnQSEQoJVmFsdWVSYW5rGAkgASgF",
          "EhEKCVdyaXRlTWFzaxgKIAEoDSKtBgoQVmFyaWFibGVUeXBlTm9kZRIaChJB",
          "Y2Nlc3NSZXN0cmljdGlvbnMYASABKA0SJgoPQXJyYXlEaW1lbnNpb25zGAIg",
          "ASgLMg0uTGlzdE9mVUludDMyEiIKCkJyb3dzZU5hbWUYAyABKAsyDi5RdWFs",
          "aWZpZWROYW1lEhkKCERhdGFUeXBlGAQgASgLMgcuTm9kZUlkEiMKC0Rlc2Ny",
          "aXB0aW9uGAUgASgLMg4uTG9jYWxpemVkVGV4dBIjCgtEaXNwbGF5TmFtZRgG",
          "IAEoCzIOLkxvY2FsaXplZFRleHQSEgoKSXNBYnN0cmFjdBgHIAEoCBIvCgpf",
          "Tm9kZUNsYXNzGAggASgOMhsuVmFyaWFibGVUeXBlTm9kZS5Ob2RlQ2xhc3MS",
          "GAoHX05vZGVJZBgJIAEoCzIHLk5vZGVJZBIoCgpSZWZlcmVuY2VzGAogASgL",
          "MhQuTGlzdE9mUmVmZXJlbmNlTm9kZRIyCg9Sb2xlUGVybWlzc2lvbnMYCyAB",
          "KAsyGS5MaXN0T2ZSb2xlUGVybWlzc2lvblR5cGUSNgoTVXNlclJvbGVQZXJt",
          "aXNzaW9ucxgMIAEoCzIZLkxpc3RPZlJvbGVQZXJtaXNzaW9uVHlwZRIVCg1V",
          "c2VyV3JpdGVNYXNrGA0gASgNEhcKBVZhbHVlGA4gASgLMgguVmFyaWFudBIR",
          "CglWYWx1ZVJhbmsYDyABKAUSEQoJV3JpdGVNYXNrGBAgASgNIoACCglOb2Rl",
          "Q2xhc3MSGQoVTm9kZUNsYXNzX0RhdGFUeXBlXzY0EAESFgoSTm9kZUNsYXNz",
          "X01ldGhvZF80EAISGgoWTm9kZUNsYXNzX09iamVjdFR5cGVfOBADEhYKEk5v",
          "ZGVDbGFzc19PYmplY3RfMRAEEh4KGk5vZGVDbGFzc19SZWZlcmVuY2VUeXBl",
          "XzMyEAUSGwoXTm9kZUNsYXNzX1Vuc3BlY2lmaWVkXzAQBhIdChlOb2RlQ2xh",
          "c3NfVmFyaWFibGVUeXBlXzE2EAcSGAoUTm9kZUNsYXNzX1ZhcmlhYmxlXzIQ",
          "CBIWChJOb2RlQ2xhc3NfVmlld18xMjgQCSLKBQoIVmlld05vZGUSGgoSQWNj",
          "ZXNzUmVzdHJpY3Rpb25zGAEgASgNEiIKCkJyb3dzZU5hbWUYAiABKAsyDi5R",
          "dWFsaWZpZWROYW1lEhcKD0NvbnRhaW5zTm9Mb29wcxgDIAEoCBIjCgtEZXNj",
          "cmlwdGlvbhgEIAEoCzIOLkxvY2FsaXplZFRleHQSIwoLRGlzcGxheU5hbWUY",
          "BSABKAsyDi5Mb2NhbGl6ZWRUZXh0EhUKDUV2ZW50Tm90aWZpZXIYBiABKA0S",
          "JwoKX05vZGVDbGFzcxgHIAEoDjITLlZpZXdOb2RlLk5vZGVDbGFzcxIYCgdf",
          "Tm9kZUlkGAggASgLMgcuTm9kZUlkEigKClJlZmVyZW5jZXMYCSABKAsyFC5M",
          "aXN0T2ZSZWZlcmVuY2VOb2RlEjIKD1JvbGVQZXJtaXNzaW9ucxgKIAEoCzIZ",
          "Lkxpc3RPZlJvbGVQZXJtaXNzaW9uVHlwZRI2ChNVc2VyUm9sZVBlcm1pc3Np",
          "b25zGAsgASgLMhkuTGlzdE9mUm9sZVBlcm1pc3Npb25UeXBlEhUKDVVzZXJX",
          "cml0ZU1hc2sYDCABKA0SEQoJV3JpdGVNYXNrGA0gASgNIoACCglOb2RlQ2xh",
          "c3MSGQoVTm9kZUNsYXNzX0RhdGFUeXBlXzY0EAESFgoSTm9kZUNsYXNzX01l",
          "dGhvZF80EAISGgoWTm9kZUNsYXNzX09iamVjdFR5cGVfOBADEhYKEk5vZGVD",
          "bGFzc19PYmplY3RfMRAEEh4KGk5vZGVDbGFzc19SZWZlcmVuY2VUeXBlXzMy",
          "EAUSGwoXTm9kZUNsYXNzX1Vuc3BlY2lmaWVkXzAQBhIdChlOb2RlQ2xhc3Nf",
          "VmFyaWFibGVUeXBlXzE2EAcSGAoUTm9kZUNsYXNzX1ZhcmlhYmxlXzIQCBIW",
          "ChJOb2RlQ2xhc3NfVmlld18xMjgQCSKNAQoNV3JpdGVSZXNwb25zZRIuCg9E",
          "aWFnbm9zdGljSW5mb3MYASABKAsyFS5MaXN0T2ZEaWFnbm9zdGljSW5mbxIo",
          "Cg9fUmVzcG9uc2VIZWFkZXIYAiABKAsyDy5SZXNwb25zZUhlYWRlchIiCgdS",
          "ZXN1bHRzGAMgASgLMhEuTGlzdE9mU3RhdHVzQ29kZSJqCgpXcml0ZVZhbHVl",
          "EhMKC0F0dHJpYnV0ZUlkGAEgASgNEhIKCkluZGV4UmFuZ2UYAiABKAkSGAoH",
          "X05vZGVJZBgDIAEoCzIHLk5vZGVJZBIZCgVWYWx1ZRgEIAEoCzIKLkRhdGFW",
          "YWx1ZSKqAgoWQWN0aXZhdGVTZXNzaW9uUmVxdWVzdBInCg9DbGllbnRTaWdu",
          "YXR1cmUYASABKAsyDi5TaWduYXR1cmVEYXRhEkQKGkNsaWVudFNvZnR3YXJl",
          "Q2VydGlmaWNhdGVzGAIgASgLMiAuTGlzdE9mU2lnbmVkU29mdHdhcmVDZXJ0",
          "aWZpY2F0ZRIgCglMb2NhbGVJZHMYAyABKAsyDS5MaXN0T2ZTdHJpbmcSJgoO",
          "X1JlcXVlc3RIZWFkZXIYBCABKAsyDi5SZXF1ZXN0SGVhZGVyEisKEVVzZXJJ",
          "ZGVudGl0eVRva2VuGAUgASgLMhAuRXh0ZW5zaW9uT2JqZWN0EioKElVzZXJU",
          "b2tlblNpZ25hdHVyZRgGIAEoCzIOLlNpZ25hdHVyZURhdGEirAEKF0FjdGl2",
          "YXRlU2Vzc2lvblJlc3BvbnNlEi4KD0RpYWdub3N0aWNJbmZvcxgBIAEoCzIV",
          "Lkxpc3RPZkRpYWdub3N0aWNJbmZvEigKD19SZXNwb25zZUhlYWRlchgCIAEo",
          "CzIPLlJlc3BvbnNlSGVhZGVyEiIKB1Jlc3VsdHMYAyABKAsyES5MaXN0T2ZT",
          "dGF0dXNDb2RlEhMKC1NlcnZlck5vbmNlGAQgASgMIqsECgxBZGROb2Rlc0l0",
          "ZW0SIgoKQnJvd3NlTmFtZRgBIAEoCzIOLlF1YWxpZmllZE5hbWUSKAoOTm9k",
          "ZUF0dHJpYnV0ZXMYAiABKAsyEC5FeHRlbnNpb25PYmplY3QSKwoKX05vZGVD",
          "bGFzcxgDIAEoDjIXLkFkZE5vZGVzSXRlbS5Ob2RlQ2xhc3MSJQoMUGFyZW50",
          "Tm9kZUlkGAQgASgLMg8uRXhwYW5kZWROb2RlSWQSIAoPUmVmZXJlbmNlVHlw",
          "ZUlkGAUgASgLMgcuTm9kZUlkEisKElJlcXVlc3RlZE5ld05vZGVJZBgGIAEo",
          "CzIPLkV4cGFuZGVkTm9kZUlkEicKDlR5cGVEZWZpbml0aW9uGAcgASgLMg8u",
          "RXhwYW5kZWROb2RlSWQigAIKCU5vZGVDbGFzcxIZChVOb2RlQ2xhc3NfRGF0",
          "YVR5cGVfNjQQARIWChJOb2RlQ2xhc3NfTWV0aG9kXzQQAhIaChZOb2RlQ2xh",
          "c3NfT2JqZWN0VHlwZV84EAMSFgoSTm9kZUNsYXNzX09iamVjdF8xEAQSHgoa",
          "Tm9kZUNsYXNzX1JlZmVyZW5jZVR5cGVfMzIQBRIbChdOb2RlQ2xhc3NfVW5z",
          "cGVjaWZpZWRfMBAGEh0KGU5vZGVDbGFzc19WYXJpYWJsZVR5cGVfMTYQBxIY",
          "ChROb2RlQ2xhc3NfVmFyaWFibGVfMhAIEhYKEk5vZGVDbGFzc19WaWV3XzEy",
          "OBAJIpQBChBBZGROb2Rlc1Jlc3BvbnNlEi4KD0RpYWdub3N0aWNJbmZvcxgB",
          "IAEoCzIVLkxpc3RPZkRpYWdub3N0aWNJbmZvEigKD19SZXNwb25zZUhlYWRl",
          "chgCIAEoCzIPLlJlc3BvbnNlSGVhZGVyEiYKB1Jlc3VsdHMYAyABKAsyFS5M",
          "aXN0T2ZBZGROb2Rlc1Jlc3VsdCJxChRBZGRSZWZlcmVuY2VzUmVxdWVzdBIx",
          "Cg9SZWZlcmVuY2VzVG9BZGQYASABKAsyGC5MaXN0T2ZBZGRSZWZlcmVuY2Vz",
          "SXRlbRImCg5fUmVxdWVzdEhlYWRlchgCIAEoCzIOLlJlcXVlc3RIZWFkZXIi",
          "lQEKFUFkZFJlZmVyZW5jZXNSZXNwb25zZRIuCg9EaWFnbm9zdGljSW5mb3MY",
          "ASABKAsyFS5MaXN0T2ZEaWFnbm9zdGljSW5mbxIoCg9fUmVzcG9uc2VIZWFk",
          "ZXIYAiABKAsyDy5SZXNwb25zZUhlYWRlchIiCgdSZXN1bHRzGAMgASgLMhEu",
          "TGlzdE9mU3RhdHVzQ29kZSJDChhBZGRpdGlvbmFsUGFyYW1ldGVyc1R5cGUS",
          "JwoKUGFyYW1ldGVycxgBIAEoCzITLkxpc3RPZktleVZhbHVlUGFpciKHAQoQ",
          "QXR0cmlidXRlT3BlcmFuZBINCgVBbGlhcxgBIAEoCRITCgtBdHRyaWJ1dGVJ",
          "ZBgCIAEoDRIhCgpCcm93c2VQYXRoGAMgASgLMg0uUmVsYXRpdmVQYXRoEhIK",
          "CkluZGV4UmFuZ2UYBCABKAkSGAoHX05vZGVJZBgFIAEoCzIHLk5vZGVJZCLN",
          "AgoPQXhpc0luZm9ybWF0aW9uEjwKDUF4aXNTY2FsZVR5cGUYASABKA4yJS5B",
          "eGlzSW5mb3JtYXRpb24uQXhpc1NjYWxlRW51bWVyYXRpb24SIAoJQXhpc1N0",
          "ZXBzGAIgASgLMg0uTGlzdE9mRG91YmxlEhcKB0VVUmFuZ2UYAyABKAsyBi5S",
          "YW5nZRIoChBFbmdpbmVlcmluZ1VuaXRzGAQgASgLMg4uRVVJbmZvcm1hdGlv",
          "bhIdCgVUaXRsZRgFIAEoCzIOLkxvY2FsaXplZFRleHQieAoUQXhpc1NjYWxl",
          "RW51bWVyYXRpb24SIQodQXhpc1NjYWxlRW51bWVyYXRpb25fTGluZWFyXzAQ",
          "ARIdChlBeGlzU2NhbGVFbnVtZXJhdGlvbl9Mbl8yEAISHgoaQXhpc1NjYWxl",
          "RW51bWVyYXRpb25fTG9nXzEQAyKNAQoRQnJvd3NlTmV4dFJlcXVlc3QSLQoS",
          "Q29udGludWF0aW9uUG9pbnRzGAEgASgLMhEuTGlzdE9mQnl0ZVN0cmluZxIh",
          "ChlSZWxlYXNlQ29udGludWF0aW9uUG9pbnRzGAIgASgIEiYKDl9SZXF1ZXN0",
          "SGVhZGVyGAMgASgLMg4uUmVxdWVzdEhlYWRlciJRCgpCcm93c2VQYXRoEiQK",
          "DV9SZWxhdGl2ZVBhdGgYASABKAsyDS5SZWxhdGl2ZVBhdGgSHQoMU3RhcnRp",
          "bmdOb2RlGAIgASgLMgcuTm9kZUlkIl4KEEJyb3dzZVBhdGhSZXN1bHQSIAoL",
          "X1N0YXR1c0NvZGUYASABKAsyCy5TdGF0dXNDb2RlEigKB1RhcmdldHMYAiAB",
          "KAsyFy5MaXN0T2ZCcm93c2VQYXRoVGFyZ2V0Iq8BCg1Ccm93c2VSZXF1ZXN0",
          "Ei8KDU5vZGVzVG9Ccm93c2UYASABKAsyGC5MaXN0T2ZCcm93c2VEZXNjcmlw",
          "dGlvbhImCg5fUmVxdWVzdEhlYWRlchgCIAEoCzIOLlJlcXVlc3RIZWFkZXIS",
          "JQodUmVxdWVzdGVkTWF4UmVmZXJlbmNlc1Blck5vZGUYAyABKA0SHgoEVmll",
          "dxgEIAEoCzIQLlZpZXdEZXNjcmlwdGlvbiJ8CgxCcm93c2VSZXN1bHQSGQoR",
          "Q29udGludWF0aW9uUG9pbnQYASABKAwSLwoKUmVmZXJlbmNlcxgCIAEoCzIb",
          "Lkxpc3RPZlJlZmVyZW5jZURlc2NyaXB0aW9uEiAKC19TdGF0dXNDb2RlGAMg",
          "ASgLMgsuU3RhdHVzQ29kZSJxChFDYWxsTWV0aG9kUmVxdWVzdBImCg5JbnB1",
          "dEFyZ3VtZW50cxgBIAEoCzIOLkxpc3RPZlZhcmlhbnQSGQoITWV0aG9kSWQY",
          "AiABKAsyBy5Ob2RlSWQSGQoIT2JqZWN0SWQYAyABKAsyBy5Ob2RlSWQiywEK",
          "EENhbGxNZXRob2RSZXN1bHQSOwocSW5wdXRBcmd1bWVudERpYWdub3N0aWNJ",
          "bmZvcxgBIAEoCzIVLkxpc3RPZkRpYWdub3N0aWNJbmZvEi8KFElucHV0QXJn",
          "dW1lbnRSZXN1bHRzGAIgASgLMhEuTGlzdE9mU3RhdHVzQ29kZRInCg9PdXRw",
          "dXRBcmd1bWVudHMYAyABKAsyDi5MaXN0T2ZWYXJpYW50EiAKC19TdGF0dXND",
          "b2RlGAQgASgLMgsuU3RhdHVzQ29kZSJOCg1DYW5jZWxSZXF1ZXN0EhUKDVJl",
          "cXVlc3RIYW5kbGUYASABKA0SJgoOX1JlcXVlc3RIZWFkZXIYAiABKAsyDi5S",
          "ZXF1ZXN0SGVhZGVyIk8KDkNhbmNlbFJlc3BvbnNlEhMKC0NhbmNlbENvdW50",
          "GAEgASgNEigKD19SZXNwb25zZUhlYWRlchgCIAEoCzIPLlJlc3BvbnNlSGVh",
          "ZGVyIkMKGUNsb3NlU2VjdXJlQ2hhbm5lbFJlcXVlc3QSJgoOX1JlcXVlc3RI",
          "ZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyIkYKGkNsb3NlU2VjdXJlQ2hh",
          "bm5lbFJlc3BvbnNlEigKD19SZXNwb25zZUhlYWRlchgBIAEoCzIPLlJlc3Bv",
          "bnNlSGVhZGVyIloKE0Nsb3NlU2Vzc2lvblJlcXVlc3QSGwoTRGVsZXRlU3Vi",
          "c2NyaXB0aW9ucxgBIAEoCBImCg5fUmVxdWVzdEhlYWRlchgCIAEoCzIOLlJl",
          "cXVlc3RIZWFkZXIiQAoUQ2xvc2VTZXNzaW9uUmVzcG9uc2USKAoPX1Jlc3Bv",
          "bnNlSGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXIigAEKG0Nvbm5lY3Rp",
          "b25UcmFuc3BvcnREYXRhVHlwZRIgChhBdXRoZW50aWNhdGlvblByb2ZpbGVV",
          "cmkYASABKAkSKgoQRGlzY292ZXJ5QWRkcmVzcxgCIAEoCzIQLkV4dGVuc2lv",
          "bk9iamVjdBITCgtSZXNvdXJjZVVyaRgDIAEoCSLDBQoUQ29udGVudEZpbHRl",
          "ckVsZW1lbnQSLgoORmlsdGVyT3BlcmFuZHMYASABKAsyFi5MaXN0T2ZFeHRl",
          "bnNpb25PYmplY3QSPQoPX0ZpbHRlck9wZXJhdG9yGAIgASgOMiQuQ29udGVu",
          "dEZpbHRlckVsZW1lbnQuRmlsdGVyT3BlcmF0b3IiuwQKDkZpbHRlck9wZXJh",
          "dG9yEhkKFUZpbHRlck9wZXJhdG9yX0FuZF8xMBABEhwKGEZpbHRlck9wZXJh",
          "dG9yX0JldHdlZW5fOBACEiAKHEZpbHRlck9wZXJhdG9yX0JpdHdpc2VBbmRf",
          "MTYQAxIfChtGaWx0ZXJPcGVyYXRvcl9CaXR3aXNlT3JfMTcQBBIaChZGaWx0",
          "ZXJPcGVyYXRvcl9DYXN0XzEyEAUSGwoXRmlsdGVyT3BlcmF0b3JfRXF1YWxz",
          "XzAQBhInCiNGaWx0ZXJPcGVyYXRvcl9HcmVhdGVyVGhhbk9yRXF1YWxfNBAH",
          "EiAKHEZpbHRlck9wZXJhdG9yX0dyZWF0ZXJUaGFuXzIQCBIbChdGaWx0ZXJP",
          "cGVyYXRvcl9Jbkxpc3RfORAJEhwKGEZpbHRlck9wZXJhdG9yX0luVmlld18x",
          "MxAKEhsKF0ZpbHRlck9wZXJhdG9yX0lzTnVsbF8xEAsSJAogRmlsdGVyT3Bl",
          "cmF0b3JfTGVzc1RoYW5PckVxdWFsXzUQDBIdChlGaWx0ZXJPcGVyYXRvcl9M",
          "ZXNzVGhhbl8zEA0SGQoVRmlsdGVyT3BlcmF0b3JfTGlrZV82EA4SGAoURmls",
          "dGVyT3BlcmF0b3JfTm90XzcQDxIcChhGaWx0ZXJPcGVyYXRvcl9PZlR5cGVf",
          "MTQQEBIYChRGaWx0ZXJPcGVyYXRvcl9Pcl8xMRAREh8KG0ZpbHRlck9wZXJh",
          "dG9yX1JlbGF0ZWRUb18xNRASIqQBChpDb250ZW50RmlsdGVyRWxlbWVudFJl",
          "c3VsdBI1ChZPcGVyYW5kRGlhZ25vc3RpY0luZm9zGAEgASgLMhUuTGlzdE9m",
          "RGlhZ25vc3RpY0luZm8SLQoST3BlcmFuZFN0YXR1c0NvZGVzGAIgASgLMhEu",
          "TGlzdE9mU3RhdHVzQ29kZRIgCgtfU3RhdHVzQ29kZRgDIAEoCzILLlN0YXR1",
          "c0NvZGUioAIKFENyZWF0ZVNlc3Npb25SZXF1ZXN0EhkKEUNsaWVudENlcnRp",
          "ZmljYXRlGAEgASgMEjIKEUNsaWVudERlc2NyaXB0aW9uGAIgASgLMhcuQXBw",
          "bGljYXRpb25EZXNjcmlwdGlvbhITCgtDbGllbnROb25jZRgDIAEoDBITCgtF",
          "bmRwb2ludFVybBgEIAEoCRIeChZNYXhSZXNwb25zZU1lc3NhZ2VTaXplGAUg",
          "ASgNEiYKDl9SZXF1ZXN0SGVhZGVyGAYgASgLMg4uUmVxdWVzdEhlYWRlchIf",
          "ChdSZXF1ZXN0ZWRTZXNzaW9uVGltZW91dBgHIAEoARIRCglTZXJ2ZXJVcmkY",
          "CCABKAkSEwoLU2Vzc2lvbk5hbWUYCSABKAki/QEKGUNyZWF0ZVN1YnNjcmlw",
          "dGlvblJlcXVlc3QSIgoaTWF4Tm90aWZpY2F0aW9uc1BlclB1Ymxpc2gYASAB",
          "KA0SEAoIUHJpb3JpdHkYAiABKA0SGQoRUHVibGlzaGluZ0VuYWJsZWQYAyAB",
          "KAgSJgoOX1JlcXVlc3RIZWFkZXIYBCABKAsyDi5SZXF1ZXN0SGVhZGVyEh4K",
          "FlJlcXVlc3RlZExpZmV0aW1lQ291bnQYBSABKA0SIgoaUmVxdWVzdGVkTWF4",
          "S2VlcEFsaXZlQ291bnQYBiABKA0SIwobUmVxdWVzdGVkUHVibGlzaGluZ0lu",
          "dGVydmFsGAcgASgBIsEBChpDcmVhdGVTdWJzY3JpcHRpb25SZXNwb25zZRIo",
          "Cg9fUmVzcG9uc2VIZWFkZXIYASABKAsyDy5SZXNwb25zZUhlYWRlchIcChRS",
          "ZXZpc2VkTGlmZXRpbWVDb3VudBgCIAEoDRIgChhSZXZpc2VkTWF4S2VlcEFs",
          "aXZlQ291bnQYAyABKA0SIQoZUmV2aXNlZFB1Ymxpc2hpbmdJbnRlcnZhbBgE",
          "IAEoARIWCg5TdWJzY3JpcHRpb25JZBgFIAEoDSKqAgoVRGF0YVNldFdyaXRl",
          "ckRhdGFUeXBlEh8KF0RhdGFTZXRGaWVsZENvbnRlbnRNYXNrGAEgASgNEhMK",
          "C0RhdGFTZXROYW1lGAIgASgJEhcKD0RhdGFTZXRXcml0ZXJJZBgDIAEoDRI0",
          "ChdEYXRhU2V0V3JpdGVyUHJvcGVydGllcxgEIAEoCzITLkxpc3RPZktleVZh",
          "bHVlUGFpchIPCgdFbmFibGVkGAUgASgIEhUKDUtleUZyYW1lQ291bnQYBiAB",
          "KA0SKQoPTWVzc2FnZVNldHRpbmdzGAcgASgLMhAuRXh0ZW5zaW9uT2JqZWN0",
          "EgwKBE5hbWUYCCABKAkSKwoRVHJhbnNwb3J0U2V0dGluZ3MYCSABKAsyEC5F",
          "eHRlbnNpb25PYmplY3QilAMKEkRhdGFUeXBlRGVmaW5pdGlvbhIdCgxCYXNl",
          "RGF0YVR5cGUYASABKAsyBy5Ob2RlSWQSIgoRRGVmYXVsdEVuY29kaW5nSWQY",
          "AiABKAsyBy5Ob2RlSWQSJQoGRmllbGRzGAMgASgLMhUuTGlzdE9mU3RydWN0",
          "dXJlRmllbGQSOQoOX1N0cnVjdHVyZVR5cGUYBCABKA4yIS5EYXRhVHlwZURl",
          "ZmluaXRpb24uU3RydWN0dXJlVHlwZSLYAQoNU3RydWN0dXJlVHlwZRIvCitT",
          "dHJ1Y3R1cmVUeXBlX1N0cnVjdHVyZVdpdGhPcHRpb25hbEZpZWxkc18xEAES",
          "LworU3RydWN0dXJlVHlwZV9TdHJ1Y3R1cmVXaXRoU3VidHlwZWRWYWx1ZXNf",
          "MxACEh0KGVN0cnVjdHVyZVR5cGVfU3RydWN0dXJlXzAQAxIrCidTdHJ1Y3R1",
          "cmVUeXBlX1VuaW9uV2l0aFN1YnR5cGVkVmFsdWVzXzQQBBIZChVTdHJ1Y3R1",
          "cmVUeXBlX1VuaW9uXzIQBSLkBQoMRGF0YVR5cGVOb2RlEhoKEkFjY2Vzc1Jl",
          "c3RyaWN0aW9ucxgBIAEoDRIiCgpCcm93c2VOYW1lGAIgASgLMg4uUXVhbGlm",
          "aWVkTmFtZRIsChJEYXRhVHlwZURlZmluaXRpb24YAyABKAsyEC5FeHRlbnNp",
          "b25PYmplY3QSIwoLRGVzY3JpcHRpb24YBCABKAsyDi5Mb2NhbGl6ZWRUZXh0",
          "EiMKC0Rpc3BsYXlOYW1lGAUgASgLMg4uTG9jYWxpemVkVGV4dBISCgpJc0Fi",
          "c3RyYWN0GAYgASgIEisKCl9Ob2RlQ2xhc3MYByABKA4yFy5EYXRhVHlwZU5v",
          "ZGUuTm9kZUNsYXNzEhgKB19Ob2RlSWQYCCABKAsyBy5Ob2RlSWQSKAoKUmVm",
          "ZXJlbmNlcxgJIAEoCzIULkxpc3RPZlJlZmVyZW5jZU5vZGUSMgoPUm9sZVBl",
          "cm1pc3Npb25zGAogASgLMhkuTGlzdE9mUm9sZVBlcm1pc3Npb25UeXBlEjYK",
          "E1VzZXJSb2xlUGVybWlzc2lvbnMYCyABKAsyGS5MaXN0T2ZSb2xlUGVybWlz",
          "c2lvblR5cGUSFQoNVXNlcldyaXRlTWFzaxgMIAEoDRIRCglXcml0ZU1hc2sY",
          "DSABKA0igAIKCU5vZGVDbGFzcxIZChVOb2RlQ2xhc3NfRGF0YVR5cGVfNjQQ",
          "ARIWChJOb2RlQ2xhc3NfTWV0aG9kXzQQAhIaChZOb2RlQ2xhc3NfT2JqZWN0",
          "VHlwZV84EAMSFgoSTm9kZUNsYXNzX09iamVjdF8xEAQSHgoaTm9kZUNsYXNz",
          "X1JlZmVyZW5jZVR5cGVfMzIQBRIbChdOb2RlQ2xhc3NfVW5zcGVjaWZpZWRf",
          "MBAGEh0KGU5vZGVDbGFzc19WYXJpYWJsZVR5cGVfMTYQBxIYChROb2RlQ2xh",
          "c3NfVmFyaWFibGVfMhAIEhYKEk5vZGVDbGFzc19WaWV3XzEyOBAJIlEKI0Rh",
          "dGFncmFtQ29ubmVjdGlvblRyYW5zcG9ydERhdGFUeXBlEioKEERpc2NvdmVy",
          "eUFkZHJlc3MYASABKAsyEC5FeHRlbnNpb25PYmplY3QihgEKG0RlbGV0ZU1v",
          "bml0b3JlZEl0ZW1zUmVxdWVzdBInChBNb25pdG9yZWRJdGVtSWRzGAEgASgL",
          "Mg0uTGlzdE9mVUludDMyEiYKDl9SZXF1ZXN0SGVhZGVyGAIgASgLMg4uUmVx",
          "dWVzdEhlYWRlchIWCg5TdWJzY3JpcHRpb25JZBgDIAEoDSKcAQocRGVsZXRl",
          "TW9uaXRvcmVkSXRlbXNSZXNwb25zZRIuCg9EaWFnbm9zdGljSW5mb3MYASAB",
          "KAsyFS5MaXN0T2ZEaWFnbm9zdGljSW5mbxIoCg9fUmVzcG9uc2VIZWFkZXIY",
          "AiABKAsyDy5SZXNwb25zZUhlYWRlchIiCgdSZXN1bHRzGAMgASgLMhEuTGlz",
          "dE9mU3RhdHVzQ29kZSJrChJEZWxldGVOb2Rlc1JlcXVlc3QSLQoNTm9kZXNU",
          "b0RlbGV0ZRgBIAEoCzIWLkxpc3RPZkRlbGV0ZU5vZGVzSXRlbRImCg5fUmVx",
          "dWVzdEhlYWRlchgCIAEoCzIOLlJlcXVlc3RIZWFkZXIikwEKE0RlbGV0ZU5v",
          "ZGVzUmVzcG9uc2USLgoPRGlhZ25vc3RpY0luZm9zGAEgASgLMhUuTGlzdE9m",
          "RGlhZ25vc3RpY0luZm8SKAoPX1Jlc3BvbnNlSGVhZGVyGAIgASgLMg8uUmVz",
          "cG9uc2VIZWFkZXISIgoHUmVzdWx0cxgDIAEoCzIRLkxpc3RPZlN0YXR1c0Nv",
          "ZGUiegoXRGVsZXRlUmVmZXJlbmNlc1JlcXVlc3QSNwoSUmVmZXJlbmNlc1Rv",
          "RGVsZXRlGAEgASgLMhsuTGlzdE9mRGVsZXRlUmVmZXJlbmNlc0l0ZW0SJgoO",
          "X1JlcXVlc3RIZWFkZXIYAiABKAsyDi5SZXF1ZXN0SGVhZGVyIpgBChhEZWxl",
          "dGVSZWZlcmVuY2VzUmVzcG9uc2USLgoPRGlhZ25vc3RpY0luZm9zGAEgASgL",
          "MhUuTGlzdE9mRGlhZ25vc3RpY0luZm8SKAoPX1Jlc3BvbnNlSGVhZGVyGAIg",
          "ASgLMg8uUmVzcG9uc2VIZWFkZXISIgoHUmVzdWx0cxgDIAEoCzIRLkxpc3RP",
          "ZlN0YXR1c0NvZGUibAoaRGVsZXRlU3Vic2NyaXB0aW9uc1JlcXVlc3QSJgoO",
          "X1JlcXVlc3RIZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyEiYKD1N1YnNj",
          "cmlwdGlvbklkcxgCIAEoCzINLkxpc3RPZlVJbnQzMiKbAQobRGVsZXRlU3Vi",
          "c2NyaXB0aW9uc1Jlc3BvbnNlEi4KD0RpYWdub3N0aWNJbmZvcxgBIAEoCzIV",
          "Lkxpc3RPZkRpYWdub3N0aWNJbmZvEigKD19SZXNwb25zZUhlYWRlchgCIAEo",
          "CzIPLlJlc3BvbnNlSGVhZGVyEiIKB1Jlc3VsdHMYAyABKAsyES5MaXN0T2ZT",
          "dGF0dXNDb2RlItYDChNFbmRwb2ludERlc2NyaXB0aW9uEhMKC0VuZHBvaW50",
          "VXJsGAEgASgJEhUKDVNlY3VyaXR5TGV2ZWwYAiABKA0SPgoMU2VjdXJpdHlN",
          "b2RlGAMgASgOMiguRW5kcG9pbnREZXNjcmlwdGlvbi5NZXNzYWdlU2VjdXJp",
          "dHlNb2RlEhkKEVNlY3VyaXR5UG9saWN5VXJpGAQgASgJEicKBlNlcnZlchgF",
          "IAEoCzIXLkFwcGxpY2F0aW9uRGVzY3JpcHRpb24SGQoRU2VydmVyQ2VydGlm",
          "aWNhdGUYBiABKAwSGwoTVHJhbnNwb3J0UHJvZmlsZVVyaRgHIAEoCRIyChJV",
          "c2VySWRlbnRpdHlUb2tlbnMYCCABKAsyFi5MaXN0T2ZVc2VyVG9rZW5Qb2xp",
          "Y3kiogEKE01lc3NhZ2VTZWN1cml0eU1vZGUSIQodTWVzc2FnZVNlY3VyaXR5",
          "TW9kZV9JbnZhbGlkXzAQARIeChpNZXNzYWdlU2VjdXJpdHlNb2RlX05vbmVf",
          "MRACEigKJE1lc3NhZ2VTZWN1cml0eU1vZGVfU2lnbkFuZEVuY3J5cHRfMxAD",
          "Eh4KGk1lc3NhZ2VTZWN1cml0eU1vZGVfU2lnbl8yEAQiMgoORW51bURlZmlu",
          "aXRpb24SIAoGRmllbGRzGAEgASgLMhAuTGlzdE9mRW51bUZpZWxkIosBCg9F",
          "bnVtRGVzY3JpcHRpb24SEwoLQnVpbHRJblR5cGUYASABKA0SGwoKRGF0YVR5",
          "cGVJZBgCIAEoCzIHLk5vZGVJZBIoCg9fRW51bURlZmluaXRpb24YAyABKAsy",
          "Dy5FbnVtRGVmaW5pdGlvbhIcCgROYW1lGAQgASgLMg4uUXVhbGlmaWVkTmFt",
          "ZSJLCg5FdmVudEZpZWxkTGlzdBIUCgxDbGllbnRIYW5kbGUYASABKA0SIwoL",
          "RXZlbnRGaWVsZHMYAiABKAsyDi5MaXN0T2ZWYXJpYW50IqICCg1GaWVsZE1l",
          "dGFEYXRhEiYKD0FycmF5RGltZW5zaW9ucxgBIAEoCzINLkxpc3RPZlVJbnQz",
          "MhITCgtCdWlsdEluVHlwZRgCIAEoDRIdCg5EYXRhU2V0RmllbGRJZBgDIAEo",
          "CzIFLkd1aWQSGQoIRGF0YVR5cGUYBCABKAsyBy5Ob2RlSWQSIwoLRGVzY3Jp",
          "cHRpb24YBSABKAsyDi5Mb2NhbGl6ZWRUZXh0EhIKCkZpZWxkRmxhZ3MYBiAB",
          "KA0SFwoPTWF4U3RyaW5nTGVuZ3RoGAcgASgNEgwKBE5hbWUYCCABKAkSJwoK",
          "UHJvcGVydGllcxgJIAEoCzITLkxpc3RPZktleVZhbHVlUGFpchIRCglWYWx1",
          "ZVJhbmsYCiABKAUizwEKDUZpbHRlck9wZXJhbmQSDQoFQWxpYXMYASABKAkS",
          "EwoLQXR0cmlidXRlSWQYAiABKA0SIQoKQnJvd3NlUGF0aBgDIAEoCzINLlJl",
          "bGF0aXZlUGF0aBINCgVJbmRleBgEIAEoDRISCgpJbmRleFJhbmdlGAUgASgJ",
          "EhgKB19Ob2RlSWQYBiABKAsyBy5Ob2RlSWQSIQoQVHlwZURlZmluaXRpb25J",
          "ZBgHIAEoCzIHLk5vZGVJZBIXCgVWYWx1ZRgIIAEoCzIILlZhcmlhbnQiqgEK",
          "G0ZpbmRTZXJ2ZXJzT25OZXR3b3JrUmVxdWVzdBIaChJNYXhSZWNvcmRzVG9S",
          "ZXR1cm4YASABKA0SJgoOX1JlcXVlc3RIZWFkZXIYAiABKAsyDi5SZXF1ZXN0",
          "SGVhZGVyEi0KFlNlcnZlckNhcGFiaWxpdHlGaWx0ZXIYAyABKAsyDS5MaXN0",
          "T2ZTdHJpbmcSGAoQU3RhcnRpbmdSZWNvcmRJZBgEIAEoDSKPAQocRmluZFNl",
          "cnZlcnNPbk5ldHdvcmtSZXNwb25zZRIcChRMYXN0Q291bnRlclJlc2V0VGlt",
          "ZRgBIAEoAxIoCg9fUmVzcG9uc2VIZWFkZXIYAiABKAsyDy5SZXNwb25zZUhl",
          "YWRlchInCgdTZXJ2ZXJzGAMgASgLMhYuTGlzdE9mU2VydmVyT25OZXR3b3Jr",
          "IpYBChJGaW5kU2VydmVyc1JlcXVlc3QSEwoLRW5kcG9pbnRVcmwYASABKAkS",
          "IAoJTG9jYWxlSWRzGAIgASgLMg0uTGlzdE9mU3RyaW5nEiYKDl9SZXF1ZXN0",
          "SGVhZGVyGAMgASgLMg4uUmVxdWVzdEhlYWRlchIhCgpTZXJ2ZXJVcmlzGAQg",
          "ASgLMg0uTGlzdE9mU3RyaW5nIm8KE0ZpbmRTZXJ2ZXJzUmVzcG9uc2USKAoP",
          "X1Jlc3BvbnNlSGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXISLgoHU2Vy",
          "dmVycxgCIAEoCzIdLkxpc3RPZkFwcGxpY2F0aW9uRGVzY3JpcHRpb24i2wEK",
          "EUdlbmVyaWNBdHRyaWJ1dGVzEjUKD0F0dHJpYnV0ZVZhbHVlcxgBIAEoCzIc",
          "Lkxpc3RPZkdlbmVyaWNBdHRyaWJ1dGVWYWx1ZRIjCgtEZXNjcmlwdGlvbhgC",
          "IAEoCzIOLkxvY2FsaXplZFRleHQSIwoLRGlzcGxheU5hbWUYAyABKAsyDi5M",
          "b2NhbGl6ZWRUZXh0EhsKE1NwZWNpZmllZEF0dHJpYnV0ZXMYBCABKA0SFQoN",
          "VXNlcldyaXRlTWFzaxgFIAEoDRIRCglXcml0ZU1hc2sYBiABKA0imAEKE0dl",
          "dEVuZHBvaW50c1JlcXVlc3QSEwoLRW5kcG9pbnRVcmwYASABKAkSIAoJTG9j",
          "YWxlSWRzGAIgASgLMg0uTGlzdE9mU3RyaW5nEiIKC1Byb2ZpbGVVcmlzGAMg",
          "ASgLMg0uTGlzdE9mU3RyaW5nEiYKDl9SZXF1ZXN0SGVhZGVyGAQgASgLMg4u",
          "UmVxdWVzdEhlYWRlciJnCgtIaXN0b3J5RGF0YRIkCgpEYXRhVmFsdWVzGAEg",
          "ASgLMhAuTGlzdE9mRGF0YVZhbHVlEjIKEU1vZGlmaWNhdGlvbkluZm9zGAIg",
          "ASgLMhcuTGlzdE9mTW9kaWZpY2F0aW9uSW5mbyI8ChVIaXN0b3J5RXZlbnRG",
          "aWVsZExpc3QSIwoLRXZlbnRGaWVsZHMYASABKAsyDi5MaXN0T2ZWYXJpYW50",
          "Im8KE0hpc3RvcnlNb2RpZmllZERhdGESJAoKRGF0YVZhbHVlcxgBIAEoCzIQ",
          "Lkxpc3RPZkRhdGFWYWx1ZRIyChFNb2RpZmljYXRpb25JbmZvcxgCIAEoCzIX",
          "Lkxpc3RPZk1vZGlmaWNhdGlvbkluZm8ivgMKEkhpc3RvcnlSZWFkUmVxdWVz",
          "dBIsChJIaXN0b3J5UmVhZERldGFpbHMYASABKAsyEC5FeHRlbnNpb25PYmpl",
          "Y3QSLgoLTm9kZXNUb1JlYWQYAiABKAsyGS5MaXN0T2ZIaXN0b3J5UmVhZFZh",
          "bHVlSWQSIQoZUmVsZWFzZUNvbnRpbnVhdGlvblBvaW50cxgDIAEoCBImCg5f",
          "UmVxdWVzdEhlYWRlchgEIAEoCzIOLlJlcXVlc3RIZWFkZXISQwoTX1RpbWVz",
          "dGFtcHNUb1JldHVybhgFIAEoDjImLkhpc3RvcnlSZWFkUmVxdWVzdC5UaW1l",
          "c3RhbXBzVG9SZXR1cm4iuQEKElRpbWVzdGFtcHNUb1JldHVybhIdChlUaW1l",
          "c3RhbXBzVG9SZXR1cm5fQm90aF8yEAESIAocVGltZXN0YW1wc1RvUmV0dXJu",
          "X0ludmFsaWRfNBACEiAKHFRpbWVzdGFtcHNUb1JldHVybl9OZWl0aGVyXzMQ",
          "AxIfChtUaW1lc3RhbXBzVG9SZXR1cm5fU2VydmVyXzEQBBIfChtUaW1lc3Rh",
          "bXBzVG9SZXR1cm5fU291cmNlXzAQBSKaAQoTSGlzdG9yeVJlYWRSZXNwb25z",
          "ZRIuCg9EaWFnbm9zdGljSW5mb3MYASABKAsyFS5MaXN0T2ZEaWFnbm9zdGlj",
          "SW5mbxIoCg9fUmVzcG9uc2VIZWFkZXIYAiABKAsyDy5SZXNwb25zZUhlYWRl",
          "chIpCgdSZXN1bHRzGAMgASgLMhguTGlzdE9mSGlzdG9yeVJlYWRSZXN1bHQi",
          "dAoUSGlzdG9yeVVwZGF0ZVJlcXVlc3QSNAoUSGlzdG9yeVVwZGF0ZURldGFp",
          "bHMYASABKAsyFi5MaXN0T2ZFeHRlbnNpb25PYmplY3QSJgoOX1JlcXVlc3RI",
          "ZWFkZXIYAiABKAsyDi5SZXF1ZXN0SGVhZGVyIpQBChNIaXN0b3J5VXBkYXRl",
          "UmVzdWx0Ei4KD0RpYWdub3N0aWNJbmZvcxgBIAEoCzIVLkxpc3RPZkRpYWdu",
          "b3N0aWNJbmZvEisKEE9wZXJhdGlvblJlc3VsdHMYAiABKAsyES5MaXN0T2ZT",
          "dGF0dXNDb2RlEiAKC19TdGF0dXNDb2RlGAMgASgLMgsuU3RhdHVzQ29kZSLo",
          "BwoMSW5zdGFuY2VOb2RlEhMKC0FjY2Vzc0xldmVsGAEgASgNEhUKDUFjY2Vz",
          "c0xldmVsRXgYAiABKA0SGgoSQWNjZXNzUmVzdHJpY3Rpb25zGAMgASgNEiYK",
          "D0FycmF5RGltZW5zaW9ucxgEIAEoCzINLkxpc3RPZlVJbnQzMhIiCgpCcm93",
          "c2VOYW1lGAUgASgLMg4uUXVhbGlmaWVkTmFtZRIXCg9Db250YWluc05vTG9v",
          "cHMYBiABKAgSGQoIRGF0YVR5cGUYByABKAsyBy5Ob2RlSWQSIwoLRGVzY3Jp",
          "cHRpb24YCCABKAsyDi5Mb2NhbGl6ZWRUZXh0EiMKC0Rpc3BsYXlOYW1lGAkg",
          "ASgLMg4uTG9jYWxpemVkVGV4dBIVCg1FdmVudE5vdGlmaWVyGAogASgNEhIK",
          "CkV4ZWN1dGFibGUYCyABKAgSEwoLSGlzdG9yaXppbmcYDCABKAgSHwoXTWlu",
          "aW11bVNhbXBsaW5nSW50ZXJ2YWwYDSABKAESKwoKX05vZGVDbGFzcxgOIAEo",
          "DjIXLkluc3RhbmNlTm9kZS5Ob2RlQ2xhc3MSGAoHX05vZGVJZBgPIAEoCzIH",
          "Lk5vZGVJZBIoCgpSZWZlcmVuY2VzGBAgASgLMhQuTGlzdE9mUmVmZXJlbmNl",
          "Tm9kZRIyCg9Sb2xlUGVybWlzc2lvbnMYESABKAsyGS5MaXN0T2ZSb2xlUGVy",
          "bWlzc2lvblR5cGUSFwoPVXNlckFjY2Vzc0xldmVsGBIgASgNEhYKDlVzZXJF",
          "eGVjdXRhYmxlGBMgASgIEjYKE1VzZXJSb2xlUGVybWlzc2lvbnMYFCABKAsy",
          "GS5MaXN0T2ZSb2xlUGVybWlzc2lvblR5cGUSFQoNVXNlcldyaXRlTWFzaxgV",
          "IAEoDRIXCgVWYWx1ZRgWIAEoCzIILlZhcmlhbnQSEQoJVmFsdWVSYW5rGBcg",
          "ASgFEhEKCVdyaXRlTWFzaxgYIAEoDSKAAgoJTm9kZUNsYXNzEhkKFU5vZGVD",
          "bGFzc19EYXRhVHlwZV82NBABEhYKEk5vZGVDbGFzc19NZXRob2RfNBACEhoK",
          "Fk5vZGVDbGFzc19PYmplY3RUeXBlXzgQAxIWChJOb2RlQ2xhc3NfT2JqZWN0",
          "XzEQBBIeChpOb2RlQ2xhc3NfUmVmZXJlbmNlVHlwZV8zMhAFEhsKF05vZGVD",
          "bGFzc19VbnNwZWNpZmllZF8wEAYSHQoZTm9kZUNsYXNzX1ZhcmlhYmxlVHlw",
          "ZV8xNhAHEhgKFE5vZGVDbGFzc19WYXJpYWJsZV8yEAgSFgoSTm9kZUNsYXNz",
          "X1ZpZXdfMTI4EAkiOgoSTGlzdE9mQWRkTm9kZXNJdGVtEiQKDV9BZGROb2Rl",
          "c0l0ZW0YASADKAsyDS5BZGROb2Rlc0l0ZW0iNAoQTGlzdE9mQnJvd3NlUGF0",
          "aBIgCgtfQnJvd3NlUGF0aBgBIAMoCzILLkJyb3dzZVBhdGgiRgoWTGlzdE9m",
          "QnJvd3NlUGF0aFJlc3VsdBIsChFfQnJvd3NlUGF0aFJlc3VsdBgBIAMoCzIR",
          "LkJyb3dzZVBhdGhSZXN1bHQiOgoSTGlzdE9mQnJvd3NlUmVzdWx0EiQKDV9C",
          "cm93c2VSZXN1bHQYASADKAsyDS5Ccm93c2VSZXN1bHQiSQoXTGlzdE9mQ2Fs",
          "bE1ldGhvZFJlcXVlc3QSLgoSX0NhbGxNZXRob2RSZXF1ZXN0GAEgAygLMhIu",
          "Q2FsbE1ldGhvZFJlcXVlc3QiRgoWTGlzdE9mQ2FsbE1ldGhvZFJlc3VsdBIs",
          "ChFfQ2FsbE1ldGhvZFJlc3VsdBgBIAMoCzIRLkNhbGxNZXRob2RSZXN1bHQi",
          "ZwohTGlzdE9mQ29ubmVjdGlvblRyYW5zcG9ydERhdGFUeXBlEkIKHF9Db25u",
          "ZWN0aW9uVHJhbnNwb3J0RGF0YVR5cGUYASADKAsyHC5Db25uZWN0aW9uVHJh",
          "bnNwb3J0RGF0YVR5cGUiUgoaTGlzdE9mQ29udGVudEZpbHRlckVsZW1lbnQS",
          "NAoVX0NvbnRlbnRGaWx0ZXJFbGVtZW50GAEgAygLMhUuQ29udGVudEZpbHRl",
          "ckVsZW1lbnQiZAogTGlzdE9mQ29udGVudEZpbHRlckVsZW1lbnRSZXN1bHQS",
          "QAobX0NvbnRlbnRGaWx0ZXJFbGVtZW50UmVzdWx0GAEgAygLMhsuQ29udGVu",
          "dEZpbHRlckVsZW1lbnRSZXN1bHQiVQobTGlzdE9mRGF0YVNldFdyaXRlckRh",
          "dGFUeXBlEjYKFl9EYXRhU2V0V3JpdGVyRGF0YVR5cGUYASADKAsyFi5EYXRh",
          "U2V0V3JpdGVyRGF0YVR5cGUiTAoYTGlzdE9mRGF0YVR5cGVEZWZpbml0aW9u",
          "EjAKE19EYXRhVHlwZURlZmluaXRpb24YASADKAsyEy5EYXRhVHlwZURlZmlu",
          "aXRpb24ifwopTGlzdE9mRGF0YWdyYW1Db25uZWN0aW9uVHJhbnNwb3J0RGF0",
          "YVR5cGUSUgokX0RhdGFncmFtQ29ubmVjdGlvblRyYW5zcG9ydERhdGFUeXBl",
          "GAEgAygLMiQuRGF0YWdyYW1Db25uZWN0aW9uVHJhbnNwb3J0RGF0YVR5cGUi",
          "TwoZTGlzdE9mRW5kcG9pbnREZXNjcmlwdGlvbhIyChRfRW5kcG9pbnREZXNj",
          "cmlwdGlvbhgBIAMoCzIULkVuZHBvaW50RGVzY3JpcHRpb24iQAoUTGlzdE9m",
          "RW51bURlZmluaXRpb24SKAoPX0VudW1EZWZpbml0aW9uGAEgAygLMg8uRW51",
          "bURlZmluaXRpb24iQwoVTGlzdE9mRW51bURlc2NyaXB0aW9uEioKEF9FbnVt",
          "RGVzY3JpcHRpb24YASADKAsyEC5FbnVtRGVzY3JpcHRpb24iQAoUTGlzdE9m",
          "RXZlbnRGaWVsZExpc3QSKAoPX0V2ZW50RmllbGRMaXN0GAEgAygLMg8uRXZl",
          "bnRGaWVsZExpc3QiPQoTTGlzdE9mRmllbGRNZXRhRGF0YRImCg5fRmllbGRN",
          "ZXRhRGF0YRgBIAMoCzIOLkZpZWxkTWV0YURhdGEiVQobTGlzdE9mSGlzdG9y",
          "eUV2ZW50RmllbGRMaXN0EjYKFl9IaXN0b3J5RXZlbnRGaWVsZExpc3QYASAD",
          "KAsyFi5IaXN0b3J5RXZlbnRGaWVsZExpc3QiTwoZTGlzdE9mSGlzdG9yeVVw",
          "ZGF0ZVJlc3VsdBIyChRfSGlzdG9yeVVwZGF0ZVJlc3VsdBgBIAMoCzIULkhp",
          "c3RvcnlVcGRhdGVSZXN1bHQiagoiTGlzdE9mTW9kZWxDaGFuZ2VTdHJ1Y3R1",
          "cmVEYXRhVHlwZRJECh1fTW9kZWxDaGFuZ2VTdHJ1Y3R1cmVEYXRhVHlwZRgB",
          "IAMoCzIdLk1vZGVsQ2hhbmdlU3RydWN0dXJlRGF0YVR5cGUiYQofTGlzdE9m",
          "TW9uaXRvcmVkSXRlbUNyZWF0ZVJlc3VsdBI+ChpfTW9uaXRvcmVkSXRlbUNy",
          "ZWF0ZVJlc3VsdBgBIAMoCzIaLk1vbml0b3JlZEl0ZW1DcmVhdGVSZXN1bHQi",
          "YQofTGlzdE9mTW9uaXRvcmVkSXRlbU1vZGlmeVJlc3VsdBI+ChpfTW9uaXRv",
          "cmVkSXRlbU1vZGlmeVJlc3VsdBgBIAMoCzIaLk1vbml0b3JlZEl0ZW1Nb2Rp",
          "ZnlSZXN1bHQiYQofTGlzdE9mTW9uaXRvcmVkSXRlbU5vdGlmaWNhdGlvbhI+",
          "ChpfTW9uaXRvcmVkSXRlbU5vdGlmaWNhdGlvbhgBIAMoCzIaLk1vbml0b3Jl",
          "ZEl0ZW1Ob3RpZmljYXRpb24iUgoaTGlzdE9mTmV0d29ya0dyb3VwRGF0YVR5",
          "cGUSNAoVX05ldHdvcmtHcm91cERhdGFUeXBlGAEgAygLMhUuTmV0d29ya0dy",
          "b3VwRGF0YVR5cGUiIgoKTGlzdE9mTm9kZRIUCgVfTm9kZRgBIAMoCzIFLk5v",
          "ZGUiPQoTTGlzdE9mTm9kZVJlZmVyZW5jZRImCg5fTm9kZVJlZmVyZW5jZRgB",
          "IAMoCzIOLk5vZGVSZWZlcmVuY2UiPQoTTGlzdE9mUGFyc2luZ1Jlc3VsdBIm",
          "Cg5fUGFyc2luZ1Jlc3VsdBgBIAMoCzIOLlBhcnNpbmdSZXN1bHQiYQofTGlz",
          "dE9mUHVibGlzaGVkVmFyaWFibGVEYXRhVHlwZRI+ChpfUHVibGlzaGVkVmFy",
          "aWFibGVEYXRhVHlwZRgBIAMoCzIaLlB1Ymxpc2hlZFZhcmlhYmxlRGF0YVR5",
          "cGUiOgoSTGlzdE9mUXVlcnlEYXRhU2V0EiQKDV9RdWVyeURhdGFTZXQYASAD",
          "KAsyDS5RdWVyeURhdGFTZXQiRgoWTGlzdE9mUmVnaXN0ZXJlZFNlcnZlchIs",
          "ChFfUmVnaXN0ZXJlZFNlcnZlchgBIAMoCzIRLlJlZ2lzdGVyZWRTZXJ2ZXIi",
          "ZAogTGlzdE9mU2Vzc2lvbkRpYWdub3N0aWNzRGF0YVR5cGUSQAobX1Nlc3Np",
          "b25EaWFnbm9zdGljc0RhdGFUeXBlGAEgAygLMhsuU2Vzc2lvbkRpYWdub3N0",
          "aWNzRGF0YVR5cGUiWAocTGlzdE9mU2ltcGxlQXR0cmlidXRlT3BlcmFuZBI4",
          "ChdfU2ltcGxlQXR0cmlidXRlT3BlcmFuZBgBIAMoCzIXLlNpbXBsZUF0dHJp",
          "YnV0ZU9wZXJhbmQiOgoSTGlzdE9mU3RhdHVzUmVzdWx0EiQKDV9TdGF0dXNS",
          "ZXN1bHQYASADKAsyDS5TdGF0dXNSZXN1bHQiTwoZTGlzdE9mU3RydWN0dXJl",
          "RGVmaW5pdGlvbhIyChRfU3RydWN0dXJlRGVmaW5pdGlvbhgBIAMoCzIULlN0",
          "cnVjdHVyZURlZmluaXRpb24iUgoaTGlzdE9mU3RydWN0dXJlRGVzY3JpcHRp",
          "b24SNAoVX1N0cnVjdHVyZURlc2NyaXB0aW9uGAEgAygLMhUuU3RydWN0dXJl",
          "RGVzY3JpcHRpb24iYQofTGlzdE9mU3Vic2NyaWJlZERhdGFTZXREYXRhVHlw",
          "ZRI+ChpfU3Vic2NyaWJlZERhdGFTZXREYXRhVHlwZRgBIAMoCzIaLlN1YnNj",
          "cmliZWREYXRhU2V0RGF0YVR5cGUicwolTGlzdE9mU3Vic2NyaWJlZERhdGFT",
          "ZXRNaXJyb3JEYXRhVHlwZRJKCiBfU3Vic2NyaWJlZERhdGFTZXRNaXJyb3JE",
          "YXRhVHlwZRgBIAMoCzIgLlN1YnNjcmliZWREYXRhU2V0TWlycm9yRGF0YVR5",
          "cGUiWwodTGlzdE9mVGFyZ2V0VmFyaWFibGVzRGF0YVR5cGUSOgoYX1Rhcmdl",
          "dFZhcmlhYmxlc0RhdGFUeXBlGAEgAygLMhguVGFyZ2V0VmFyaWFibGVzRGF0",
          "YVR5cGUiNwoRTGlzdE9mVGhyZWVERnJhbWUSIgoMX1RocmVlREZyYW1lGAEg",
          "AygLMgwuVGhyZWVERnJhbWUiNAoQTGlzdE9mV3JpdGVWYWx1ZRIgCgtfV3Jp",
          "dGVWYWx1ZRgBIAMoCzILLldyaXRlVmFsdWUiqwEKHE1vZGlmeU1vbml0b3Jl",
          "ZEl0ZW1zUmVzcG9uc2USLgoPRGlhZ25vc3RpY0luZm9zGAEgASgLMhUuTGlz",
          "dE9mRGlhZ25vc3RpY0luZm8SKAoPX1Jlc3BvbnNlSGVhZGVyGAIgASgLMg8u",
          "UmVzcG9uc2VIZWFkZXISMQoHUmVzdWx0cxgDIAEoCzIgLkxpc3RPZk1vbml0",
          "b3JlZEl0ZW1Nb2RpZnlSZXN1bHQi+gEKGU1vZGlmeVN1YnNjcmlwdGlvblJl",
          "cXVlc3QSIgoaTWF4Tm90aWZpY2F0aW9uc1BlclB1Ymxpc2gYASABKA0SEAoI",
          "UHJpb3JpdHkYAiABKA0SJgoOX1JlcXVlc3RIZWFkZXIYAyABKAsyDi5SZXF1",
          "ZXN0SGVhZGVyEh4KFlJlcXVlc3RlZExpZmV0aW1lQ291bnQYBCABKA0SIgoa",
          "UmVxdWVzdGVkTWF4S2VlcEFsaXZlQ291bnQYBSABKA0SIwobUmVxdWVzdGVk",
          "UHVibGlzaGluZ0ludGVydmFsGAYgASgBEhYKDlN1YnNjcmlwdGlvbklkGAcg",
          "ASgNIqkBChpNb2RpZnlTdWJzY3JpcHRpb25SZXNwb25zZRIoCg9fUmVzcG9u",
          "c2VIZWFkZXIYASABKAsyDy5SZXNwb25zZUhlYWRlchIcChRSZXZpc2VkTGlm",
          "ZXRpbWVDb3VudBgCIAEoDRIgChhSZXZpc2VkTWF4S2VlcEFsaXZlQ291bnQY",
          "AyABKA0SIQoZUmV2aXNlZFB1Ymxpc2hpbmdJbnRlcnZhbBgEIAEoASKqAgoa",
          "TW9uaXRvcmVkSXRlbUNyZWF0ZVJlcXVlc3QSIwoNSXRlbVRvTW9uaXRvchgB",
          "IAEoCzIMLlJlYWRWYWx1ZUlkEkMKD19Nb25pdG9yaW5nTW9kZRgCIAEoDjIq",
          "Lk1vbml0b3JlZEl0ZW1DcmVhdGVSZXF1ZXN0Lk1vbml0b3JpbmdNb2RlEjIK",
          "E1JlcXVlc3RlZFBhcmFtZXRlcnMYAyABKAsyFS5Nb25pdG9yaW5nUGFyYW1l",
          "dGVycyJuCg5Nb25pdG9yaW5nTW9kZRIdChlNb25pdG9yaW5nTW9kZV9EaXNh",
          "YmxlZF8wEAESHgoaTW9uaXRvcmluZ01vZGVfUmVwb3J0aW5nXzIQAhIdChlN",
          "b25pdG9yaW5nTW9kZV9TYW1wbGluZ18xEAMiaQoaTW9uaXRvcmVkSXRlbU1v",
          "ZGlmeVJlcXVlc3QSFwoPTW9uaXRvcmVkSXRlbUlkGAEgASgNEjIKE1JlcXVl",
          "c3RlZFBhcmFtZXRlcnMYAiABKAsyFS5Nb25pdG9yaW5nUGFyYW1ldGVycyLq",
          "AQoQTm90aWZpY2F0aW9uRGF0YRIoCg9fRGlhZ25vc3RpY0luZm8YASABKAsy",
          "Dy5EaWFnbm9zdGljSW5mbxIuCg9EaWFnbm9zdGljSW5mb3MYAiABKAsyFS5M",
          "aXN0T2ZEaWFnbm9zdGljSW5mbxIlCgZFdmVudHMYAyABKAsyFS5MaXN0T2ZF",
          "dmVudEZpZWxkTGlzdBI4Cg5Nb25pdG9yZWRJdGVtcxgEIAEoCzIgLkxpc3RP",
          "Zk1vbml0b3JlZEl0ZW1Ob3RpZmljYXRpb24SGwoGU3RhdHVzGAUgASgLMgsu",
          "U3RhdHVzQ29kZSKsBAoYT3BlblNlY3VyZUNoYW5uZWxSZXF1ZXN0EhMKC0Ns",
          "aWVudE5vbmNlGAEgASgMEh0KFUNsaWVudFByb3RvY29sVmVyc2lvbhgCIAEo",
          "DRImCg5fUmVxdWVzdEhlYWRlchgDIAEoCzIOLlJlcXVlc3RIZWFkZXISRwoL",
          "UmVxdWVzdFR5cGUYBCABKA4yMi5PcGVuU2VjdXJlQ2hhbm5lbFJlcXVlc3Qu",
          "U2VjdXJpdHlUb2tlblJlcXVlc3RUeXBlEhkKEVJlcXVlc3RlZExpZmV0aW1l",
          "GAUgASgNEkMKDFNlY3VyaXR5TW9kZRgGIAEoDjItLk9wZW5TZWN1cmVDaGFu",
          "bmVsUmVxdWVzdC5NZXNzYWdlU2VjdXJpdHlNb2RlImYKGFNlY3VyaXR5VG9r",
          "ZW5SZXF1ZXN0VHlwZRIkCiBTZWN1cml0eVRva2VuUmVxdWVzdFR5cGVfSXNz",
          "dWVfMBABEiQKIFNlY3VyaXR5VG9rZW5SZXF1ZXN0VHlwZV9SZW5ld18xEAIi",
          "ogEKE01lc3NhZ2VTZWN1cml0eU1vZGUSIQodTWVzc2FnZVNlY3VyaXR5TW9k",
          "ZV9JbnZhbGlkXzAQARIeChpNZXNzYWdlU2VjdXJpdHlNb2RlX05vbmVfMRAC",
          "EigKJE1lc3NhZ2VTZWN1cml0eU1vZGVfU2lnbkFuZEVuY3J5cHRfMxADEh4K",
          "Gk1lc3NhZ2VTZWN1cml0eU1vZGVfU2lnbl8yEAQipwEKGU9wZW5TZWN1cmVD",
          "aGFubmVsUmVzcG9uc2USKAoPX1Jlc3BvbnNlSGVhZGVyGAEgASgLMg8uUmVz",
          "cG9uc2VIZWFkZXISLAoNU2VjdXJpdHlUb2tlbhgCIAEoCzIVLkNoYW5uZWxT",
          "ZWN1cml0eVRva2VuEhMKC1NlcnZlck5vbmNlGAMgASgMEh0KFVNlcnZlclBy",
          "b3RvY29sVmVyc2lvbhgEIAEoDSKDAwoZUHJvZ3JhbURpYWdub3N0aWNEYXRh",
          "VHlwZRIYChBDcmVhdGVDbGllbnROYW1lGAEgASgJEiAKD0NyZWF0ZVNlc3Np",
          "b25JZBgCIAEoCzIHLk5vZGVJZBIeChZJbnZvY2F0aW9uQ3JlYXRpb25UaW1l",
          "GAMgASgDEhYKDkxhc3RNZXRob2RDYWxsGAQgASgJEhoKEkxhc3RNZXRob2RD",
          "YWxsVGltZRgFIAEoAxIxChhMYXN0TWV0aG9kSW5wdXRBcmd1bWVudHMYBiAB",
          "KAsyDy5MaXN0T2ZBcmd1bWVudBIyChlMYXN0TWV0aG9kT3V0cHV0QXJndW1l",
          "bnRzGAcgASgLMg8uTGlzdE9mQXJndW1lbnQSLQoWTGFzdE1ldGhvZFJldHVy",
          "blN0YXR1cxgIIAEoCzINLlN0YXR1c1Jlc3VsdBIkChNMYXN0TWV0aG9kU2Vz",
          "c2lvbklkGAkgASgLMgcuTm9kZUlkEhoKEkxhc3RUcmFuc2l0aW9uVGltZRgK",
          "IAEoAyKCAQoOUHVibGlzaFJlcXVlc3QSJgoOX1JlcXVlc3RIZWFkZXIYASAB",
          "KAsyDi5SZXF1ZXN0SGVhZGVyEkgKHFN1YnNjcmlwdGlvbkFja25vd2xlZGdl",
          "bWVudHMYAiABKAsyIi5MaXN0T2ZTdWJzY3JpcHRpb25BY2tub3dsZWRnZW1l",
          "bnQipwIKD1B1Ymxpc2hSZXNwb25zZRIvChhBdmFpbGFibGVTZXF1ZW5jZU51",
          "bWJlcnMYASABKAsyDS5MaXN0T2ZVSW50MzISLgoPRGlhZ25vc3RpY0luZm9z",
          "GAIgASgLMhUuTGlzdE9mRGlhZ25vc3RpY0luZm8SGQoRTW9yZU5vdGlmaWNh",
          "dGlvbnMYAyABKAgSMgoUX05vdGlmaWNhdGlvbk1lc3NhZ2UYBCABKAsyFC5O",
          "b3RpZmljYXRpb25NZXNzYWdlEigKD19SZXNwb25zZUhlYWRlchgFIAEoCzIP",
          "LlJlc3BvbnNlSGVhZGVyEiIKB1Jlc3VsdHMYBiABKAsyES5MaXN0T2ZTdGF0",
          "dXNDb2RlEhYKDlN1YnNjcmlwdGlvbklkGAcgASgNIlUKGlB1Ymxpc2hlZERh",
          "dGFJdGVtc0RhdGFUeXBlEjcKDVB1Ymxpc2hlZERhdGEYASABKAsyIC5MaXN0",
          "T2ZQdWJsaXNoZWRWYXJpYWJsZURhdGFUeXBlImUKFFF1ZXJ5RGF0YURlc2Ny",
          "aXB0aW9uEhMKC0F0dHJpYnV0ZUlkGAEgASgNEhIKCkluZGV4UmFuZ2UYAiAB",
          "KAkSJAoNX1JlbGF0aXZlUGF0aBgDIAEoCzINLlJlbGF0aXZlUGF0aCJ3ChBR",
          "dWVyeU5leHRSZXF1ZXN0EhkKEUNvbnRpbnVhdGlvblBvaW50GAEgASgMEiAK",
          "GFJlbGVhc2VDb250aW51YXRpb25Qb2ludBgCIAEoCBImCg5fUmVxdWVzdEhl",
          "YWRlchgDIAEoCzIOLlJlcXVlc3RIZWFkZXIiiwEKEVF1ZXJ5TmV4dFJlc3Bv",
          "bnNlEioKDVF1ZXJ5RGF0YVNldHMYASABKAsyEy5MaXN0T2ZRdWVyeURhdGFT",
          "ZXQSKAoPX1Jlc3BvbnNlSGVhZGVyGAIgASgLMg8uUmVzcG9uc2VIZWFkZXIS",
          "IAoYUmV2aXNlZENvbnRpbnVhdGlvblBvaW50GAMgASgMIugCCgtSZWFkUmVx",
          "dWVzdBIOCgZNYXhBZ2UYASABKAESJwoLTm9kZXNUb1JlYWQYAiABKAsyEi5M",
          "aXN0T2ZSZWFkVmFsdWVJZBImCg5fUmVxdWVzdEhlYWRlchgDIAEoCzIOLlJl",
          "cXVlc3RIZWFkZXISPAoTX1RpbWVzdGFtcHNUb1JldHVybhgEIAEoDjIfLlJl",
          "YWRSZXF1ZXN0LlRpbWVzdGFtcHNUb1JldHVybiK5AQoSVGltZXN0YW1wc1Rv",
          "UmV0dXJuEh0KGVRpbWVzdGFtcHNUb1JldHVybl9Cb3RoXzIQARIgChxUaW1l",
          "c3RhbXBzVG9SZXR1cm5fSW52YWxpZF80EAISIAocVGltZXN0YW1wc1RvUmV0",
          "dXJuX05laXRoZXJfMxADEh8KG1RpbWVzdGFtcHNUb1JldHVybl9TZXJ2ZXJf",
          "MRAEEh8KG1RpbWVzdGFtcHNUb1JldHVybl9Tb3VyY2VfMBAFIosBCgxSZWFk",
          "UmVzcG9uc2USLgoPRGlhZ25vc3RpY0luZm9zGAEgASgLMhUuTGlzdE9mRGlh",
          "Z25vc3RpY0luZm8SKAoPX1Jlc3BvbnNlSGVhZGVyGAIgASgLMg8uUmVzcG9u",
          "c2VIZWFkZXISIQoHUmVzdWx0cxgDIAEoCzIQLkxpc3RPZkRhdGFWYWx1ZSJm",
          "ChRSZWdpc3Rlck5vZGVzUmVxdWVzdBImCg9Ob2Rlc1RvUmVnaXN0ZXIYASAB",
          "KAsyDS5MaXN0T2ZOb2RlSWQSJgoOX1JlcXVlc3RIZWFkZXIYAiABKAsyDi5S",
          "ZXF1ZXN0SGVhZGVyImsKFVJlZ2lzdGVyTm9kZXNSZXNwb25zZRIoChFSZWdp",
          "c3RlcmVkTm9kZUlkcxgBIAEoCzINLkxpc3RPZk5vZGVJZBIoCg9fUmVzcG9u",
          "c2VIZWFkZXIYAiABKAsyDy5SZXNwb25zZUhlYWRlciKbAQoWUmVnaXN0ZXJT",
          "ZXJ2ZXIyUmVxdWVzdBI2ChZEaXNjb3ZlcnlDb25maWd1cmF0aW9uGAEgASgL",
          "MhYuTGlzdE9mRXh0ZW5zaW9uT2JqZWN0EiYKDl9SZXF1ZXN0SGVhZGVyGAIg",
          "ASgLMg4uUmVxdWVzdEhlYWRlchIhCgZTZXJ2ZXIYAyABKAsyES5SZWdpc3Rl",
          "cmVkU2VydmVyIqQBChdSZWdpc3RlclNlcnZlcjJSZXNwb25zZRIvChRDb25m",
          "aWd1cmF0aW9uUmVzdWx0cxgBIAEoCzIRLkxpc3RPZlN0YXR1c0NvZGUSLgoP",
          "RGlhZ25vc3RpY0luZm9zGAIgASgLMhUuTGlzdE9mRGlhZ25vc3RpY0luZm8S",
          "KAoPX1Jlc3BvbnNlSGVhZGVyGAMgASgLMg8uUmVzcG9uc2VIZWFkZXIiYgoV",
          "UmVnaXN0ZXJTZXJ2ZXJSZXF1ZXN0EiYKDl9SZXF1ZXN0SGVhZGVyGAEgASgL",
          "Mg4uUmVxdWVzdEhlYWRlchIhCgZTZXJ2ZXIYAiABKAsyES5SZWdpc3RlcmVk",
          "U2VydmVyIkIKFlJlZ2lzdGVyU2VydmVyUmVzcG9uc2USKAoPX1Jlc3BvbnNl",
          "SGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXIidAoQUmVwdWJsaXNoUmVx",
          "dWVzdBImCg5fUmVxdWVzdEhlYWRlchgBIAEoCzIOLlJlcXVlc3RIZWFkZXIS",
          "IAoYUmV0cmFuc21pdFNlcXVlbmNlTnVtYmVyGAIgASgNEhYKDlN1YnNjcmlw",
          "dGlvbklkGAMgASgNInEKEVJlcHVibGlzaFJlc3BvbnNlEjIKFF9Ob3RpZmlj",
          "YXRpb25NZXNzYWdlGAEgASgLMhQuTm90aWZpY2F0aW9uTWVzc2FnZRIoCg9f",
          "UmVzcG9uc2VIZWFkZXIYAiABKAsyDy5SZXNwb25zZUhlYWRlciJ2CiRUcmFu",
          "c2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkc1JlcXVlc3QSJgoLQnJvd3NlUGF0",
          "aHMYASABKAsyES5MaXN0T2ZCcm93c2VQYXRoEiYKDl9SZXF1ZXN0SGVhZGVy",
          "GAIgASgLMg4uUmVxdWVzdEhlYWRlciKrAQolVHJhbnNsYXRlQnJvd3NlUGF0",
          "aHNUb05vZGVJZHNSZXNwb25zZRIuCg9EaWFnbm9zdGljSW5mb3MYASABKAsy",
          "FS5MaXN0T2ZEaWFnbm9zdGljSW5mbxIoCg9fUmVzcG9uc2VIZWFkZXIYAiAB",
          "KAsyDy5SZXNwb25zZUhlYWRlchIoCgdSZXN1bHRzGAMgASgLMhcuTGlzdE9m",
          "QnJvd3NlUGF0aFJlc3VsdCKxAgoUVUFCaW5hcnlGaWxlRGF0YVR5cGUSFgoE",
          "Qm9keRgBIAEoCzIILlZhcmlhbnQSLQoNRW51bURhdGFUeXBlcxgCIAEoCzIW",
          "Lkxpc3RPZkVudW1EZXNjcmlwdGlvbhInCgpGaWxlSGVhZGVyGAMgASgLMhMu",
          "TGlzdE9mS2V5VmFsdWVQYWlyEiEKCk5hbWVzcGFjZXMYBCABKAsyDS5MaXN0",
          "T2ZTdHJpbmcSFgoOU2NoZW1hTG9jYXRpb24YBSABKAkSNQoPU2ltcGxlRGF0",
          "YVR5cGVzGAYgASgLMhwuTGlzdE9mU2ltcGxlVHlwZURlc2NyaXB0aW9uEjcK",
          "ElN0cnVjdHVyZURhdGFUeXBlcxgHIAEoCzIbLkxpc3RPZlN0cnVjdHVyZURl",
          "c2NyaXB0aW9uIl8KDFdyaXRlUmVxdWVzdBInCgxOb2Rlc1RvV3JpdGUYASAB",
          "KAsyES5MaXN0T2ZXcml0ZVZhbHVlEiYKDl9SZXF1ZXN0SGVhZGVyGAIgASgL",
          "Mg4uUmVxdWVzdEhlYWRlciLdBQoTV3JpdGVyR3JvdXBEYXRhVHlwZRI0Cg5E",
          "YXRhU2V0V3JpdGVycxgBIAEoCzIcLkxpc3RPZkRhdGFTZXRXcml0ZXJEYXRh",
          "VHlwZRIPCgdFbmFibGVkGAIgASgIEiwKD0dyb3VwUHJvcGVydGllcxgDIAEo",
          "CzITLkxpc3RPZktleVZhbHVlUGFpchIXCg9IZWFkZXJMYXlvdXRVcmkYBCAB",
          "KAkSFQoNS2VlcEFsaXZlVGltZRgFIAEoARIgCglMb2NhbGVJZHMYBiABKAsy",
          "DS5MaXN0T2ZTdHJpbmcSHQoVTWF4TmV0d29ya01lc3NhZ2VTaXplGAcgASgN",
          "EikKD01lc3NhZ2VTZXR0aW5ncxgIIAEoCzIQLkV4dGVuc2lvbk9iamVjdBIM",
          "CgROYW1lGAkgASgJEhAKCFByaW9yaXR5GAogASgNEhoKElB1Ymxpc2hpbmdJ",
          "bnRlcnZhbBgLIAEoARIXCg9TZWN1cml0eUdyb3VwSWQYDCABKAkSNwoTU2Vj",
          "dXJpdHlLZXlTZXJ2aWNlcxgNIAEoCzIaLkxpc3RPZkVuZHBvaW50RGVzY3Jp",
          "cHRpb24SPgoMU2VjdXJpdHlNb2RlGA4gASgOMiguV3JpdGVyR3JvdXBEYXRh",
          "VHlwZS5NZXNzYWdlU2VjdXJpdHlNb2RlEisKEVRyYW5zcG9ydFNldHRpbmdz",
          "GA8gASgLMhAuRXh0ZW5zaW9uT2JqZWN0EhUKDVdyaXRlckdyb3VwSWQYECAB",
          "KA0iogEKE01lc3NhZ2VTZWN1cml0eU1vZGUSIQodTWVzc2FnZVNlY3VyaXR5",
          "TW9kZV9JbnZhbGlkXzAQARIeChpNZXNzYWdlU2VjdXJpdHlNb2RlX05vbmVf",
          "MRACEigKJE1lc3NhZ2VTZWN1cml0eU1vZGVfU2lnbkFuZEVuY3J5cHRfMxAD",
          "Eh4KGk1lc3NhZ2VTZWN1cml0eU1vZGVfU2lnbl8yEAQiYgoPQWRkTm9kZXNS",
          "ZXF1ZXN0EicKCk5vZGVzVG9BZGQYASABKAsyEy5MaXN0T2ZBZGROb2Rlc0l0",
          "ZW0SJgoOX1JlcXVlc3RIZWFkZXIYAiABKAsyDi5SZXF1ZXN0SGVhZGVyIpQB",
          "ChJCcm93c2VOZXh0UmVzcG9uc2USLgoPRGlhZ25vc3RpY0luZm9zGAEgASgL",
          "MhUuTGlzdE9mRGlhZ25vc3RpY0luZm8SKAoPX1Jlc3BvbnNlSGVhZGVyGAIg",
          "ASgLMg8uUmVzcG9uc2VIZWFkZXISJAoHUmVzdWx0cxgDIAEoCzITLkxpc3RP",
          "ZkJyb3dzZVJlc3VsdCKQAQoOQnJvd3NlUmVzcG9uc2USLgoPRGlhZ25vc3Rp",
          "Y0luZm9zGAEgASgLMhUuTGlzdE9mRGlhZ25vc3RpY0luZm8SKAoPX1Jlc3Bv",
          "bnNlSGVhZGVyGAIgASgLMg8uUmVzcG9uc2VIZWFkZXISJAoHUmVzdWx0cxgD",
          "IAEoCzITLkxpc3RPZkJyb3dzZVJlc3VsdCJmCgtDYWxsUmVxdWVzdBIvCg1N",
          "ZXRob2RzVG9DYWxsGAEgASgLMhguTGlzdE9mQ2FsbE1ldGhvZFJlcXVlc3QS",
          "JgoOX1JlcXVlc3RIZWFkZXIYAiABKAsyDi5SZXF1ZXN0SGVhZGVyIpIBCgxD",
          "YWxsUmVzcG9uc2USLgoPRGlhZ25vc3RpY0luZm9zGAEgASgLMhUuTGlzdE9m",
          "RGlhZ25vc3RpY0luZm8SKAoPX1Jlc3BvbnNlSGVhZGVyGAIgASgLMg8uUmVz",
          "cG9uc2VIZWFkZXISKAoHUmVzdWx0cxgDIAEoCzIXLkxpc3RPZkNhbGxNZXRo",
          "b2RSZXN1bHQiPgoNQ29udGVudEZpbHRlchItCghFbGVtZW50cxgBIAEoCzIb",
          "Lkxpc3RPZkNvbnRlbnRGaWx0ZXJFbGVtZW50IocBChNDb250ZW50RmlsdGVy",
          "UmVzdWx0EjUKFkVsZW1lbnREaWFnbm9zdGljSW5mb3MYASABKAsyFS5MaXN0",
          "T2ZEaWFnbm9zdGljSW5mbxI5Cg5FbGVtZW50UmVzdWx0cxgCIAEoCzIhLkxp",
          "c3RPZkNvbnRlbnRGaWx0ZXJFbGVtZW50UmVzdWx0IqsBChxDcmVhdGVNb25p",
          "dG9yZWRJdGVtc1Jlc3BvbnNlEi4KD0RpYWdub3N0aWNJbmZvcxgBIAEoCzIV",
          "Lkxpc3RPZkRpYWdub3N0aWNJbmZvEigKD19SZXNwb25zZUhlYWRlchgCIAEo",
          "CzIPLlJlc3BvbnNlSGVhZGVyEjEKB1Jlc3VsdHMYAyABKAsyIC5MaXN0T2ZN",
          "b25pdG9yZWRJdGVtQ3JlYXRlUmVzdWx0IpUDChVDcmVhdGVTZXNzaW9uUmVz",
          "cG9uc2USJAoTQXV0aGVudGljYXRpb25Ub2tlbhgBIAEoCzIHLk5vZGVJZBId",
          "ChVNYXhSZXF1ZXN0TWVzc2FnZVNpemUYAiABKA0SKAoPX1Jlc3BvbnNlSGVh",
          "ZGVyGAMgASgLMg8uUmVzcG9uc2VIZWFkZXISHQoVUmV2aXNlZFNlc3Npb25U",
          "aW1lb3V0GAQgASgBEhkKEVNlcnZlckNlcnRpZmljYXRlGAUgASgMEjMKD1Nl",
          "cnZlckVuZHBvaW50cxgGIAEoCzIaLkxpc3RPZkVuZHBvaW50RGVzY3JpcHRp",
          "b24SEwoLU2VydmVyTm9uY2UYByABKAwSJwoPU2VydmVyU2lnbmF0dXJlGAgg",
          "ASgLMg4uU2lnbmF0dXJlRGF0YRJEChpTZXJ2ZXJTb2Z0d2FyZUNlcnRpZmlj",
          "YXRlcxgJIAEoCzIgLkxpc3RPZlNpZ25lZFNvZnR3YXJlQ2VydGlmaWNhdGUS",
          "GgoJU2Vzc2lvbklkGAogASgLMgcuTm9kZUlkIoIBChZEYXRhQ2hhbmdlTm90",
          "aWZpY2F0aW9uEi4KD0RpYWdub3N0aWNJbmZvcxgBIAEoCzIVLkxpc3RPZkRp",
          "YWdub3N0aWNJbmZvEjgKDk1vbml0b3JlZEl0ZW1zGAIgASgLMiAuTGlzdE9m",
          "TW9uaXRvcmVkSXRlbU5vdGlmaWNhdGlvbiKMAwoTRGF0YVNldE1ldGFEYXRh",
          "VHlwZRI7ChRDb25maWd1cmF0aW9uVmVyc2lvbhgBIAEoCzIdLkNvbmZpZ3Vy",
          "YXRpb25WZXJzaW9uRGF0YVR5cGUSHQoORGF0YVNldENsYXNzSWQYAiABKAsy",
          "BS5HdWlkEiMKC0Rlc2NyaXB0aW9uGAMgASgLMg4uTG9jYWxpemVkVGV4dBIt",
          "Cg1FbnVtRGF0YVR5cGVzGAQgASgLMhYuTGlzdE9mRW51bURlc2NyaXB0aW9u",
          "EiQKBkZpZWxkcxgFIAEoCzIULkxpc3RPZkZpZWxkTWV0YURhdGESDAoETmFt",
          "ZRgGIAEoCRIhCgpOYW1lc3BhY2VzGAcgASgLMg0uTGlzdE9mU3RyaW5nEjUK",
          "D1NpbXBsZURhdGFUeXBlcxgIIAEoCzIcLkxpc3RPZlNpbXBsZVR5cGVEZXNj",
          "cmlwdGlvbhI3ChJTdHJ1Y3R1cmVEYXRhVHlwZXMYCSABKAsyGy5MaXN0T2ZT",
          "dHJ1Y3R1cmVEZXNjcmlwdGlvbiKYBgoVRGF0YVNldFJlYWRlckRhdGFUeXBl",
          "Eh8KF0RhdGFTZXRGaWVsZENvbnRlbnRNYXNrGAEgASgNEi0KD0RhdGFTZXRN",
          "ZXRhRGF0YRgCIAEoCzIULkRhdGFTZXRNZXRhRGF0YVR5cGUSNAoXRGF0YVNl",
          "dFJlYWRlclByb3BlcnRpZXMYAyABKAsyEy5MaXN0T2ZLZXlWYWx1ZVBhaXIS",
          "FwoPRGF0YVNldFdyaXRlcklkGAQgASgNEg8KB0VuYWJsZWQYBSABKAgSFwoP",
          "SGVhZGVyTGF5b3V0VXJpGAYgASgJEhUKDUtleUZyYW1lQ291bnQYByABKA0S",
          "HQoVTWVzc2FnZVJlY2VpdmVUaW1lb3V0GAggASgBEikKD01lc3NhZ2VTZXR0",
          "aW5ncxgJIAEoCzIQLkV4dGVuc2lvbk9iamVjdBIMCgROYW1lGAogASgJEh0K",
          "C1B1Ymxpc2hlcklkGAsgASgLMgguVmFyaWFudBIXCg9TZWN1cml0eUdyb3Vw",
          "SWQYDCABKAkSNwoTU2VjdXJpdHlLZXlTZXJ2aWNlcxgNIAEoCzIaLkxpc3RP",
          "ZkVuZHBvaW50RGVzY3JpcHRpb24SQAoMU2VjdXJpdHlNb2RlGA4gASgOMiou",
          "RGF0YVNldFJlYWRlckRhdGFUeXBlLk1lc3NhZ2VTZWN1cml0eU1vZGUSKwoR",
          "U3Vic2NyaWJlZERhdGFTZXQYDyABKAsyEC5FeHRlbnNpb25PYmplY3QSKwoR",
          "VHJhbnNwb3J0U2V0dGluZ3MYECABKAsyEC5FeHRlbnNpb25PYmplY3QSFQoN",
          "V3JpdGVyR3JvdXBJZBgRIAEoDSKiAQoTTWVzc2FnZVNlY3VyaXR5TW9kZRIh",
          "Ch1NZXNzYWdlU2VjdXJpdHlNb2RlX0ludmFsaWRfMBABEh4KGk1lc3NhZ2VT",
          "ZWN1cml0eU1vZGVfTm9uZV8xEAISKAokTWVzc2FnZVNlY3VyaXR5TW9kZV9T",
          "aWduQW5kRW5jcnlwdF8zEAMSHgoaTWVzc2FnZVNlY3VyaXR5TW9kZV9TaWdu",
          "XzIQBCLiAQoTRGF0YVR5cGVEZXNjcmlwdGlvbhIdCgxCYXNlRGF0YVR5cGUY",
          "ASABKAsyBy5Ob2RlSWQSEwoLQnVpbHRJblR5cGUYAiABKA0SGwoKRGF0YVR5",
          "cGVJZBgDIAEoCzIHLk5vZGVJZBIoCg9fRW51bURlZmluaXRpb24YBCABKAsy",
          "Dy5FbnVtRGVmaW5pdGlvbhIcCgROYW1lGAUgASgLMg4uUXVhbGlmaWVkTmFt",
          "ZRIyChRfU3RydWN0dXJlRGVmaW5pdGlvbhgGIAEoCzIULlN0cnVjdHVyZURl",
          "ZmluaXRpb24i5gMKFERhdGFUeXBlU2NoZW1hSGVhZGVyEhYKBEJvZHkYASAB",
          "KAsyCC5WYXJpYW50EjsKFENvbmZpZ3VyYXRpb25WZXJzaW9uGAIgASgLMh0u",
          "Q29uZmlndXJhdGlvblZlcnNpb25EYXRhVHlwZRIdCg5EYXRhU2V0Q2xhc3NJ",
          "ZBgDIAEoCzIFLkd1aWQSIwoLRGVzY3JpcHRpb24YBCABKAsyDi5Mb2NhbGl6",
          "ZWRUZXh0Ei0KDUVudW1EYXRhVHlwZXMYBSABKAsyFi5MaXN0T2ZFbnVtRGVz",
          "Y3JpcHRpb24SJAoGRmllbGRzGAYgASgLMhQuTGlzdE9mRmllbGRNZXRhRGF0",
          "YRInCgpGaWxlSGVhZGVyGAcgASgLMhMuTGlzdE9mS2V5VmFsdWVQYWlyEgwK",
          "BE5hbWUYCCABKAkSIQoKTmFtZXNwYWNlcxgJIAEoCzINLkxpc3RPZlN0cmlu",
          "ZxIWCg5TY2hlbWFMb2NhdGlvbhgKIAEoCRI1Cg9TaW1wbGVEYXRhVHlwZXMY",
          "CyABKAsyHC5MaXN0T2ZTaW1wbGVUeXBlRGVzY3JpcHRpb24SNwoSU3RydWN0",
          "dXJlRGF0YVR5cGVzGAwgASgLMhsuTGlzdE9mU3RydWN0dXJlRGVzY3JpcHRp",
          "b24iaAoLRXZlbnRGaWx0ZXISNAoNU2VsZWN0Q2xhdXNlcxgBIAEoCzIdLkxp",
          "c3RPZlNpbXBsZUF0dHJpYnV0ZU9wZXJhbmQSIwoLV2hlcmVDbGF1c2UYAiAB",
          "KAsyDi5Db250ZW50RmlsdGVyIrABChFFdmVudEZpbHRlclJlc3VsdBI6ChtT",
          "ZWxlY3RDbGF1c2VEaWFnbm9zdGljSW5mb3MYASABKAsyFS5MaXN0T2ZEaWFn",
          "bm9zdGljSW5mbxIuChNTZWxlY3RDbGF1c2VSZXN1bHRzGAIgASgLMhEuTGlz",
          "dE9mU3RhdHVzQ29kZRIvChFXaGVyZUNsYXVzZVJlc3VsdBgDIAEoCzIULkNv",
          "bnRlbnRGaWx0ZXJSZXN1bHQiPgoVRXZlbnROb3RpZmljYXRpb25MaXN0EiUK",
          "BkV2ZW50cxgBIAEoCzIVLkxpc3RPZkV2ZW50RmllbGRMaXN0Im8KFEdldEVu",
          "ZHBvaW50c1Jlc3BvbnNlEi0KCUVuZHBvaW50cxgBIAEoCzIaLkxpc3RPZkVu",
          "ZHBvaW50RGVzY3JpcHRpb24SKAoPX1Jlc3BvbnNlSGVhZGVyGAIgASgLMg8u",
          "UmVzcG9uc2VIZWFkZXIiPAoMSGlzdG9yeUV2ZW50EiwKBkV2ZW50cxgBIAEo",
          "CzIcLkxpc3RPZkhpc3RvcnlFdmVudEZpZWxkTGlzdCLWAgoSSGlzdG9yeVJl",
          "YWREZXRhaWxzEjgKF19BZ2dyZWdhdGVDb25maWd1cmF0aW9uGAEgASgLMhcu",
          "QWdncmVnYXRlQ29uZmlndXJhdGlvbhIkCg1BZ2dyZWdhdGVUeXBlGAIgASgL",
          "Mg0uTGlzdE9mTm9kZUlkEg8KB0VuZFRpbWUYAyABKAMSHAoGRmlsdGVyGAQg",
          "ASgLMgwuRXZlbnRGaWx0ZXISFgoOSXNSZWFkTW9kaWZpZWQYBSABKAgSGAoQ",
          "TnVtVmFsdWVzUGVyTm9kZRgGIAEoDRIaChJQcm9jZXNzaW5nSW50ZXJ2YWwY",
          "ByABKAESIQoIUmVxVGltZXMYCCABKAsyDy5MaXN0T2ZEYXRlVGltZRIUCgxS",
          "ZXR1cm5Cb3VuZHMYCSABKAgSEQoJU3RhcnRUaW1lGAogASgDEhcKD1VzZVNp",
          "bXBsZUJvdW5kcxgLIAEoCCKLBAoUSGlzdG9yeVVwZGF0ZURldGFpbHMSDwoH",
          "RW5kVGltZRgBIAEoAxIvCglFdmVudERhdGEYAiABKAsyHC5MaXN0T2ZIaXN0",
          "b3J5RXZlbnRGaWVsZExpc3QSIwoIRXZlbnRJZHMYAyABKAsyES5MaXN0T2ZC",
          "eXRlU3RyaW5nEhwKBkZpbHRlchgEIAEoCzIMLkV2ZW50RmlsdGVyEhgKEElz",
          "RGVsZXRlTW9kaWZpZWQYBSABKAgSGAoHX05vZGVJZBgGIAEoCzIHLk5vZGVJ",
          "ZBJFChRQZXJmb3JtSW5zZXJ0UmVwbGFjZRgHIAEoDjInLkhpc3RvcnlVcGRh",
          "dGVEZXRhaWxzLlBlcmZvcm1VcGRhdGVUeXBlEiEKCFJlcVRpbWVzGAggASgL",
          "Mg8uTGlzdE9mRGF0ZVRpbWUSEQoJU3RhcnRUaW1lGAkgASgDEiYKDFVwZGF0",
          "ZVZhbHVlcxgKIAEoCzIQLkxpc3RPZkRhdGFWYWx1ZSKUAQoRUGVyZm9ybVVw",
          "ZGF0ZVR5cGUSHgoaUGVyZm9ybVVwZGF0ZVR5cGVfSW5zZXJ0XzEQARIeChpQ",
          "ZXJmb3JtVXBkYXRlVHlwZV9SZW1vdmVfNBACEh8KG1BlcmZvcm1VcGRhdGVU",
          "eXBlX1JlcGxhY2VfMhADEh4KGlBlcmZvcm1VcGRhdGVUeXBlX1VwZGF0ZV8z",
          "EAQingEKFUhpc3RvcnlVcGRhdGVSZXNwb25zZRIuCg9EaWFnbm9zdGljSW5m",
          "b3MYASABKAsyFS5MaXN0T2ZEaWFnbm9zdGljSW5mbxIoCg9fUmVzcG9uc2VI",
          "ZWFkZXIYAiABKAsyDy5SZXNwb25zZUhlYWRlchIrCgdSZXN1bHRzGAMgASgL",
          "MhouTGlzdE9mSGlzdG9yeVVwZGF0ZVJlc3VsdCI9ChNMaXN0T2ZDb250ZW50",
          "RmlsdGVyEiYKDl9Db250ZW50RmlsdGVyGAEgAygLMg4uQ29udGVudEZpbHRl",
          "ciJPChlMaXN0T2ZEYXRhU2V0TWV0YURhdGFUeXBlEjIKFF9EYXRhU2V0TWV0",
          "YURhdGFUeXBlGAEgAygLMhQuRGF0YVNldE1ldGFEYXRhVHlwZSJVChtMaXN0",
          "T2ZEYXRhU2V0UmVhZGVyRGF0YVR5cGUSNgoWX0RhdGFTZXRSZWFkZXJEYXRh",
          "VHlwZRgBIAMoCzIWLkRhdGFTZXRSZWFkZXJEYXRhVHlwZSJPChlMaXN0T2ZE",
          "YXRhVHlwZURlc2NyaXB0aW9uEjIKFF9EYXRhVHlwZURlc2NyaXB0aW9uGAEg",
          "AygLMhQuRGF0YVR5cGVEZXNjcmlwdGlvbiJSChpMaXN0T2ZEYXRhVHlwZVNj",
          "aGVtYUhlYWRlchI0ChVfRGF0YVR5cGVTY2hlbWFIZWFkZXIYASADKAsyFS5E",
          "YXRhVHlwZVNjaGVtYUhlYWRlciJkCiBMaXN0T2ZNb25pdG9yZWRJdGVtQ3Jl",
          "YXRlUmVxdWVzdBJAChtfTW9uaXRvcmVkSXRlbUNyZWF0ZVJlcXVlc3QYASAD",
          "KAsyGy5Nb25pdG9yZWRJdGVtQ3JlYXRlUmVxdWVzdCJkCiBMaXN0T2ZNb25p",
          "dG9yZWRJdGVtTW9kaWZ5UmVxdWVzdBJAChtfTW9uaXRvcmVkSXRlbU1vZGlm",
          "eVJlcXVlc3QYASADKAsyGy5Nb25pdG9yZWRJdGVtTW9kaWZ5UmVxdWVzdCJk",
          "CiBMaXN0T2ZQdWJsaXNoZWREYXRhSXRlbXNEYXRhVHlwZRJAChtfUHVibGlz",
          "aGVkRGF0YUl0ZW1zRGF0YVR5cGUYASADKAsyGy5QdWJsaXNoZWREYXRhSXRl",
          "bXNEYXRhVHlwZSJSChpMaXN0T2ZRdWVyeURhdGFEZXNjcmlwdGlvbhI0ChVf",
          "UXVlcnlEYXRhRGVzY3JpcHRpb24YASADKAsyFS5RdWVyeURhdGFEZXNjcmlw",
          "dGlvbiJSChpMaXN0T2ZVQUJpbmFyeUZpbGVEYXRhVHlwZRI0ChVfVUFCaW5h",
          "cnlGaWxlRGF0YVR5cGUYASADKAsyFS5VQUJpbmFyeUZpbGVEYXRhVHlwZSJP",
          "ChlMaXN0T2ZXcml0ZXJHcm91cERhdGFUeXBlEjIKFF9Xcml0ZXJHcm91cERh",
          "dGFUeXBlGAEgAygLMhQuV3JpdGVyR3JvdXBEYXRhVHlwZSKhAwobTW9kaWZ5",
          "TW9uaXRvcmVkSXRlbXNSZXF1ZXN0EjgKDUl0ZW1zVG9Nb2RpZnkYASABKAsy",
          "IS5MaXN0T2ZNb25pdG9yZWRJdGVtTW9kaWZ5UmVxdWVzdBImCg5fUmVxdWVz",
          "dEhlYWRlchgCIAEoCzIOLlJlcXVlc3RIZWFkZXISFgoOU3Vic2NyaXB0aW9u",
          "SWQYAyABKA0STAoTX1RpbWVzdGFtcHNUb1JldHVybhgEIAEoDjIvLk1vZGlm",
          "eU1vbml0b3JlZEl0ZW1zUmVxdWVzdC5UaW1lc3RhbXBzVG9SZXR1cm4iuQEK",
          "ElRpbWVzdGFtcHNUb1JldHVybhIdChlUaW1lc3RhbXBzVG9SZXR1cm5fQm90",
          "aF8yEAESIAocVGltZXN0YW1wc1RvUmV0dXJuX0ludmFsaWRfNBACEiAKHFRp",
          "bWVzdGFtcHNUb1JldHVybl9OZWl0aGVyXzMQAxIfChtUaW1lc3RhbXBzVG9S",
          "ZXR1cm5fU2VydmVyXzEQBBIfChtUaW1lc3RhbXBzVG9SZXR1cm5fU291cmNl",
          "XzAQBSLiAwoQTW9uaXRvcmluZ0ZpbHRlchI4ChdfQWdncmVnYXRlQ29uZmln",
          "dXJhdGlvbhgBIAEoCzIXLkFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24SHgoNQWdn",
          "cmVnYXRlVHlwZRgCIAEoCzIHLk5vZGVJZBIUCgxEZWFkYmFuZFR5cGUYAyAB",
          "KA0SFQoNRGVhZGJhbmRWYWx1ZRgEIAEoARIaChJQcm9jZXNzaW5nSW50ZXJ2",
          "YWwYBSABKAESNAoNU2VsZWN0Q2xhdXNlcxgGIAEoCzIdLkxpc3RPZlNpbXBs",
          "ZUF0dHJpYnV0ZU9wZXJhbmQSEQoJU3RhcnRUaW1lGAcgASgDEjQKB1RyaWdn",
          "ZXIYCCABKA4yIy5Nb25pdG9yaW5nRmlsdGVyLkRhdGFDaGFuZ2VUcmlnZ2Vy",
          "EiMKC1doZXJlQ2xhdXNlGAkgASgLMg4uQ29udGVudEZpbHRlciKGAQoRRGF0",
          "YUNoYW5nZVRyaWdnZXISLAooRGF0YUNoYW5nZVRyaWdnZXJfU3RhdHVzVmFs",
          "dWVUaW1lc3RhbXBfMhABEiMKH0RhdGFDaGFuZ2VUcmlnZ2VyX1N0YXR1c1Zh",
          "bHVlXzEQAhIeChpEYXRhQ2hhbmdlVHJpZ2dlcl9TdGF0dXNfMBADIrICChZN",
          "b25pdG9yaW5nRmlsdGVyUmVzdWx0Ej4KHVJldmlzZWRBZ2dyZWdhdGVDb25m",
          "aWd1cmF0aW9uGAEgASgLMhcuQWdncmVnYXRlQ29uZmlndXJhdGlvbhIhChlS",
          "ZXZpc2VkUHJvY2Vzc2luZ0ludGVydmFsGAIgASgBEhgKEFJldmlzZWRTdGFy",
          "dFRpbWUYAyABKAMSOgobU2VsZWN0Q2xhdXNlRGlhZ25vc3RpY0luZm9zGAQg",
          "ASgLMhUuTGlzdE9mRGlhZ25vc3RpY0luZm8SLgoTU2VsZWN0Q2xhdXNlUmVz",
          "dWx0cxgFIAEoCzIRLkxpc3RPZlN0YXR1c0NvZGUSLwoRV2hlcmVDbGF1c2VS",
          "ZXN1bHQYBiABKAsyFC5Db250ZW50RmlsdGVyUmVzdWx0Io4BChNOb2RlVHlw",
          "ZURlc2NyaXB0aW9uEjEKDERhdGFUb1JldHVybhgBIAEoCzIbLkxpc3RPZlF1",
          "ZXJ5RGF0YURlc2NyaXB0aW9uEhcKD0luY2x1ZGVTdWJUeXBlcxgCIAEoCBIr",
          "ChJUeXBlRGVmaW5pdGlvbk5vZGUYAyABKAsyDy5FeHBhbmRlZE5vZGVJZCKT",
          "BgoTUHViU3ViR3JvdXBEYXRhVHlwZRI0Cg5EYXRhU2V0UmVhZGVycxgBIAEo",
          "CzIcLkxpc3RPZkRhdGFTZXRSZWFkZXJEYXRhVHlwZRI0Cg5EYXRhU2V0V3Jp",
          "dGVycxgCIAEoCzIcLkxpc3RPZkRhdGFTZXRXcml0ZXJEYXRhVHlwZRIPCgdF",
          "bmFibGVkGAMgASgIEiwKD0dyb3VwUHJvcGVydGllcxgEIAEoCzITLkxpc3RP",
          "ZktleVZhbHVlUGFpchIXCg9IZWFkZXJMYXlvdXRVcmkYBSABKAkSFQoNS2Vl",
          "cEFsaXZlVGltZRgGIAEoARIgCglMb2NhbGVJZHMYByABKAsyDS5MaXN0T2ZT",
          "dHJpbmcSHQoVTWF4TmV0d29ya01lc3NhZ2VTaXplGAggASgNEikKD01lc3Nh",
          "Z2VTZXR0aW5ncxgJIAEoCzIQLkV4dGVuc2lvbk9iamVjdBIMCgROYW1lGAog",
          "ASgJEhAKCFByaW9yaXR5GAsgASgNEhoKElB1Ymxpc2hpbmdJbnRlcnZhbBgM",
          "IAEoARIXCg9TZWN1cml0eUdyb3VwSWQYDSABKAkSNwoTU2VjdXJpdHlLZXlT",
          "ZXJ2aWNlcxgOIAEoCzIaLkxpc3RPZkVuZHBvaW50RGVzY3JpcHRpb24SPgoM",
          "U2VjdXJpdHlNb2RlGA8gASgOMiguUHViU3ViR3JvdXBEYXRhVHlwZS5NZXNz",
          "YWdlU2VjdXJpdHlNb2RlEisKEVRyYW5zcG9ydFNldHRpbmdzGBAgASgLMhAu",
          "RXh0ZW5zaW9uT2JqZWN0EhUKDVdyaXRlckdyb3VwSWQYESABKA0iogEKE01l",
          "c3NhZ2VTZWN1cml0eU1vZGUSIQodTWVzc2FnZVNlY3VyaXR5TW9kZV9JbnZh",
          "bGlkXzAQARIeChpNZXNzYWdlU2VjdXJpdHlNb2RlX05vbmVfMRACEigKJE1l",
          "c3NhZ2VTZWN1cml0eU1vZGVfU2lnbkFuZEVuY3J5cHRfMxADEh4KGk1lc3Nh",
          "Z2VTZWN1cml0eU1vZGVfU2lnbl8yEAQi1AEKGFB1Ymxpc2hlZERhdGFTZXRE",
          "YXRhVHlwZRIkCg1EYXRhU2V0Rm9sZGVyGAEgASgLMg0uTGlzdE9mU3RyaW5n",
          "Ei0KD0RhdGFTZXRNZXRhRGF0YRgCIAEoCzIULkRhdGFTZXRNZXRhRGF0YVR5",
          "cGUSJwoNRGF0YVNldFNvdXJjZRgDIAEoCzIQLkV4dGVuc2lvbk9iamVjdBIs",
          "Cg9FeHRlbnNpb25GaWVsZHMYBCABKAsyEy5MaXN0T2ZLZXlWYWx1ZVBhaXIS",
          "DAoETmFtZRgFIAEoCSLQAQoeUHVibGlzaGVkRGF0YVNldFNvdXJjZURhdGFU",
          "eXBlEh4KDUV2ZW50Tm90aWZpZXIYASABKAsyBy5Ob2RlSWQSHgoGRmlsdGVy",
          "GAIgASgLMg4uQ29udGVudEZpbHRlchI3Cg1QdWJsaXNoZWREYXRhGAMgASgL",
          "MiAuTGlzdE9mUHVibGlzaGVkVmFyaWFibGVEYXRhVHlwZRI1Cg5TZWxlY3Rl",
          "ZEZpZWxkcxgEIAEoCzIdLkxpc3RPZlNpbXBsZUF0dHJpYnV0ZU9wZXJhbmQi",
          "kAEKF1B1Ymxpc2hlZEV2ZW50c0RhdGFUeXBlEh4KDUV2ZW50Tm90aWZpZXIY",
          "ASABKAsyBy5Ob2RlSWQSHgoGRmlsdGVyGAIgASgLMg4uQ29udGVudEZpbHRl",
          "chI1Cg5TZWxlY3RlZEZpZWxkcxgDIAEoCzIdLkxpc3RPZlNpbXBsZUF0dHJp",
          "YnV0ZU9wZXJhbmQijwIKElF1ZXJ5Rmlyc3RSZXNwb25zZRIZChFDb250aW51",
          "YXRpb25Qb2ludBgBIAEoDBIuCg9EaWFnbm9zdGljSW5mb3MYAiABKAsyFS5M",
          "aXN0T2ZEaWFnbm9zdGljSW5mbxIqCgxGaWx0ZXJSZXN1bHQYAyABKAsyFC5D",
          "b250ZW50RmlsdGVyUmVzdWx0EiwKDlBhcnNpbmdSZXN1bHRzGAQgASgLMhQu",
          "TGlzdE9mUGFyc2luZ1Jlc3VsdBIqCg1RdWVyeURhdGFTZXRzGAUgASgLMhMu",
          "TGlzdE9mUXVlcnlEYXRhU2V0EigKD19SZXNwb25zZUhlYWRlchgGIAEoCzIP",
          "LlJlc3BvbnNlSGVhZGVyIm4KEFJlYWRFdmVudERldGFpbHMSDwoHRW5kVGlt",
          "ZRgBIAEoAxIcCgZGaWx0ZXIYAiABKAsyDC5FdmVudEZpbHRlchIYChBOdW1W",
          "YWx1ZXNQZXJOb2RlGAMgASgNEhEKCVN0YXJ0VGltZRgEIAEoAyLGBAoTUmVh",
          "ZGVyR3JvdXBEYXRhVHlwZRI0Cg5EYXRhU2V0UmVhZGVycxgBIAEoCzIcLkxp",
          "c3RPZkRhdGFTZXRSZWFkZXJEYXRhVHlwZRIPCgdFbmFibGVkGAIgASgIEiwK",
          "D0dyb3VwUHJvcGVydGllcxgDIAEoCzITLkxpc3RPZktleVZhbHVlUGFpchId",
          "ChVNYXhOZXR3b3JrTWVzc2FnZVNpemUYBCABKA0SKQoPTWVzc2FnZVNldHRp",
          "bmdzGAUgASgLMhAuRXh0ZW5zaW9uT2JqZWN0EgwKBE5hbWUYBiABKAkSFwoP",
          "U2VjdXJpdHlHcm91cElkGAcgASgJEjcKE1NlY3VyaXR5S2V5U2VydmljZXMY",
          "CCABKAsyGi5MaXN0T2ZFbmRwb2ludERlc2NyaXB0aW9uEj4KDFNlY3VyaXR5",
          "TW9kZRgJIAEoDjIoLlJlYWRlckdyb3VwRGF0YVR5cGUuTWVzc2FnZVNlY3Vy",
          "aXR5TW9kZRIrChFUcmFuc3BvcnRTZXR0aW5ncxgKIAEoCzIQLkV4dGVuc2lv",
          "bk9iamVjdCKiAQoTTWVzc2FnZVNlY3VyaXR5TW9kZRIhCh1NZXNzYWdlU2Vj",
          "dXJpdHlNb2RlX0ludmFsaWRfMBABEh4KGk1lc3NhZ2VTZWN1cml0eU1vZGVf",
          "Tm9uZV8xEAISKAokTWVzc2FnZVNlY3VyaXR5TW9kZV9TaWduQW5kRW5jcnlw",
          "dF8zEAMSHgoaTWVzc2FnZVNlY3VyaXR5TW9kZV9TaWduXzIQBCLZAgoSVXBk",
          "YXRlRXZlbnREZXRhaWxzEi8KCUV2ZW50RGF0YRgBIAEoCzIcLkxpc3RPZkhp",
          "c3RvcnlFdmVudEZpZWxkTGlzdBIcCgZGaWx0ZXIYAiABKAsyDC5FdmVudEZp",
          "bHRlchIYCgdfTm9kZUlkGAMgASgLMgcuTm9kZUlkEkMKFFBlcmZvcm1JbnNl",
          "cnRSZXBsYWNlGAQgASgOMiUuVXBkYXRlRXZlbnREZXRhaWxzLlBlcmZvcm1V",
          "cGRhdGVUeXBlIpQBChFQZXJmb3JtVXBkYXRlVHlwZRIeChpQZXJmb3JtVXBk",
          "YXRlVHlwZV9JbnNlcnRfMRABEh4KGlBlcmZvcm1VcGRhdGVUeXBlX1JlbW92",
          "ZV80EAISHwobUGVyZm9ybVVwZGF0ZVR5cGVfUmVwbGFjZV8yEAMSHgoaUGVy",
          "Zm9ybVVwZGF0ZVR5cGVfVXBkYXRlXzMQBCKhAwobQ3JlYXRlTW9uaXRvcmVk",
          "SXRlbXNSZXF1ZXN0EjgKDUl0ZW1zVG9DcmVhdGUYASABKAsyIS5MaXN0T2ZN",
          "b25pdG9yZWRJdGVtQ3JlYXRlUmVxdWVzdBImCg5fUmVxdWVzdEhlYWRlchgC",
          "IAEoCzIOLlJlcXVlc3RIZWFkZXISFgoOU3Vic2NyaXB0aW9uSWQYAyABKA0S",
          "TAoTX1RpbWVzdGFtcHNUb1JldHVybhgEIAEoDjIvLkNyZWF0ZU1vbml0b3Jl",
          "ZEl0ZW1zUmVxdWVzdC5UaW1lc3RhbXBzVG9SZXR1cm4iuQEKElRpbWVzdGFt",
          "cHNUb1JldHVybhIdChlUaW1lc3RhbXBzVG9SZXR1cm5fQm90aF8yEAESIAoc",
          "VGltZXN0YW1wc1RvUmV0dXJuX0ludmFsaWRfNBACEiAKHFRpbWVzdGFtcHNU",
          "b1JldHVybl9OZWl0aGVyXzMQAxIfChtUaW1lc3RhbXBzVG9SZXR1cm5fU2Vy",
          "dmVyXzEQBBIfChtUaW1lc3RhbXBzVG9SZXR1cm5fU291cmNlXzAQBSJPChlM",
          "aXN0T2ZOb2RlVHlwZURlc2NyaXB0aW9uEjIKFF9Ob2RlVHlwZURlc2NyaXB0",
          "aW9uGAEgAygLMhQuTm9kZVR5cGVEZXNjcmlwdGlvbiJPChlMaXN0T2ZQdWJT",
          "dWJHcm91cERhdGFUeXBlEjIKFF9QdWJTdWJHcm91cERhdGFUeXBlGAEgAygL",
          "MhQuUHViU3ViR3JvdXBEYXRhVHlwZSJeCh5MaXN0T2ZQdWJsaXNoZWREYXRh",
          "U2V0RGF0YVR5cGUSPAoZX1B1Ymxpc2hlZERhdGFTZXREYXRhVHlwZRgBIAMo",
          "CzIZLlB1Ymxpc2hlZERhdGFTZXREYXRhVHlwZSJwCiRMaXN0T2ZQdWJsaXNo",
          "ZWREYXRhU2V0U291cmNlRGF0YVR5cGUSSAofX1B1Ymxpc2hlZERhdGFTZXRT",
          "b3VyY2VEYXRhVHlwZRgBIAMoCzIfLlB1Ymxpc2hlZERhdGFTZXRTb3VyY2VE",
          "YXRhVHlwZSJbCh1MaXN0T2ZQdWJsaXNoZWRFdmVudHNEYXRhVHlwZRI6Chhf",
          "UHVibGlzaGVkRXZlbnRzRGF0YVR5cGUYASADKAsyGC5QdWJsaXNoZWRFdmVu",
          "dHNEYXRhVHlwZSJPChlMaXN0T2ZSZWFkZXJHcm91cERhdGFUeXBlEjIKFF9S",
          "ZWFkZXJHcm91cERhdGFUeXBlGAEgAygLMhQuUmVhZGVyR3JvdXBEYXRhVHlw",
          "ZSLcAgoYUHViU3ViQ29ubmVjdGlvbkRhdGFUeXBlEiEKB0FkZHJlc3MYASAB",
          "KAsyEC5FeHRlbnNpb25PYmplY3QSMQoUQ29ubmVjdGlvblByb3BlcnRpZXMY",
          "AiABKAsyEy5MaXN0T2ZLZXlWYWx1ZVBhaXISDwoHRW5hYmxlZBgDIAEoCBIM",
          "CgROYW1lGAQgASgJEh0KC1B1Ymxpc2hlcklkGAUgASgLMgguVmFyaWFudBIw",
          "CgxSZWFkZXJHcm91cHMYBiABKAsyGi5MaXN0T2ZSZWFkZXJHcm91cERhdGFU",
          "eXBlEhsKE1RyYW5zcG9ydFByb2ZpbGVVcmkYByABKAkSKwoRVHJhbnNwb3J0",
          "U2V0dGluZ3MYCCABKAsyEC5FeHRlbnNpb25PYmplY3QSMAoMV3JpdGVyR3Jv",
          "dXBzGAkgASgLMhouTGlzdE9mV3JpdGVyR3JvdXBEYXRhVHlwZSLmAQoRUXVl",
          "cnlGaXJzdFJlcXVlc3QSHgoGRmlsdGVyGAEgASgLMg4uQ29udGVudEZpbHRl",
          "chIbChNNYXhEYXRhU2V0c1RvUmV0dXJuGAIgASgNEh0KFU1heFJlZmVyZW5j",
          "ZXNUb1JldHVybhgDIAEoDRItCglOb2RlVHlwZXMYBCABKAsyGi5MaXN0T2ZO",
          "b2RlVHlwZURlc2NyaXB0aW9uEiYKDl9SZXF1ZXN0SGVhZGVyGAUgASgLMg4u",
          "UmVxdWVzdEhlYWRlchIeCgRWaWV3GAYgASgLMhAuVmlld0Rlc2NyaXB0aW9u",
          "Il4KHkxpc3RPZlB1YlN1YkNvbm5lY3Rpb25EYXRhVHlwZRI8ChlfUHViU3Vi",
          "Q29ubmVjdGlvbkRhdGFUeXBlGAEgAygLMhkuUHViU3ViQ29ubmVjdGlvbkRh",
          "dGFUeXBlIqABChtQdWJTdWJDb25maWd1cmF0aW9uRGF0YVR5cGUSNAoLQ29u",
          "bmVjdGlvbnMYASABKAsyHy5MaXN0T2ZQdWJTdWJDb25uZWN0aW9uRGF0YVR5",
          "cGUSDwoHRW5hYmxlZBgCIAEoCBI6ChFQdWJsaXNoZWREYXRhU2V0cxgDIAEo",
          "CzIfLkxpc3RPZlB1Ymxpc2hlZERhdGFTZXREYXRhVHlwZSJnCiFMaXN0T2ZQ",
          "dWJTdWJDb25maWd1cmF0aW9uRGF0YVR5cGUSQgocX1B1YlN1YkNvbmZpZ3Vy",
          "YXRpb25EYXRhVHlwZRgBIAMoCzIcLlB1YlN1YkNvbmZpZ3VyYXRpb25EYXRh",
          "VHlwZQ=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::UnspecifiedType), global::UnspecifiedType.Parser, new[]{ "BaseObjectType", "Object" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AggregateConfiguration), global::AggregateConfiguration.Parser, new[]{ "PercentDataBad", "PercentDataGood", "TreatUncertainAsBad", "UseServerCapabilitiesDefaults", "UseSlopedExtrapolation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AggregateFilterResult), global::AggregateFilterResult.Parser, new[]{ "RevisedAggregateConfiguration", "RevisedProcessingInterval", "RevisedStartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Annotation), global::Annotation.Parser, new[]{ "AnnotationTime", "Message", "UserName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AnonymousIdentityToken), global::AnonymousIdentityToken.Parser, new[]{ "PolicyId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BodyType), global::BodyType.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrokerConnectionTransportDataType), global::BrokerConnectionTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "ResourceUri" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrokerDataSetReaderTransportDataType), global::BrokerDataSetReaderTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "MetaDataQueueName", "QueueName", "RequestedDeliveryGuarantee", "ResourceUri" }, null, new[]{ typeof(global::BrokerDataSetReaderTransportDataType.Types.BrokerTransportQualityOfService) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrokerDataSetWriterTransportDataType), global::BrokerDataSetWriterTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "MetaDataQueueName", "MetaDataUpdateTime", "QueueName", "RequestedDeliveryGuarantee", "ResourceUri" }, null, new[]{ typeof(global::BrokerDataSetWriterTransportDataType.Types.BrokerTransportQualityOfService) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrokerWriterGroupTransportDataType), global::BrokerWriterGroupTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "QueueName", "RequestedDeliveryGuarantee", "ResourceUri" }, null, new[]{ typeof(global::BrokerWriterGroupTransportDataType.Types.BrokerTransportQualityOfService) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuildInfo), global::BuildInfo.Parser, new[]{ "BuildDate", "BuildNumber", "ManufacturerName", "ProductName", "ProductUri", "SoftwareVersion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CartesianCoordinates), global::CartesianCoordinates.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChannelSecurityToken), global::ChannelSecurityToken.Parser, new[]{ "ChannelId", "CreatedAt", "RevisedLifetime", "TokenId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ComplexNumberType), global::ComplexNumberType.Parser, new[]{ "Imaginary", "Real" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ConfigurationVersionDataType), global::ConfigurationVersionDataType.Parser, new[]{ "MajorVersion", "MinorVersion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataChangeFilter), global::DataChangeFilter.Parser, new[]{ "DeadbandType", "DeadbandValue", "Trigger" }, null, new[]{ typeof(global::DataChangeFilter.Types.DataChangeTrigger) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSetReaderTransportDataType), global::DataSetReaderTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "MetaDataQueueName", "QueueName", "RequestedDeliveryGuarantee", "ResourceUri" }, null, new[]{ typeof(global::DataSetReaderTransportDataType.Types.BrokerTransportQualityOfService) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSetWriterMessageDataType), global::DataSetWriterMessageDataType.Parser, new[]{ "ConfiguredSize", "DataSetMessageContentMask", "DataSetOffset", "NetworkMessageNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSetWriterTransportDataType), global::DataSetWriterTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "MetaDataQueueName", "MetaDataUpdateTime", "QueueName", "RequestedDeliveryGuarantee", "ResourceUri" }, null, new[]{ typeof(global::DataSetWriterTransportDataType.Types.BrokerTransportQualityOfService) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DatagramWriterGroupTransportDataType), global::DatagramWriterGroupTransportDataType.Parser, new[]{ "MessageRepeatCount", "MessageRepeatDelay" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DecimalDataType), global::DecimalDataType.Parser, new[]{ "Scale", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DoubleComplexNumberType), global::DoubleComplexNumberType.Parser, new[]{ "Imaginary", "Real" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ElementOperand), global::ElementOperand.Parser, new[]{ "Index" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EndpointConfiguration), global::EndpointConfiguration.Parser, new[]{ "ChannelLifetime", "MaxArrayLength", "MaxBufferSize", "MaxByteStringLength", "MaxMessageSize", "MaxStringLength", "OperationTimeout", "SecurityTokenLifetime", "UseBinaryEncoding" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EndpointType), global::EndpointType.Parser, new[]{ "EndpointUrl", "SecurityMode", "SecurityPolicyUri", "TransportProfileUri" }, null, new[]{ typeof(global::EndpointType.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EphemeralKeyType), global::EphemeralKeyType.Parser, new[]{ "PublicKey", "Signature" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExpandedNodeId), global::ExpandedNodeId.Parser, new[]{ "Identifier" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Guid), global::Guid.Parser, new[]{ "String" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IdentityMappingRuleType), global::IdentityMappingRuleType.Parser, new[]{ "Criteria", "CriteriaType" }, null, new[]{ typeof(global::IdentityMappingRuleType.Types.IdentityCriteriaType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IssuedIdentityToken), global::IssuedIdentityToken.Parser, new[]{ "EncryptionAlgorithm", "PolicyId", "TokenData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JsonDataSetReaderMessageDataType), global::JsonDataSetReaderMessageDataType.Parser, new[]{ "DataSetMessageContentMask", "NetworkMessageContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JsonDataSetWriterMessageDataType), global::JsonDataSetWriterMessageDataType.Parser, new[]{ "DataSetMessageContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JsonWriterGroupMessageDataType), global::JsonWriterGroupMessageDataType.Parser, new[]{ "NetworkMessageContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBoolean), global::ListOfBoolean.Parser, new[]{ "Boolean" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrokerConnectionTransportDataType), global::ListOfBrokerConnectionTransportDataType.Parser, new[]{ "BrokerConnectionTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrokerDataSetReaderTransportDataType), global::ListOfBrokerDataSetReaderTransportDataType.Parser, new[]{ "BrokerDataSetReaderTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrokerDataSetWriterTransportDataType), global::ListOfBrokerDataSetWriterTransportDataType.Parser, new[]{ "BrokerDataSetWriterTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrokerTransportQualityOfService), global::ListOfBrokerTransportQualityOfService.Parser, new[]{ "BrokerTransportQualityOfService" }, null, new[]{ typeof(global::ListOfBrokerTransportQualityOfService.Types.BrokerTransportQualityOfService) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrokerWriterGroupTransportDataType), global::ListOfBrokerWriterGroupTransportDataType.Parser, new[]{ "BrokerWriterGroupTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfByte), global::ListOfByte.Parser, new[]{ "Byte" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfByteString), global::ListOfByteString.Parser, new[]{ "ByteString" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfCartesianCoordinates), global::ListOfCartesianCoordinates.Parser, new[]{ "CartesianCoordinates" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfConfigurationVersionDataType), global::ListOfConfigurationVersionDataType.Parser, new[]{ "ConfigurationVersionDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetFieldContentMask), global::ListOfDataSetFieldContentMask.Parser, new[]{ "DataSetFieldContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetOrderingType), global::ListOfDataSetOrderingType.Parser, new[]{ "DataSetOrderingType" }, null, new[]{ typeof(global::ListOfDataSetOrderingType.Types.DataSetOrderingType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetReaderTransportDataType), global::ListOfDataSetReaderTransportDataType.Parser, new[]{ "DataSetReaderTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetWriterMessageDataType), global::ListOfDataSetWriterMessageDataType.Parser, new[]{ "DataSetWriterMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetWriterTransportDataType), global::ListOfDataSetWriterTransportDataType.Parser, new[]{ "DataSetWriterTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDatagramWriterGroupTransportDataType), global::ListOfDatagramWriterGroupTransportDataType.Parser, new[]{ "DatagramWriterGroupTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDateTime), global::ListOfDateTime.Parser, new[]{ "DateTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDiagnosticsLevel), global::ListOfDiagnosticsLevel.Parser, new[]{ "DiagnosticsLevel" }, null, new[]{ typeof(global::ListOfDiagnosticsLevel.Types.DiagnosticsLevel) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDouble), global::ListOfDouble.Parser, new[]{ "Double" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDuplex), global::ListOfDuplex.Parser, new[]{ "Duplex" }, null, new[]{ typeof(global::ListOfDuplex.Types.Duplex) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEndpointConfiguration), global::ListOfEndpointConfiguration.Parser, new[]{ "EndpointConfiguration" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEndpointType), global::ListOfEndpointType.Parser, new[]{ "EndpointType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfExpandedNodeId), global::ListOfExpandedNodeId.Parser, new[]{ "ExpandedNodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfFloat), global::ListOfFloat.Parser, new[]{ "Float" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfGuid), global::ListOfGuid.Parser, new[]{ "Guid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfIdType), global::ListOfIdType.Parser, new[]{ "IdType" }, null, new[]{ typeof(global::ListOfIdType.Types.IdType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfIdentityCriteriaType), global::ListOfIdentityCriteriaType.Parser, new[]{ "IdentityCriteriaType" }, null, new[]{ typeof(global::ListOfIdentityCriteriaType.Types.IdentityCriteriaType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfIdentityMappingRuleType), global::ListOfIdentityMappingRuleType.Parser, new[]{ "IdentityMappingRuleType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfInt16), global::ListOfInt16.Parser, new[]{ "Int16" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfInt32), global::ListOfInt32.Parser, new[]{ "Int32" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfInt64), global::ListOfInt64.Parser, new[]{ "Int64" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfInterfaceAdminStatus), global::ListOfInterfaceAdminStatus.Parser, new[]{ "InterfaceAdminStatus" }, null, new[]{ typeof(global::ListOfInterfaceAdminStatus.Types.InterfaceAdminStatus) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfInterfaceOperStatus), global::ListOfInterfaceOperStatus.Parser, new[]{ "InterfaceOperStatus" }, null, new[]{ typeof(global::ListOfInterfaceOperStatus.Types.InterfaceOperStatus) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfJsonDataSetMessageContentMask), global::ListOfJsonDataSetMessageContentMask.Parser, new[]{ "JsonDataSetMessageContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfJsonDataSetReaderMessageDataType), global::ListOfJsonDataSetReaderMessageDataType.Parser, new[]{ "JsonDataSetReaderMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfJsonDataSetWriterMessageDataType), global::ListOfJsonDataSetWriterMessageDataType.Parser, new[]{ "JsonDataSetWriterMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfJsonNetworkMessageContentMask), global::ListOfJsonNetworkMessageContentMask.Parser, new[]{ "JsonNetworkMessageContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfJsonWriterGroupMessageDataType), global::ListOfJsonWriterGroupMessageDataType.Parser, new[]{ "JsonWriterGroupMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNegotiationStatus), global::ListOfNegotiationStatus.Parser, new[]{ "NegotiationStatus" }, null, new[]{ typeof(global::ListOfNegotiationStatus.Types.NegotiationStatus) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfOpenFileMode), global::ListOfOpenFileMode.Parser, new[]{ "OpenFileMode" }, null, new[]{ typeof(global::ListOfOpenFileMode.Types.OpenFileMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfOverrideValueHandling), global::ListOfOverrideValueHandling.Parser, new[]{ "OverrideValueHandling" }, null, new[]{ typeof(global::ListOfOverrideValueHandling.Types.OverrideValueHandling) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPubSubDiagnosticsCounterClassification), global::ListOfPubSubDiagnosticsCounterClassification.Parser, new[]{ "PubSubDiagnosticsCounterClassification" }, null, new[]{ typeof(global::ListOfPubSubDiagnosticsCounterClassification.Types.PubSubDiagnosticsCounterClassification) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPubSubState), global::ListOfPubSubState.Parser, new[]{ "PubSubState" }, null, new[]{ typeof(global::ListOfPubSubState.Types.PubSubState) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSByte), global::ListOfSByte.Parser, new[]{ "SByte" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfString), global::ListOfString.Parser, new[]{ "String" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTsnFailureCode), global::ListOfTsnFailureCode.Parser, new[]{ "TsnFailureCode" }, null, new[]{ typeof(global::ListOfTsnFailureCode.Types.TsnFailureCode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTsnListenerStatus), global::ListOfTsnListenerStatus.Parser, new[]{ "TsnListenerStatus" }, null, new[]{ typeof(global::ListOfTsnListenerStatus.Types.TsnListenerStatus) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTsnStreamState), global::ListOfTsnStreamState.Parser, new[]{ "TsnStreamState" }, null, new[]{ typeof(global::ListOfTsnStreamState.Types.TsnStreamState) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTsnTalkerStatus), global::ListOfTsnTalkerStatus.Parser, new[]{ "TsnTalkerStatus" }, null, new[]{ typeof(global::ListOfTsnTalkerStatus.Types.TsnTalkerStatus) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUInt16), global::ListOfUInt16.Parser, new[]{ "UInt16" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUInt32), global::ListOfUInt32.Parser, new[]{ "UInt32" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUInt64), global::ListOfUInt64.Parser, new[]{ "UInt64" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUadpDataSetMessageContentMask), global::ListOfUadpDataSetMessageContentMask.Parser, new[]{ "UadpDataSetMessageContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUadpNetworkMessageContentMask), global::ListOfUadpNetworkMessageContentMask.Parser, new[]{ "UadpNetworkMessageContentMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LocalizedText), global::LocalizedText.Parser, new[]{ "Locale", "Text" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MdnsDiscoveryConfiguration), global::MdnsDiscoveryConfiguration.Parser, new[]{ "MdnsServerName", "ServerCapabilities" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MethodAttributes), global::MethodAttributes.Parser, new[]{ "Description", "DisplayName", "Executable", "SpecifiedAttributes", "UserExecutable", "UserWriteMask", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModificationInfo), global::ModificationInfo.Parser, new[]{ "ModificationTime", "UpdateType", "UserName" }, null, new[]{ typeof(global::ModificationInfo.Types.HistoryUpdateType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NetworkAddressDataType), global::NetworkAddressDataType.Parser, new[]{ "NetworkInterface", "Url" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NetworkAddressUrlDataType), global::NetworkAddressUrlDataType.Parser, new[]{ "NetworkInterface", "Url" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NodeId), global::NodeId.Parser, new[]{ "Identifier" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectAttributes), global::ObjectAttributes.Parser, new[]{ "Description", "DisplayName", "EventNotifier", "SpecifiedAttributes", "UserWriteMask", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectTypeAttributes), global::ObjectTypeAttributes.Parser, new[]{ "Description", "DisplayName", "IsAbstract", "SpecifiedAttributes", "UserWriteMask", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OptionSet), global::OptionSet.Parser, new[]{ "ValidBits", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Orientation), global::Orientation.Parser, new[]{ "A", "B", "C" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QualifiedName), global::QualifiedName.Parser, new[]{ "Name", "NamespaceIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Range), global::Range.Parser, new[]{ "High", "Low" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RationalNumber), global::RationalNumber.Parser, new[]{ "Denominator", "Numerator" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadAnnotationDataDetails), global::ReadAnnotationDataDetails.Parser, new[]{ "ReqTimes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadAtTimeDetails), global::ReadAtTimeDetails.Parser, new[]{ "ReqTimes", "UseSimpleBounds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadRawModifiedDetails), global::ReadRawModifiedDetails.Parser, new[]{ "EndTime", "IsReadModified", "NumValuesPerNode", "ReturnBounds", "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadValueId), global::ReadValueId.Parser, new[]{ "AttributeId", "DataEncoding", "IndexRange", "NodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReaderGroupMessageDataType), global::ReaderGroupMessageDataType.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReaderGroupTransportDataType), global::ReaderGroupTransportDataType.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RedundantServerDataType), global::RedundantServerDataType.Parser, new[]{ "ServerId", "ServerState", "ServiceLevel" }, null, new[]{ typeof(global::RedundantServerDataType.Types.ServerState) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReferenceDescription), global::ReferenceDescription.Parser, new[]{ "BrowseName", "DisplayName", "IsForward", "NodeClass", "NodeId", "ReferenceTypeId", "TypeDefinition" }, null, new[]{ typeof(global::ReferenceDescription.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReferenceNode), global::ReferenceNode.Parser, new[]{ "IsInverse", "ReferenceTypeId", "TargetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReferenceTypeAttributes), global::ReferenceTypeAttributes.Parser, new[]{ "Description", "DisplayName", "InverseName", "IsAbstract", "SpecifiedAttributes", "Symmetric", "UserWriteMask", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RelativePathElement), global::RelativePathElement.Parser, new[]{ "IncludeSubtypes", "IsInverse", "ReferenceTypeId", "TargetName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RolePermissionType), global::RolePermissionType.Parser, new[]{ "Permissions", "RoleId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SamplingIntervalDiagnosticsDataType), global::SamplingIntervalDiagnosticsDataType.Parser, new[]{ "DisabledMonitoredItemCount", "MaxMonitoredItemCount", "MonitoredItemCount", "SamplingInterval" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SemanticChangeStructureDataType), global::SemanticChangeStructureDataType.Parser, new[]{ "Affected", "AffectedType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerDiagnosticsSummaryDataType), global::ServerDiagnosticsSummaryDataType.Parser, new[]{ "CumulatedSessionCount", "CumulatedSubscriptionCount", "CurrentSessionCount", "CurrentSubscriptionCount", "PublishingIntervalCount", "RejectedRequestsCount", "RejectedSessionCount", "SecurityRejectedRequestsCount", "SecurityRejectedSessionCount", "ServerViewCount", "SessionAbortCount", "SessionTimeoutCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerOnNetwork), global::ServerOnNetwork.Parser, new[]{ "DiscoveryUrl", "RecordId", "ServerCapabilities", "ServerName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerStatusDataType), global::ServerStatusDataType.Parser, new[]{ "BuildInfo", "CurrentTime", "SecondsTillShutdown", "ShutdownReason", "StartTime", "State" }, null, new[]{ typeof(global::ServerStatusDataType.Types.ServerState) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServiceCounterDataType), global::ServiceCounterDataType.Parser, new[]{ "ErrorCount", "TotalCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionSecurityDiagnosticsDataType), global::SessionSecurityDiagnosticsDataType.Parser, new[]{ "AuthenticationMechanism", "ClientCertificate", "ClientUserIdHistory", "ClientUserIdOfSession", "Encoding", "SecurityMode", "SecurityPolicyUri", "SessionId", "TransportProtocol" }, null, new[]{ typeof(global::SessionSecurityDiagnosticsDataType.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionlessInvokeRequestType), global::SessionlessInvokeRequestType.Parser, new[]{ "LocaleIds", "NamespaceUris", "ServerUris", "ServiceId", "UrisVersion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionlessInvokeResponseType), global::SessionlessInvokeResponseType.Parser, new[]{ "NamespaceUris", "ServerUris", "ServiceId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SignatureData), global::SignatureData.Parser, new[]{ "Algorithm", "Signature" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SignedSoftwareCertificate), global::SignedSoftwareCertificate.Parser, new[]{ "CertificateData", "Signature" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SimpleTypeDescription), global::SimpleTypeDescription.Parser, new[]{ "BaseDataType", "BuiltInType", "DataTypeId", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StatusCode), global::StatusCode.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StructureField), global::StructureField.Parser, new[]{ "ArrayDimensions", "DataType", "Description", "IsOptional", "MaxStringLength", "Name", "ValueRank" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SubscriptionAcknowledgement), global::SubscriptionAcknowledgement.Parser, new[]{ "SequenceNumber", "SubscriptionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SubscriptionDiagnosticsDataType), global::SubscriptionDiagnosticsDataType.Parser, new[]{ "CurrentKeepAliveCount", "CurrentLifetimeCount", "DataChangeNotificationsCount", "DisableCount", "DisabledMonitoredItemCount", "DiscardedMessageCount", "EnableCount", "EventNotificationsCount", "EventQueueOverFlowCount", "LatePublishRequestCount", "MaxKeepAliveCount", "MaxLifetimeCount", "MaxNotificationsPerPublish", "ModifyCount", "MonitoredItemCount", "MonitoringQueueOverflowCount", "NextSequenceNumber", "NotificationsCount", "Priority", "PublishRequestCount", "PublishingEnabled", "PublishingInterval", "RepublishMessageCount", "RepublishMessageRequestCount", "RepublishRequestCount", "SessionId", "SubscriptionId", "TransferRequestCount", "TransferredToAltClientCount", "TransferredToSameClientCount", "UnacknowledgedMessageCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ThreeDCartesianCoordinates), global::ThreeDCartesianCoordinates.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ThreeDOrientation), global::ThreeDOrientation.Parser, new[]{ "A", "B", "C" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ThreeDVector), global::ThreeDVector.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeZoneDataType), global::TimeZoneDataType.Parser, new[]{ "DaylightSavingInOffset", "Offset" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TransferResult), global::TransferResult.Parser, new[]{ "AvailableSequenceNumbers", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TrustListDataType), global::TrustListDataType.Parser, new[]{ "IssuerCertificates", "IssuerCrls", "SpecifiedLists", "TrustedCertificates", "TrustedCrls" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UadpDataSetReaderMessageDataType), global::UadpDataSetReaderMessageDataType.Parser, new[]{ "DataSetClassId", "DataSetMessageContentMask", "DataSetOffset", "GroupVersion", "NetworkMessageContentMask", "NetworkMessageNumber", "ProcessingOffset", "PublishingInterval", "ReceiveOffset" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UadpDataSetWriterMessageDataType), global::UadpDataSetWriterMessageDataType.Parser, new[]{ "ConfiguredSize", "DataSetMessageContentMask", "DataSetOffset", "NetworkMessageNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UadpWriterGroupMessageDataType), global::UadpWriterGroupMessageDataType.Parser, new[]{ "DataSetOrdering", "GroupVersion", "NetworkMessageContentMask", "PublishingOffset", "SamplingOffset" }, null, new[]{ typeof(global::UadpWriterGroupMessageDataType.Types.DataSetOrderingType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Union), global::Union.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnsignedRationalNumber), global::UnsignedRationalNumber.Parser, new[]{ "Denominator", "Numerator" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserIdentityToken), global::UserIdentityToken.Parser, new[]{ "CertificateData", "EncryptionAlgorithm", "Password", "PolicyId", "TokenData", "UserName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserNameIdentityToken), global::UserNameIdentityToken.Parser, new[]{ "EncryptionAlgorithm", "Password", "PolicyId", "UserName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserTokenPolicy), global::UserTokenPolicy.Parser, new[]{ "IssuedTokenType", "IssuerEndpointUrl", "PolicyId", "SecurityPolicyUri", "TokenType" }, null, new[]{ typeof(global::UserTokenPolicy.Types.UserTokenType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ValueType), global::ValueType.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Variant), global::Variant.Parser, new[]{ "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector), global::Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ViewAttributes), global::ViewAttributes.Parser, new[]{ "ContainsNoLoops", "Description", "DisplayName", "EventNotifier", "SpecifiedAttributes", "UserWriteMask", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ViewDescription), global::ViewDescription.Parser, new[]{ "Timestamp", "ViewId", "ViewVersion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WriterGroupMessageDataType), global::WriterGroupMessageDataType.Parser, new[]{ "DataSetOrdering", "GroupVersion", "NetworkMessageContentMask", "PublishingOffset", "SamplingOffset" }, null, new[]{ typeof(global::WriterGroupMessageDataType.Types.DataSetOrderingType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WriterGroupTransportDataType), global::WriterGroupTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "MessageRepeatCount", "MessageRepeatDelay", "QueueName", "RequestedDeliveryGuarantee", "ResourceUri" }, null, new[]{ typeof(global::WriterGroupTransportDataType.Types.BrokerTransportQualityOfService) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::X509IdentityToken), global::X509IdentityToken.Parser, new[]{ "CertificateData", "PolicyId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::XVType), global::XVType.Parser, new[]{ "Value", "X" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::XmlElementType), global::XmlElementType.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddNodesResult), global::AddNodesResult.Parser, new[]{ "AddedNodeId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddReferencesItem), global::AddReferencesItem.Parser, new[]{ "IsForward", "ReferenceTypeId", "SourceNodeId", "TargetNodeClass", "TargetNodeId", "TargetServerUri" }, null, new[]{ typeof(global::AddReferencesItem.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AggregateFilter), global::AggregateFilter.Parser, new[]{ "AggregateConfiguration", "AggregateType", "ProcessingInterval", "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AliasNameDataType), global::AliasNameDataType.Parser, new[]{ "AliasName", "ReferencedNodes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ApplicationDescription), global::ApplicationDescription.Parser, new[]{ "ApplicationName", "ApplicationType", "ApplicationUri", "DiscoveryProfileUri", "DiscoveryUrls", "GatewayServerUri", "ProductUri" }, null, new[]{ typeof(global::ApplicationDescription.Types.ApplicationType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Argument), global::Argument.Parser, new[]{ "ArrayDimensions", "DataType", "Description", "Name", "ValueRank" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowseDescription), global::BrowseDescription.Parser, new[]{ "BrowseDirection", "IncludeSubtypes", "NodeClassMask", "NodeId", "ReferenceTypeId", "ResultMask" }, null, new[]{ typeof(global::BrowseDescription.Types.BrowseDirection) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowsePathTarget), global::BrowsePathTarget.Parser, new[]{ "RemainingPathIndex", "TargetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurrencyUnitType), global::CurrencyUnitType.Parser, new[]{ "AlphabeticCode", "Currency", "Exponent", "NumericCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSetReaderMessageDataType), global::DataSetReaderMessageDataType.Parser, new[]{ "DataSetClassId", "DataSetMessageContentMask", "DataSetOffset", "GroupVersion", "NetworkMessageContentMask", "NetworkMessageNumber", "ProcessingOffset", "PublishingInterval", "ReceiveOffset" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataTypeAttributes), global::DataTypeAttributes.Parser, new[]{ "Description", "DisplayName", "IsAbstract", "SpecifiedAttributes", "UserWriteMask", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataValue), global::DataValue.Parser, new[]{ "ServerPicoseconds", "ServerTimestamp", "SourcePicoseconds", "SourceTimestamp", "StatusCode", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteAtTimeDetails), global::DeleteAtTimeDetails.Parser, new[]{ "NodeId", "ReqTimes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteEventDetails), global::DeleteEventDetails.Parser, new[]{ "EventIds", "NodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteNodesItem), global::DeleteNodesItem.Parser, new[]{ "DeleteTargetReferences", "NodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteRawModifiedDetails), global::DeleteRawModifiedDetails.Parser, new[]{ "EndTime", "IsDeleteModified", "NodeId", "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteReferencesItem), global::DeleteReferencesItem.Parser, new[]{ "DeleteBidirectional", "IsForward", "ReferenceTypeId", "SourceNodeId", "TargetNodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DiagnosticInfo), global::DiagnosticInfo.Parser, new[]{ "AdditionalInfo", "InnerDiagnosticInfo", "InnerStatusCode", "Locale", "LocalizedText", "NamespaceUri", "SymbolicId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DiscoveryConfiguration), global::DiscoveryConfiguration.Parser, new[]{ "MdnsServerName", "ServerCapabilities" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EUInformation), global::EUInformation.Parser, new[]{ "Description", "DisplayName", "NamespaceUri", "UnitId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EndpointUrlListDataType), global::EndpointUrlListDataType.Parser, new[]{ "EndpointUrlList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnumField), global::EnumField.Parser, new[]{ "Description", "DisplayName", "Name", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnumValueType), global::EnumValueType.Parser, new[]{ "Description", "DisplayName", "Name", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExtensionObject), global::ExtensionObject.Parser, new[]{ "Body", "TypeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FieldTargetDataType), global::FieldTargetDataType.Parser, new[]{ "AttributeId", "DataSetFieldId", "OverrideValue", "OverrideValueHandling", "ReceiverIndexRange", "TargetNodeId", "WriteIndexRange" }, null, new[]{ typeof(global::FieldTargetDataType.Types.OverrideValueHandling) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Frame), global::Frame.Parser, new[]{ "CartesianCoordinates", "Orientation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GenericAttributeValue), global::GenericAttributeValue.Parser, new[]{ "AttributeId", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryReadResult), global::HistoryReadResult.Parser, new[]{ "ContinuationPoint", "HistoryData", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryReadValueId), global::HistoryReadValueId.Parser, new[]{ "ContinuationPoint", "DataEncoding", "IndexRange", "NodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KeyValuePair), global::KeyValuePair.Parser, new[]{ "Key", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfAddNodesResult), global::ListOfAddNodesResult.Parser, new[]{ "AddNodesResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfAddReferencesItem), global::ListOfAddReferencesItem.Parser, new[]{ "AddReferencesItem" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfAliasNameDataType), global::ListOfAliasNameDataType.Parser, new[]{ "AliasNameDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfApplicationDescription), global::ListOfApplicationDescription.Parser, new[]{ "ApplicationDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfArgument), global::ListOfArgument.Parser, new[]{ "Argument" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrowseDescription), global::ListOfBrowseDescription.Parser, new[]{ "BrowseDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrowsePathTarget), global::ListOfBrowsePathTarget.Parser, new[]{ "BrowsePathTarget" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfCurrencyUnitType), global::ListOfCurrencyUnitType.Parser, new[]{ "CurrencyUnitType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetReaderMessageDataType), global::ListOfDataSetReaderMessageDataType.Parser, new[]{ "DataSetReaderMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataValue), global::ListOfDataValue.Parser, new[]{ "DataValue" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDeleteNodesItem), global::ListOfDeleteNodesItem.Parser, new[]{ "DeleteNodesItem" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDeleteReferencesItem), global::ListOfDeleteReferencesItem.Parser, new[]{ "DeleteReferencesItem" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDiagnosticInfo), global::ListOfDiagnosticInfo.Parser, new[]{ "DiagnosticInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEndpointUrlListDataType), global::ListOfEndpointUrlListDataType.Parser, new[]{ "EndpointUrlListDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEnumField), global::ListOfEnumField.Parser, new[]{ "EnumField" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEnumValueType), global::ListOfEnumValueType.Parser, new[]{ "EnumValueType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfExtensionObject), global::ListOfExtensionObject.Parser, new[]{ "ExtensionObject" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfFieldTargetDataType), global::ListOfFieldTargetDataType.Parser, new[]{ "FieldTargetDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfFrame), global::ListOfFrame.Parser, new[]{ "Frame" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfGenericAttributeValue), global::ListOfGenericAttributeValue.Parser, new[]{ "GenericAttributeValue" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfHistoryReadResult), global::ListOfHistoryReadResult.Parser, new[]{ "HistoryReadResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfHistoryReadValueId), global::ListOfHistoryReadValueId.Parser, new[]{ "HistoryReadValueId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfKeyValuePair), global::ListOfKeyValuePair.Parser, new[]{ "KeyValuePair" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfLocalizedText), global::ListOfLocalizedText.Parser, new[]{ "LocalizedText" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfModificationInfo), global::ListOfModificationInfo.Parser, new[]{ "ModificationInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNetworkAddressDataType), global::ListOfNetworkAddressDataType.Parser, new[]{ "NetworkAddressDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNetworkAddressUrlDataType), global::ListOfNetworkAddressUrlDataType.Parser, new[]{ "NetworkAddressUrlDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNodeId), global::ListOfNodeId.Parser, new[]{ "NodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfOptionSet), global::ListOfOptionSet.Parser, new[]{ "OptionSet" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfOrientation), global::ListOfOrientation.Parser, new[]{ "Orientation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfQualifiedName), global::ListOfQualifiedName.Parser, new[]{ "QualifiedName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfRationalNumber), global::ListOfRationalNumber.Parser, new[]{ "RationalNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfReadValueId), global::ListOfReadValueId.Parser, new[]{ "ReadValueId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfReaderGroupMessageDataType), global::ListOfReaderGroupMessageDataType.Parser, new[]{ "ReaderGroupMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfReaderGroupTransportDataType), global::ListOfReaderGroupTransportDataType.Parser, new[]{ "ReaderGroupTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfRedundantServerDataType), global::ListOfRedundantServerDataType.Parser, new[]{ "RedundantServerDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfReferenceDescription), global::ListOfReferenceDescription.Parser, new[]{ "ReferenceDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfReferenceNode), global::ListOfReferenceNode.Parser, new[]{ "ReferenceNode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfRelativePathElement), global::ListOfRelativePathElement.Parser, new[]{ "RelativePathElement" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfRolePermissionType), global::ListOfRolePermissionType.Parser, new[]{ "RolePermissionType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSamplingIntervalDiagnosticsDataType), global::ListOfSamplingIntervalDiagnosticsDataType.Parser, new[]{ "SamplingIntervalDiagnosticsDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSemanticChangeStructureDataType), global::ListOfSemanticChangeStructureDataType.Parser, new[]{ "SemanticChangeStructureDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfServerOnNetwork), global::ListOfServerOnNetwork.Parser, new[]{ "ServerOnNetwork" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSessionSecurityDiagnosticsDataType), global::ListOfSessionSecurityDiagnosticsDataType.Parser, new[]{ "SessionSecurityDiagnosticsDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSignedSoftwareCertificate), global::ListOfSignedSoftwareCertificate.Parser, new[]{ "SignedSoftwareCertificate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSimpleTypeDescription), global::ListOfSimpleTypeDescription.Parser, new[]{ "SimpleTypeDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfStatusCode), global::ListOfStatusCode.Parser, new[]{ "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfStructureField), global::ListOfStructureField.Parser, new[]{ "StructureField" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSubscriptionAcknowledgement), global::ListOfSubscriptionAcknowledgement.Parser, new[]{ "SubscriptionAcknowledgement" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSubscriptionDiagnosticsDataType), global::ListOfSubscriptionDiagnosticsDataType.Parser, new[]{ "SubscriptionDiagnosticsDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfThreeDCartesianCoordinates), global::ListOfThreeDCartesianCoordinates.Parser, new[]{ "ThreeDCartesianCoordinates" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfThreeDOrientation), global::ListOfThreeDOrientation.Parser, new[]{ "ThreeDOrientation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfThreeDVector), global::ListOfThreeDVector.Parser, new[]{ "ThreeDVector" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTimeZoneDataType), global::ListOfTimeZoneDataType.Parser, new[]{ "TimeZoneDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTransferResult), global::ListOfTransferResult.Parser, new[]{ "TransferResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTrustListDataType), global::ListOfTrustListDataType.Parser, new[]{ "TrustListDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUadpDataSetReaderMessageDataType), global::ListOfUadpDataSetReaderMessageDataType.Parser, new[]{ "UadpDataSetReaderMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUadpDataSetWriterMessageDataType), global::ListOfUadpDataSetWriterMessageDataType.Parser, new[]{ "UadpDataSetWriterMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUadpWriterGroupMessageDataType), global::ListOfUadpWriterGroupMessageDataType.Parser, new[]{ "UadpWriterGroupMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUnion), global::ListOfUnion.Parser, new[]{ "Union" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUnsignedRationalNumber), global::ListOfUnsignedRationalNumber.Parser, new[]{ "UnsignedRationalNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUserTokenPolicy), global::ListOfUserTokenPolicy.Parser, new[]{ "UserTokenPolicy" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfVariant), global::ListOfVariant.Parser, new[]{ "Variant" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfVector), global::ListOfVector.Parser, new[]{ "Vector" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfWriterGroupMessageDataType), global::ListOfWriterGroupMessageDataType.Parser, new[]{ "WriterGroupMessageDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfWriterGroupTransportDataType), global::ListOfWriterGroupTransportDataType.Parser, new[]{ "WriterGroupTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfXmlElement), global::ListOfXmlElement.Parser, new[]{ "XmlElement" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LiteralOperand), global::LiteralOperand.Parser, new[]{ "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MethodNode), global::MethodNode.Parser, new[]{ "AccessRestrictions", "BrowseName", "Description", "DisplayName", "Executable", "NodeClass", "NodeId", "References", "RolePermissions", "UserExecutable", "UserRolePermissions", "UserWriteMask", "WriteMask" }, null, new[]{ typeof(global::MethodNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModelChangeStructureDataType), global::ModelChangeStructureDataType.Parser, new[]{ "Affected", "AffectedType", "Verb" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoredItemCreateResult), global::MonitoredItemCreateResult.Parser, new[]{ "FilterResult", "MonitoredItemId", "RevisedQueueSize", "RevisedSamplingInterval", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoredItemModifyResult), global::MonitoredItemModifyResult.Parser, new[]{ "FilterResult", "RevisedQueueSize", "RevisedSamplingInterval", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoredItemNotification), global::MonitoredItemNotification.Parser, new[]{ "ClientHandle", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoringParameters), global::MonitoringParameters.Parser, new[]{ "ClientHandle", "DiscardOldest", "Filter", "QueueSize", "SamplingInterval" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NetworkGroupDataType), global::NetworkGroupDataType.Parser, new[]{ "NetworkPaths", "ServerUri" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Node), global::Node.Parser, new[]{ "AccessLevel", "AccessLevelEx", "AccessRestrictions", "ArrayDimensions", "BrowseName", "ContainsNoLoops", "DataType", "DataTypeDefinition", "Description", "DisplayName", "EventNotifier", "Executable", "Historizing", "InverseName", "IsAbstract", "MinimumSamplingInterval", "NodeClass", "NodeId", "References", "RolePermissions", "Symmetric", "UserAccessLevel", "UserExecutable", "UserRolePermissions", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, new[]{ typeof(global::Node.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NodeAttributes), global::NodeAttributes.Parser, new[]{ "AccessLevel", "ArrayDimensions", "AttributeValues", "ContainsNoLoops", "DataType", "Description", "DisplayName", "EventNotifier", "Executable", "Historizing", "InverseName", "IsAbstract", "MinimumSamplingInterval", "SpecifiedAttributes", "Symmetric", "UserAccessLevel", "UserExecutable", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NodeReference), global::NodeReference.Parser, new[]{ "IsForward", "NodeId", "ReferenceTypeId", "ReferencedNodeIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotificationMessage), global::NotificationMessage.Parser, new[]{ "NotificationData", "PublishTime", "SequenceNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectNode), global::ObjectNode.Parser, new[]{ "AccessRestrictions", "BrowseName", "Description", "DisplayName", "EventNotifier", "NodeClass", "NodeId", "References", "RolePermissions", "UserRolePermissions", "UserWriteMask", "WriteMask" }, null, new[]{ typeof(global::ObjectNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectTypeNode), global::ObjectTypeNode.Parser, new[]{ "AccessRestrictions", "BrowseName", "Description", "DisplayName", "IsAbstract", "NodeClass", "NodeId", "References", "RolePermissions", "UserRolePermissions", "UserWriteMask", "WriteMask" }, null, new[]{ typeof(global::ObjectTypeNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ParsingResult), global::ParsingResult.Parser, new[]{ "DataDiagnosticInfos", "DataStatusCodes", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProgramDiagnostic2DataType), global::ProgramDiagnostic2DataType.Parser, new[]{ "CreateClientName", "CreateSessionId", "InvocationCreationTime", "LastMethodCall", "LastMethodCallTime", "LastMethodInputArguments", "LastMethodInputValues", "LastMethodOutputArguments", "LastMethodOutputValues", "LastMethodReturnStatus", "LastMethodSessionId", "LastTransitionTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishedVariableDataType), global::PublishedVariableDataType.Parser, new[]{ "AttributeId", "DeadbandType", "DeadbandValue", "IndexRange", "MetaDataProperties", "PublishedVariable", "SamplingIntervalHint", "SubstituteValue" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueryDataSet), global::QueryDataSet.Parser, new[]{ "NodeId", "TypeDefinitionNode", "Values" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadProcessedDetails), global::ReadProcessedDetails.Parser, new[]{ "AggregateConfiguration", "AggregateType", "EndTime", "ProcessingInterval", "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReferenceTypeNode), global::ReferenceTypeNode.Parser, new[]{ "AccessRestrictions", "BrowseName", "Description", "DisplayName", "InverseName", "IsAbstract", "NodeClass", "NodeId", "References", "RolePermissions", "Symmetric", "UserRolePermissions", "UserWriteMask", "WriteMask" }, null, new[]{ typeof(global::ReferenceTypeNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisteredServer), global::RegisteredServer.Parser, new[]{ "DiscoveryUrls", "GatewayServerUri", "IsOnline", "ProductUri", "SemaphoreFilePath", "ServerNames", "ServerType", "ServerUri" }, null, new[]{ typeof(global::RegisteredServer.Types.ApplicationType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RelativePath), global::RelativePath.Parser, new[]{ "Elements" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestHeader), global::RequestHeader.Parser, new[]{ "AdditionalHeader", "AuditEntryId", "AuthenticationToken", "RequestHandle", "ReturnDiagnostics", "TimeoutHint", "Timestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseHeader), global::ResponseHeader.Parser, new[]{ "AdditionalHeader", "RequestHandle", "ServiceDiagnostics", "ServiceResult", "StringTable", "Timestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServiceFault), global::ServiceFault.Parser, new[]{ "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionDiagnosticsDataType), global::SessionDiagnosticsDataType.Parser, new[]{ "ActualSessionTimeout", "AddNodesCount", "AddReferencesCount", "BrowseCount", "BrowseNextCount", "CallCount", "ClientConnectionTime", "ClientDescription", "ClientLastContactTime", "CreateMonitoredItemsCount", "CreateSubscriptionCount", "CurrentMonitoredItemsCount", "CurrentPublishRequestsInQueue", "CurrentSubscriptionsCount", "DeleteMonitoredItemsCount", "DeleteNodesCount", "DeleteReferencesCount", "DeleteSubscriptionsCount", "EndpointUrl", "HistoryReadCount", "HistoryUpdateCount", "LocaleIds", "MaxResponseMessageSize", "ModifyMonitoredItemsCount", "ModifySubscriptionCount", "PublishCount", "QueryFirstCount", "QueryNextCount", "ReadCount", "RegisterNodesCount", "RepublishCount", "ServerUri", "SessionId", "SessionName", "SetMonitoringModeCount", "SetPublishingModeCount", "SetTriggeringCount", "TotalRequestCount", "TransferSubscriptionsCount", "TranslateBrowsePathsToNodeIdsCount", "UnauthorizedRequestCount", "UnregisterNodesCount", "WriteCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetMonitoringModeRequest), global::SetMonitoringModeRequest.Parser, new[]{ "MonitoredItemIds", "MonitoringMode", "RequestHeader", "SubscriptionId" }, null, new[]{ typeof(global::SetMonitoringModeRequest.Types.MonitoringMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetMonitoringModeResponse), global::SetMonitoringModeResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetPublishingModeRequest), global::SetPublishingModeRequest.Parser, new[]{ "PublishingEnabled", "RequestHeader", "SubscriptionIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetPublishingModeResponse), global::SetPublishingModeResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetTriggeringRequest), global::SetTriggeringRequest.Parser, new[]{ "LinksToAdd", "LinksToRemove", "RequestHeader", "SubscriptionId", "TriggeringItemId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetTriggeringResponse), global::SetTriggeringResponse.Parser, new[]{ "AddDiagnosticInfos", "AddResults", "RemoveDiagnosticInfos", "RemoveResults", "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SimpleAttributeOperand), global::SimpleAttributeOperand.Parser, new[]{ "AttributeId", "BrowsePath", "IndexRange", "TypeDefinitionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StatusChangeNotification), global::StatusChangeNotification.Parser, new[]{ "DiagnosticInfo", "Status" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StatusResult), global::StatusResult.Parser, new[]{ "DiagnosticInfo", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StructureDefinition), global::StructureDefinition.Parser, new[]{ "BaseDataType", "DefaultEncodingId", "Fields", "StructureType" }, null, new[]{ typeof(global::StructureDefinition.Types.StructureType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StructureDescription), global::StructureDescription.Parser, new[]{ "DataTypeId", "Name", "StructureDefinition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SubscribedDataSetDataType), global::SubscribedDataSetDataType.Parser, new[]{ "ParentNodeName", "RolePermissions", "TargetVariables" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SubscribedDataSetMirrorDataType), global::SubscribedDataSetMirrorDataType.Parser, new[]{ "ParentNodeName", "RolePermissions" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TargetVariablesDataType), global::TargetVariablesDataType.Parser, new[]{ "TargetVariables" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ThreeDFrame), global::ThreeDFrame.Parser, new[]{ "CartesianCoordinates", "Orientation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TransferSubscriptionsRequest), global::TransferSubscriptionsRequest.Parser, new[]{ "RequestHeader", "SendInitialValues", "SubscriptionIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TransferSubscriptionsResponse), global::TransferSubscriptionsResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TypeNode), global::TypeNode.Parser, new[]{ "AccessRestrictions", "ArrayDimensions", "BrowseName", "DataType", "DataTypeDefinition", "Description", "DisplayName", "InverseName", "IsAbstract", "NodeClass", "NodeId", "References", "RolePermissions", "Symmetric", "UserRolePermissions", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, new[]{ typeof(global::TypeNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnregisterNodesRequest), global::UnregisterNodesRequest.Parser, new[]{ "NodesToUnregister", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnregisterNodesResponse), global::UnregisterNodesResponse.Parser, new[]{ "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateDataDetails), global::UpdateDataDetails.Parser, new[]{ "NodeId", "PerformInsertReplace", "UpdateValues" }, null, new[]{ typeof(global::UpdateDataDetails.Types.PerformUpdateType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateStructureDataDetails), global::UpdateStructureDataDetails.Parser, new[]{ "NodeId", "PerformInsertReplace", "UpdateValues" }, null, new[]{ typeof(global::UpdateStructureDataDetails.Types.PerformUpdateType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VariableAttributes), global::VariableAttributes.Parser, new[]{ "AccessLevel", "ArrayDimensions", "DataType", "Description", "DisplayName", "Historizing", "MinimumSamplingInterval", "SpecifiedAttributes", "UserAccessLevel", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VariableNode), global::VariableNode.Parser, new[]{ "AccessLevel", "AccessLevelEx", "AccessRestrictions", "ArrayDimensions", "BrowseName", "DataType", "Description", "DisplayName", "Historizing", "MinimumSamplingInterval", "NodeClass", "NodeId", "References", "RolePermissions", "UserAccessLevel", "UserRolePermissions", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, new[]{ typeof(global::VariableNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VariableTypeAttributes), global::VariableTypeAttributes.Parser, new[]{ "ArrayDimensions", "DataType", "Description", "DisplayName", "IsAbstract", "SpecifiedAttributes", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VariableTypeNode), global::VariableTypeNode.Parser, new[]{ "AccessRestrictions", "ArrayDimensions", "BrowseName", "DataType", "Description", "DisplayName", "IsAbstract", "NodeClass", "NodeId", "References", "RolePermissions", "UserRolePermissions", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, new[]{ typeof(global::VariableTypeNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ViewNode), global::ViewNode.Parser, new[]{ "AccessRestrictions", "BrowseName", "ContainsNoLoops", "Description", "DisplayName", "EventNotifier", "NodeClass", "NodeId", "References", "RolePermissions", "UserRolePermissions", "UserWriteMask", "WriteMask" }, null, new[]{ typeof(global::ViewNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WriteResponse), global::WriteResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WriteValue), global::WriteValue.Parser, new[]{ "AttributeId", "IndexRange", "NodeId", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ActivateSessionRequest), global::ActivateSessionRequest.Parser, new[]{ "ClientSignature", "ClientSoftwareCertificates", "LocaleIds", "RequestHeader", "UserIdentityToken", "UserTokenSignature" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ActivateSessionResponse), global::ActivateSessionResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results", "ServerNonce" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddNodesItem), global::AddNodesItem.Parser, new[]{ "BrowseName", "NodeAttributes", "NodeClass", "ParentNodeId", "ReferenceTypeId", "RequestedNewNodeId", "TypeDefinition" }, null, new[]{ typeof(global::AddNodesItem.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddNodesResponse), global::AddNodesResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddReferencesRequest), global::AddReferencesRequest.Parser, new[]{ "ReferencesToAdd", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddReferencesResponse), global::AddReferencesResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdditionalParametersType), global::AdditionalParametersType.Parser, new[]{ "Parameters" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AttributeOperand), global::AttributeOperand.Parser, new[]{ "Alias", "AttributeId", "BrowsePath", "IndexRange", "NodeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AxisInformation), global::AxisInformation.Parser, new[]{ "AxisScaleType", "AxisSteps", "EURange", "EngineeringUnits", "Title" }, null, new[]{ typeof(global::AxisInformation.Types.AxisScaleEnumeration) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowseNextRequest), global::BrowseNextRequest.Parser, new[]{ "ContinuationPoints", "ReleaseContinuationPoints", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowsePath), global::BrowsePath.Parser, new[]{ "RelativePath", "StartingNode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowsePathResult), global::BrowsePathResult.Parser, new[]{ "StatusCode", "Targets" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowseRequest), global::BrowseRequest.Parser, new[]{ "NodesToBrowse", "RequestHeader", "RequestedMaxReferencesPerNode", "View" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowseResult), global::BrowseResult.Parser, new[]{ "ContinuationPoint", "References", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CallMethodRequest), global::CallMethodRequest.Parser, new[]{ "InputArguments", "MethodId", "ObjectId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CallMethodResult), global::CallMethodResult.Parser, new[]{ "InputArgumentDiagnosticInfos", "InputArgumentResults", "OutputArguments", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CancelRequest), global::CancelRequest.Parser, new[]{ "RequestHandle", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CancelResponse), global::CancelResponse.Parser, new[]{ "CancelCount", "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloseSecureChannelRequest), global::CloseSecureChannelRequest.Parser, new[]{ "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloseSecureChannelResponse), global::CloseSecureChannelResponse.Parser, new[]{ "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloseSessionRequest), global::CloseSessionRequest.Parser, new[]{ "DeleteSubscriptions", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloseSessionResponse), global::CloseSessionResponse.Parser, new[]{ "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ConnectionTransportDataType), global::ConnectionTransportDataType.Parser, new[]{ "AuthenticationProfileUri", "DiscoveryAddress", "ResourceUri" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ContentFilterElement), global::ContentFilterElement.Parser, new[]{ "FilterOperands", "FilterOperator" }, null, new[]{ typeof(global::ContentFilterElement.Types.FilterOperator) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ContentFilterElementResult), global::ContentFilterElementResult.Parser, new[]{ "OperandDiagnosticInfos", "OperandStatusCodes", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateSessionRequest), global::CreateSessionRequest.Parser, new[]{ "ClientCertificate", "ClientDescription", "ClientNonce", "EndpointUrl", "MaxResponseMessageSize", "RequestHeader", "RequestedSessionTimeout", "ServerUri", "SessionName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateSubscriptionRequest), global::CreateSubscriptionRequest.Parser, new[]{ "MaxNotificationsPerPublish", "Priority", "PublishingEnabled", "RequestHeader", "RequestedLifetimeCount", "RequestedMaxKeepAliveCount", "RequestedPublishingInterval" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateSubscriptionResponse), global::CreateSubscriptionResponse.Parser, new[]{ "ResponseHeader", "RevisedLifetimeCount", "RevisedMaxKeepAliveCount", "RevisedPublishingInterval", "SubscriptionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSetWriterDataType), global::DataSetWriterDataType.Parser, new[]{ "DataSetFieldContentMask", "DataSetName", "DataSetWriterId", "DataSetWriterProperties", "Enabled", "KeyFrameCount", "MessageSettings", "Name", "TransportSettings" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataTypeDefinition), global::DataTypeDefinition.Parser, new[]{ "BaseDataType", "DefaultEncodingId", "Fields", "StructureType" }, null, new[]{ typeof(global::DataTypeDefinition.Types.StructureType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataTypeNode), global::DataTypeNode.Parser, new[]{ "AccessRestrictions", "BrowseName", "DataTypeDefinition", "Description", "DisplayName", "IsAbstract", "NodeClass", "NodeId", "References", "RolePermissions", "UserRolePermissions", "UserWriteMask", "WriteMask" }, null, new[]{ typeof(global::DataTypeNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DatagramConnectionTransportDataType), global::DatagramConnectionTransportDataType.Parser, new[]{ "DiscoveryAddress" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteMonitoredItemsRequest), global::DeleteMonitoredItemsRequest.Parser, new[]{ "MonitoredItemIds", "RequestHeader", "SubscriptionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteMonitoredItemsResponse), global::DeleteMonitoredItemsResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteNodesRequest), global::DeleteNodesRequest.Parser, new[]{ "NodesToDelete", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteNodesResponse), global::DeleteNodesResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteReferencesRequest), global::DeleteReferencesRequest.Parser, new[]{ "ReferencesToDelete", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteReferencesResponse), global::DeleteReferencesResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteSubscriptionsRequest), global::DeleteSubscriptionsRequest.Parser, new[]{ "RequestHeader", "SubscriptionIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteSubscriptionsResponse), global::DeleteSubscriptionsResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EndpointDescription), global::EndpointDescription.Parser, new[]{ "EndpointUrl", "SecurityLevel", "SecurityMode", "SecurityPolicyUri", "Server", "ServerCertificate", "TransportProfileUri", "UserIdentityTokens" }, null, new[]{ typeof(global::EndpointDescription.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnumDefinition), global::EnumDefinition.Parser, new[]{ "Fields" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnumDescription), global::EnumDescription.Parser, new[]{ "BuiltInType", "DataTypeId", "EnumDefinition", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventFieldList), global::EventFieldList.Parser, new[]{ "ClientHandle", "EventFields" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FieldMetaData), global::FieldMetaData.Parser, new[]{ "ArrayDimensions", "BuiltInType", "DataSetFieldId", "DataType", "Description", "FieldFlags", "MaxStringLength", "Name", "Properties", "ValueRank" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FilterOperand), global::FilterOperand.Parser, new[]{ "Alias", "AttributeId", "BrowsePath", "Index", "IndexRange", "NodeId", "TypeDefinitionId", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FindServersOnNetworkRequest), global::FindServersOnNetworkRequest.Parser, new[]{ "MaxRecordsToReturn", "RequestHeader", "ServerCapabilityFilter", "StartingRecordId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FindServersOnNetworkResponse), global::FindServersOnNetworkResponse.Parser, new[]{ "LastCounterResetTime", "ResponseHeader", "Servers" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FindServersRequest), global::FindServersRequest.Parser, new[]{ "EndpointUrl", "LocaleIds", "RequestHeader", "ServerUris" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FindServersResponse), global::FindServersResponse.Parser, new[]{ "ResponseHeader", "Servers" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GenericAttributes), global::GenericAttributes.Parser, new[]{ "AttributeValues", "Description", "DisplayName", "SpecifiedAttributes", "UserWriteMask", "WriteMask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetEndpointsRequest), global::GetEndpointsRequest.Parser, new[]{ "EndpointUrl", "LocaleIds", "ProfileUris", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryData), global::HistoryData.Parser, new[]{ "DataValues", "ModificationInfos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryEventFieldList), global::HistoryEventFieldList.Parser, new[]{ "EventFields" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryModifiedData), global::HistoryModifiedData.Parser, new[]{ "DataValues", "ModificationInfos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryReadRequest), global::HistoryReadRequest.Parser, new[]{ "HistoryReadDetails", "NodesToRead", "ReleaseContinuationPoints", "RequestHeader", "TimestampsToReturn" }, null, new[]{ typeof(global::HistoryReadRequest.Types.TimestampsToReturn) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryReadResponse), global::HistoryReadResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryUpdateRequest), global::HistoryUpdateRequest.Parser, new[]{ "HistoryUpdateDetails", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryUpdateResult), global::HistoryUpdateResult.Parser, new[]{ "DiagnosticInfos", "OperationResults", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InstanceNode), global::InstanceNode.Parser, new[]{ "AccessLevel", "AccessLevelEx", "AccessRestrictions", "ArrayDimensions", "BrowseName", "ContainsNoLoops", "DataType", "Description", "DisplayName", "EventNotifier", "Executable", "Historizing", "MinimumSamplingInterval", "NodeClass", "NodeId", "References", "RolePermissions", "UserAccessLevel", "UserExecutable", "UserRolePermissions", "UserWriteMask", "Value", "ValueRank", "WriteMask" }, null, new[]{ typeof(global::InstanceNode.Types.NodeClass) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfAddNodesItem), global::ListOfAddNodesItem.Parser, new[]{ "AddNodesItem" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrowsePath), global::ListOfBrowsePath.Parser, new[]{ "BrowsePath" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrowsePathResult), global::ListOfBrowsePathResult.Parser, new[]{ "BrowsePathResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfBrowseResult), global::ListOfBrowseResult.Parser, new[]{ "BrowseResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfCallMethodRequest), global::ListOfCallMethodRequest.Parser, new[]{ "CallMethodRequest" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfCallMethodResult), global::ListOfCallMethodResult.Parser, new[]{ "CallMethodResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfConnectionTransportDataType), global::ListOfConnectionTransportDataType.Parser, new[]{ "ConnectionTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfContentFilterElement), global::ListOfContentFilterElement.Parser, new[]{ "ContentFilterElement" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfContentFilterElementResult), global::ListOfContentFilterElementResult.Parser, new[]{ "ContentFilterElementResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetWriterDataType), global::ListOfDataSetWriterDataType.Parser, new[]{ "DataSetWriterDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataTypeDefinition), global::ListOfDataTypeDefinition.Parser, new[]{ "DataTypeDefinition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDatagramConnectionTransportDataType), global::ListOfDatagramConnectionTransportDataType.Parser, new[]{ "DatagramConnectionTransportDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEndpointDescription), global::ListOfEndpointDescription.Parser, new[]{ "EndpointDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEnumDefinition), global::ListOfEnumDefinition.Parser, new[]{ "EnumDefinition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEnumDescription), global::ListOfEnumDescription.Parser, new[]{ "EnumDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfEventFieldList), global::ListOfEventFieldList.Parser, new[]{ "EventFieldList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfFieldMetaData), global::ListOfFieldMetaData.Parser, new[]{ "FieldMetaData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfHistoryEventFieldList), global::ListOfHistoryEventFieldList.Parser, new[]{ "HistoryEventFieldList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfHistoryUpdateResult), global::ListOfHistoryUpdateResult.Parser, new[]{ "HistoryUpdateResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfModelChangeStructureDataType), global::ListOfModelChangeStructureDataType.Parser, new[]{ "ModelChangeStructureDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfMonitoredItemCreateResult), global::ListOfMonitoredItemCreateResult.Parser, new[]{ "MonitoredItemCreateResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfMonitoredItemModifyResult), global::ListOfMonitoredItemModifyResult.Parser, new[]{ "MonitoredItemModifyResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfMonitoredItemNotification), global::ListOfMonitoredItemNotification.Parser, new[]{ "MonitoredItemNotification" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNetworkGroupDataType), global::ListOfNetworkGroupDataType.Parser, new[]{ "NetworkGroupDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNode), global::ListOfNode.Parser, new[]{ "Node" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNodeReference), global::ListOfNodeReference.Parser, new[]{ "NodeReference" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfParsingResult), global::ListOfParsingResult.Parser, new[]{ "ParsingResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPublishedVariableDataType), global::ListOfPublishedVariableDataType.Parser, new[]{ "PublishedVariableDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfQueryDataSet), global::ListOfQueryDataSet.Parser, new[]{ "QueryDataSet" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfRegisteredServer), global::ListOfRegisteredServer.Parser, new[]{ "RegisteredServer" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSessionDiagnosticsDataType), global::ListOfSessionDiagnosticsDataType.Parser, new[]{ "SessionDiagnosticsDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSimpleAttributeOperand), global::ListOfSimpleAttributeOperand.Parser, new[]{ "SimpleAttributeOperand" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfStatusResult), global::ListOfStatusResult.Parser, new[]{ "StatusResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfStructureDefinition), global::ListOfStructureDefinition.Parser, new[]{ "StructureDefinition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfStructureDescription), global::ListOfStructureDescription.Parser, new[]{ "StructureDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSubscribedDataSetDataType), global::ListOfSubscribedDataSetDataType.Parser, new[]{ "SubscribedDataSetDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfSubscribedDataSetMirrorDataType), global::ListOfSubscribedDataSetMirrorDataType.Parser, new[]{ "SubscribedDataSetMirrorDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfTargetVariablesDataType), global::ListOfTargetVariablesDataType.Parser, new[]{ "TargetVariablesDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfThreeDFrame), global::ListOfThreeDFrame.Parser, new[]{ "ThreeDFrame" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfWriteValue), global::ListOfWriteValue.Parser, new[]{ "WriteValue" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModifyMonitoredItemsResponse), global::ModifyMonitoredItemsResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModifySubscriptionRequest), global::ModifySubscriptionRequest.Parser, new[]{ "MaxNotificationsPerPublish", "Priority", "RequestHeader", "RequestedLifetimeCount", "RequestedMaxKeepAliveCount", "RequestedPublishingInterval", "SubscriptionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModifySubscriptionResponse), global::ModifySubscriptionResponse.Parser, new[]{ "ResponseHeader", "RevisedLifetimeCount", "RevisedMaxKeepAliveCount", "RevisedPublishingInterval" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoredItemCreateRequest), global::MonitoredItemCreateRequest.Parser, new[]{ "ItemToMonitor", "MonitoringMode", "RequestedParameters" }, null, new[]{ typeof(global::MonitoredItemCreateRequest.Types.MonitoringMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoredItemModifyRequest), global::MonitoredItemModifyRequest.Parser, new[]{ "MonitoredItemId", "RequestedParameters" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotificationData), global::NotificationData.Parser, new[]{ "DiagnosticInfo", "DiagnosticInfos", "Events", "MonitoredItems", "Status" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OpenSecureChannelRequest), global::OpenSecureChannelRequest.Parser, new[]{ "ClientNonce", "ClientProtocolVersion", "RequestHeader", "RequestType", "RequestedLifetime", "SecurityMode" }, null, new[]{ typeof(global::OpenSecureChannelRequest.Types.SecurityTokenRequestType), typeof(global::OpenSecureChannelRequest.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OpenSecureChannelResponse), global::OpenSecureChannelResponse.Parser, new[]{ "ResponseHeader", "SecurityToken", "ServerNonce", "ServerProtocolVersion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProgramDiagnosticDataType), global::ProgramDiagnosticDataType.Parser, new[]{ "CreateClientName", "CreateSessionId", "InvocationCreationTime", "LastMethodCall", "LastMethodCallTime", "LastMethodInputArguments", "LastMethodOutputArguments", "LastMethodReturnStatus", "LastMethodSessionId", "LastTransitionTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishRequest), global::PublishRequest.Parser, new[]{ "RequestHeader", "SubscriptionAcknowledgements" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishResponse), global::PublishResponse.Parser, new[]{ "AvailableSequenceNumbers", "DiagnosticInfos", "MoreNotifications", "NotificationMessage", "ResponseHeader", "Results", "SubscriptionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishedDataItemsDataType), global::PublishedDataItemsDataType.Parser, new[]{ "PublishedData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueryDataDescription), global::QueryDataDescription.Parser, new[]{ "AttributeId", "IndexRange", "RelativePath" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueryNextRequest), global::QueryNextRequest.Parser, new[]{ "ContinuationPoint", "ReleaseContinuationPoint", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueryNextResponse), global::QueryNextResponse.Parser, new[]{ "QueryDataSets", "ResponseHeader", "RevisedContinuationPoint" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadRequest), global::ReadRequest.Parser, new[]{ "MaxAge", "NodesToRead", "RequestHeader", "TimestampsToReturn" }, null, new[]{ typeof(global::ReadRequest.Types.TimestampsToReturn) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadResponse), global::ReadResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterNodesRequest), global::RegisterNodesRequest.Parser, new[]{ "NodesToRegister", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterNodesResponse), global::RegisterNodesResponse.Parser, new[]{ "RegisteredNodeIds", "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterServer2Request), global::RegisterServer2Request.Parser, new[]{ "DiscoveryConfiguration", "RequestHeader", "Server" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterServer2Response), global::RegisterServer2Response.Parser, new[]{ "ConfigurationResults", "DiagnosticInfos", "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterServerRequest), global::RegisterServerRequest.Parser, new[]{ "RequestHeader", "Server" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterServerResponse), global::RegisterServerResponse.Parser, new[]{ "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RepublishRequest), global::RepublishRequest.Parser, new[]{ "RequestHeader", "RetransmitSequenceNumber", "SubscriptionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RepublishResponse), global::RepublishResponse.Parser, new[]{ "NotificationMessage", "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TranslateBrowsePathsToNodeIdsRequest), global::TranslateBrowsePathsToNodeIdsRequest.Parser, new[]{ "BrowsePaths", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TranslateBrowsePathsToNodeIdsResponse), global::TranslateBrowsePathsToNodeIdsResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UABinaryFileDataType), global::UABinaryFileDataType.Parser, new[]{ "Body", "EnumDataTypes", "FileHeader", "Namespaces", "SchemaLocation", "SimpleDataTypes", "StructureDataTypes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WriteRequest), global::WriteRequest.Parser, new[]{ "NodesToWrite", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WriterGroupDataType), global::WriterGroupDataType.Parser, new[]{ "DataSetWriters", "Enabled", "GroupProperties", "HeaderLayoutUri", "KeepAliveTime", "LocaleIds", "MaxNetworkMessageSize", "MessageSettings", "Name", "Priority", "PublishingInterval", "SecurityGroupId", "SecurityKeyServices", "SecurityMode", "TransportSettings", "WriterGroupId" }, null, new[]{ typeof(global::WriterGroupDataType.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddNodesRequest), global::AddNodesRequest.Parser, new[]{ "NodesToAdd", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowseNextResponse), global::BrowseNextResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrowseResponse), global::BrowseResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CallRequest), global::CallRequest.Parser, new[]{ "MethodsToCall", "RequestHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CallResponse), global::CallResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ContentFilter), global::ContentFilter.Parser, new[]{ "Elements" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ContentFilterResult), global::ContentFilterResult.Parser, new[]{ "ElementDiagnosticInfos", "ElementResults" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateMonitoredItemsResponse), global::CreateMonitoredItemsResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateSessionResponse), global::CreateSessionResponse.Parser, new[]{ "AuthenticationToken", "MaxRequestMessageSize", "ResponseHeader", "RevisedSessionTimeout", "ServerCertificate", "ServerEndpoints", "ServerNonce", "ServerSignature", "ServerSoftwareCertificates", "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataChangeNotification), global::DataChangeNotification.Parser, new[]{ "DiagnosticInfos", "MonitoredItems" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSetMetaDataType), global::DataSetMetaDataType.Parser, new[]{ "ConfigurationVersion", "DataSetClassId", "Description", "EnumDataTypes", "Fields", "Name", "Namespaces", "SimpleDataTypes", "StructureDataTypes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSetReaderDataType), global::DataSetReaderDataType.Parser, new[]{ "DataSetFieldContentMask", "DataSetMetaData", "DataSetReaderProperties", "DataSetWriterId", "Enabled", "HeaderLayoutUri", "KeyFrameCount", "MessageReceiveTimeout", "MessageSettings", "Name", "PublisherId", "SecurityGroupId", "SecurityKeyServices", "SecurityMode", "SubscribedDataSet", "TransportSettings", "WriterGroupId" }, null, new[]{ typeof(global::DataSetReaderDataType.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataTypeDescription), global::DataTypeDescription.Parser, new[]{ "BaseDataType", "BuiltInType", "DataTypeId", "EnumDefinition", "Name", "StructureDefinition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataTypeSchemaHeader), global::DataTypeSchemaHeader.Parser, new[]{ "Body", "ConfigurationVersion", "DataSetClassId", "Description", "EnumDataTypes", "Fields", "FileHeader", "Name", "Namespaces", "SchemaLocation", "SimpleDataTypes", "StructureDataTypes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventFilter), global::EventFilter.Parser, new[]{ "SelectClauses", "WhereClause" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventFilterResult), global::EventFilterResult.Parser, new[]{ "SelectClauseDiagnosticInfos", "SelectClauseResults", "WhereClauseResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventNotificationList), global::EventNotificationList.Parser, new[]{ "Events" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetEndpointsResponse), global::GetEndpointsResponse.Parser, new[]{ "Endpoints", "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryEvent), global::HistoryEvent.Parser, new[]{ "Events" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryReadDetails), global::HistoryReadDetails.Parser, new[]{ "AggregateConfiguration", "AggregateType", "EndTime", "Filter", "IsReadModified", "NumValuesPerNode", "ProcessingInterval", "ReqTimes", "ReturnBounds", "StartTime", "UseSimpleBounds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryUpdateDetails), global::HistoryUpdateDetails.Parser, new[]{ "EndTime", "EventData", "EventIds", "Filter", "IsDeleteModified", "NodeId", "PerformInsertReplace", "ReqTimes", "StartTime", "UpdateValues" }, null, new[]{ typeof(global::HistoryUpdateDetails.Types.PerformUpdateType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryUpdateResponse), global::HistoryUpdateResponse.Parser, new[]{ "DiagnosticInfos", "ResponseHeader", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfContentFilter), global::ListOfContentFilter.Parser, new[]{ "ContentFilter" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetMetaDataType), global::ListOfDataSetMetaDataType.Parser, new[]{ "DataSetMetaDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataSetReaderDataType), global::ListOfDataSetReaderDataType.Parser, new[]{ "DataSetReaderDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataTypeDescription), global::ListOfDataTypeDescription.Parser, new[]{ "DataTypeDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfDataTypeSchemaHeader), global::ListOfDataTypeSchemaHeader.Parser, new[]{ "DataTypeSchemaHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfMonitoredItemCreateRequest), global::ListOfMonitoredItemCreateRequest.Parser, new[]{ "MonitoredItemCreateRequest" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfMonitoredItemModifyRequest), global::ListOfMonitoredItemModifyRequest.Parser, new[]{ "MonitoredItemModifyRequest" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPublishedDataItemsDataType), global::ListOfPublishedDataItemsDataType.Parser, new[]{ "PublishedDataItemsDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfQueryDataDescription), global::ListOfQueryDataDescription.Parser, new[]{ "QueryDataDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfUABinaryFileDataType), global::ListOfUABinaryFileDataType.Parser, new[]{ "UABinaryFileDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfWriterGroupDataType), global::ListOfWriterGroupDataType.Parser, new[]{ "WriterGroupDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModifyMonitoredItemsRequest), global::ModifyMonitoredItemsRequest.Parser, new[]{ "ItemsToModify", "RequestHeader", "SubscriptionId", "TimestampsToReturn" }, null, new[]{ typeof(global::ModifyMonitoredItemsRequest.Types.TimestampsToReturn) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoringFilter), global::MonitoringFilter.Parser, new[]{ "AggregateConfiguration", "AggregateType", "DeadbandType", "DeadbandValue", "ProcessingInterval", "SelectClauses", "StartTime", "Trigger", "WhereClause" }, null, new[]{ typeof(global::MonitoringFilter.Types.DataChangeTrigger) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonitoringFilterResult), global::MonitoringFilterResult.Parser, new[]{ "RevisedAggregateConfiguration", "RevisedProcessingInterval", "RevisedStartTime", "SelectClauseDiagnosticInfos", "SelectClauseResults", "WhereClauseResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NodeTypeDescription), global::NodeTypeDescription.Parser, new[]{ "DataToReturn", "IncludeSubTypes", "TypeDefinitionNode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PubSubGroupDataType), global::PubSubGroupDataType.Parser, new[]{ "DataSetReaders", "DataSetWriters", "Enabled", "GroupProperties", "HeaderLayoutUri", "KeepAliveTime", "LocaleIds", "MaxNetworkMessageSize", "MessageSettings", "Name", "Priority", "PublishingInterval", "SecurityGroupId", "SecurityKeyServices", "SecurityMode", "TransportSettings", "WriterGroupId" }, null, new[]{ typeof(global::PubSubGroupDataType.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishedDataSetDataType), global::PublishedDataSetDataType.Parser, new[]{ "DataSetFolder", "DataSetMetaData", "DataSetSource", "ExtensionFields", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishedDataSetSourceDataType), global::PublishedDataSetSourceDataType.Parser, new[]{ "EventNotifier", "Filter", "PublishedData", "SelectedFields" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PublishedEventsDataType), global::PublishedEventsDataType.Parser, new[]{ "EventNotifier", "Filter", "SelectedFields" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueryFirstResponse), global::QueryFirstResponse.Parser, new[]{ "ContinuationPoint", "DiagnosticInfos", "FilterResult", "ParsingResults", "QueryDataSets", "ResponseHeader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadEventDetails), global::ReadEventDetails.Parser, new[]{ "EndTime", "Filter", "NumValuesPerNode", "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReaderGroupDataType), global::ReaderGroupDataType.Parser, new[]{ "DataSetReaders", "Enabled", "GroupProperties", "MaxNetworkMessageSize", "MessageSettings", "Name", "SecurityGroupId", "SecurityKeyServices", "SecurityMode", "TransportSettings" }, null, new[]{ typeof(global::ReaderGroupDataType.Types.MessageSecurityMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateEventDetails), global::UpdateEventDetails.Parser, new[]{ "EventData", "Filter", "NodeId", "PerformInsertReplace" }, null, new[]{ typeof(global::UpdateEventDetails.Types.PerformUpdateType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateMonitoredItemsRequest), global::CreateMonitoredItemsRequest.Parser, new[]{ "ItemsToCreate", "RequestHeader", "SubscriptionId", "TimestampsToReturn" }, null, new[]{ typeof(global::CreateMonitoredItemsRequest.Types.TimestampsToReturn) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfNodeTypeDescription), global::ListOfNodeTypeDescription.Parser, new[]{ "NodeTypeDescription" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPubSubGroupDataType), global::ListOfPubSubGroupDataType.Parser, new[]{ "PubSubGroupDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPublishedDataSetDataType), global::ListOfPublishedDataSetDataType.Parser, new[]{ "PublishedDataSetDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPublishedDataSetSourceDataType), global::ListOfPublishedDataSetSourceDataType.Parser, new[]{ "PublishedDataSetSourceDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPublishedEventsDataType), global::ListOfPublishedEventsDataType.Parser, new[]{ "PublishedEventsDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfReaderGroupDataType), global::ListOfReaderGroupDataType.Parser, new[]{ "ReaderGroupDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PubSubConnectionDataType), global::PubSubConnectionDataType.Parser, new[]{ "Address", "ConnectionProperties", "Enabled", "Name", "PublisherId", "ReaderGroups", "TransportProfileUri", "TransportSettings", "WriterGroups" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueryFirstRequest), global::QueryFirstRequest.Parser, new[]{ "Filter", "MaxDataSetsToReturn", "MaxReferencesToReturn", "NodeTypes", "RequestHeader", "View" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPubSubConnectionDataType), global::ListOfPubSubConnectionDataType.Parser, new[]{ "PubSubConnectionDataType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PubSubConfigurationDataType), global::PubSubConfigurationDataType.Parser, new[]{ "Connections", "Enabled", "PublishedDataSets" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListOfPubSubConfigurationDataType), global::ListOfPubSubConfigurationDataType.Parser, new[]{ "PubSubConfigurationDataType" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class UnspecifiedType : pb::IMessage<UnspecifiedType> {
  private static readonly pb::MessageParser<UnspecifiedType> _parser = new pb::MessageParser<UnspecifiedType>(() => new UnspecifiedType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnspecifiedType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnspecifiedType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnspecifiedType(UnspecifiedType other) : this() {
    baseObjectType_ = other.baseObjectType_;
    object_ = other.object_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnspecifiedType Clone() {
    return new UnspecifiedType(this);
  }

  /// <summary>Field number for the "baseObjectType" field.</summary>
  public const int BaseObjectTypeFieldNumber = 1;
  private readonly static string BaseObjectTypeDefaultValue = "";

  private string baseObjectType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BaseObjectType {
    get { return baseObjectType_ ?? BaseObjectTypeDefaultValue; }
    set {
      baseObjectType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "baseObjectType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBaseObjectType {
    get { return baseObjectType_ != null; }
  }
  /// <summary>Clears the value of the "baseObjectType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBaseObjectType() {
    baseObjectType_ = null;
  }

  /// <summary>Field number for the "object" field.</summary>
  public const int ObjectFieldNumber = 2;
  private readonly static pb::ByteString ObjectDefaultValue = pb::ByteString.Empty;

  private pb::ByteString object_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Object {
    get { return object_ ?? ObjectDefaultValue; }
    set {
      object_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "object" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasObject {
    get { return object_ != null; }
  }
  /// <summary>Clears the value of the "object" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearObject() {
    object_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnspecifiedType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnspecifiedType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BaseObjectType != other.BaseObjectType) return false;
    if (Object != other.Object) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBaseObjectType) hash ^= BaseObjectType.GetHashCode();
    if (HasObject) hash ^= Object.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBaseObjectType) {
      output.WriteRawTag(10);
      output.WriteString(BaseObjectType);
    }
    if (HasObject) {
      output.WriteRawTag(18);
      output.WriteBytes(Object);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBaseObjectType) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseObjectType);
    }
    if (HasObject) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Object);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnspecifiedType other) {
    if (other == null) {
      return;
    }
    if (other.HasBaseObjectType) {
      BaseObjectType = other.BaseObjectType;
    }
    if (other.HasObject) {
      Object = other.Object;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BaseObjectType = input.ReadString();
          break;
        }
        case 18: {
          Object = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class AggregateConfiguration : pb::IMessage<AggregateConfiguration> {
  private static readonly pb::MessageParser<AggregateConfiguration> _parser = new pb::MessageParser<AggregateConfiguration>(() => new AggregateConfiguration());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AggregateConfiguration> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateConfiguration() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateConfiguration(AggregateConfiguration other) : this() {
    _hasBits0 = other._hasBits0;
    percentDataBad_ = other.percentDataBad_;
    percentDataGood_ = other.percentDataGood_;
    treatUncertainAsBad_ = other.treatUncertainAsBad_;
    useServerCapabilitiesDefaults_ = other.useServerCapabilitiesDefaults_;
    useSlopedExtrapolation_ = other.useSlopedExtrapolation_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateConfiguration Clone() {
    return new AggregateConfiguration(this);
  }

  /// <summary>Field number for the "PercentDataBad" field.</summary>
  public const int PercentDataBadFieldNumber = 1;
  private readonly static uint PercentDataBadDefaultValue = 0;

  private uint percentDataBad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentDataBad {
    get { if ((_hasBits0 & 1) != 0) { return percentDataBad_; } else { return PercentDataBadDefaultValue; } }
    set {
      _hasBits0 |= 1;
      percentDataBad_ = value;
    }
  }
  /// <summary>Gets whether the "PercentDataBad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPercentDataBad {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "PercentDataBad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPercentDataBad() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "PercentDataGood" field.</summary>
  public const int PercentDataGoodFieldNumber = 2;
  private readonly static uint PercentDataGoodDefaultValue = 0;

  private uint percentDataGood_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentDataGood {
    get { if ((_hasBits0 & 2) != 0) { return percentDataGood_; } else { return PercentDataGoodDefaultValue; } }
    set {
      _hasBits0 |= 2;
      percentDataGood_ = value;
    }
  }
  /// <summary>Gets whether the "PercentDataGood" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPercentDataGood {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "PercentDataGood" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPercentDataGood() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "TreatUncertainAsBad" field.</summary>
  public const int TreatUncertainAsBadFieldNumber = 3;
  private readonly static bool TreatUncertainAsBadDefaultValue = false;

  private bool treatUncertainAsBad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TreatUncertainAsBad {
    get { if ((_hasBits0 & 4) != 0) { return treatUncertainAsBad_; } else { return TreatUncertainAsBadDefaultValue; } }
    set {
      _hasBits0 |= 4;
      treatUncertainAsBad_ = value;
    }
  }
  /// <summary>Gets whether the "TreatUncertainAsBad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTreatUncertainAsBad {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "TreatUncertainAsBad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTreatUncertainAsBad() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "UseServerCapabilitiesDefaults" field.</summary>
  public const int UseServerCapabilitiesDefaultsFieldNumber = 4;
  private readonly static bool UseServerCapabilitiesDefaultsDefaultValue = false;

  private bool useServerCapabilitiesDefaults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseServerCapabilitiesDefaults {
    get { if ((_hasBits0 & 8) != 0) { return useServerCapabilitiesDefaults_; } else { return UseServerCapabilitiesDefaultsDefaultValue; } }
    set {
      _hasBits0 |= 8;
      useServerCapabilitiesDefaults_ = value;
    }
  }
  /// <summary>Gets whether the "UseServerCapabilitiesDefaults" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUseServerCapabilitiesDefaults {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UseServerCapabilitiesDefaults" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUseServerCapabilitiesDefaults() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "UseSlopedExtrapolation" field.</summary>
  public const int UseSlopedExtrapolationFieldNumber = 5;
  private readonly static bool UseSlopedExtrapolationDefaultValue = false;

  private bool useSlopedExtrapolation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseSlopedExtrapolation {
    get { if ((_hasBits0 & 16) != 0) { return useSlopedExtrapolation_; } else { return UseSlopedExtrapolationDefaultValue; } }
    set {
      _hasBits0 |= 16;
      useSlopedExtrapolation_ = value;
    }
  }
  /// <summary>Gets whether the "UseSlopedExtrapolation" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUseSlopedExtrapolation {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "UseSlopedExtrapolation" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUseSlopedExtrapolation() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AggregateConfiguration);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AggregateConfiguration other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PercentDataBad != other.PercentDataBad) return false;
    if (PercentDataGood != other.PercentDataGood) return false;
    if (TreatUncertainAsBad != other.TreatUncertainAsBad) return false;
    if (UseServerCapabilitiesDefaults != other.UseServerCapabilitiesDefaults) return false;
    if (UseSlopedExtrapolation != other.UseSlopedExtrapolation) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPercentDataBad) hash ^= PercentDataBad.GetHashCode();
    if (HasPercentDataGood) hash ^= PercentDataGood.GetHashCode();
    if (HasTreatUncertainAsBad) hash ^= TreatUncertainAsBad.GetHashCode();
    if (HasUseServerCapabilitiesDefaults) hash ^= UseServerCapabilitiesDefaults.GetHashCode();
    if (HasUseSlopedExtrapolation) hash ^= UseSlopedExtrapolation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPercentDataBad) {
      output.WriteRawTag(8);
      output.WriteUInt32(PercentDataBad);
    }
    if (HasPercentDataGood) {
      output.WriteRawTag(16);
      output.WriteUInt32(PercentDataGood);
    }
    if (HasTreatUncertainAsBad) {
      output.WriteRawTag(24);
      output.WriteBool(TreatUncertainAsBad);
    }
    if (HasUseServerCapabilitiesDefaults) {
      output.WriteRawTag(32);
      output.WriteBool(UseServerCapabilitiesDefaults);
    }
    if (HasUseSlopedExtrapolation) {
      output.WriteRawTag(40);
      output.WriteBool(UseSlopedExtrapolation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPercentDataBad) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentDataBad);
    }
    if (HasPercentDataGood) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentDataGood);
    }
    if (HasTreatUncertainAsBad) {
      size += 1 + 1;
    }
    if (HasUseServerCapabilitiesDefaults) {
      size += 1 + 1;
    }
    if (HasUseSlopedExtrapolation) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AggregateConfiguration other) {
    if (other == null) {
      return;
    }
    if (other.HasPercentDataBad) {
      PercentDataBad = other.PercentDataBad;
    }
    if (other.HasPercentDataGood) {
      PercentDataGood = other.PercentDataGood;
    }
    if (other.HasTreatUncertainAsBad) {
      TreatUncertainAsBad = other.TreatUncertainAsBad;
    }
    if (other.HasUseServerCapabilitiesDefaults) {
      UseServerCapabilitiesDefaults = other.UseServerCapabilitiesDefaults;
    }
    if (other.HasUseSlopedExtrapolation) {
      UseSlopedExtrapolation = other.UseSlopedExtrapolation;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PercentDataBad = input.ReadUInt32();
          break;
        }
        case 16: {
          PercentDataGood = input.ReadUInt32();
          break;
        }
        case 24: {
          TreatUncertainAsBad = input.ReadBool();
          break;
        }
        case 32: {
          UseServerCapabilitiesDefaults = input.ReadBool();
          break;
        }
        case 40: {
          UseSlopedExtrapolation = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class AggregateFilterResult : pb::IMessage<AggregateFilterResult> {
  private static readonly pb::MessageParser<AggregateFilterResult> _parser = new pb::MessageParser<AggregateFilterResult>(() => new AggregateFilterResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AggregateFilterResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateFilterResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateFilterResult(AggregateFilterResult other) : this() {
    _hasBits0 = other._hasBits0;
    revisedAggregateConfiguration_ = other.revisedAggregateConfiguration_ != null ? other.revisedAggregateConfiguration_.Clone() : null;
    revisedProcessingInterval_ = other.revisedProcessingInterval_;
    revisedStartTime_ = other.revisedStartTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateFilterResult Clone() {
    return new AggregateFilterResult(this);
  }

  /// <summary>Field number for the "RevisedAggregateConfiguration" field.</summary>
  public const int RevisedAggregateConfigurationFieldNumber = 1;
  private global::AggregateConfiguration revisedAggregateConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AggregateConfiguration RevisedAggregateConfiguration {
    get { return revisedAggregateConfiguration_; }
    set {
      revisedAggregateConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "RevisedProcessingInterval" field.</summary>
  public const int RevisedProcessingIntervalFieldNumber = 2;
  private readonly static double RevisedProcessingIntervalDefaultValue = 0D;

  private double revisedProcessingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RevisedProcessingInterval {
    get { if ((_hasBits0 & 1) != 0) { return revisedProcessingInterval_; } else { return RevisedProcessingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 1;
      revisedProcessingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedProcessingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedProcessingInterval {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RevisedProcessingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedProcessingInterval() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RevisedStartTime" field.</summary>
  public const int RevisedStartTimeFieldNumber = 3;
  private readonly static long RevisedStartTimeDefaultValue = 0L;

  private long revisedStartTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RevisedStartTime {
    get { if ((_hasBits0 & 2) != 0) { return revisedStartTime_; } else { return RevisedStartTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      revisedStartTime_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedStartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedStartTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RevisedStartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedStartTime() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AggregateFilterResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AggregateFilterResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RevisedAggregateConfiguration, other.RevisedAggregateConfiguration)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevisedProcessingInterval, other.RevisedProcessingInterval)) return false;
    if (RevisedStartTime != other.RevisedStartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (revisedAggregateConfiguration_ != null) hash ^= RevisedAggregateConfiguration.GetHashCode();
    if (HasRevisedProcessingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevisedProcessingInterval);
    if (HasRevisedStartTime) hash ^= RevisedStartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (revisedAggregateConfiguration_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RevisedAggregateConfiguration);
    }
    if (HasRevisedProcessingInterval) {
      output.WriteRawTag(17);
      output.WriteDouble(RevisedProcessingInterval);
    }
    if (HasRevisedStartTime) {
      output.WriteRawTag(24);
      output.WriteInt64(RevisedStartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (revisedAggregateConfiguration_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevisedAggregateConfiguration);
    }
    if (HasRevisedProcessingInterval) {
      size += 1 + 8;
    }
    if (HasRevisedStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RevisedStartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AggregateFilterResult other) {
    if (other == null) {
      return;
    }
    if (other.revisedAggregateConfiguration_ != null) {
      if (revisedAggregateConfiguration_ == null) {
        RevisedAggregateConfiguration = new global::AggregateConfiguration();
      }
      RevisedAggregateConfiguration.MergeFrom(other.RevisedAggregateConfiguration);
    }
    if (other.HasRevisedProcessingInterval) {
      RevisedProcessingInterval = other.RevisedProcessingInterval;
    }
    if (other.HasRevisedStartTime) {
      RevisedStartTime = other.RevisedStartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (revisedAggregateConfiguration_ == null) {
            RevisedAggregateConfiguration = new global::AggregateConfiguration();
          }
          input.ReadMessage(RevisedAggregateConfiguration);
          break;
        }
        case 17: {
          RevisedProcessingInterval = input.ReadDouble();
          break;
        }
        case 24: {
          RevisedStartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class Annotation : pb::IMessage<Annotation> {
  private static readonly pb::MessageParser<Annotation> _parser = new pb::MessageParser<Annotation>(() => new Annotation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Annotation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Annotation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Annotation(Annotation other) : this() {
    _hasBits0 = other._hasBits0;
    annotationTime_ = other.annotationTime_;
    message_ = other.message_;
    userName_ = other.userName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Annotation Clone() {
    return new Annotation(this);
  }

  /// <summary>Field number for the "AnnotationTime" field.</summary>
  public const int AnnotationTimeFieldNumber = 1;
  private readonly static long AnnotationTimeDefaultValue = 0L;

  private long annotationTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AnnotationTime {
    get { if ((_hasBits0 & 1) != 0) { return annotationTime_; } else { return AnnotationTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      annotationTime_ = value;
    }
  }
  /// <summary>Gets whether the "AnnotationTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAnnotationTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AnnotationTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAnnotationTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Message" field.</summary>
  public const int MessageFieldNumber = 2;
  private readonly static string MessageDefaultValue = "";

  private string message_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_ ?? MessageDefaultValue; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessage {
    get { return message_ != null; }
  }
  /// <summary>Clears the value of the "Message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessage() {
    message_ = null;
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 3;
  private readonly static string UserNameDefaultValue = "";

  private string userName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_ ?? UserNameDefaultValue; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName {
    get { return userName_ != null; }
  }
  /// <summary>Clears the value of the "UserName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName() {
    userName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Annotation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Annotation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AnnotationTime != other.AnnotationTime) return false;
    if (Message != other.Message) return false;
    if (UserName != other.UserName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAnnotationTime) hash ^= AnnotationTime.GetHashCode();
    if (HasMessage) hash ^= Message.GetHashCode();
    if (HasUserName) hash ^= UserName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAnnotationTime) {
      output.WriteRawTag(8);
      output.WriteInt64(AnnotationTime);
    }
    if (HasMessage) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (HasUserName) {
      output.WriteRawTag(26);
      output.WriteString(UserName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAnnotationTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AnnotationTime);
    }
    if (HasMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (HasUserName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Annotation other) {
    if (other == null) {
      return;
    }
    if (other.HasAnnotationTime) {
      AnnotationTime = other.AnnotationTime;
    }
    if (other.HasMessage) {
      Message = other.Message;
    }
    if (other.HasUserName) {
      UserName = other.UserName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AnnotationTime = input.ReadInt64();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
        case 26: {
          UserName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class AnonymousIdentityToken : pb::IMessage<AnonymousIdentityToken> {
  private static readonly pb::MessageParser<AnonymousIdentityToken> _parser = new pb::MessageParser<AnonymousIdentityToken>(() => new AnonymousIdentityToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AnonymousIdentityToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AnonymousIdentityToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AnonymousIdentityToken(AnonymousIdentityToken other) : this() {
    policyId_ = other.policyId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AnonymousIdentityToken Clone() {
    return new AnonymousIdentityToken(this);
  }

  /// <summary>Field number for the "PolicyId" field.</summary>
  public const int PolicyIdFieldNumber = 1;
  private readonly static string PolicyIdDefaultValue = "";

  private string policyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PolicyId {
    get { return policyId_ ?? PolicyIdDefaultValue; }
    set {
      policyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "PolicyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPolicyId {
    get { return policyId_ != null; }
  }
  /// <summary>Clears the value of the "PolicyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPolicyId() {
    policyId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AnonymousIdentityToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AnonymousIdentityToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PolicyId != other.PolicyId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPolicyId) hash ^= PolicyId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPolicyId) {
      output.WriteRawTag(10);
      output.WriteString(PolicyId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPolicyId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AnonymousIdentityToken other) {
    if (other == null) {
      return;
    }
    if (other.HasPolicyId) {
      PolicyId = other.PolicyId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PolicyId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class BodyType : pb::IMessage<BodyType> {
  private static readonly pb::MessageParser<BodyType> _parser = new pb::MessageParser<BodyType>(() => new BodyType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BodyType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BodyType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BodyType(BodyType other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BodyType Clone() {
    return new BodyType(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BodyType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BodyType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BodyType other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class BrokerConnectionTransportDataType : pb::IMessage<BrokerConnectionTransportDataType> {
  private static readonly pb::MessageParser<BrokerConnectionTransportDataType> _parser = new pb::MessageParser<BrokerConnectionTransportDataType>(() => new BrokerConnectionTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrokerConnectionTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerConnectionTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerConnectionTransportDataType(BrokerConnectionTransportDataType other) : this() {
    authenticationProfileUri_ = other.authenticationProfileUri_;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerConnectionTransportDataType Clone() {
    return new BrokerConnectionTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 2;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrokerConnectionTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrokerConnectionTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (HasResourceUri) {
      output.WriteRawTag(18);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrokerConnectionTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 18: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class BrokerDataSetReaderTransportDataType : pb::IMessage<BrokerDataSetReaderTransportDataType> {
  private static readonly pb::MessageParser<BrokerDataSetReaderTransportDataType> _parser = new pb::MessageParser<BrokerDataSetReaderTransportDataType>(() => new BrokerDataSetReaderTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrokerDataSetReaderTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerDataSetReaderTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerDataSetReaderTransportDataType(BrokerDataSetReaderTransportDataType other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationProfileUri_ = other.authenticationProfileUri_;
    metaDataQueueName_ = other.metaDataQueueName_;
    queueName_ = other.queueName_;
    requestedDeliveryGuarantee_ = other.requestedDeliveryGuarantee_;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerDataSetReaderTransportDataType Clone() {
    return new BrokerDataSetReaderTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "MetaDataQueueName" field.</summary>
  public const int MetaDataQueueNameFieldNumber = 2;
  private readonly static string MetaDataQueueNameDefaultValue = "";

  private string metaDataQueueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MetaDataQueueName {
    get { return metaDataQueueName_ ?? MetaDataQueueNameDefaultValue; }
    set {
      metaDataQueueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "MetaDataQueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMetaDataQueueName {
    get { return metaDataQueueName_ != null; }
  }
  /// <summary>Clears the value of the "MetaDataQueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMetaDataQueueName() {
    metaDataQueueName_ = null;
  }

  /// <summary>Field number for the "QueueName" field.</summary>
  public const int QueueNameFieldNumber = 3;
  private readonly static string QueueNameDefaultValue = "";

  private string queueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string QueueName {
    get { return queueName_ ?? QueueNameDefaultValue; }
    set {
      queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "QueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQueueName {
    get { return queueName_ != null; }
  }
  /// <summary>Clears the value of the "QueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQueueName() {
    queueName_ = null;
  }

  /// <summary>Field number for the "RequestedDeliveryGuarantee" field.</summary>
  public const int RequestedDeliveryGuaranteeFieldNumber = 4;
  private readonly static global::BrokerDataSetReaderTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuaranteeDefaultValue = global::BrokerDataSetReaderTransportDataType.Types.BrokerTransportQualityOfService.AtLeastOnce2;

  private global::BrokerDataSetReaderTransportDataType.Types.BrokerTransportQualityOfService requestedDeliveryGuarantee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BrokerDataSetReaderTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuarantee {
    get { if ((_hasBits0 & 1) != 0) { return requestedDeliveryGuarantee_; } else { return RequestedDeliveryGuaranteeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestedDeliveryGuarantee_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedDeliveryGuarantee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedDeliveryGuarantee {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RequestedDeliveryGuarantee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedDeliveryGuarantee() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 5;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrokerDataSetReaderTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrokerDataSetReaderTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (MetaDataQueueName != other.MetaDataQueueName) return false;
    if (QueueName != other.QueueName) return false;
    if (RequestedDeliveryGuarantee != other.RequestedDeliveryGuarantee) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (HasMetaDataQueueName) hash ^= MetaDataQueueName.GetHashCode();
    if (HasQueueName) hash ^= QueueName.GetHashCode();
    if (HasRequestedDeliveryGuarantee) hash ^= RequestedDeliveryGuarantee.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      output.WriteRawTag(18);
      output.WriteString(MetaDataQueueName);
    }
    if (HasQueueName) {
      output.WriteRawTag(26);
      output.WriteString(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      output.WriteRawTag(32);
      output.WriteEnum((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      output.WriteRawTag(42);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MetaDataQueueName);
    }
    if (HasQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrokerDataSetReaderTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.HasMetaDataQueueName) {
      MetaDataQueueName = other.MetaDataQueueName;
    }
    if (other.HasQueueName) {
      QueueName = other.QueueName;
    }
    if (other.HasRequestedDeliveryGuarantee) {
      RequestedDeliveryGuarantee = other.RequestedDeliveryGuarantee;
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 18: {
          MetaDataQueueName = input.ReadString();
          break;
        }
        case 26: {
          QueueName = input.ReadString();
          break;
        }
        case 32: {
          RequestedDeliveryGuarantee = (global::BrokerDataSetReaderTransportDataType.Types.BrokerTransportQualityOfService) input.ReadEnum();
          break;
        }
        case 42: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BrokerDataSetReaderTransportDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrokerTransportQualityOfService {
      [pbr::OriginalName("BrokerTransportQualityOfService_AtLeastOnce_2")] AtLeastOnce2 = 1,
      [pbr::OriginalName("BrokerTransportQualityOfService_AtMostOnce_3")] AtMostOnce3 = 2,
      [pbr::OriginalName("BrokerTransportQualityOfService_BestEffort_1")] BestEffort1 = 3,
      [pbr::OriginalName("BrokerTransportQualityOfService_ExactlyOnce_4")] ExactlyOnce4 = 4,
      [pbr::OriginalName("BrokerTransportQualityOfService_NotSpecified_0")] NotSpecified0 = 5,
    }

  }
  #endregion

}

public sealed partial class BrokerDataSetWriterTransportDataType : pb::IMessage<BrokerDataSetWriterTransportDataType> {
  private static readonly pb::MessageParser<BrokerDataSetWriterTransportDataType> _parser = new pb::MessageParser<BrokerDataSetWriterTransportDataType>(() => new BrokerDataSetWriterTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrokerDataSetWriterTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerDataSetWriterTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerDataSetWriterTransportDataType(BrokerDataSetWriterTransportDataType other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationProfileUri_ = other.authenticationProfileUri_;
    metaDataQueueName_ = other.metaDataQueueName_;
    metaDataUpdateTime_ = other.metaDataUpdateTime_;
    queueName_ = other.queueName_;
    requestedDeliveryGuarantee_ = other.requestedDeliveryGuarantee_;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerDataSetWriterTransportDataType Clone() {
    return new BrokerDataSetWriterTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "MetaDataQueueName" field.</summary>
  public const int MetaDataQueueNameFieldNumber = 2;
  private readonly static string MetaDataQueueNameDefaultValue = "";

  private string metaDataQueueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MetaDataQueueName {
    get { return metaDataQueueName_ ?? MetaDataQueueNameDefaultValue; }
    set {
      metaDataQueueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "MetaDataQueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMetaDataQueueName {
    get { return metaDataQueueName_ != null; }
  }
  /// <summary>Clears the value of the "MetaDataQueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMetaDataQueueName() {
    metaDataQueueName_ = null;
  }

  /// <summary>Field number for the "MetaDataUpdateTime" field.</summary>
  public const int MetaDataUpdateTimeFieldNumber = 3;
  private readonly static double MetaDataUpdateTimeDefaultValue = 0D;

  private double metaDataUpdateTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MetaDataUpdateTime {
    get { if ((_hasBits0 & 1) != 0) { return metaDataUpdateTime_; } else { return MetaDataUpdateTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      metaDataUpdateTime_ = value;
    }
  }
  /// <summary>Gets whether the "MetaDataUpdateTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMetaDataUpdateTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MetaDataUpdateTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMetaDataUpdateTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "QueueName" field.</summary>
  public const int QueueNameFieldNumber = 4;
  private readonly static string QueueNameDefaultValue = "";

  private string queueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string QueueName {
    get { return queueName_ ?? QueueNameDefaultValue; }
    set {
      queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "QueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQueueName {
    get { return queueName_ != null; }
  }
  /// <summary>Clears the value of the "QueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQueueName() {
    queueName_ = null;
  }

  /// <summary>Field number for the "RequestedDeliveryGuarantee" field.</summary>
  public const int RequestedDeliveryGuaranteeFieldNumber = 5;
  private readonly static global::BrokerDataSetWriterTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuaranteeDefaultValue = global::BrokerDataSetWriterTransportDataType.Types.BrokerTransportQualityOfService.AtLeastOnce2;

  private global::BrokerDataSetWriterTransportDataType.Types.BrokerTransportQualityOfService requestedDeliveryGuarantee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BrokerDataSetWriterTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuarantee {
    get { if ((_hasBits0 & 2) != 0) { return requestedDeliveryGuarantee_; } else { return RequestedDeliveryGuaranteeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      requestedDeliveryGuarantee_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedDeliveryGuarantee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedDeliveryGuarantee {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RequestedDeliveryGuarantee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedDeliveryGuarantee() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 6;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrokerDataSetWriterTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrokerDataSetWriterTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (MetaDataQueueName != other.MetaDataQueueName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MetaDataUpdateTime, other.MetaDataUpdateTime)) return false;
    if (QueueName != other.QueueName) return false;
    if (RequestedDeliveryGuarantee != other.RequestedDeliveryGuarantee) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (HasMetaDataQueueName) hash ^= MetaDataQueueName.GetHashCode();
    if (HasMetaDataUpdateTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MetaDataUpdateTime);
    if (HasQueueName) hash ^= QueueName.GetHashCode();
    if (HasRequestedDeliveryGuarantee) hash ^= RequestedDeliveryGuarantee.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      output.WriteRawTag(18);
      output.WriteString(MetaDataQueueName);
    }
    if (HasMetaDataUpdateTime) {
      output.WriteRawTag(25);
      output.WriteDouble(MetaDataUpdateTime);
    }
    if (HasQueueName) {
      output.WriteRawTag(34);
      output.WriteString(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      output.WriteRawTag(40);
      output.WriteEnum((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      output.WriteRawTag(50);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MetaDataQueueName);
    }
    if (HasMetaDataUpdateTime) {
      size += 1 + 8;
    }
    if (HasQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrokerDataSetWriterTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.HasMetaDataQueueName) {
      MetaDataQueueName = other.MetaDataQueueName;
    }
    if (other.HasMetaDataUpdateTime) {
      MetaDataUpdateTime = other.MetaDataUpdateTime;
    }
    if (other.HasQueueName) {
      QueueName = other.QueueName;
    }
    if (other.HasRequestedDeliveryGuarantee) {
      RequestedDeliveryGuarantee = other.RequestedDeliveryGuarantee;
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 18: {
          MetaDataQueueName = input.ReadString();
          break;
        }
        case 25: {
          MetaDataUpdateTime = input.ReadDouble();
          break;
        }
        case 34: {
          QueueName = input.ReadString();
          break;
        }
        case 40: {
          RequestedDeliveryGuarantee = (global::BrokerDataSetWriterTransportDataType.Types.BrokerTransportQualityOfService) input.ReadEnum();
          break;
        }
        case 50: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BrokerDataSetWriterTransportDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrokerTransportQualityOfService {
      [pbr::OriginalName("BrokerTransportQualityOfService_AtLeastOnce_2")] AtLeastOnce2 = 1,
      [pbr::OriginalName("BrokerTransportQualityOfService_AtMostOnce_3")] AtMostOnce3 = 2,
      [pbr::OriginalName("BrokerTransportQualityOfService_BestEffort_1")] BestEffort1 = 3,
      [pbr::OriginalName("BrokerTransportQualityOfService_ExactlyOnce_4")] ExactlyOnce4 = 4,
      [pbr::OriginalName("BrokerTransportQualityOfService_NotSpecified_0")] NotSpecified0 = 5,
    }

  }
  #endregion

}

public sealed partial class BrokerWriterGroupTransportDataType : pb::IMessage<BrokerWriterGroupTransportDataType> {
  private static readonly pb::MessageParser<BrokerWriterGroupTransportDataType> _parser = new pb::MessageParser<BrokerWriterGroupTransportDataType>(() => new BrokerWriterGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrokerWriterGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerWriterGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerWriterGroupTransportDataType(BrokerWriterGroupTransportDataType other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationProfileUri_ = other.authenticationProfileUri_;
    queueName_ = other.queueName_;
    requestedDeliveryGuarantee_ = other.requestedDeliveryGuarantee_;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrokerWriterGroupTransportDataType Clone() {
    return new BrokerWriterGroupTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "QueueName" field.</summary>
  public const int QueueNameFieldNumber = 2;
  private readonly static string QueueNameDefaultValue = "";

  private string queueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string QueueName {
    get { return queueName_ ?? QueueNameDefaultValue; }
    set {
      queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "QueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQueueName {
    get { return queueName_ != null; }
  }
  /// <summary>Clears the value of the "QueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQueueName() {
    queueName_ = null;
  }

  /// <summary>Field number for the "RequestedDeliveryGuarantee" field.</summary>
  public const int RequestedDeliveryGuaranteeFieldNumber = 3;
  private readonly static global::BrokerWriterGroupTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuaranteeDefaultValue = global::BrokerWriterGroupTransportDataType.Types.BrokerTransportQualityOfService.AtLeastOnce2;

  private global::BrokerWriterGroupTransportDataType.Types.BrokerTransportQualityOfService requestedDeliveryGuarantee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BrokerWriterGroupTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuarantee {
    get { if ((_hasBits0 & 1) != 0) { return requestedDeliveryGuarantee_; } else { return RequestedDeliveryGuaranteeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestedDeliveryGuarantee_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedDeliveryGuarantee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedDeliveryGuarantee {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RequestedDeliveryGuarantee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedDeliveryGuarantee() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 4;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrokerWriterGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrokerWriterGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (QueueName != other.QueueName) return false;
    if (RequestedDeliveryGuarantee != other.RequestedDeliveryGuarantee) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (HasQueueName) hash ^= QueueName.GetHashCode();
    if (HasRequestedDeliveryGuarantee) hash ^= RequestedDeliveryGuarantee.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (HasQueueName) {
      output.WriteRawTag(18);
      output.WriteString(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      output.WriteRawTag(24);
      output.WriteEnum((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      output.WriteRawTag(34);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (HasQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrokerWriterGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.HasQueueName) {
      QueueName = other.QueueName;
    }
    if (other.HasRequestedDeliveryGuarantee) {
      RequestedDeliveryGuarantee = other.RequestedDeliveryGuarantee;
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 18: {
          QueueName = input.ReadString();
          break;
        }
        case 24: {
          RequestedDeliveryGuarantee = (global::BrokerWriterGroupTransportDataType.Types.BrokerTransportQualityOfService) input.ReadEnum();
          break;
        }
        case 34: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BrokerWriterGroupTransportDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrokerTransportQualityOfService {
      [pbr::OriginalName("BrokerTransportQualityOfService_AtLeastOnce_2")] AtLeastOnce2 = 1,
      [pbr::OriginalName("BrokerTransportQualityOfService_AtMostOnce_3")] AtMostOnce3 = 2,
      [pbr::OriginalName("BrokerTransportQualityOfService_BestEffort_1")] BestEffort1 = 3,
      [pbr::OriginalName("BrokerTransportQualityOfService_ExactlyOnce_4")] ExactlyOnce4 = 4,
      [pbr::OriginalName("BrokerTransportQualityOfService_NotSpecified_0")] NotSpecified0 = 5,
    }

  }
  #endregion

}

public sealed partial class BuildInfo : pb::IMessage<BuildInfo> {
  private static readonly pb::MessageParser<BuildInfo> _parser = new pb::MessageParser<BuildInfo>(() => new BuildInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuildInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildInfo(BuildInfo other) : this() {
    _hasBits0 = other._hasBits0;
    buildDate_ = other.buildDate_;
    buildNumber_ = other.buildNumber_;
    manufacturerName_ = other.manufacturerName_;
    productName_ = other.productName_;
    productUri_ = other.productUri_;
    softwareVersion_ = other.softwareVersion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildInfo Clone() {
    return new BuildInfo(this);
  }

  /// <summary>Field number for the "BuildDate" field.</summary>
  public const int BuildDateFieldNumber = 1;
  private readonly static long BuildDateDefaultValue = 0L;

  private long buildDate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BuildDate {
    get { if ((_hasBits0 & 1) != 0) { return buildDate_; } else { return BuildDateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      buildDate_ = value;
    }
  }
  /// <summary>Gets whether the "BuildDate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBuildDate {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "BuildDate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBuildDate() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BuildNumber" field.</summary>
  public const int BuildNumberFieldNumber = 2;
  private readonly static string BuildNumberDefaultValue = "";

  private string buildNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BuildNumber {
    get { return buildNumber_ ?? BuildNumberDefaultValue; }
    set {
      buildNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "BuildNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBuildNumber {
    get { return buildNumber_ != null; }
  }
  /// <summary>Clears the value of the "BuildNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBuildNumber() {
    buildNumber_ = null;
  }

  /// <summary>Field number for the "ManufacturerName" field.</summary>
  public const int ManufacturerNameFieldNumber = 3;
  private readonly static string ManufacturerNameDefaultValue = "";

  private string manufacturerName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ManufacturerName {
    get { return manufacturerName_ ?? ManufacturerNameDefaultValue; }
    set {
      manufacturerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ManufacturerName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasManufacturerName {
    get { return manufacturerName_ != null; }
  }
  /// <summary>Clears the value of the "ManufacturerName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearManufacturerName() {
    manufacturerName_ = null;
  }

  /// <summary>Field number for the "ProductName" field.</summary>
  public const int ProductNameFieldNumber = 4;
  private readonly static string ProductNameDefaultValue = "";

  private string productName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductName {
    get { return productName_ ?? ProductNameDefaultValue; }
    set {
      productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ProductName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProductName {
    get { return productName_ != null; }
  }
  /// <summary>Clears the value of the "ProductName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProductName() {
    productName_ = null;
  }

  /// <summary>Field number for the "ProductUri" field.</summary>
  public const int ProductUriFieldNumber = 5;
  private readonly static string ProductUriDefaultValue = "";

  private string productUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductUri {
    get { return productUri_ ?? ProductUriDefaultValue; }
    set {
      productUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ProductUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProductUri {
    get { return productUri_ != null; }
  }
  /// <summary>Clears the value of the "ProductUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProductUri() {
    productUri_ = null;
  }

  /// <summary>Field number for the "SoftwareVersion" field.</summary>
  public const int SoftwareVersionFieldNumber = 6;
  private readonly static string SoftwareVersionDefaultValue = "";

  private string softwareVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SoftwareVersion {
    get { return softwareVersion_ ?? SoftwareVersionDefaultValue; }
    set {
      softwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SoftwareVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSoftwareVersion {
    get { return softwareVersion_ != null; }
  }
  /// <summary>Clears the value of the "SoftwareVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSoftwareVersion() {
    softwareVersion_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuildInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuildInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuildDate != other.BuildDate) return false;
    if (BuildNumber != other.BuildNumber) return false;
    if (ManufacturerName != other.ManufacturerName) return false;
    if (ProductName != other.ProductName) return false;
    if (ProductUri != other.ProductUri) return false;
    if (SoftwareVersion != other.SoftwareVersion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBuildDate) hash ^= BuildDate.GetHashCode();
    if (HasBuildNumber) hash ^= BuildNumber.GetHashCode();
    if (HasManufacturerName) hash ^= ManufacturerName.GetHashCode();
    if (HasProductName) hash ^= ProductName.GetHashCode();
    if (HasProductUri) hash ^= ProductUri.GetHashCode();
    if (HasSoftwareVersion) hash ^= SoftwareVersion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBuildDate) {
      output.WriteRawTag(8);
      output.WriteInt64(BuildDate);
    }
    if (HasBuildNumber) {
      output.WriteRawTag(18);
      output.WriteString(BuildNumber);
    }
    if (HasManufacturerName) {
      output.WriteRawTag(26);
      output.WriteString(ManufacturerName);
    }
    if (HasProductName) {
      output.WriteRawTag(34);
      output.WriteString(ProductName);
    }
    if (HasProductUri) {
      output.WriteRawTag(42);
      output.WriteString(ProductUri);
    }
    if (HasSoftwareVersion) {
      output.WriteRawTag(50);
      output.WriteString(SoftwareVersion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBuildDate) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuildDate);
    }
    if (HasBuildNumber) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildNumber);
    }
    if (HasManufacturerName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ManufacturerName);
    }
    if (HasProductName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
    }
    if (HasProductUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductUri);
    }
    if (HasSoftwareVersion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareVersion);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuildInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasBuildDate) {
      BuildDate = other.BuildDate;
    }
    if (other.HasBuildNumber) {
      BuildNumber = other.BuildNumber;
    }
    if (other.HasManufacturerName) {
      ManufacturerName = other.ManufacturerName;
    }
    if (other.HasProductName) {
      ProductName = other.ProductName;
    }
    if (other.HasProductUri) {
      ProductUri = other.ProductUri;
    }
    if (other.HasSoftwareVersion) {
      SoftwareVersion = other.SoftwareVersion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BuildDate = input.ReadInt64();
          break;
        }
        case 18: {
          BuildNumber = input.ReadString();
          break;
        }
        case 26: {
          ManufacturerName = input.ReadString();
          break;
        }
        case 34: {
          ProductName = input.ReadString();
          break;
        }
        case 42: {
          ProductUri = input.ReadString();
          break;
        }
        case 50: {
          SoftwareVersion = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CartesianCoordinates : pb::IMessage<CartesianCoordinates> {
  private static readonly pb::MessageParser<CartesianCoordinates> _parser = new pb::MessageParser<CartesianCoordinates>(() => new CartesianCoordinates());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CartesianCoordinates> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CartesianCoordinates() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CartesianCoordinates(CartesianCoordinates other) : this() {
    _hasBits0 = other._hasBits0;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CartesianCoordinates Clone() {
    return new CartesianCoordinates(this);
  }

  /// <summary>Field number for the "X" field.</summary>
  public const int XFieldNumber = 1;
  private readonly static double XDefaultValue = 0D;

  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
    set {
      _hasBits0 |= 1;
      x_ = value;
    }
  }
  /// <summary>Gets whether the "X" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasX {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "X" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearX() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Y" field.</summary>
  public const int YFieldNumber = 2;
  private readonly static double YDefaultValue = 0D;

  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
    set {
      _hasBits0 |= 2;
      y_ = value;
    }
  }
  /// <summary>Gets whether the "Y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasY {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearY() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Z" field.</summary>
  public const int ZFieldNumber = 3;
  private readonly static double ZDefaultValue = 0D;

  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
    set {
      _hasBits0 |= 4;
      z_ = value;
    }
  }
  /// <summary>Gets whether the "Z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasZ {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearZ() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CartesianCoordinates);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CartesianCoordinates other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
    if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
    if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasX) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (HasY) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (HasZ) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasX) {
      size += 1 + 8;
    }
    if (HasY) {
      size += 1 + 8;
    }
    if (HasZ) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CartesianCoordinates other) {
    if (other == null) {
      return;
    }
    if (other.HasX) {
      X = other.X;
    }
    if (other.HasY) {
      Y = other.Y;
    }
    if (other.HasZ) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class ChannelSecurityToken : pb::IMessage<ChannelSecurityToken> {
  private static readonly pb::MessageParser<ChannelSecurityToken> _parser = new pb::MessageParser<ChannelSecurityToken>(() => new ChannelSecurityToken());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChannelSecurityToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChannelSecurityToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChannelSecurityToken(ChannelSecurityToken other) : this() {
    _hasBits0 = other._hasBits0;
    channelId_ = other.channelId_;
    createdAt_ = other.createdAt_;
    revisedLifetime_ = other.revisedLifetime_;
    tokenId_ = other.tokenId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChannelSecurityToken Clone() {
    return new ChannelSecurityToken(this);
  }

  /// <summary>Field number for the "ChannelId" field.</summary>
  public const int ChannelIdFieldNumber = 1;
  private readonly static uint ChannelIdDefaultValue = 0;

  private uint channelId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChannelId {
    get { if ((_hasBits0 & 1) != 0) { return channelId_; } else { return ChannelIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      channelId_ = value;
    }
  }
  /// <summary>Gets whether the "ChannelId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChannelId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ChannelId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChannelId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "CreatedAt" field.</summary>
  public const int CreatedAtFieldNumber = 2;
  private readonly static long CreatedAtDefaultValue = 0L;

  private long createdAt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CreatedAt {
    get { if ((_hasBits0 & 2) != 0) { return createdAt_; } else { return CreatedAtDefaultValue; } }
    set {
      _hasBits0 |= 2;
      createdAt_ = value;
    }
  }
  /// <summary>Gets whether the "CreatedAt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCreatedAt {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "CreatedAt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCreatedAt() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "RevisedLifetime" field.</summary>
  public const int RevisedLifetimeFieldNumber = 3;
  private readonly static uint RevisedLifetimeDefaultValue = 0;

  private uint revisedLifetime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RevisedLifetime {
    get { if ((_hasBits0 & 4) != 0) { return revisedLifetime_; } else { return RevisedLifetimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      revisedLifetime_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedLifetime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedLifetime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "RevisedLifetime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedLifetime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "TokenId" field.</summary>
  public const int TokenIdFieldNumber = 4;
  private readonly static uint TokenIdDefaultValue = 0;

  private uint tokenId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TokenId {
    get { if ((_hasBits0 & 8) != 0) { return tokenId_; } else { return TokenIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      tokenId_ = value;
    }
  }
  /// <summary>Gets whether the "TokenId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTokenId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "TokenId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTokenId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChannelSecurityToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChannelSecurityToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChannelId != other.ChannelId) return false;
    if (CreatedAt != other.CreatedAt) return false;
    if (RevisedLifetime != other.RevisedLifetime) return false;
    if (TokenId != other.TokenId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChannelId) hash ^= ChannelId.GetHashCode();
    if (HasCreatedAt) hash ^= CreatedAt.GetHashCode();
    if (HasRevisedLifetime) hash ^= RevisedLifetime.GetHashCode();
    if (HasTokenId) hash ^= TokenId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasChannelId) {
      output.WriteRawTag(8);
      output.WriteUInt32(ChannelId);
    }
    if (HasCreatedAt) {
      output.WriteRawTag(16);
      output.WriteInt64(CreatedAt);
    }
    if (HasRevisedLifetime) {
      output.WriteRawTag(24);
      output.WriteUInt32(RevisedLifetime);
    }
    if (HasTokenId) {
      output.WriteRawTag(32);
      output.WriteUInt32(TokenId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasChannelId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
    }
    if (HasCreatedAt) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
    }
    if (HasRevisedLifetime) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisedLifetime);
    }
    if (HasTokenId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChannelSecurityToken other) {
    if (other == null) {
      return;
    }
    if (other.HasChannelId) {
      ChannelId = other.ChannelId;
    }
    if (other.HasCreatedAt) {
      CreatedAt = other.CreatedAt;
    }
    if (other.HasRevisedLifetime) {
      RevisedLifetime = other.RevisedLifetime;
    }
    if (other.HasTokenId) {
      TokenId = other.TokenId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChannelId = input.ReadUInt32();
          break;
        }
        case 16: {
          CreatedAt = input.ReadInt64();
          break;
        }
        case 24: {
          RevisedLifetime = input.ReadUInt32();
          break;
        }
        case 32: {
          TokenId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ComplexNumberType : pb::IMessage<ComplexNumberType> {
  private static readonly pb::MessageParser<ComplexNumberType> _parser = new pb::MessageParser<ComplexNumberType>(() => new ComplexNumberType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ComplexNumberType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ComplexNumberType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ComplexNumberType(ComplexNumberType other) : this() {
    _hasBits0 = other._hasBits0;
    imaginary_ = other.imaginary_;
    real_ = other.real_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ComplexNumberType Clone() {
    return new ComplexNumberType(this);
  }

  /// <summary>Field number for the "Imaginary" field.</summary>
  public const int ImaginaryFieldNumber = 1;
  private readonly static float ImaginaryDefaultValue = 0F;

  private float imaginary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Imaginary {
    get { if ((_hasBits0 & 1) != 0) { return imaginary_; } else { return ImaginaryDefaultValue; } }
    set {
      _hasBits0 |= 1;
      imaginary_ = value;
    }
  }
  /// <summary>Gets whether the "Imaginary" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasImaginary {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Imaginary" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearImaginary() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Real" field.</summary>
  public const int RealFieldNumber = 2;
  private readonly static float RealDefaultValue = 0F;

  private float real_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Real {
    get { if ((_hasBits0 & 2) != 0) { return real_; } else { return RealDefaultValue; } }
    set {
      _hasBits0 |= 2;
      real_ = value;
    }
  }
  /// <summary>Gets whether the "Real" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReal {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Real" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReal() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ComplexNumberType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ComplexNumberType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Imaginary, other.Imaginary)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Real, other.Real)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasImaginary) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Imaginary);
    if (HasReal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Real);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasImaginary) {
      output.WriteRawTag(13);
      output.WriteFloat(Imaginary);
    }
    if (HasReal) {
      output.WriteRawTag(21);
      output.WriteFloat(Real);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasImaginary) {
      size += 1 + 4;
    }
    if (HasReal) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ComplexNumberType other) {
    if (other == null) {
      return;
    }
    if (other.HasImaginary) {
      Imaginary = other.Imaginary;
    }
    if (other.HasReal) {
      Real = other.Real;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Imaginary = input.ReadFloat();
          break;
        }
        case 21: {
          Real = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class ConfigurationVersionDataType : pb::IMessage<ConfigurationVersionDataType> {
  private static readonly pb::MessageParser<ConfigurationVersionDataType> _parser = new pb::MessageParser<ConfigurationVersionDataType>(() => new ConfigurationVersionDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ConfigurationVersionDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConfigurationVersionDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConfigurationVersionDataType(ConfigurationVersionDataType other) : this() {
    _hasBits0 = other._hasBits0;
    majorVersion_ = other.majorVersion_;
    minorVersion_ = other.minorVersion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConfigurationVersionDataType Clone() {
    return new ConfigurationVersionDataType(this);
  }

  /// <summary>Field number for the "MajorVersion" field.</summary>
  public const int MajorVersionFieldNumber = 1;
  private readonly static uint MajorVersionDefaultValue = 0;

  private uint majorVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MajorVersion {
    get { if ((_hasBits0 & 1) != 0) { return majorVersion_; } else { return MajorVersionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      majorVersion_ = value;
    }
  }
  /// <summary>Gets whether the "MajorVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMajorVersion {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MajorVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMajorVersion() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "MinorVersion" field.</summary>
  public const int MinorVersionFieldNumber = 2;
  private readonly static uint MinorVersionDefaultValue = 0;

  private uint minorVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MinorVersion {
    get { if ((_hasBits0 & 2) != 0) { return minorVersion_; } else { return MinorVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      minorVersion_ = value;
    }
  }
  /// <summary>Gets whether the "MinorVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMinorVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MinorVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMinorVersion() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ConfigurationVersionDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ConfigurationVersionDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MajorVersion != other.MajorVersion) return false;
    if (MinorVersion != other.MinorVersion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMajorVersion) hash ^= MajorVersion.GetHashCode();
    if (HasMinorVersion) hash ^= MinorVersion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMajorVersion) {
      output.WriteRawTag(8);
      output.WriteUInt32(MajorVersion);
    }
    if (HasMinorVersion) {
      output.WriteRawTag(16);
      output.WriteUInt32(MinorVersion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMajorVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorVersion);
    }
    if (HasMinorVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorVersion);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ConfigurationVersionDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasMajorVersion) {
      MajorVersion = other.MajorVersion;
    }
    if (other.HasMinorVersion) {
      MinorVersion = other.MinorVersion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MajorVersion = input.ReadUInt32();
          break;
        }
        case 16: {
          MinorVersion = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DataChangeFilter : pb::IMessage<DataChangeFilter> {
  private static readonly pb::MessageParser<DataChangeFilter> _parser = new pb::MessageParser<DataChangeFilter>(() => new DataChangeFilter());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataChangeFilter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataChangeFilter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataChangeFilter(DataChangeFilter other) : this() {
    _hasBits0 = other._hasBits0;
    deadbandType_ = other.deadbandType_;
    deadbandValue_ = other.deadbandValue_;
    trigger_ = other.trigger_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataChangeFilter Clone() {
    return new DataChangeFilter(this);
  }

  /// <summary>Field number for the "DeadbandType" field.</summary>
  public const int DeadbandTypeFieldNumber = 1;
  private readonly static uint DeadbandTypeDefaultValue = 0;

  private uint deadbandType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DeadbandType {
    get { if ((_hasBits0 & 1) != 0) { return deadbandType_; } else { return DeadbandTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deadbandType_ = value;
    }
  }
  /// <summary>Gets whether the "DeadbandType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeadbandType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DeadbandType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeadbandType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DeadbandValue" field.</summary>
  public const int DeadbandValueFieldNumber = 2;
  private readonly static double DeadbandValueDefaultValue = 0D;

  private double deadbandValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double DeadbandValue {
    get { if ((_hasBits0 & 2) != 0) { return deadbandValue_; } else { return DeadbandValueDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deadbandValue_ = value;
    }
  }
  /// <summary>Gets whether the "DeadbandValue" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeadbandValue {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DeadbandValue" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeadbandValue() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Trigger" field.</summary>
  public const int TriggerFieldNumber = 3;
  private readonly static global::DataChangeFilter.Types.DataChangeTrigger TriggerDefaultValue = global::DataChangeFilter.Types.DataChangeTrigger.StatusValueTimestamp2;

  private global::DataChangeFilter.Types.DataChangeTrigger trigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataChangeFilter.Types.DataChangeTrigger Trigger {
    get { if ((_hasBits0 & 4) != 0) { return trigger_; } else { return TriggerDefaultValue; } }
    set {
      _hasBits0 |= 4;
      trigger_ = value;
    }
  }
  /// <summary>Gets whether the "Trigger" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTrigger {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Trigger" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTrigger() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataChangeFilter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataChangeFilter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeadbandType != other.DeadbandType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeadbandValue, other.DeadbandValue)) return false;
    if (Trigger != other.Trigger) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeadbandType) hash ^= DeadbandType.GetHashCode();
    if (HasDeadbandValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeadbandValue);
    if (HasTrigger) hash ^= Trigger.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDeadbandType) {
      output.WriteRawTag(8);
      output.WriteUInt32(DeadbandType);
    }
    if (HasDeadbandValue) {
      output.WriteRawTag(17);
      output.WriteDouble(DeadbandValue);
    }
    if (HasTrigger) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Trigger);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeadbandType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadbandType);
    }
    if (HasDeadbandValue) {
      size += 1 + 8;
    }
    if (HasTrigger) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trigger);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataChangeFilter other) {
    if (other == null) {
      return;
    }
    if (other.HasDeadbandType) {
      DeadbandType = other.DeadbandType;
    }
    if (other.HasDeadbandValue) {
      DeadbandValue = other.DeadbandValue;
    }
    if (other.HasTrigger) {
      Trigger = other.Trigger;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DeadbandType = input.ReadUInt32();
          break;
        }
        case 17: {
          DeadbandValue = input.ReadDouble();
          break;
        }
        case 24: {
          Trigger = (global::DataChangeFilter.Types.DataChangeTrigger) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DataChangeFilter message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DataChangeTrigger {
      [pbr::OriginalName("DataChangeTrigger_StatusValueTimestamp_2")] StatusValueTimestamp2 = 1,
      [pbr::OriginalName("DataChangeTrigger_StatusValue_1")] StatusValue1 = 2,
      [pbr::OriginalName("DataChangeTrigger_Status_0")] Status0 = 3,
    }

  }
  #endregion

}

public sealed partial class DataSetReaderTransportDataType : pb::IMessage<DataSetReaderTransportDataType> {
  private static readonly pb::MessageParser<DataSetReaderTransportDataType> _parser = new pb::MessageParser<DataSetReaderTransportDataType>(() => new DataSetReaderTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSetReaderTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderTransportDataType(DataSetReaderTransportDataType other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationProfileUri_ = other.authenticationProfileUri_;
    metaDataQueueName_ = other.metaDataQueueName_;
    queueName_ = other.queueName_;
    requestedDeliveryGuarantee_ = other.requestedDeliveryGuarantee_;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderTransportDataType Clone() {
    return new DataSetReaderTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "MetaDataQueueName" field.</summary>
  public const int MetaDataQueueNameFieldNumber = 2;
  private readonly static string MetaDataQueueNameDefaultValue = "";

  private string metaDataQueueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MetaDataQueueName {
    get { return metaDataQueueName_ ?? MetaDataQueueNameDefaultValue; }
    set {
      metaDataQueueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "MetaDataQueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMetaDataQueueName {
    get { return metaDataQueueName_ != null; }
  }
  /// <summary>Clears the value of the "MetaDataQueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMetaDataQueueName() {
    metaDataQueueName_ = null;
  }

  /// <summary>Field number for the "QueueName" field.</summary>
  public const int QueueNameFieldNumber = 3;
  private readonly static string QueueNameDefaultValue = "";

  private string queueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string QueueName {
    get { return queueName_ ?? QueueNameDefaultValue; }
    set {
      queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "QueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQueueName {
    get { return queueName_ != null; }
  }
  /// <summary>Clears the value of the "QueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQueueName() {
    queueName_ = null;
  }

  /// <summary>Field number for the "RequestedDeliveryGuarantee" field.</summary>
  public const int RequestedDeliveryGuaranteeFieldNumber = 4;
  private readonly static global::DataSetReaderTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuaranteeDefaultValue = global::DataSetReaderTransportDataType.Types.BrokerTransportQualityOfService.AtLeastOnce2;

  private global::DataSetReaderTransportDataType.Types.BrokerTransportQualityOfService requestedDeliveryGuarantee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataSetReaderTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuarantee {
    get { if ((_hasBits0 & 1) != 0) { return requestedDeliveryGuarantee_; } else { return RequestedDeliveryGuaranteeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestedDeliveryGuarantee_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedDeliveryGuarantee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedDeliveryGuarantee {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RequestedDeliveryGuarantee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedDeliveryGuarantee() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 5;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSetReaderTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSetReaderTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (MetaDataQueueName != other.MetaDataQueueName) return false;
    if (QueueName != other.QueueName) return false;
    if (RequestedDeliveryGuarantee != other.RequestedDeliveryGuarantee) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (HasMetaDataQueueName) hash ^= MetaDataQueueName.GetHashCode();
    if (HasQueueName) hash ^= QueueName.GetHashCode();
    if (HasRequestedDeliveryGuarantee) hash ^= RequestedDeliveryGuarantee.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      output.WriteRawTag(18);
      output.WriteString(MetaDataQueueName);
    }
    if (HasQueueName) {
      output.WriteRawTag(26);
      output.WriteString(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      output.WriteRawTag(32);
      output.WriteEnum((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      output.WriteRawTag(42);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MetaDataQueueName);
    }
    if (HasQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSetReaderTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.HasMetaDataQueueName) {
      MetaDataQueueName = other.MetaDataQueueName;
    }
    if (other.HasQueueName) {
      QueueName = other.QueueName;
    }
    if (other.HasRequestedDeliveryGuarantee) {
      RequestedDeliveryGuarantee = other.RequestedDeliveryGuarantee;
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 18: {
          MetaDataQueueName = input.ReadString();
          break;
        }
        case 26: {
          QueueName = input.ReadString();
          break;
        }
        case 32: {
          RequestedDeliveryGuarantee = (global::DataSetReaderTransportDataType.Types.BrokerTransportQualityOfService) input.ReadEnum();
          break;
        }
        case 42: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DataSetReaderTransportDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrokerTransportQualityOfService {
      [pbr::OriginalName("BrokerTransportQualityOfService_AtLeastOnce_2")] AtLeastOnce2 = 1,
      [pbr::OriginalName("BrokerTransportQualityOfService_AtMostOnce_3")] AtMostOnce3 = 2,
      [pbr::OriginalName("BrokerTransportQualityOfService_BestEffort_1")] BestEffort1 = 3,
      [pbr::OriginalName("BrokerTransportQualityOfService_ExactlyOnce_4")] ExactlyOnce4 = 4,
      [pbr::OriginalName("BrokerTransportQualityOfService_NotSpecified_0")] NotSpecified0 = 5,
    }

  }
  #endregion

}

public sealed partial class DataSetWriterMessageDataType : pb::IMessage<DataSetWriterMessageDataType> {
  private static readonly pb::MessageParser<DataSetWriterMessageDataType> _parser = new pb::MessageParser<DataSetWriterMessageDataType>(() => new DataSetWriterMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSetWriterMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterMessageDataType(DataSetWriterMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    configuredSize_ = other.configuredSize_;
    dataSetMessageContentMask_ = other.dataSetMessageContentMask_;
    dataSetOffset_ = other.dataSetOffset_;
    networkMessageNumber_ = other.networkMessageNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterMessageDataType Clone() {
    return new DataSetWriterMessageDataType(this);
  }

  /// <summary>Field number for the "ConfiguredSize" field.</summary>
  public const int ConfiguredSizeFieldNumber = 1;
  private readonly static uint ConfiguredSizeDefaultValue = 0;

  private uint configuredSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ConfiguredSize {
    get { if ((_hasBits0 & 1) != 0) { return configuredSize_; } else { return ConfiguredSizeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      configuredSize_ = value;
    }
  }
  /// <summary>Gets whether the "ConfiguredSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasConfiguredSize {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ConfiguredSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConfiguredSize() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetMessageContentMask" field.</summary>
  public const int DataSetMessageContentMaskFieldNumber = 2;
  private readonly static uint DataSetMessageContentMaskDefaultValue = 0;

  private uint dataSetMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetMessageContentMask {
    get { if ((_hasBits0 & 2) != 0) { return dataSetMessageContentMask_; } else { return DataSetMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 2;
      dataSetMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetMessageContentMask {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DataSetMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetMessageContentMask() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "DataSetOffset" field.</summary>
  public const int DataSetOffsetFieldNumber = 3;
  private readonly static uint DataSetOffsetDefaultValue = 0;

  private uint dataSetOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetOffset {
    get { if ((_hasBits0 & 4) != 0) { return dataSetOffset_; } else { return DataSetOffsetDefaultValue; } }
    set {
      _hasBits0 |= 4;
      dataSetOffset_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetOffset {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "DataSetOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetOffset() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "NetworkMessageNumber" field.</summary>
  public const int NetworkMessageNumberFieldNumber = 4;
  private readonly static uint NetworkMessageNumberDefaultValue = 0;

  private uint networkMessageNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageNumber {
    get { if ((_hasBits0 & 8) != 0) { return networkMessageNumber_; } else { return NetworkMessageNumberDefaultValue; } }
    set {
      _hasBits0 |= 8;
      networkMessageNumber_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageNumber {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageNumber() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSetWriterMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSetWriterMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfiguredSize != other.ConfiguredSize) return false;
    if (DataSetMessageContentMask != other.DataSetMessageContentMask) return false;
    if (DataSetOffset != other.DataSetOffset) return false;
    if (NetworkMessageNumber != other.NetworkMessageNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConfiguredSize) hash ^= ConfiguredSize.GetHashCode();
    if (HasDataSetMessageContentMask) hash ^= DataSetMessageContentMask.GetHashCode();
    if (HasDataSetOffset) hash ^= DataSetOffset.GetHashCode();
    if (HasNetworkMessageNumber) hash ^= NetworkMessageNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasConfiguredSize) {
      output.WriteRawTag(8);
      output.WriteUInt32(ConfiguredSize);
    }
    if (HasDataSetMessageContentMask) {
      output.WriteRawTag(16);
      output.WriteUInt32(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      output.WriteRawTag(24);
      output.WriteUInt32(DataSetOffset);
    }
    if (HasNetworkMessageNumber) {
      output.WriteRawTag(32);
      output.WriteUInt32(NetworkMessageNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasConfiguredSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfiguredSize);
    }
    if (HasDataSetMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetOffset);
    }
    if (HasNetworkMessageNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSetWriterMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasConfiguredSize) {
      ConfiguredSize = other.ConfiguredSize;
    }
    if (other.HasDataSetMessageContentMask) {
      DataSetMessageContentMask = other.DataSetMessageContentMask;
    }
    if (other.HasDataSetOffset) {
      DataSetOffset = other.DataSetOffset;
    }
    if (other.HasNetworkMessageNumber) {
      NetworkMessageNumber = other.NetworkMessageNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ConfiguredSize = input.ReadUInt32();
          break;
        }
        case 16: {
          DataSetMessageContentMask = input.ReadUInt32();
          break;
        }
        case 24: {
          DataSetOffset = input.ReadUInt32();
          break;
        }
        case 32: {
          NetworkMessageNumber = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DataSetWriterTransportDataType : pb::IMessage<DataSetWriterTransportDataType> {
  private static readonly pb::MessageParser<DataSetWriterTransportDataType> _parser = new pb::MessageParser<DataSetWriterTransportDataType>(() => new DataSetWriterTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSetWriterTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterTransportDataType(DataSetWriterTransportDataType other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationProfileUri_ = other.authenticationProfileUri_;
    metaDataQueueName_ = other.metaDataQueueName_;
    metaDataUpdateTime_ = other.metaDataUpdateTime_;
    queueName_ = other.queueName_;
    requestedDeliveryGuarantee_ = other.requestedDeliveryGuarantee_;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterTransportDataType Clone() {
    return new DataSetWriterTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "MetaDataQueueName" field.</summary>
  public const int MetaDataQueueNameFieldNumber = 2;
  private readonly static string MetaDataQueueNameDefaultValue = "";

  private string metaDataQueueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MetaDataQueueName {
    get { return metaDataQueueName_ ?? MetaDataQueueNameDefaultValue; }
    set {
      metaDataQueueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "MetaDataQueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMetaDataQueueName {
    get { return metaDataQueueName_ != null; }
  }
  /// <summary>Clears the value of the "MetaDataQueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMetaDataQueueName() {
    metaDataQueueName_ = null;
  }

  /// <summary>Field number for the "MetaDataUpdateTime" field.</summary>
  public const int MetaDataUpdateTimeFieldNumber = 3;
  private readonly static double MetaDataUpdateTimeDefaultValue = 0D;

  private double metaDataUpdateTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MetaDataUpdateTime {
    get { if ((_hasBits0 & 1) != 0) { return metaDataUpdateTime_; } else { return MetaDataUpdateTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      metaDataUpdateTime_ = value;
    }
  }
  /// <summary>Gets whether the "MetaDataUpdateTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMetaDataUpdateTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MetaDataUpdateTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMetaDataUpdateTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "QueueName" field.</summary>
  public const int QueueNameFieldNumber = 4;
  private readonly static string QueueNameDefaultValue = "";

  private string queueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string QueueName {
    get { return queueName_ ?? QueueNameDefaultValue; }
    set {
      queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "QueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQueueName {
    get { return queueName_ != null; }
  }
  /// <summary>Clears the value of the "QueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQueueName() {
    queueName_ = null;
  }

  /// <summary>Field number for the "RequestedDeliveryGuarantee" field.</summary>
  public const int RequestedDeliveryGuaranteeFieldNumber = 5;
  private readonly static global::DataSetWriterTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuaranteeDefaultValue = global::DataSetWriterTransportDataType.Types.BrokerTransportQualityOfService.AtLeastOnce2;

  private global::DataSetWriterTransportDataType.Types.BrokerTransportQualityOfService requestedDeliveryGuarantee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataSetWriterTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuarantee {
    get { if ((_hasBits0 & 2) != 0) { return requestedDeliveryGuarantee_; } else { return RequestedDeliveryGuaranteeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      requestedDeliveryGuarantee_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedDeliveryGuarantee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedDeliveryGuarantee {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RequestedDeliveryGuarantee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedDeliveryGuarantee() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 6;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSetWriterTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSetWriterTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (MetaDataQueueName != other.MetaDataQueueName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MetaDataUpdateTime, other.MetaDataUpdateTime)) return false;
    if (QueueName != other.QueueName) return false;
    if (RequestedDeliveryGuarantee != other.RequestedDeliveryGuarantee) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (HasMetaDataQueueName) hash ^= MetaDataQueueName.GetHashCode();
    if (HasMetaDataUpdateTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MetaDataUpdateTime);
    if (HasQueueName) hash ^= QueueName.GetHashCode();
    if (HasRequestedDeliveryGuarantee) hash ^= RequestedDeliveryGuarantee.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      output.WriteRawTag(18);
      output.WriteString(MetaDataQueueName);
    }
    if (HasMetaDataUpdateTime) {
      output.WriteRawTag(25);
      output.WriteDouble(MetaDataUpdateTime);
    }
    if (HasQueueName) {
      output.WriteRawTag(34);
      output.WriteString(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      output.WriteRawTag(40);
      output.WriteEnum((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      output.WriteRawTag(50);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (HasMetaDataQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MetaDataQueueName);
    }
    if (HasMetaDataUpdateTime) {
      size += 1 + 8;
    }
    if (HasQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSetWriterTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.HasMetaDataQueueName) {
      MetaDataQueueName = other.MetaDataQueueName;
    }
    if (other.HasMetaDataUpdateTime) {
      MetaDataUpdateTime = other.MetaDataUpdateTime;
    }
    if (other.HasQueueName) {
      QueueName = other.QueueName;
    }
    if (other.HasRequestedDeliveryGuarantee) {
      RequestedDeliveryGuarantee = other.RequestedDeliveryGuarantee;
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 18: {
          MetaDataQueueName = input.ReadString();
          break;
        }
        case 25: {
          MetaDataUpdateTime = input.ReadDouble();
          break;
        }
        case 34: {
          QueueName = input.ReadString();
          break;
        }
        case 40: {
          RequestedDeliveryGuarantee = (global::DataSetWriterTransportDataType.Types.BrokerTransportQualityOfService) input.ReadEnum();
          break;
        }
        case 50: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DataSetWriterTransportDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrokerTransportQualityOfService {
      [pbr::OriginalName("BrokerTransportQualityOfService_AtLeastOnce_2")] AtLeastOnce2 = 1,
      [pbr::OriginalName("BrokerTransportQualityOfService_AtMostOnce_3")] AtMostOnce3 = 2,
      [pbr::OriginalName("BrokerTransportQualityOfService_BestEffort_1")] BestEffort1 = 3,
      [pbr::OriginalName("BrokerTransportQualityOfService_ExactlyOnce_4")] ExactlyOnce4 = 4,
      [pbr::OriginalName("BrokerTransportQualityOfService_NotSpecified_0")] NotSpecified0 = 5,
    }

  }
  #endregion

}

public sealed partial class DatagramWriterGroupTransportDataType : pb::IMessage<DatagramWriterGroupTransportDataType> {
  private static readonly pb::MessageParser<DatagramWriterGroupTransportDataType> _parser = new pb::MessageParser<DatagramWriterGroupTransportDataType>(() => new DatagramWriterGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DatagramWriterGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatagramWriterGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatagramWriterGroupTransportDataType(DatagramWriterGroupTransportDataType other) : this() {
    _hasBits0 = other._hasBits0;
    messageRepeatCount_ = other.messageRepeatCount_;
    messageRepeatDelay_ = other.messageRepeatDelay_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatagramWriterGroupTransportDataType Clone() {
    return new DatagramWriterGroupTransportDataType(this);
  }

  /// <summary>Field number for the "MessageRepeatCount" field.</summary>
  public const int MessageRepeatCountFieldNumber = 1;
  private readonly static uint MessageRepeatCountDefaultValue = 0;

  private uint messageRepeatCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageRepeatCount {
    get { if ((_hasBits0 & 1) != 0) { return messageRepeatCount_; } else { return MessageRepeatCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      messageRepeatCount_ = value;
    }
  }
  /// <summary>Gets whether the "MessageRepeatCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageRepeatCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MessageRepeatCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageRepeatCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "MessageRepeatDelay" field.</summary>
  public const int MessageRepeatDelayFieldNumber = 2;
  private readonly static double MessageRepeatDelayDefaultValue = 0D;

  private double messageRepeatDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MessageRepeatDelay {
    get { if ((_hasBits0 & 2) != 0) { return messageRepeatDelay_; } else { return MessageRepeatDelayDefaultValue; } }
    set {
      _hasBits0 |= 2;
      messageRepeatDelay_ = value;
    }
  }
  /// <summary>Gets whether the "MessageRepeatDelay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageRepeatDelay {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MessageRepeatDelay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageRepeatDelay() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DatagramWriterGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DatagramWriterGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MessageRepeatCount != other.MessageRepeatCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MessageRepeatDelay, other.MessageRepeatDelay)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMessageRepeatCount) hash ^= MessageRepeatCount.GetHashCode();
    if (HasMessageRepeatDelay) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MessageRepeatDelay);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMessageRepeatCount) {
      output.WriteRawTag(8);
      output.WriteUInt32(MessageRepeatCount);
    }
    if (HasMessageRepeatDelay) {
      output.WriteRawTag(17);
      output.WriteDouble(MessageRepeatDelay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMessageRepeatCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageRepeatCount);
    }
    if (HasMessageRepeatDelay) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DatagramWriterGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasMessageRepeatCount) {
      MessageRepeatCount = other.MessageRepeatCount;
    }
    if (other.HasMessageRepeatDelay) {
      MessageRepeatDelay = other.MessageRepeatDelay;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MessageRepeatCount = input.ReadUInt32();
          break;
        }
        case 17: {
          MessageRepeatDelay = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class DecimalDataType : pb::IMessage<DecimalDataType> {
  private static readonly pb::MessageParser<DecimalDataType> _parser = new pb::MessageParser<DecimalDataType>(() => new DecimalDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DecimalDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DecimalDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DecimalDataType(DecimalDataType other) : this() {
    _hasBits0 = other._hasBits0;
    scale_ = other.scale_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DecimalDataType Clone() {
    return new DecimalDataType(this);
  }

  /// <summary>Field number for the "Scale" field.</summary>
  public const int ScaleFieldNumber = 1;
  private readonly static int ScaleDefaultValue = 0;

  private int scale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Scale {
    get { if ((_hasBits0 & 1) != 0) { return scale_; } else { return ScaleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      scale_ = value;
    }
  }
  /// <summary>Gets whether the "Scale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasScale {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Scale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearScale() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 2;
  private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

  private pb::ByteString value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Value {
    get { return value_ ?? ValueDefaultValue; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValue {
    get { return value_ != null; }
  }
  /// <summary>Clears the value of the "Value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValue() {
    value_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DecimalDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DecimalDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Scale != other.Scale) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasScale) hash ^= Scale.GetHashCode();
    if (HasValue) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasScale) {
      output.WriteRawTag(8);
      output.WriteInt32(Scale);
    }
    if (HasValue) {
      output.WriteRawTag(18);
      output.WriteBytes(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasScale) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scale);
    }
    if (HasValue) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DecimalDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasScale) {
      Scale = other.Scale;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Scale = input.ReadInt32();
          break;
        }
        case 18: {
          Value = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DoubleComplexNumberType : pb::IMessage<DoubleComplexNumberType> {
  private static readonly pb::MessageParser<DoubleComplexNumberType> _parser = new pb::MessageParser<DoubleComplexNumberType>(() => new DoubleComplexNumberType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DoubleComplexNumberType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DoubleComplexNumberType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DoubleComplexNumberType(DoubleComplexNumberType other) : this() {
    _hasBits0 = other._hasBits0;
    imaginary_ = other.imaginary_;
    real_ = other.real_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DoubleComplexNumberType Clone() {
    return new DoubleComplexNumberType(this);
  }

  /// <summary>Field number for the "Imaginary" field.</summary>
  public const int ImaginaryFieldNumber = 1;
  private readonly static double ImaginaryDefaultValue = 0D;

  private double imaginary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Imaginary {
    get { if ((_hasBits0 & 1) != 0) { return imaginary_; } else { return ImaginaryDefaultValue; } }
    set {
      _hasBits0 |= 1;
      imaginary_ = value;
    }
  }
  /// <summary>Gets whether the "Imaginary" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasImaginary {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Imaginary" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearImaginary() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Real" field.</summary>
  public const int RealFieldNumber = 2;
  private readonly static double RealDefaultValue = 0D;

  private double real_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Real {
    get { if ((_hasBits0 & 2) != 0) { return real_; } else { return RealDefaultValue; } }
    set {
      _hasBits0 |= 2;
      real_ = value;
    }
  }
  /// <summary>Gets whether the "Real" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReal {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Real" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReal() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DoubleComplexNumberType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DoubleComplexNumberType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Imaginary, other.Imaginary)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Real, other.Real)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasImaginary) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Imaginary);
    if (HasReal) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Real);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasImaginary) {
      output.WriteRawTag(9);
      output.WriteDouble(Imaginary);
    }
    if (HasReal) {
      output.WriteRawTag(17);
      output.WriteDouble(Real);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasImaginary) {
      size += 1 + 8;
    }
    if (HasReal) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DoubleComplexNumberType other) {
    if (other == null) {
      return;
    }
    if (other.HasImaginary) {
      Imaginary = other.Imaginary;
    }
    if (other.HasReal) {
      Real = other.Real;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          Imaginary = input.ReadDouble();
          break;
        }
        case 17: {
          Real = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class ElementOperand : pb::IMessage<ElementOperand> {
  private static readonly pb::MessageParser<ElementOperand> _parser = new pb::MessageParser<ElementOperand>(() => new ElementOperand());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ElementOperand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ElementOperand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ElementOperand(ElementOperand other) : this() {
    _hasBits0 = other._hasBits0;
    index_ = other.index_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ElementOperand Clone() {
    return new ElementOperand(this);
  }

  /// <summary>Field number for the "Index" field.</summary>
  public const int IndexFieldNumber = 1;
  private readonly static uint IndexDefaultValue = 0;

  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
    set {
      _hasBits0 |= 1;
      index_ = value;
    }
  }
  /// <summary>Gets whether the "Index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndex {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndex() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ElementOperand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ElementOperand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIndex) hash ^= Index.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIndex) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIndex) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ElementOperand other) {
    if (other == null) {
      return;
    }
    if (other.HasIndex) {
      Index = other.Index;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class EndpointConfiguration : pb::IMessage<EndpointConfiguration> {
  private static readonly pb::MessageParser<EndpointConfiguration> _parser = new pb::MessageParser<EndpointConfiguration>(() => new EndpointConfiguration());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EndpointConfiguration> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointConfiguration() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointConfiguration(EndpointConfiguration other) : this() {
    _hasBits0 = other._hasBits0;
    channelLifetime_ = other.channelLifetime_;
    maxArrayLength_ = other.maxArrayLength_;
    maxBufferSize_ = other.maxBufferSize_;
    maxByteStringLength_ = other.maxByteStringLength_;
    maxMessageSize_ = other.maxMessageSize_;
    maxStringLength_ = other.maxStringLength_;
    operationTimeout_ = other.operationTimeout_;
    securityTokenLifetime_ = other.securityTokenLifetime_;
    useBinaryEncoding_ = other.useBinaryEncoding_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointConfiguration Clone() {
    return new EndpointConfiguration(this);
  }

  /// <summary>Field number for the "ChannelLifetime" field.</summary>
  public const int ChannelLifetimeFieldNumber = 1;
  private readonly static int ChannelLifetimeDefaultValue = 0;

  private int channelLifetime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChannelLifetime {
    get { if ((_hasBits0 & 1) != 0) { return channelLifetime_; } else { return ChannelLifetimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      channelLifetime_ = value;
    }
  }
  /// <summary>Gets whether the "ChannelLifetime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasChannelLifetime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ChannelLifetime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearChannelLifetime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "MaxArrayLength" field.</summary>
  public const int MaxArrayLengthFieldNumber = 2;
  private readonly static int MaxArrayLengthDefaultValue = 0;

  private int maxArrayLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxArrayLength {
    get { if ((_hasBits0 & 2) != 0) { return maxArrayLength_; } else { return MaxArrayLengthDefaultValue; } }
    set {
      _hasBits0 |= 2;
      maxArrayLength_ = value;
    }
  }
  /// <summary>Gets whether the "MaxArrayLength" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxArrayLength {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MaxArrayLength" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxArrayLength() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "MaxBufferSize" field.</summary>
  public const int MaxBufferSizeFieldNumber = 3;
  private readonly static int MaxBufferSizeDefaultValue = 0;

  private int maxBufferSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxBufferSize {
    get { if ((_hasBits0 & 4) != 0) { return maxBufferSize_; } else { return MaxBufferSizeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      maxBufferSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxBufferSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxBufferSize {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "MaxBufferSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxBufferSize() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "MaxByteStringLength" field.</summary>
  public const int MaxByteStringLengthFieldNumber = 4;
  private readonly static int MaxByteStringLengthDefaultValue = 0;

  private int maxByteStringLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxByteStringLength {
    get { if ((_hasBits0 & 8) != 0) { return maxByteStringLength_; } else { return MaxByteStringLengthDefaultValue; } }
    set {
      _hasBits0 |= 8;
      maxByteStringLength_ = value;
    }
  }
  /// <summary>Gets whether the "MaxByteStringLength" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxByteStringLength {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "MaxByteStringLength" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxByteStringLength() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "MaxMessageSize" field.</summary>
  public const int MaxMessageSizeFieldNumber = 5;
  private readonly static int MaxMessageSizeDefaultValue = 0;

  private int maxMessageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxMessageSize {
    get { if ((_hasBits0 & 16) != 0) { return maxMessageSize_; } else { return MaxMessageSizeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      maxMessageSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxMessageSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxMessageSize {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "MaxMessageSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxMessageSize() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "MaxStringLength" field.</summary>
  public const int MaxStringLengthFieldNumber = 6;
  private readonly static int MaxStringLengthDefaultValue = 0;

  private int maxStringLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxStringLength {
    get { if ((_hasBits0 & 32) != 0) { return maxStringLength_; } else { return MaxStringLengthDefaultValue; } }
    set {
      _hasBits0 |= 32;
      maxStringLength_ = value;
    }
  }
  /// <summary>Gets whether the "MaxStringLength" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxStringLength {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "MaxStringLength" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxStringLength() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "OperationTimeout" field.</summary>
  public const int OperationTimeoutFieldNumber = 7;
  private readonly static int OperationTimeoutDefaultValue = 0;

  private int operationTimeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperationTimeout {
    get { if ((_hasBits0 & 64) != 0) { return operationTimeout_; } else { return OperationTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 64;
      operationTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "OperationTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOperationTimeout {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "OperationTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOperationTimeout() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "SecurityTokenLifetime" field.</summary>
  public const int SecurityTokenLifetimeFieldNumber = 8;
  private readonly static int SecurityTokenLifetimeDefaultValue = 0;

  private int securityTokenLifetime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SecurityTokenLifetime {
    get { if ((_hasBits0 & 128) != 0) { return securityTokenLifetime_; } else { return SecurityTokenLifetimeDefaultValue; } }
    set {
      _hasBits0 |= 128;
      securityTokenLifetime_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityTokenLifetime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityTokenLifetime {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "SecurityTokenLifetime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityTokenLifetime() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "UseBinaryEncoding" field.</summary>
  public const int UseBinaryEncodingFieldNumber = 9;
  private readonly static bool UseBinaryEncodingDefaultValue = false;

  private bool useBinaryEncoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseBinaryEncoding {
    get { if ((_hasBits0 & 256) != 0) { return useBinaryEncoding_; } else { return UseBinaryEncodingDefaultValue; } }
    set {
      _hasBits0 |= 256;
      useBinaryEncoding_ = value;
    }
  }
  /// <summary>Gets whether the "UseBinaryEncoding" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUseBinaryEncoding {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "UseBinaryEncoding" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUseBinaryEncoding() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EndpointConfiguration);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EndpointConfiguration other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChannelLifetime != other.ChannelLifetime) return false;
    if (MaxArrayLength != other.MaxArrayLength) return false;
    if (MaxBufferSize != other.MaxBufferSize) return false;
    if (MaxByteStringLength != other.MaxByteStringLength) return false;
    if (MaxMessageSize != other.MaxMessageSize) return false;
    if (MaxStringLength != other.MaxStringLength) return false;
    if (OperationTimeout != other.OperationTimeout) return false;
    if (SecurityTokenLifetime != other.SecurityTokenLifetime) return false;
    if (UseBinaryEncoding != other.UseBinaryEncoding) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChannelLifetime) hash ^= ChannelLifetime.GetHashCode();
    if (HasMaxArrayLength) hash ^= MaxArrayLength.GetHashCode();
    if (HasMaxBufferSize) hash ^= MaxBufferSize.GetHashCode();
    if (HasMaxByteStringLength) hash ^= MaxByteStringLength.GetHashCode();
    if (HasMaxMessageSize) hash ^= MaxMessageSize.GetHashCode();
    if (HasMaxStringLength) hash ^= MaxStringLength.GetHashCode();
    if (HasOperationTimeout) hash ^= OperationTimeout.GetHashCode();
    if (HasSecurityTokenLifetime) hash ^= SecurityTokenLifetime.GetHashCode();
    if (HasUseBinaryEncoding) hash ^= UseBinaryEncoding.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasChannelLifetime) {
      output.WriteRawTag(8);
      output.WriteInt32(ChannelLifetime);
    }
    if (HasMaxArrayLength) {
      output.WriteRawTag(16);
      output.WriteInt32(MaxArrayLength);
    }
    if (HasMaxBufferSize) {
      output.WriteRawTag(24);
      output.WriteInt32(MaxBufferSize);
    }
    if (HasMaxByteStringLength) {
      output.WriteRawTag(32);
      output.WriteInt32(MaxByteStringLength);
    }
    if (HasMaxMessageSize) {
      output.WriteRawTag(40);
      output.WriteInt32(MaxMessageSize);
    }
    if (HasMaxStringLength) {
      output.WriteRawTag(48);
      output.WriteInt32(MaxStringLength);
    }
    if (HasOperationTimeout) {
      output.WriteRawTag(56);
      output.WriteInt32(OperationTimeout);
    }
    if (HasSecurityTokenLifetime) {
      output.WriteRawTag(64);
      output.WriteInt32(SecurityTokenLifetime);
    }
    if (HasUseBinaryEncoding) {
      output.WriteRawTag(72);
      output.WriteBool(UseBinaryEncoding);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasChannelLifetime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelLifetime);
    }
    if (HasMaxArrayLength) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxArrayLength);
    }
    if (HasMaxBufferSize) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBufferSize);
    }
    if (HasMaxByteStringLength) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxByteStringLength);
    }
    if (HasMaxMessageSize) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMessageSize);
    }
    if (HasMaxStringLength) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxStringLength);
    }
    if (HasOperationTimeout) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationTimeout);
    }
    if (HasSecurityTokenLifetime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecurityTokenLifetime);
    }
    if (HasUseBinaryEncoding) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EndpointConfiguration other) {
    if (other == null) {
      return;
    }
    if (other.HasChannelLifetime) {
      ChannelLifetime = other.ChannelLifetime;
    }
    if (other.HasMaxArrayLength) {
      MaxArrayLength = other.MaxArrayLength;
    }
    if (other.HasMaxBufferSize) {
      MaxBufferSize = other.MaxBufferSize;
    }
    if (other.HasMaxByteStringLength) {
      MaxByteStringLength = other.MaxByteStringLength;
    }
    if (other.HasMaxMessageSize) {
      MaxMessageSize = other.MaxMessageSize;
    }
    if (other.HasMaxStringLength) {
      MaxStringLength = other.MaxStringLength;
    }
    if (other.HasOperationTimeout) {
      OperationTimeout = other.OperationTimeout;
    }
    if (other.HasSecurityTokenLifetime) {
      SecurityTokenLifetime = other.SecurityTokenLifetime;
    }
    if (other.HasUseBinaryEncoding) {
      UseBinaryEncoding = other.UseBinaryEncoding;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChannelLifetime = input.ReadInt32();
          break;
        }
        case 16: {
          MaxArrayLength = input.ReadInt32();
          break;
        }
        case 24: {
          MaxBufferSize = input.ReadInt32();
          break;
        }
        case 32: {
          MaxByteStringLength = input.ReadInt32();
          break;
        }
        case 40: {
          MaxMessageSize = input.ReadInt32();
          break;
        }
        case 48: {
          MaxStringLength = input.ReadInt32();
          break;
        }
        case 56: {
          OperationTimeout = input.ReadInt32();
          break;
        }
        case 64: {
          SecurityTokenLifetime = input.ReadInt32();
          break;
        }
        case 72: {
          UseBinaryEncoding = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class EndpointType : pb::IMessage<EndpointType> {
  private static readonly pb::MessageParser<EndpointType> _parser = new pb::MessageParser<EndpointType>(() => new EndpointType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EndpointType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointType(EndpointType other) : this() {
    _hasBits0 = other._hasBits0;
    endpointUrl_ = other.endpointUrl_;
    securityMode_ = other.securityMode_;
    securityPolicyUri_ = other.securityPolicyUri_;
    transportProfileUri_ = other.transportProfileUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointType Clone() {
    return new EndpointType(this);
  }

  /// <summary>Field number for the "EndpointUrl" field.</summary>
  public const int EndpointUrlFieldNumber = 1;
  private readonly static string EndpointUrlDefaultValue = "";

  private string endpointUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EndpointUrl {
    get { return endpointUrl_ ?? EndpointUrlDefaultValue; }
    set {
      endpointUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EndpointUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndpointUrl {
    get { return endpointUrl_ != null; }
  }
  /// <summary>Clears the value of the "EndpointUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndpointUrl() {
    endpointUrl_ = null;
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 2;
  private readonly static global::EndpointType.Types.MessageSecurityMode SecurityModeDefaultValue = global::EndpointType.Types.MessageSecurityMode.Invalid0;

  private global::EndpointType.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EndpointType.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 1) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SecurityPolicyUri" field.</summary>
  public const int SecurityPolicyUriFieldNumber = 3;
  private readonly static string SecurityPolicyUriDefaultValue = "";

  private string securityPolicyUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityPolicyUri {
    get { return securityPolicyUri_ ?? SecurityPolicyUriDefaultValue; }
    set {
      securityPolicyUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityPolicyUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityPolicyUri {
    get { return securityPolicyUri_ != null; }
  }
  /// <summary>Clears the value of the "SecurityPolicyUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityPolicyUri() {
    securityPolicyUri_ = null;
  }

  /// <summary>Field number for the "TransportProfileUri" field.</summary>
  public const int TransportProfileUriFieldNumber = 4;
  private readonly static string TransportProfileUriDefaultValue = "";

  private string transportProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TransportProfileUri {
    get { return transportProfileUri_ ?? TransportProfileUriDefaultValue; }
    set {
      transportProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "TransportProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransportProfileUri {
    get { return transportProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "TransportProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransportProfileUri() {
    transportProfileUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EndpointType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EndpointType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndpointUrl != other.EndpointUrl) return false;
    if (SecurityMode != other.SecurityMode) return false;
    if (SecurityPolicyUri != other.SecurityPolicyUri) return false;
    if (TransportProfileUri != other.TransportProfileUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndpointUrl) hash ^= EndpointUrl.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (HasSecurityPolicyUri) hash ^= SecurityPolicyUri.GetHashCode();
    if (HasTransportProfileUri) hash ^= TransportProfileUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndpointUrl) {
      output.WriteRawTag(10);
      output.WriteString(EndpointUrl);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SecurityMode);
    }
    if (HasSecurityPolicyUri) {
      output.WriteRawTag(26);
      output.WriteString(SecurityPolicyUri);
    }
    if (HasTransportProfileUri) {
      output.WriteRawTag(34);
      output.WriteString(TransportProfileUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndpointUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EndpointUrl);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (HasSecurityPolicyUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityPolicyUri);
    }
    if (HasTransportProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TransportProfileUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EndpointType other) {
    if (other == null) {
      return;
    }
    if (other.HasEndpointUrl) {
      EndpointUrl = other.EndpointUrl;
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    if (other.HasSecurityPolicyUri) {
      SecurityPolicyUri = other.SecurityPolicyUri;
    }
    if (other.HasTransportProfileUri) {
      TransportProfileUri = other.TransportProfileUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointUrl = input.ReadString();
          break;
        }
        case 16: {
          SecurityMode = (global::EndpointType.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
        case 26: {
          SecurityPolicyUri = input.ReadString();
          break;
        }
        case 34: {
          TransportProfileUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the EndpointType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class EphemeralKeyType : pb::IMessage<EphemeralKeyType> {
  private static readonly pb::MessageParser<EphemeralKeyType> _parser = new pb::MessageParser<EphemeralKeyType>(() => new EphemeralKeyType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EphemeralKeyType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EphemeralKeyType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EphemeralKeyType(EphemeralKeyType other) : this() {
    publicKey_ = other.publicKey_;
    signature_ = other.signature_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EphemeralKeyType Clone() {
    return new EphemeralKeyType(this);
  }

  /// <summary>Field number for the "PublicKey" field.</summary>
  public const int PublicKeyFieldNumber = 1;
  private readonly static pb::ByteString PublicKeyDefaultValue = pb::ByteString.Empty;

  private pb::ByteString publicKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString PublicKey {
    get { return publicKey_ ?? PublicKeyDefaultValue; }
    set {
      publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "PublicKey" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublicKey {
    get { return publicKey_ != null; }
  }
  /// <summary>Clears the value of the "PublicKey" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublicKey() {
    publicKey_ = null;
  }

  /// <summary>Field number for the "Signature" field.</summary>
  public const int SignatureFieldNumber = 2;
  private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Signature {
    get { return signature_ ?? SignatureDefaultValue; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Signature" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSignature {
    get { return signature_ != null; }
  }
  /// <summary>Clears the value of the "Signature" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSignature() {
    signature_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EphemeralKeyType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EphemeralKeyType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PublicKey != other.PublicKey) return false;
    if (Signature != other.Signature) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPublicKey) hash ^= PublicKey.GetHashCode();
    if (HasSignature) hash ^= Signature.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPublicKey) {
      output.WriteRawTag(10);
      output.WriteBytes(PublicKey);
    }
    if (HasSignature) {
      output.WriteRawTag(18);
      output.WriteBytes(Signature);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPublicKey) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
    }
    if (HasSignature) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EphemeralKeyType other) {
    if (other == null) {
      return;
    }
    if (other.HasPublicKey) {
      PublicKey = other.PublicKey;
    }
    if (other.HasSignature) {
      Signature = other.Signature;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublicKey = input.ReadBytes();
          break;
        }
        case 18: {
          Signature = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class ExpandedNodeId : pb::IMessage<ExpandedNodeId> {
  private static readonly pb::MessageParser<ExpandedNodeId> _parser = new pb::MessageParser<ExpandedNodeId>(() => new ExpandedNodeId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExpandedNodeId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExpandedNodeId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExpandedNodeId(ExpandedNodeId other) : this() {
    identifier_ = other.identifier_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExpandedNodeId Clone() {
    return new ExpandedNodeId(this);
  }

  /// <summary>Field number for the "Identifier" field.</summary>
  public const int IdentifierFieldNumber = 1;
  private readonly static string IdentifierDefaultValue = "";

  private string identifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Identifier {
    get { return identifier_ ?? IdentifierDefaultValue; }
    set {
      identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Identifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIdentifier {
    get { return identifier_ != null; }
  }
  /// <summary>Clears the value of the "Identifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIdentifier() {
    identifier_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExpandedNodeId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExpandedNodeId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Identifier != other.Identifier) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIdentifier) hash ^= Identifier.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIdentifier) {
      output.WriteRawTag(10);
      output.WriteString(Identifier);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIdentifier) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExpandedNodeId other) {
    if (other == null) {
      return;
    }
    if (other.HasIdentifier) {
      Identifier = other.Identifier;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Identifier = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Guid : pb::IMessage<Guid> {
  private static readonly pb::MessageParser<Guid> _parser = new pb::MessageParser<Guid>(() => new Guid());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Guid> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Guid() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Guid(Guid other) : this() {
    string_ = other.string_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Guid Clone() {
    return new Guid(this);
  }

  /// <summary>Field number for the "String" field.</summary>
  public const int StringFieldNumber = 1;
  private readonly static string StringDefaultValue = "";

  private string string_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string String {
    get { return string_ ?? StringDefaultValue; }
    set {
      string_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "String" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasString {
    get { return string_ != null; }
  }
  /// <summary>Clears the value of the "String" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearString() {
    string_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Guid);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Guid other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (String != other.String) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasString) hash ^= String.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasString) {
      output.WriteRawTag(10);
      output.WriteString(String);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Guid other) {
    if (other == null) {
      return;
    }
    if (other.HasString) {
      String = other.String;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          String = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class IdentityMappingRuleType : pb::IMessage<IdentityMappingRuleType> {
  private static readonly pb::MessageParser<IdentityMappingRuleType> _parser = new pb::MessageParser<IdentityMappingRuleType>(() => new IdentityMappingRuleType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IdentityMappingRuleType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentityMappingRuleType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentityMappingRuleType(IdentityMappingRuleType other) : this() {
    _hasBits0 = other._hasBits0;
    criteria_ = other.criteria_;
    criteriaType_ = other.criteriaType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentityMappingRuleType Clone() {
    return new IdentityMappingRuleType(this);
  }

  /// <summary>Field number for the "Criteria" field.</summary>
  public const int CriteriaFieldNumber = 1;
  private readonly static string CriteriaDefaultValue = "";

  private string criteria_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Criteria {
    get { return criteria_ ?? CriteriaDefaultValue; }
    set {
      criteria_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Criteria" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCriteria {
    get { return criteria_ != null; }
  }
  /// <summary>Clears the value of the "Criteria" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCriteria() {
    criteria_ = null;
  }

  /// <summary>Field number for the "CriteriaType" field.</summary>
  public const int CriteriaTypeFieldNumber = 2;
  private readonly static global::IdentityMappingRuleType.Types.IdentityCriteriaType CriteriaTypeDefaultValue = global::IdentityMappingRuleType.Types.IdentityCriteriaType.Anonymous5;

  private global::IdentityMappingRuleType.Types.IdentityCriteriaType criteriaType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::IdentityMappingRuleType.Types.IdentityCriteriaType CriteriaType {
    get { if ((_hasBits0 & 1) != 0) { return criteriaType_; } else { return CriteriaTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      criteriaType_ = value;
    }
  }
  /// <summary>Gets whether the "CriteriaType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCriteriaType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "CriteriaType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCriteriaType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IdentityMappingRuleType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IdentityMappingRuleType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Criteria != other.Criteria) return false;
    if (CriteriaType != other.CriteriaType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCriteria) hash ^= Criteria.GetHashCode();
    if (HasCriteriaType) hash ^= CriteriaType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCriteria) {
      output.WriteRawTag(10);
      output.WriteString(Criteria);
    }
    if (HasCriteriaType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CriteriaType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCriteria) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Criteria);
    }
    if (HasCriteriaType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CriteriaType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IdentityMappingRuleType other) {
    if (other == null) {
      return;
    }
    if (other.HasCriteria) {
      Criteria = other.Criteria;
    }
    if (other.HasCriteriaType) {
      CriteriaType = other.CriteriaType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Criteria = input.ReadString();
          break;
        }
        case 16: {
          CriteriaType = (global::IdentityMappingRuleType.Types.IdentityCriteriaType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the IdentityMappingRuleType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum IdentityCriteriaType {
      [pbr::OriginalName("IdentityCriteriaType_Anonymous_5")] Anonymous5 = 1,
      [pbr::OriginalName("IdentityCriteriaType_Application_7")] Application7 = 2,
      [pbr::OriginalName("IdentityCriteriaType_AuthenticatedUser_6")] AuthenticatedUser6 = 3,
      [pbr::OriginalName("IdentityCriteriaType_GroupId_4")] GroupId4 = 4,
      [pbr::OriginalName("IdentityCriteriaType_Role_3")] Role3 = 5,
      [pbr::OriginalName("IdentityCriteriaType_Thumbprint_2")] Thumbprint2 = 6,
      [pbr::OriginalName("IdentityCriteriaType_UserName_1")] UserName1 = 7,
    }

  }
  #endregion

}

public sealed partial class IssuedIdentityToken : pb::IMessage<IssuedIdentityToken> {
  private static readonly pb::MessageParser<IssuedIdentityToken> _parser = new pb::MessageParser<IssuedIdentityToken>(() => new IssuedIdentityToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IssuedIdentityToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuedIdentityToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuedIdentityToken(IssuedIdentityToken other) : this() {
    encryptionAlgorithm_ = other.encryptionAlgorithm_;
    policyId_ = other.policyId_;
    tokenData_ = other.tokenData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IssuedIdentityToken Clone() {
    return new IssuedIdentityToken(this);
  }

  /// <summary>Field number for the "EncryptionAlgorithm" field.</summary>
  public const int EncryptionAlgorithmFieldNumber = 1;
  private readonly static string EncryptionAlgorithmDefaultValue = "";

  private string encryptionAlgorithm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EncryptionAlgorithm {
    get { return encryptionAlgorithm_ ?? EncryptionAlgorithmDefaultValue; }
    set {
      encryptionAlgorithm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EncryptionAlgorithm" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEncryptionAlgorithm {
    get { return encryptionAlgorithm_ != null; }
  }
  /// <summary>Clears the value of the "EncryptionAlgorithm" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEncryptionAlgorithm() {
    encryptionAlgorithm_ = null;
  }

  /// <summary>Field number for the "PolicyId" field.</summary>
  public const int PolicyIdFieldNumber = 2;
  private readonly static string PolicyIdDefaultValue = "";

  private string policyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PolicyId {
    get { return policyId_ ?? PolicyIdDefaultValue; }
    set {
      policyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "PolicyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPolicyId {
    get { return policyId_ != null; }
  }
  /// <summary>Clears the value of the "PolicyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPolicyId() {
    policyId_ = null;
  }

  /// <summary>Field number for the "TokenData" field.</summary>
  public const int TokenDataFieldNumber = 3;
  private readonly static pb::ByteString TokenDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString tokenData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString TokenData {
    get { return tokenData_ ?? TokenDataDefaultValue; }
    set {
      tokenData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "TokenData" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTokenData {
    get { return tokenData_ != null; }
  }
  /// <summary>Clears the value of the "TokenData" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTokenData() {
    tokenData_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IssuedIdentityToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IssuedIdentityToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EncryptionAlgorithm != other.EncryptionAlgorithm) return false;
    if (PolicyId != other.PolicyId) return false;
    if (TokenData != other.TokenData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEncryptionAlgorithm) hash ^= EncryptionAlgorithm.GetHashCode();
    if (HasPolicyId) hash ^= PolicyId.GetHashCode();
    if (HasTokenData) hash ^= TokenData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEncryptionAlgorithm) {
      output.WriteRawTag(10);
      output.WriteString(EncryptionAlgorithm);
    }
    if (HasPolicyId) {
      output.WriteRawTag(18);
      output.WriteString(PolicyId);
    }
    if (HasTokenData) {
      output.WriteRawTag(26);
      output.WriteBytes(TokenData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEncryptionAlgorithm) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptionAlgorithm);
    }
    if (HasPolicyId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyId);
    }
    if (HasTokenData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(TokenData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IssuedIdentityToken other) {
    if (other == null) {
      return;
    }
    if (other.HasEncryptionAlgorithm) {
      EncryptionAlgorithm = other.EncryptionAlgorithm;
    }
    if (other.HasPolicyId) {
      PolicyId = other.PolicyId;
    }
    if (other.HasTokenData) {
      TokenData = other.TokenData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EncryptionAlgorithm = input.ReadString();
          break;
        }
        case 18: {
          PolicyId = input.ReadString();
          break;
        }
        case 26: {
          TokenData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class JsonDataSetReaderMessageDataType : pb::IMessage<JsonDataSetReaderMessageDataType> {
  private static readonly pb::MessageParser<JsonDataSetReaderMessageDataType> _parser = new pb::MessageParser<JsonDataSetReaderMessageDataType>(() => new JsonDataSetReaderMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JsonDataSetReaderMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonDataSetReaderMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonDataSetReaderMessageDataType(JsonDataSetReaderMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetMessageContentMask_ = other.dataSetMessageContentMask_;
    networkMessageContentMask_ = other.networkMessageContentMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonDataSetReaderMessageDataType Clone() {
    return new JsonDataSetReaderMessageDataType(this);
  }

  /// <summary>Field number for the "DataSetMessageContentMask" field.</summary>
  public const int DataSetMessageContentMaskFieldNumber = 1;
  private readonly static uint DataSetMessageContentMaskDefaultValue = 0;

  private uint dataSetMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetMessageContentMask {
    get { if ((_hasBits0 & 1) != 0) { return dataSetMessageContentMask_; } else { return DataSetMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetMessageContentMask {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetMessageContentMask() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "NetworkMessageContentMask" field.</summary>
  public const int NetworkMessageContentMaskFieldNumber = 2;
  private readonly static uint NetworkMessageContentMaskDefaultValue = 0;

  private uint networkMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageContentMask {
    get { if ((_hasBits0 & 2) != 0) { return networkMessageContentMask_; } else { return NetworkMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 2;
      networkMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageContentMask {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageContentMask() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JsonDataSetReaderMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JsonDataSetReaderMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataSetMessageContentMask != other.DataSetMessageContentMask) return false;
    if (NetworkMessageContentMask != other.NetworkMessageContentMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDataSetMessageContentMask) hash ^= DataSetMessageContentMask.GetHashCode();
    if (HasNetworkMessageContentMask) hash ^= NetworkMessageContentMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDataSetMessageContentMask) {
      output.WriteRawTag(8);
      output.WriteUInt32(DataSetMessageContentMask);
    }
    if (HasNetworkMessageContentMask) {
      output.WriteRawTag(16);
      output.WriteUInt32(NetworkMessageContentMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDataSetMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetMessageContentMask);
    }
    if (HasNetworkMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageContentMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JsonDataSetReaderMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDataSetMessageContentMask) {
      DataSetMessageContentMask = other.DataSetMessageContentMask;
    }
    if (other.HasNetworkMessageContentMask) {
      NetworkMessageContentMask = other.NetworkMessageContentMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DataSetMessageContentMask = input.ReadUInt32();
          break;
        }
        case 16: {
          NetworkMessageContentMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class JsonDataSetWriterMessageDataType : pb::IMessage<JsonDataSetWriterMessageDataType> {
  private static readonly pb::MessageParser<JsonDataSetWriterMessageDataType> _parser = new pb::MessageParser<JsonDataSetWriterMessageDataType>(() => new JsonDataSetWriterMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JsonDataSetWriterMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonDataSetWriterMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonDataSetWriterMessageDataType(JsonDataSetWriterMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetMessageContentMask_ = other.dataSetMessageContentMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonDataSetWriterMessageDataType Clone() {
    return new JsonDataSetWriterMessageDataType(this);
  }

  /// <summary>Field number for the "DataSetMessageContentMask" field.</summary>
  public const int DataSetMessageContentMaskFieldNumber = 1;
  private readonly static uint DataSetMessageContentMaskDefaultValue = 0;

  private uint dataSetMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetMessageContentMask {
    get { if ((_hasBits0 & 1) != 0) { return dataSetMessageContentMask_; } else { return DataSetMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetMessageContentMask {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetMessageContentMask() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JsonDataSetWriterMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JsonDataSetWriterMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataSetMessageContentMask != other.DataSetMessageContentMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDataSetMessageContentMask) hash ^= DataSetMessageContentMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDataSetMessageContentMask) {
      output.WriteRawTag(8);
      output.WriteUInt32(DataSetMessageContentMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDataSetMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetMessageContentMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JsonDataSetWriterMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDataSetMessageContentMask) {
      DataSetMessageContentMask = other.DataSetMessageContentMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DataSetMessageContentMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class JsonWriterGroupMessageDataType : pb::IMessage<JsonWriterGroupMessageDataType> {
  private static readonly pb::MessageParser<JsonWriterGroupMessageDataType> _parser = new pb::MessageParser<JsonWriterGroupMessageDataType>(() => new JsonWriterGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JsonWriterGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonWriterGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonWriterGroupMessageDataType(JsonWriterGroupMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    networkMessageContentMask_ = other.networkMessageContentMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JsonWriterGroupMessageDataType Clone() {
    return new JsonWriterGroupMessageDataType(this);
  }

  /// <summary>Field number for the "NetworkMessageContentMask" field.</summary>
  public const int NetworkMessageContentMaskFieldNumber = 1;
  private readonly static uint NetworkMessageContentMaskDefaultValue = 0;

  private uint networkMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageContentMask {
    get { if ((_hasBits0 & 1) != 0) { return networkMessageContentMask_; } else { return NetworkMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 1;
      networkMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageContentMask {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageContentMask() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JsonWriterGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JsonWriterGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NetworkMessageContentMask != other.NetworkMessageContentMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNetworkMessageContentMask) hash ^= NetworkMessageContentMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasNetworkMessageContentMask) {
      output.WriteRawTag(8);
      output.WriteUInt32(NetworkMessageContentMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasNetworkMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageContentMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JsonWriterGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasNetworkMessageContentMask) {
      NetworkMessageContentMask = other.NetworkMessageContentMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NetworkMessageContentMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBoolean : pb::IMessage<ListOfBoolean> {
  private static readonly pb::MessageParser<ListOfBoolean> _parser = new pb::MessageParser<ListOfBoolean>(() => new ListOfBoolean());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBoolean> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBoolean() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBoolean(ListOfBoolean other) : this() {
    boolean_ = other.boolean_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBoolean Clone() {
    return new ListOfBoolean(this);
  }

  /// <summary>Field number for the "Boolean" field.</summary>
  public const int BooleanFieldNumber = 1;
  private static readonly pb::FieldCodec<bool> _repeated_boolean_codec
      = pb::FieldCodec.ForBool(8);
  private readonly pbc::RepeatedField<bool> boolean_ = new pbc::RepeatedField<bool>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<bool> Boolean {
    get { return boolean_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBoolean);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBoolean other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!boolean_.Equals(other.boolean_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= boolean_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    boolean_.WriteTo(output, _repeated_boolean_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += boolean_.CalculateSize(_repeated_boolean_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBoolean other) {
    if (other == null) {
      return;
    }
    boolean_.Add(other.boolean_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          boolean_.AddEntriesFrom(input, _repeated_boolean_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrokerConnectionTransportDataType : pb::IMessage<ListOfBrokerConnectionTransportDataType> {
  private static readonly pb::MessageParser<ListOfBrokerConnectionTransportDataType> _parser = new pb::MessageParser<ListOfBrokerConnectionTransportDataType>(() => new ListOfBrokerConnectionTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrokerConnectionTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerConnectionTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerConnectionTransportDataType(ListOfBrokerConnectionTransportDataType other) : this() {
    BrokerConnectionTransportDataType_ = other.BrokerConnectionTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerConnectionTransportDataType Clone() {
    return new ListOfBrokerConnectionTransportDataType(this);
  }

  /// <summary>Field number for the "_BrokerConnectionTransportDataType" field.</summary>
  public const int BrokerConnectionTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrokerConnectionTransportDataType> _repeated_BrokerConnectionTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::BrokerConnectionTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::BrokerConnectionTransportDataType> BrokerConnectionTransportDataType_ = new pbc::RepeatedField<global::BrokerConnectionTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrokerConnectionTransportDataType> BrokerConnectionTransportDataType {
    get { return BrokerConnectionTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrokerConnectionTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrokerConnectionTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrokerConnectionTransportDataType_.Equals(other.BrokerConnectionTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrokerConnectionTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrokerConnectionTransportDataType_.WriteTo(output, _repeated_BrokerConnectionTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrokerConnectionTransportDataType_.CalculateSize(_repeated_BrokerConnectionTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrokerConnectionTransportDataType other) {
    if (other == null) {
      return;
    }
    BrokerConnectionTransportDataType_.Add(other.BrokerConnectionTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrokerConnectionTransportDataType_.AddEntriesFrom(input, _repeated_BrokerConnectionTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrokerDataSetReaderTransportDataType : pb::IMessage<ListOfBrokerDataSetReaderTransportDataType> {
  private static readonly pb::MessageParser<ListOfBrokerDataSetReaderTransportDataType> _parser = new pb::MessageParser<ListOfBrokerDataSetReaderTransportDataType>(() => new ListOfBrokerDataSetReaderTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrokerDataSetReaderTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerDataSetReaderTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerDataSetReaderTransportDataType(ListOfBrokerDataSetReaderTransportDataType other) : this() {
    BrokerDataSetReaderTransportDataType_ = other.BrokerDataSetReaderTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerDataSetReaderTransportDataType Clone() {
    return new ListOfBrokerDataSetReaderTransportDataType(this);
  }

  /// <summary>Field number for the "_BrokerDataSetReaderTransportDataType" field.</summary>
  public const int BrokerDataSetReaderTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrokerDataSetReaderTransportDataType> _repeated_BrokerDataSetReaderTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::BrokerDataSetReaderTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::BrokerDataSetReaderTransportDataType> BrokerDataSetReaderTransportDataType_ = new pbc::RepeatedField<global::BrokerDataSetReaderTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrokerDataSetReaderTransportDataType> BrokerDataSetReaderTransportDataType {
    get { return BrokerDataSetReaderTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrokerDataSetReaderTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrokerDataSetReaderTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrokerDataSetReaderTransportDataType_.Equals(other.BrokerDataSetReaderTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrokerDataSetReaderTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrokerDataSetReaderTransportDataType_.WriteTo(output, _repeated_BrokerDataSetReaderTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrokerDataSetReaderTransportDataType_.CalculateSize(_repeated_BrokerDataSetReaderTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrokerDataSetReaderTransportDataType other) {
    if (other == null) {
      return;
    }
    BrokerDataSetReaderTransportDataType_.Add(other.BrokerDataSetReaderTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrokerDataSetReaderTransportDataType_.AddEntriesFrom(input, _repeated_BrokerDataSetReaderTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrokerDataSetWriterTransportDataType : pb::IMessage<ListOfBrokerDataSetWriterTransportDataType> {
  private static readonly pb::MessageParser<ListOfBrokerDataSetWriterTransportDataType> _parser = new pb::MessageParser<ListOfBrokerDataSetWriterTransportDataType>(() => new ListOfBrokerDataSetWriterTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrokerDataSetWriterTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerDataSetWriterTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerDataSetWriterTransportDataType(ListOfBrokerDataSetWriterTransportDataType other) : this() {
    BrokerDataSetWriterTransportDataType_ = other.BrokerDataSetWriterTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerDataSetWriterTransportDataType Clone() {
    return new ListOfBrokerDataSetWriterTransportDataType(this);
  }

  /// <summary>Field number for the "_BrokerDataSetWriterTransportDataType" field.</summary>
  public const int BrokerDataSetWriterTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrokerDataSetWriterTransportDataType> _repeated_BrokerDataSetWriterTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::BrokerDataSetWriterTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::BrokerDataSetWriterTransportDataType> BrokerDataSetWriterTransportDataType_ = new pbc::RepeatedField<global::BrokerDataSetWriterTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrokerDataSetWriterTransportDataType> BrokerDataSetWriterTransportDataType {
    get { return BrokerDataSetWriterTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrokerDataSetWriterTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrokerDataSetWriterTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrokerDataSetWriterTransportDataType_.Equals(other.BrokerDataSetWriterTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrokerDataSetWriterTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrokerDataSetWriterTransportDataType_.WriteTo(output, _repeated_BrokerDataSetWriterTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrokerDataSetWriterTransportDataType_.CalculateSize(_repeated_BrokerDataSetWriterTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrokerDataSetWriterTransportDataType other) {
    if (other == null) {
      return;
    }
    BrokerDataSetWriterTransportDataType_.Add(other.BrokerDataSetWriterTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrokerDataSetWriterTransportDataType_.AddEntriesFrom(input, _repeated_BrokerDataSetWriterTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrokerTransportQualityOfService : pb::IMessage<ListOfBrokerTransportQualityOfService> {
  private static readonly pb::MessageParser<ListOfBrokerTransportQualityOfService> _parser = new pb::MessageParser<ListOfBrokerTransportQualityOfService>(() => new ListOfBrokerTransportQualityOfService());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrokerTransportQualityOfService> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerTransportQualityOfService() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerTransportQualityOfService(ListOfBrokerTransportQualityOfService other) : this() {
    BrokerTransportQualityOfService_ = other.BrokerTransportQualityOfService_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerTransportQualityOfService Clone() {
    return new ListOfBrokerTransportQualityOfService(this);
  }

  /// <summary>Field number for the "_BrokerTransportQualityOfService" field.</summary>
  public const int BrokerTransportQualityOfServiceFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfBrokerTransportQualityOfService.Types.BrokerTransportQualityOfService> _repeated_BrokerTransportQualityOfService_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfBrokerTransportQualityOfService.Types.BrokerTransportQualityOfService) x);
  private readonly pbc::RepeatedField<global::ListOfBrokerTransportQualityOfService.Types.BrokerTransportQualityOfService> BrokerTransportQualityOfService_ = new pbc::RepeatedField<global::ListOfBrokerTransportQualityOfService.Types.BrokerTransportQualityOfService>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfBrokerTransportQualityOfService.Types.BrokerTransportQualityOfService> BrokerTransportQualityOfService {
    get { return BrokerTransportQualityOfService_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrokerTransportQualityOfService);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrokerTransportQualityOfService other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrokerTransportQualityOfService_.Equals(other.BrokerTransportQualityOfService_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrokerTransportQualityOfService_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrokerTransportQualityOfService_.WriteTo(output, _repeated_BrokerTransportQualityOfService_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrokerTransportQualityOfService_.CalculateSize(_repeated_BrokerTransportQualityOfService_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrokerTransportQualityOfService other) {
    if (other == null) {
      return;
    }
    BrokerTransportQualityOfService_.Add(other.BrokerTransportQualityOfService_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          BrokerTransportQualityOfService_.AddEntriesFrom(input, _repeated_BrokerTransportQualityOfService_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfBrokerTransportQualityOfService message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrokerTransportQualityOfService {
      [pbr::OriginalName("BrokerTransportQualityOfService_AtLeastOnce_2")] AtLeastOnce2 = 1,
      [pbr::OriginalName("BrokerTransportQualityOfService_AtMostOnce_3")] AtMostOnce3 = 2,
      [pbr::OriginalName("BrokerTransportQualityOfService_BestEffort_1")] BestEffort1 = 3,
      [pbr::OriginalName("BrokerTransportQualityOfService_ExactlyOnce_4")] ExactlyOnce4 = 4,
      [pbr::OriginalName("BrokerTransportQualityOfService_NotSpecified_0")] NotSpecified0 = 5,
    }

  }
  #endregion

}

public sealed partial class ListOfBrokerWriterGroupTransportDataType : pb::IMessage<ListOfBrokerWriterGroupTransportDataType> {
  private static readonly pb::MessageParser<ListOfBrokerWriterGroupTransportDataType> _parser = new pb::MessageParser<ListOfBrokerWriterGroupTransportDataType>(() => new ListOfBrokerWriterGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrokerWriterGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerWriterGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerWriterGroupTransportDataType(ListOfBrokerWriterGroupTransportDataType other) : this() {
    BrokerWriterGroupTransportDataType_ = other.BrokerWriterGroupTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrokerWriterGroupTransportDataType Clone() {
    return new ListOfBrokerWriterGroupTransportDataType(this);
  }

  /// <summary>Field number for the "_BrokerWriterGroupTransportDataType" field.</summary>
  public const int BrokerWriterGroupTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrokerWriterGroupTransportDataType> _repeated_BrokerWriterGroupTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::BrokerWriterGroupTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::BrokerWriterGroupTransportDataType> BrokerWriterGroupTransportDataType_ = new pbc::RepeatedField<global::BrokerWriterGroupTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrokerWriterGroupTransportDataType> BrokerWriterGroupTransportDataType {
    get { return BrokerWriterGroupTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrokerWriterGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrokerWriterGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrokerWriterGroupTransportDataType_.Equals(other.BrokerWriterGroupTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrokerWriterGroupTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrokerWriterGroupTransportDataType_.WriteTo(output, _repeated_BrokerWriterGroupTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrokerWriterGroupTransportDataType_.CalculateSize(_repeated_BrokerWriterGroupTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrokerWriterGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    BrokerWriterGroupTransportDataType_.Add(other.BrokerWriterGroupTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrokerWriterGroupTransportDataType_.AddEntriesFrom(input, _repeated_BrokerWriterGroupTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfByte : pb::IMessage<ListOfByte> {
  private static readonly pb::MessageParser<ListOfByte> _parser = new pb::MessageParser<ListOfByte>(() => new ListOfByte());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfByte> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfByte() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfByte(ListOfByte other) : this() {
    byte_ = other.byte_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfByte Clone() {
    return new ListOfByte(this);
  }

  /// <summary>Field number for the "Byte" field.</summary>
  public const int ByteFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_byte_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> byte_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Byte {
    get { return byte_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfByte);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfByte other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!byte_.Equals(other.byte_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= byte_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    byte_.WriteTo(output, _repeated_byte_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += byte_.CalculateSize(_repeated_byte_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfByte other) {
    if (other == null) {
      return;
    }
    byte_.Add(other.byte_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          byte_.AddEntriesFrom(input, _repeated_byte_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfByteString : pb::IMessage<ListOfByteString> {
  private static readonly pb::MessageParser<ListOfByteString> _parser = new pb::MessageParser<ListOfByteString>(() => new ListOfByteString());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfByteString> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfByteString() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfByteString(ListOfByteString other) : this() {
    byteString_ = other.byteString_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfByteString Clone() {
    return new ListOfByteString(this);
  }

  /// <summary>Field number for the "ByteString" field.</summary>
  public const int ByteStringFieldNumber = 1;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_byteString_codec
      = pb::FieldCodec.ForBytes(10);
  private readonly pbc::RepeatedField<pb::ByteString> byteString_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> ByteString {
    get { return byteString_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfByteString);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfByteString other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!byteString_.Equals(other.byteString_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= byteString_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    byteString_.WriteTo(output, _repeated_byteString_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += byteString_.CalculateSize(_repeated_byteString_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfByteString other) {
    if (other == null) {
      return;
    }
    byteString_.Add(other.byteString_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          byteString_.AddEntriesFrom(input, _repeated_byteString_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfCartesianCoordinates : pb::IMessage<ListOfCartesianCoordinates> {
  private static readonly pb::MessageParser<ListOfCartesianCoordinates> _parser = new pb::MessageParser<ListOfCartesianCoordinates>(() => new ListOfCartesianCoordinates());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfCartesianCoordinates> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCartesianCoordinates() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCartesianCoordinates(ListOfCartesianCoordinates other) : this() {
    CartesianCoordinates_ = other.CartesianCoordinates_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCartesianCoordinates Clone() {
    return new ListOfCartesianCoordinates(this);
  }

  /// <summary>Field number for the "_CartesianCoordinates" field.</summary>
  public const int CartesianCoordinatesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CartesianCoordinates> _repeated_CartesianCoordinates_codec
      = pb::FieldCodec.ForMessage(10, global::CartesianCoordinates.Parser);
  private readonly pbc::RepeatedField<global::CartesianCoordinates> CartesianCoordinates_ = new pbc::RepeatedField<global::CartesianCoordinates>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CartesianCoordinates> CartesianCoordinates {
    get { return CartesianCoordinates_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfCartesianCoordinates);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfCartesianCoordinates other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!CartesianCoordinates_.Equals(other.CartesianCoordinates_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CartesianCoordinates_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    CartesianCoordinates_.WriteTo(output, _repeated_CartesianCoordinates_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += CartesianCoordinates_.CalculateSize(_repeated_CartesianCoordinates_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfCartesianCoordinates other) {
    if (other == null) {
      return;
    }
    CartesianCoordinates_.Add(other.CartesianCoordinates_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CartesianCoordinates_.AddEntriesFrom(input, _repeated_CartesianCoordinates_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfConfigurationVersionDataType : pb::IMessage<ListOfConfigurationVersionDataType> {
  private static readonly pb::MessageParser<ListOfConfigurationVersionDataType> _parser = new pb::MessageParser<ListOfConfigurationVersionDataType>(() => new ListOfConfigurationVersionDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfConfigurationVersionDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfConfigurationVersionDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfConfigurationVersionDataType(ListOfConfigurationVersionDataType other) : this() {
    ConfigurationVersionDataType_ = other.ConfigurationVersionDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfConfigurationVersionDataType Clone() {
    return new ListOfConfigurationVersionDataType(this);
  }

  /// <summary>Field number for the "_ConfigurationVersionDataType" field.</summary>
  public const int ConfigurationVersionDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ConfigurationVersionDataType> _repeated_ConfigurationVersionDataType_codec
      = pb::FieldCodec.ForMessage(10, global::ConfigurationVersionDataType.Parser);
  private readonly pbc::RepeatedField<global::ConfigurationVersionDataType> ConfigurationVersionDataType_ = new pbc::RepeatedField<global::ConfigurationVersionDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ConfigurationVersionDataType> ConfigurationVersionDataType {
    get { return ConfigurationVersionDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfConfigurationVersionDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfConfigurationVersionDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ConfigurationVersionDataType_.Equals(other.ConfigurationVersionDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ConfigurationVersionDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ConfigurationVersionDataType_.WriteTo(output, _repeated_ConfigurationVersionDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ConfigurationVersionDataType_.CalculateSize(_repeated_ConfigurationVersionDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfConfigurationVersionDataType other) {
    if (other == null) {
      return;
    }
    ConfigurationVersionDataType_.Add(other.ConfigurationVersionDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ConfigurationVersionDataType_.AddEntriesFrom(input, _repeated_ConfigurationVersionDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetFieldContentMask : pb::IMessage<ListOfDataSetFieldContentMask> {
  private static readonly pb::MessageParser<ListOfDataSetFieldContentMask> _parser = new pb::MessageParser<ListOfDataSetFieldContentMask>(() => new ListOfDataSetFieldContentMask());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetFieldContentMask> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetFieldContentMask() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetFieldContentMask(ListOfDataSetFieldContentMask other) : this() {
    dataSetFieldContentMask_ = other.dataSetFieldContentMask_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetFieldContentMask Clone() {
    return new ListOfDataSetFieldContentMask(this);
  }

  /// <summary>Field number for the "DataSetFieldContentMask" field.</summary>
  public const int DataSetFieldContentMaskFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_dataSetFieldContentMask_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> dataSetFieldContentMask_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> DataSetFieldContentMask {
    get { return dataSetFieldContentMask_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetFieldContentMask);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetFieldContentMask other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!dataSetFieldContentMask_.Equals(other.dataSetFieldContentMask_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= dataSetFieldContentMask_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    dataSetFieldContentMask_.WriteTo(output, _repeated_dataSetFieldContentMask_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += dataSetFieldContentMask_.CalculateSize(_repeated_dataSetFieldContentMask_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetFieldContentMask other) {
    if (other == null) {
      return;
    }
    dataSetFieldContentMask_.Add(other.dataSetFieldContentMask_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          dataSetFieldContentMask_.AddEntriesFrom(input, _repeated_dataSetFieldContentMask_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetOrderingType : pb::IMessage<ListOfDataSetOrderingType> {
  private static readonly pb::MessageParser<ListOfDataSetOrderingType> _parser = new pb::MessageParser<ListOfDataSetOrderingType>(() => new ListOfDataSetOrderingType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetOrderingType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetOrderingType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetOrderingType(ListOfDataSetOrderingType other) : this() {
    DataSetOrderingType_ = other.DataSetOrderingType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetOrderingType Clone() {
    return new ListOfDataSetOrderingType(this);
  }

  /// <summary>Field number for the "_DataSetOrderingType" field.</summary>
  public const int DataSetOrderingTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfDataSetOrderingType.Types.DataSetOrderingType> _repeated_DataSetOrderingType_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfDataSetOrderingType.Types.DataSetOrderingType) x);
  private readonly pbc::RepeatedField<global::ListOfDataSetOrderingType.Types.DataSetOrderingType> DataSetOrderingType_ = new pbc::RepeatedField<global::ListOfDataSetOrderingType.Types.DataSetOrderingType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfDataSetOrderingType.Types.DataSetOrderingType> DataSetOrderingType {
    get { return DataSetOrderingType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetOrderingType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetOrderingType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetOrderingType_.Equals(other.DataSetOrderingType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetOrderingType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetOrderingType_.WriteTo(output, _repeated_DataSetOrderingType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetOrderingType_.CalculateSize(_repeated_DataSetOrderingType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetOrderingType other) {
    if (other == null) {
      return;
    }
    DataSetOrderingType_.Add(other.DataSetOrderingType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          DataSetOrderingType_.AddEntriesFrom(input, _repeated_DataSetOrderingType_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfDataSetOrderingType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DataSetOrderingType {
      [pbr::OriginalName("DataSetOrderingType_AscendingWriterIdSingle_2")] AscendingWriterIdSingle2 = 1,
      [pbr::OriginalName("DataSetOrderingType_AscendingWriterId_1")] AscendingWriterId1 = 2,
      [pbr::OriginalName("DataSetOrderingType_Undefined_0")] Undefined0 = 3,
    }

  }
  #endregion

}

public sealed partial class ListOfDataSetReaderTransportDataType : pb::IMessage<ListOfDataSetReaderTransportDataType> {
  private static readonly pb::MessageParser<ListOfDataSetReaderTransportDataType> _parser = new pb::MessageParser<ListOfDataSetReaderTransportDataType>(() => new ListOfDataSetReaderTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetReaderTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderTransportDataType(ListOfDataSetReaderTransportDataType other) : this() {
    DataSetReaderTransportDataType_ = other.DataSetReaderTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderTransportDataType Clone() {
    return new ListOfDataSetReaderTransportDataType(this);
  }

  /// <summary>Field number for the "_DataSetReaderTransportDataType" field.</summary>
  public const int DataSetReaderTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataSetReaderTransportDataType> _repeated_DataSetReaderTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DataSetReaderTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::DataSetReaderTransportDataType> DataSetReaderTransportDataType_ = new pbc::RepeatedField<global::DataSetReaderTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataSetReaderTransportDataType> DataSetReaderTransportDataType {
    get { return DataSetReaderTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetReaderTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetReaderTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetReaderTransportDataType_.Equals(other.DataSetReaderTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetReaderTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetReaderTransportDataType_.WriteTo(output, _repeated_DataSetReaderTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetReaderTransportDataType_.CalculateSize(_repeated_DataSetReaderTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetReaderTransportDataType other) {
    if (other == null) {
      return;
    }
    DataSetReaderTransportDataType_.Add(other.DataSetReaderTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataSetReaderTransportDataType_.AddEntriesFrom(input, _repeated_DataSetReaderTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetWriterMessageDataType : pb::IMessage<ListOfDataSetWriterMessageDataType> {
  private static readonly pb::MessageParser<ListOfDataSetWriterMessageDataType> _parser = new pb::MessageParser<ListOfDataSetWriterMessageDataType>(() => new ListOfDataSetWriterMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetWriterMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterMessageDataType(ListOfDataSetWriterMessageDataType other) : this() {
    DataSetWriterMessageDataType_ = other.DataSetWriterMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterMessageDataType Clone() {
    return new ListOfDataSetWriterMessageDataType(this);
  }

  /// <summary>Field number for the "_DataSetWriterMessageDataType" field.</summary>
  public const int DataSetWriterMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataSetWriterMessageDataType> _repeated_DataSetWriterMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DataSetWriterMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::DataSetWriterMessageDataType> DataSetWriterMessageDataType_ = new pbc::RepeatedField<global::DataSetWriterMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataSetWriterMessageDataType> DataSetWriterMessageDataType {
    get { return DataSetWriterMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetWriterMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetWriterMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetWriterMessageDataType_.Equals(other.DataSetWriterMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetWriterMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetWriterMessageDataType_.WriteTo(output, _repeated_DataSetWriterMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetWriterMessageDataType_.CalculateSize(_repeated_DataSetWriterMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetWriterMessageDataType other) {
    if (other == null) {
      return;
    }
    DataSetWriterMessageDataType_.Add(other.DataSetWriterMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataSetWriterMessageDataType_.AddEntriesFrom(input, _repeated_DataSetWriterMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetWriterTransportDataType : pb::IMessage<ListOfDataSetWriterTransportDataType> {
  private static readonly pb::MessageParser<ListOfDataSetWriterTransportDataType> _parser = new pb::MessageParser<ListOfDataSetWriterTransportDataType>(() => new ListOfDataSetWriterTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetWriterTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterTransportDataType(ListOfDataSetWriterTransportDataType other) : this() {
    DataSetWriterTransportDataType_ = other.DataSetWriterTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterTransportDataType Clone() {
    return new ListOfDataSetWriterTransportDataType(this);
  }

  /// <summary>Field number for the "_DataSetWriterTransportDataType" field.</summary>
  public const int DataSetWriterTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataSetWriterTransportDataType> _repeated_DataSetWriterTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DataSetWriterTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::DataSetWriterTransportDataType> DataSetWriterTransportDataType_ = new pbc::RepeatedField<global::DataSetWriterTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataSetWriterTransportDataType> DataSetWriterTransportDataType {
    get { return DataSetWriterTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetWriterTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetWriterTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetWriterTransportDataType_.Equals(other.DataSetWriterTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetWriterTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetWriterTransportDataType_.WriteTo(output, _repeated_DataSetWriterTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetWriterTransportDataType_.CalculateSize(_repeated_DataSetWriterTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetWriterTransportDataType other) {
    if (other == null) {
      return;
    }
    DataSetWriterTransportDataType_.Add(other.DataSetWriterTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataSetWriterTransportDataType_.AddEntriesFrom(input, _repeated_DataSetWriterTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDatagramWriterGroupTransportDataType : pb::IMessage<ListOfDatagramWriterGroupTransportDataType> {
  private static readonly pb::MessageParser<ListOfDatagramWriterGroupTransportDataType> _parser = new pb::MessageParser<ListOfDatagramWriterGroupTransportDataType>(() => new ListOfDatagramWriterGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDatagramWriterGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDatagramWriterGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDatagramWriterGroupTransportDataType(ListOfDatagramWriterGroupTransportDataType other) : this() {
    DatagramWriterGroupTransportDataType_ = other.DatagramWriterGroupTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDatagramWriterGroupTransportDataType Clone() {
    return new ListOfDatagramWriterGroupTransportDataType(this);
  }

  /// <summary>Field number for the "_DatagramWriterGroupTransportDataType" field.</summary>
  public const int DatagramWriterGroupTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DatagramWriterGroupTransportDataType> _repeated_DatagramWriterGroupTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DatagramWriterGroupTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::DatagramWriterGroupTransportDataType> DatagramWriterGroupTransportDataType_ = new pbc::RepeatedField<global::DatagramWriterGroupTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DatagramWriterGroupTransportDataType> DatagramWriterGroupTransportDataType {
    get { return DatagramWriterGroupTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDatagramWriterGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDatagramWriterGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DatagramWriterGroupTransportDataType_.Equals(other.DatagramWriterGroupTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DatagramWriterGroupTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DatagramWriterGroupTransportDataType_.WriteTo(output, _repeated_DatagramWriterGroupTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DatagramWriterGroupTransportDataType_.CalculateSize(_repeated_DatagramWriterGroupTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDatagramWriterGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    DatagramWriterGroupTransportDataType_.Add(other.DatagramWriterGroupTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DatagramWriterGroupTransportDataType_.AddEntriesFrom(input, _repeated_DatagramWriterGroupTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDateTime : pb::IMessage<ListOfDateTime> {
  private static readonly pb::MessageParser<ListOfDateTime> _parser = new pb::MessageParser<ListOfDateTime>(() => new ListOfDateTime());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDateTime> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDateTime() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDateTime(ListOfDateTime other) : this() {
    dateTime_ = other.dateTime_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDateTime Clone() {
    return new ListOfDateTime(this);
  }

  /// <summary>Field number for the "DateTime" field.</summary>
  public const int DateTimeFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_dateTime_codec
      = pb::FieldCodec.ForInt64(8);
  private readonly pbc::RepeatedField<long> dateTime_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> DateTime {
    get { return dateTime_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDateTime);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDateTime other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!dateTime_.Equals(other.dateTime_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= dateTime_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    dateTime_.WriteTo(output, _repeated_dateTime_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += dateTime_.CalculateSize(_repeated_dateTime_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDateTime other) {
    if (other == null) {
      return;
    }
    dateTime_.Add(other.dateTime_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          dateTime_.AddEntriesFrom(input, _repeated_dateTime_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDiagnosticsLevel : pb::IMessage<ListOfDiagnosticsLevel> {
  private static readonly pb::MessageParser<ListOfDiagnosticsLevel> _parser = new pb::MessageParser<ListOfDiagnosticsLevel>(() => new ListOfDiagnosticsLevel());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDiagnosticsLevel> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDiagnosticsLevel() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDiagnosticsLevel(ListOfDiagnosticsLevel other) : this() {
    DiagnosticsLevel_ = other.DiagnosticsLevel_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDiagnosticsLevel Clone() {
    return new ListOfDiagnosticsLevel(this);
  }

  /// <summary>Field number for the "_DiagnosticsLevel" field.</summary>
  public const int DiagnosticsLevelFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfDiagnosticsLevel.Types.DiagnosticsLevel> _repeated_DiagnosticsLevel_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfDiagnosticsLevel.Types.DiagnosticsLevel) x);
  private readonly pbc::RepeatedField<global::ListOfDiagnosticsLevel.Types.DiagnosticsLevel> DiagnosticsLevel_ = new pbc::RepeatedField<global::ListOfDiagnosticsLevel.Types.DiagnosticsLevel>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfDiagnosticsLevel.Types.DiagnosticsLevel> DiagnosticsLevel {
    get { return DiagnosticsLevel_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDiagnosticsLevel);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDiagnosticsLevel other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DiagnosticsLevel_.Equals(other.DiagnosticsLevel_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DiagnosticsLevel_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DiagnosticsLevel_.WriteTo(output, _repeated_DiagnosticsLevel_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DiagnosticsLevel_.CalculateSize(_repeated_DiagnosticsLevel_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDiagnosticsLevel other) {
    if (other == null) {
      return;
    }
    DiagnosticsLevel_.Add(other.DiagnosticsLevel_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          DiagnosticsLevel_.AddEntriesFrom(input, _repeated_DiagnosticsLevel_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfDiagnosticsLevel message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DiagnosticsLevel {
      [pbr::OriginalName("DiagnosticsLevel_Advanced_1")] Advanced1 = 1,
      [pbr::OriginalName("DiagnosticsLevel_Basic_0")] Basic0 = 2,
      [pbr::OriginalName("DiagnosticsLevel_Debug_4")] Debug4 = 3,
      [pbr::OriginalName("DiagnosticsLevel_Info_2")] Info2 = 4,
      [pbr::OriginalName("DiagnosticsLevel_Log_3")] Log3 = 5,
    }

  }
  #endregion

}

public sealed partial class ListOfDouble : pb::IMessage<ListOfDouble> {
  private static readonly pb::MessageParser<ListOfDouble> _parser = new pb::MessageParser<ListOfDouble>(() => new ListOfDouble());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDouble> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDouble() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDouble(ListOfDouble other) : this() {
    double_ = other.double_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDouble Clone() {
    return new ListOfDouble(this);
  }

  /// <summary>Field number for the "Double" field.</summary>
  public const int DoubleFieldNumber = 1;
  private static readonly pb::FieldCodec<double> _repeated_double_codec
      = pb::FieldCodec.ForDouble(9);
  private readonly pbc::RepeatedField<double> double_ = new pbc::RepeatedField<double>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> Double {
    get { return double_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDouble);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDouble other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!double_.Equals(other.double_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= double_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    double_.WriteTo(output, _repeated_double_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += double_.CalculateSize(_repeated_double_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDouble other) {
    if (other == null) {
      return;
    }
    double_.Add(other.double_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 9: {
          double_.AddEntriesFrom(input, _repeated_double_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDuplex : pb::IMessage<ListOfDuplex> {
  private static readonly pb::MessageParser<ListOfDuplex> _parser = new pb::MessageParser<ListOfDuplex>(() => new ListOfDuplex());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDuplex> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDuplex() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDuplex(ListOfDuplex other) : this() {
    Duplex_ = other.Duplex_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDuplex Clone() {
    return new ListOfDuplex(this);
  }

  /// <summary>Field number for the "_Duplex" field.</summary>
  public const int DuplexFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfDuplex.Types.Duplex> _repeated_Duplex_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfDuplex.Types.Duplex) x);
  private readonly pbc::RepeatedField<global::ListOfDuplex.Types.Duplex> Duplex_ = new pbc::RepeatedField<global::ListOfDuplex.Types.Duplex>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfDuplex.Types.Duplex> Duplex {
    get { return Duplex_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDuplex);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDuplex other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Duplex_.Equals(other.Duplex_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Duplex_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Duplex_.WriteTo(output, _repeated_Duplex_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Duplex_.CalculateSize(_repeated_Duplex_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDuplex other) {
    if (other == null) {
      return;
    }
    Duplex_.Add(other.Duplex_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          Duplex_.AddEntriesFrom(input, _repeated_Duplex_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfDuplex message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Duplex {
      [pbr::OriginalName("Duplex_Full_0")] Full0 = 1,
      [pbr::OriginalName("Duplex_Half_1")] Half1 = 2,
      [pbr::OriginalName("Duplex_Unknown_2")] Unknown2 = 3,
    }

  }
  #endregion

}

public sealed partial class ListOfEndpointConfiguration : pb::IMessage<ListOfEndpointConfiguration> {
  private static readonly pb::MessageParser<ListOfEndpointConfiguration> _parser = new pb::MessageParser<ListOfEndpointConfiguration>(() => new ListOfEndpointConfiguration());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEndpointConfiguration> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointConfiguration() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointConfiguration(ListOfEndpointConfiguration other) : this() {
    EndpointConfiguration_ = other.EndpointConfiguration_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointConfiguration Clone() {
    return new ListOfEndpointConfiguration(this);
  }

  /// <summary>Field number for the "_EndpointConfiguration" field.</summary>
  public const int EndpointConfigurationFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EndpointConfiguration> _repeated_EndpointConfiguration_codec
      = pb::FieldCodec.ForMessage(10, global::EndpointConfiguration.Parser);
  private readonly pbc::RepeatedField<global::EndpointConfiguration> EndpointConfiguration_ = new pbc::RepeatedField<global::EndpointConfiguration>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EndpointConfiguration> EndpointConfiguration {
    get { return EndpointConfiguration_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEndpointConfiguration);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEndpointConfiguration other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EndpointConfiguration_.Equals(other.EndpointConfiguration_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EndpointConfiguration_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EndpointConfiguration_.WriteTo(output, _repeated_EndpointConfiguration_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EndpointConfiguration_.CalculateSize(_repeated_EndpointConfiguration_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEndpointConfiguration other) {
    if (other == null) {
      return;
    }
    EndpointConfiguration_.Add(other.EndpointConfiguration_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointConfiguration_.AddEntriesFrom(input, _repeated_EndpointConfiguration_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEndpointType : pb::IMessage<ListOfEndpointType> {
  private static readonly pb::MessageParser<ListOfEndpointType> _parser = new pb::MessageParser<ListOfEndpointType>(() => new ListOfEndpointType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEndpointType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointType(ListOfEndpointType other) : this() {
    EndpointType_ = other.EndpointType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointType Clone() {
    return new ListOfEndpointType(this);
  }

  /// <summary>Field number for the "_EndpointType" field.</summary>
  public const int EndpointTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EndpointType> _repeated_EndpointType_codec
      = pb::FieldCodec.ForMessage(10, global::EndpointType.Parser);
  private readonly pbc::RepeatedField<global::EndpointType> EndpointType_ = new pbc::RepeatedField<global::EndpointType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EndpointType> EndpointType {
    get { return EndpointType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEndpointType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEndpointType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EndpointType_.Equals(other.EndpointType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EndpointType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EndpointType_.WriteTo(output, _repeated_EndpointType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EndpointType_.CalculateSize(_repeated_EndpointType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEndpointType other) {
    if (other == null) {
      return;
    }
    EndpointType_.Add(other.EndpointType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointType_.AddEntriesFrom(input, _repeated_EndpointType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfExpandedNodeId : pb::IMessage<ListOfExpandedNodeId> {
  private static readonly pb::MessageParser<ListOfExpandedNodeId> _parser = new pb::MessageParser<ListOfExpandedNodeId>(() => new ListOfExpandedNodeId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfExpandedNodeId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfExpandedNodeId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfExpandedNodeId(ListOfExpandedNodeId other) : this() {
    ExpandedNodeId_ = other.ExpandedNodeId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfExpandedNodeId Clone() {
    return new ListOfExpandedNodeId(this);
  }

  /// <summary>Field number for the "_ExpandedNodeId" field.</summary>
  public const int ExpandedNodeIdFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ExpandedNodeId> _repeated_ExpandedNodeId_codec
      = pb::FieldCodec.ForMessage(10, global::ExpandedNodeId.Parser);
  private readonly pbc::RepeatedField<global::ExpandedNodeId> ExpandedNodeId_ = new pbc::RepeatedField<global::ExpandedNodeId>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ExpandedNodeId> ExpandedNodeId {
    get { return ExpandedNodeId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfExpandedNodeId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfExpandedNodeId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ExpandedNodeId_.Equals(other.ExpandedNodeId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ExpandedNodeId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ExpandedNodeId_.WriteTo(output, _repeated_ExpandedNodeId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ExpandedNodeId_.CalculateSize(_repeated_ExpandedNodeId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfExpandedNodeId other) {
    if (other == null) {
      return;
    }
    ExpandedNodeId_.Add(other.ExpandedNodeId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ExpandedNodeId_.AddEntriesFrom(input, _repeated_ExpandedNodeId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfFloat : pb::IMessage<ListOfFloat> {
  private static readonly pb::MessageParser<ListOfFloat> _parser = new pb::MessageParser<ListOfFloat>(() => new ListOfFloat());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfFloat> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFloat() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFloat(ListOfFloat other) : this() {
    float_ = other.float_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFloat Clone() {
    return new ListOfFloat(this);
  }

  /// <summary>Field number for the "Float" field.</summary>
  public const int FloatFieldNumber = 1;
  private static readonly pb::FieldCodec<float> _repeated_float_codec
      = pb::FieldCodec.ForFloat(13);
  private readonly pbc::RepeatedField<float> float_ = new pbc::RepeatedField<float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<float> Float {
    get { return float_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfFloat);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfFloat other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!float_.Equals(other.float_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= float_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    float_.WriteTo(output, _repeated_float_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += float_.CalculateSize(_repeated_float_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfFloat other) {
    if (other == null) {
      return;
    }
    float_.Add(other.float_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 13: {
          float_.AddEntriesFrom(input, _repeated_float_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfGuid : pb::IMessage<ListOfGuid> {
  private static readonly pb::MessageParser<ListOfGuid> _parser = new pb::MessageParser<ListOfGuid>(() => new ListOfGuid());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfGuid> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfGuid() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfGuid(ListOfGuid other) : this() {
    Guid_ = other.Guid_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfGuid Clone() {
    return new ListOfGuid(this);
  }

  /// <summary>Field number for the "_Guid" field.</summary>
  public const int GuidFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Guid> _repeated_Guid_codec
      = pb::FieldCodec.ForMessage(10, global::Guid.Parser);
  private readonly pbc::RepeatedField<global::Guid> Guid_ = new pbc::RepeatedField<global::Guid>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Guid> Guid {
    get { return Guid_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfGuid);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfGuid other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Guid_.Equals(other.Guid_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Guid_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Guid_.WriteTo(output, _repeated_Guid_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Guid_.CalculateSize(_repeated_Guid_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfGuid other) {
    if (other == null) {
      return;
    }
    Guid_.Add(other.Guid_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Guid_.AddEntriesFrom(input, _repeated_Guid_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfIdType : pb::IMessage<ListOfIdType> {
  private static readonly pb::MessageParser<ListOfIdType> _parser = new pb::MessageParser<ListOfIdType>(() => new ListOfIdType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfIdType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdType(ListOfIdType other) : this() {
    IdType_ = other.IdType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdType Clone() {
    return new ListOfIdType(this);
  }

  /// <summary>Field number for the "_IdType" field.</summary>
  public const int IdTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfIdType.Types.IdType> _repeated_IdType_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfIdType.Types.IdType) x);
  private readonly pbc::RepeatedField<global::ListOfIdType.Types.IdType> IdType_ = new pbc::RepeatedField<global::ListOfIdType.Types.IdType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfIdType.Types.IdType> IdType {
    get { return IdType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfIdType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfIdType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!IdType_.Equals(other.IdType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= IdType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    IdType_.WriteTo(output, _repeated_IdType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += IdType_.CalculateSize(_repeated_IdType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfIdType other) {
    if (other == null) {
      return;
    }
    IdType_.Add(other.IdType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          IdType_.AddEntriesFrom(input, _repeated_IdType_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfIdType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum IdType {
      [pbr::OriginalName("IdType_Guid_2")] Guid2 = 1,
      [pbr::OriginalName("IdType_Numeric_0")] Numeric0 = 2,
      [pbr::OriginalName("IdType_Opaque_3")] Opaque3 = 3,
      [pbr::OriginalName("IdType_String_1")] String1 = 4,
    }

  }
  #endregion

}

public sealed partial class ListOfIdentityCriteriaType : pb::IMessage<ListOfIdentityCriteriaType> {
  private static readonly pb::MessageParser<ListOfIdentityCriteriaType> _parser = new pb::MessageParser<ListOfIdentityCriteriaType>(() => new ListOfIdentityCriteriaType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfIdentityCriteriaType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdentityCriteriaType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdentityCriteriaType(ListOfIdentityCriteriaType other) : this() {
    IdentityCriteriaType_ = other.IdentityCriteriaType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdentityCriteriaType Clone() {
    return new ListOfIdentityCriteriaType(this);
  }

  /// <summary>Field number for the "_IdentityCriteriaType" field.</summary>
  public const int IdentityCriteriaTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfIdentityCriteriaType.Types.IdentityCriteriaType> _repeated_IdentityCriteriaType_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfIdentityCriteriaType.Types.IdentityCriteriaType) x);
  private readonly pbc::RepeatedField<global::ListOfIdentityCriteriaType.Types.IdentityCriteriaType> IdentityCriteriaType_ = new pbc::RepeatedField<global::ListOfIdentityCriteriaType.Types.IdentityCriteriaType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfIdentityCriteriaType.Types.IdentityCriteriaType> IdentityCriteriaType {
    get { return IdentityCriteriaType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfIdentityCriteriaType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfIdentityCriteriaType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!IdentityCriteriaType_.Equals(other.IdentityCriteriaType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= IdentityCriteriaType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    IdentityCriteriaType_.WriteTo(output, _repeated_IdentityCriteriaType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += IdentityCriteriaType_.CalculateSize(_repeated_IdentityCriteriaType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfIdentityCriteriaType other) {
    if (other == null) {
      return;
    }
    IdentityCriteriaType_.Add(other.IdentityCriteriaType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          IdentityCriteriaType_.AddEntriesFrom(input, _repeated_IdentityCriteriaType_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfIdentityCriteriaType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum IdentityCriteriaType {
      [pbr::OriginalName("IdentityCriteriaType_Anonymous_5")] Anonymous5 = 1,
      [pbr::OriginalName("IdentityCriteriaType_Application_7")] Application7 = 2,
      [pbr::OriginalName("IdentityCriteriaType_AuthenticatedUser_6")] AuthenticatedUser6 = 3,
      [pbr::OriginalName("IdentityCriteriaType_GroupId_4")] GroupId4 = 4,
      [pbr::OriginalName("IdentityCriteriaType_Role_3")] Role3 = 5,
      [pbr::OriginalName("IdentityCriteriaType_Thumbprint_2")] Thumbprint2 = 6,
      [pbr::OriginalName("IdentityCriteriaType_UserName_1")] UserName1 = 7,
    }

  }
  #endregion

}

public sealed partial class ListOfIdentityMappingRuleType : pb::IMessage<ListOfIdentityMappingRuleType> {
  private static readonly pb::MessageParser<ListOfIdentityMappingRuleType> _parser = new pb::MessageParser<ListOfIdentityMappingRuleType>(() => new ListOfIdentityMappingRuleType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfIdentityMappingRuleType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdentityMappingRuleType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdentityMappingRuleType(ListOfIdentityMappingRuleType other) : this() {
    IdentityMappingRuleType_ = other.IdentityMappingRuleType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfIdentityMappingRuleType Clone() {
    return new ListOfIdentityMappingRuleType(this);
  }

  /// <summary>Field number for the "_IdentityMappingRuleType" field.</summary>
  public const int IdentityMappingRuleTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::IdentityMappingRuleType> _repeated_IdentityMappingRuleType_codec
      = pb::FieldCodec.ForMessage(10, global::IdentityMappingRuleType.Parser);
  private readonly pbc::RepeatedField<global::IdentityMappingRuleType> IdentityMappingRuleType_ = new pbc::RepeatedField<global::IdentityMappingRuleType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::IdentityMappingRuleType> IdentityMappingRuleType {
    get { return IdentityMappingRuleType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfIdentityMappingRuleType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfIdentityMappingRuleType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!IdentityMappingRuleType_.Equals(other.IdentityMappingRuleType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= IdentityMappingRuleType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    IdentityMappingRuleType_.WriteTo(output, _repeated_IdentityMappingRuleType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += IdentityMappingRuleType_.CalculateSize(_repeated_IdentityMappingRuleType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfIdentityMappingRuleType other) {
    if (other == null) {
      return;
    }
    IdentityMappingRuleType_.Add(other.IdentityMappingRuleType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          IdentityMappingRuleType_.AddEntriesFrom(input, _repeated_IdentityMappingRuleType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfInt16 : pb::IMessage<ListOfInt16> {
  private static readonly pb::MessageParser<ListOfInt16> _parser = new pb::MessageParser<ListOfInt16>(() => new ListOfInt16());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfInt16> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt16() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt16(ListOfInt16 other) : this() {
    int16_ = other.int16_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt16 Clone() {
    return new ListOfInt16(this);
  }

  /// <summary>Field number for the "Int16" field.</summary>
  public const int Int16FieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_int16_codec
      = pb::FieldCodec.ForInt32(8);
  private readonly pbc::RepeatedField<int> int16_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Int16 {
    get { return int16_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfInt16);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfInt16 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!int16_.Equals(other.int16_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= int16_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    int16_.WriteTo(output, _repeated_int16_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += int16_.CalculateSize(_repeated_int16_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfInt16 other) {
    if (other == null) {
      return;
    }
    int16_.Add(other.int16_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          int16_.AddEntriesFrom(input, _repeated_int16_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfInt32 : pb::IMessage<ListOfInt32> {
  private static readonly pb::MessageParser<ListOfInt32> _parser = new pb::MessageParser<ListOfInt32>(() => new ListOfInt32());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfInt32> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt32() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt32(ListOfInt32 other) : this() {
    int32_ = other.int32_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt32 Clone() {
    return new ListOfInt32(this);
  }

  /// <summary>Field number for the "Int32" field.</summary>
  public const int Int32FieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_int32_codec
      = pb::FieldCodec.ForInt32(8);
  private readonly pbc::RepeatedField<int> int32_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Int32 {
    get { return int32_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfInt32);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfInt32 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!int32_.Equals(other.int32_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= int32_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    int32_.WriteTo(output, _repeated_int32_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += int32_.CalculateSize(_repeated_int32_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfInt32 other) {
    if (other == null) {
      return;
    }
    int32_.Add(other.int32_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          int32_.AddEntriesFrom(input, _repeated_int32_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfInt64 : pb::IMessage<ListOfInt64> {
  private static readonly pb::MessageParser<ListOfInt64> _parser = new pb::MessageParser<ListOfInt64>(() => new ListOfInt64());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfInt64> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt64() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt64(ListOfInt64 other) : this() {
    int64_ = other.int64_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInt64 Clone() {
    return new ListOfInt64(this);
  }

  /// <summary>Field number for the "Int64" field.</summary>
  public const int Int64FieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_int64_codec
      = pb::FieldCodec.ForInt64(8);
  private readonly pbc::RepeatedField<long> int64_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> Int64 {
    get { return int64_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfInt64);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfInt64 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!int64_.Equals(other.int64_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= int64_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    int64_.WriteTo(output, _repeated_int64_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += int64_.CalculateSize(_repeated_int64_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfInt64 other) {
    if (other == null) {
      return;
    }
    int64_.Add(other.int64_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          int64_.AddEntriesFrom(input, _repeated_int64_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfInterfaceAdminStatus : pb::IMessage<ListOfInterfaceAdminStatus> {
  private static readonly pb::MessageParser<ListOfInterfaceAdminStatus> _parser = new pb::MessageParser<ListOfInterfaceAdminStatus>(() => new ListOfInterfaceAdminStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfInterfaceAdminStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInterfaceAdminStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInterfaceAdminStatus(ListOfInterfaceAdminStatus other) : this() {
    InterfaceAdminStatus_ = other.InterfaceAdminStatus_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInterfaceAdminStatus Clone() {
    return new ListOfInterfaceAdminStatus(this);
  }

  /// <summary>Field number for the "_InterfaceAdminStatus" field.</summary>
  public const int InterfaceAdminStatusFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfInterfaceAdminStatus.Types.InterfaceAdminStatus> _repeated_InterfaceAdminStatus_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfInterfaceAdminStatus.Types.InterfaceAdminStatus) x);
  private readonly pbc::RepeatedField<global::ListOfInterfaceAdminStatus.Types.InterfaceAdminStatus> InterfaceAdminStatus_ = new pbc::RepeatedField<global::ListOfInterfaceAdminStatus.Types.InterfaceAdminStatus>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfInterfaceAdminStatus.Types.InterfaceAdminStatus> InterfaceAdminStatus {
    get { return InterfaceAdminStatus_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfInterfaceAdminStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfInterfaceAdminStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!InterfaceAdminStatus_.Equals(other.InterfaceAdminStatus_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= InterfaceAdminStatus_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    InterfaceAdminStatus_.WriteTo(output, _repeated_InterfaceAdminStatus_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += InterfaceAdminStatus_.CalculateSize(_repeated_InterfaceAdminStatus_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfInterfaceAdminStatus other) {
    if (other == null) {
      return;
    }
    InterfaceAdminStatus_.Add(other.InterfaceAdminStatus_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          InterfaceAdminStatus_.AddEntriesFrom(input, _repeated_InterfaceAdminStatus_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfInterfaceAdminStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum InterfaceAdminStatus {
      [pbr::OriginalName("InterfaceAdminStatus_Down_1")] Down1 = 1,
      [pbr::OriginalName("InterfaceAdminStatus_Testing_2")] Testing2 = 2,
      [pbr::OriginalName("InterfaceAdminStatus_Up_0")] Up0 = 3,
    }

  }
  #endregion

}

public sealed partial class ListOfInterfaceOperStatus : pb::IMessage<ListOfInterfaceOperStatus> {
  private static readonly pb::MessageParser<ListOfInterfaceOperStatus> _parser = new pb::MessageParser<ListOfInterfaceOperStatus>(() => new ListOfInterfaceOperStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfInterfaceOperStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInterfaceOperStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInterfaceOperStatus(ListOfInterfaceOperStatus other) : this() {
    InterfaceOperStatus_ = other.InterfaceOperStatus_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfInterfaceOperStatus Clone() {
    return new ListOfInterfaceOperStatus(this);
  }

  /// <summary>Field number for the "_InterfaceOperStatus" field.</summary>
  public const int InterfaceOperStatusFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfInterfaceOperStatus.Types.InterfaceOperStatus> _repeated_InterfaceOperStatus_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfInterfaceOperStatus.Types.InterfaceOperStatus) x);
  private readonly pbc::RepeatedField<global::ListOfInterfaceOperStatus.Types.InterfaceOperStatus> InterfaceOperStatus_ = new pbc::RepeatedField<global::ListOfInterfaceOperStatus.Types.InterfaceOperStatus>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfInterfaceOperStatus.Types.InterfaceOperStatus> InterfaceOperStatus {
    get { return InterfaceOperStatus_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfInterfaceOperStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfInterfaceOperStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!InterfaceOperStatus_.Equals(other.InterfaceOperStatus_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= InterfaceOperStatus_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    InterfaceOperStatus_.WriteTo(output, _repeated_InterfaceOperStatus_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += InterfaceOperStatus_.CalculateSize(_repeated_InterfaceOperStatus_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfInterfaceOperStatus other) {
    if (other == null) {
      return;
    }
    InterfaceOperStatus_.Add(other.InterfaceOperStatus_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          InterfaceOperStatus_.AddEntriesFrom(input, _repeated_InterfaceOperStatus_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfInterfaceOperStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum InterfaceOperStatus {
      [pbr::OriginalName("InterfaceOperStatus_Dormant_4")] Dormant4 = 1,
      [pbr::OriginalName("InterfaceOperStatus_Down_1")] Down1 = 2,
      [pbr::OriginalName("InterfaceOperStatus_LowerLayerDown_6")] LowerLayerDown6 = 3,
      [pbr::OriginalName("InterfaceOperStatus_NotPresent_5")] NotPresent5 = 4,
      [pbr::OriginalName("InterfaceOperStatus_Testing_2")] Testing2 = 5,
      [pbr::OriginalName("InterfaceOperStatus_Unknown_3")] Unknown3 = 6,
      [pbr::OriginalName("InterfaceOperStatus_Up_0")] Up0 = 7,
    }

  }
  #endregion

}

public sealed partial class ListOfJsonDataSetMessageContentMask : pb::IMessage<ListOfJsonDataSetMessageContentMask> {
  private static readonly pb::MessageParser<ListOfJsonDataSetMessageContentMask> _parser = new pb::MessageParser<ListOfJsonDataSetMessageContentMask>(() => new ListOfJsonDataSetMessageContentMask());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfJsonDataSetMessageContentMask> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetMessageContentMask() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetMessageContentMask(ListOfJsonDataSetMessageContentMask other) : this() {
    jsonDataSetMessageContentMask_ = other.jsonDataSetMessageContentMask_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetMessageContentMask Clone() {
    return new ListOfJsonDataSetMessageContentMask(this);
  }

  /// <summary>Field number for the "JsonDataSetMessageContentMask" field.</summary>
  public const int JsonDataSetMessageContentMaskFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_jsonDataSetMessageContentMask_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> jsonDataSetMessageContentMask_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> JsonDataSetMessageContentMask {
    get { return jsonDataSetMessageContentMask_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfJsonDataSetMessageContentMask);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfJsonDataSetMessageContentMask other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!jsonDataSetMessageContentMask_.Equals(other.jsonDataSetMessageContentMask_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= jsonDataSetMessageContentMask_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    jsonDataSetMessageContentMask_.WriteTo(output, _repeated_jsonDataSetMessageContentMask_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += jsonDataSetMessageContentMask_.CalculateSize(_repeated_jsonDataSetMessageContentMask_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfJsonDataSetMessageContentMask other) {
    if (other == null) {
      return;
    }
    jsonDataSetMessageContentMask_.Add(other.jsonDataSetMessageContentMask_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          jsonDataSetMessageContentMask_.AddEntriesFrom(input, _repeated_jsonDataSetMessageContentMask_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfJsonDataSetReaderMessageDataType : pb::IMessage<ListOfJsonDataSetReaderMessageDataType> {
  private static readonly pb::MessageParser<ListOfJsonDataSetReaderMessageDataType> _parser = new pb::MessageParser<ListOfJsonDataSetReaderMessageDataType>(() => new ListOfJsonDataSetReaderMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfJsonDataSetReaderMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetReaderMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetReaderMessageDataType(ListOfJsonDataSetReaderMessageDataType other) : this() {
    JsonDataSetReaderMessageDataType_ = other.JsonDataSetReaderMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetReaderMessageDataType Clone() {
    return new ListOfJsonDataSetReaderMessageDataType(this);
  }

  /// <summary>Field number for the "_JsonDataSetReaderMessageDataType" field.</summary>
  public const int JsonDataSetReaderMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::JsonDataSetReaderMessageDataType> _repeated_JsonDataSetReaderMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::JsonDataSetReaderMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::JsonDataSetReaderMessageDataType> JsonDataSetReaderMessageDataType_ = new pbc::RepeatedField<global::JsonDataSetReaderMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::JsonDataSetReaderMessageDataType> JsonDataSetReaderMessageDataType {
    get { return JsonDataSetReaderMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfJsonDataSetReaderMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfJsonDataSetReaderMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!JsonDataSetReaderMessageDataType_.Equals(other.JsonDataSetReaderMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= JsonDataSetReaderMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    JsonDataSetReaderMessageDataType_.WriteTo(output, _repeated_JsonDataSetReaderMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += JsonDataSetReaderMessageDataType_.CalculateSize(_repeated_JsonDataSetReaderMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfJsonDataSetReaderMessageDataType other) {
    if (other == null) {
      return;
    }
    JsonDataSetReaderMessageDataType_.Add(other.JsonDataSetReaderMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          JsonDataSetReaderMessageDataType_.AddEntriesFrom(input, _repeated_JsonDataSetReaderMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfJsonDataSetWriterMessageDataType : pb::IMessage<ListOfJsonDataSetWriterMessageDataType> {
  private static readonly pb::MessageParser<ListOfJsonDataSetWriterMessageDataType> _parser = new pb::MessageParser<ListOfJsonDataSetWriterMessageDataType>(() => new ListOfJsonDataSetWriterMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfJsonDataSetWriterMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetWriterMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetWriterMessageDataType(ListOfJsonDataSetWriterMessageDataType other) : this() {
    JsonDataSetWriterMessageDataType_ = other.JsonDataSetWriterMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonDataSetWriterMessageDataType Clone() {
    return new ListOfJsonDataSetWriterMessageDataType(this);
  }

  /// <summary>Field number for the "_JsonDataSetWriterMessageDataType" field.</summary>
  public const int JsonDataSetWriterMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::JsonDataSetWriterMessageDataType> _repeated_JsonDataSetWriterMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::JsonDataSetWriterMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::JsonDataSetWriterMessageDataType> JsonDataSetWriterMessageDataType_ = new pbc::RepeatedField<global::JsonDataSetWriterMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::JsonDataSetWriterMessageDataType> JsonDataSetWriterMessageDataType {
    get { return JsonDataSetWriterMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfJsonDataSetWriterMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfJsonDataSetWriterMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!JsonDataSetWriterMessageDataType_.Equals(other.JsonDataSetWriterMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= JsonDataSetWriterMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    JsonDataSetWriterMessageDataType_.WriteTo(output, _repeated_JsonDataSetWriterMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += JsonDataSetWriterMessageDataType_.CalculateSize(_repeated_JsonDataSetWriterMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfJsonDataSetWriterMessageDataType other) {
    if (other == null) {
      return;
    }
    JsonDataSetWriterMessageDataType_.Add(other.JsonDataSetWriterMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          JsonDataSetWriterMessageDataType_.AddEntriesFrom(input, _repeated_JsonDataSetWriterMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfJsonNetworkMessageContentMask : pb::IMessage<ListOfJsonNetworkMessageContentMask> {
  private static readonly pb::MessageParser<ListOfJsonNetworkMessageContentMask> _parser = new pb::MessageParser<ListOfJsonNetworkMessageContentMask>(() => new ListOfJsonNetworkMessageContentMask());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfJsonNetworkMessageContentMask> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonNetworkMessageContentMask() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonNetworkMessageContentMask(ListOfJsonNetworkMessageContentMask other) : this() {
    jsonNetworkMessageContentMask_ = other.jsonNetworkMessageContentMask_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonNetworkMessageContentMask Clone() {
    return new ListOfJsonNetworkMessageContentMask(this);
  }

  /// <summary>Field number for the "JsonNetworkMessageContentMask" field.</summary>
  public const int JsonNetworkMessageContentMaskFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_jsonNetworkMessageContentMask_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> jsonNetworkMessageContentMask_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> JsonNetworkMessageContentMask {
    get { return jsonNetworkMessageContentMask_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfJsonNetworkMessageContentMask);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfJsonNetworkMessageContentMask other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!jsonNetworkMessageContentMask_.Equals(other.jsonNetworkMessageContentMask_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= jsonNetworkMessageContentMask_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    jsonNetworkMessageContentMask_.WriteTo(output, _repeated_jsonNetworkMessageContentMask_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += jsonNetworkMessageContentMask_.CalculateSize(_repeated_jsonNetworkMessageContentMask_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfJsonNetworkMessageContentMask other) {
    if (other == null) {
      return;
    }
    jsonNetworkMessageContentMask_.Add(other.jsonNetworkMessageContentMask_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          jsonNetworkMessageContentMask_.AddEntriesFrom(input, _repeated_jsonNetworkMessageContentMask_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfJsonWriterGroupMessageDataType : pb::IMessage<ListOfJsonWriterGroupMessageDataType> {
  private static readonly pb::MessageParser<ListOfJsonWriterGroupMessageDataType> _parser = new pb::MessageParser<ListOfJsonWriterGroupMessageDataType>(() => new ListOfJsonWriterGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfJsonWriterGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonWriterGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonWriterGroupMessageDataType(ListOfJsonWriterGroupMessageDataType other) : this() {
    JsonWriterGroupMessageDataType_ = other.JsonWriterGroupMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfJsonWriterGroupMessageDataType Clone() {
    return new ListOfJsonWriterGroupMessageDataType(this);
  }

  /// <summary>Field number for the "_JsonWriterGroupMessageDataType" field.</summary>
  public const int JsonWriterGroupMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::JsonWriterGroupMessageDataType> _repeated_JsonWriterGroupMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::JsonWriterGroupMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::JsonWriterGroupMessageDataType> JsonWriterGroupMessageDataType_ = new pbc::RepeatedField<global::JsonWriterGroupMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::JsonWriterGroupMessageDataType> JsonWriterGroupMessageDataType {
    get { return JsonWriterGroupMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfJsonWriterGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfJsonWriterGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!JsonWriterGroupMessageDataType_.Equals(other.JsonWriterGroupMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= JsonWriterGroupMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    JsonWriterGroupMessageDataType_.WriteTo(output, _repeated_JsonWriterGroupMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += JsonWriterGroupMessageDataType_.CalculateSize(_repeated_JsonWriterGroupMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfJsonWriterGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    JsonWriterGroupMessageDataType_.Add(other.JsonWriterGroupMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          JsonWriterGroupMessageDataType_.AddEntriesFrom(input, _repeated_JsonWriterGroupMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfNegotiationStatus : pb::IMessage<ListOfNegotiationStatus> {
  private static readonly pb::MessageParser<ListOfNegotiationStatus> _parser = new pb::MessageParser<ListOfNegotiationStatus>(() => new ListOfNegotiationStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNegotiationStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNegotiationStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNegotiationStatus(ListOfNegotiationStatus other) : this() {
    NegotiationStatus_ = other.NegotiationStatus_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNegotiationStatus Clone() {
    return new ListOfNegotiationStatus(this);
  }

  /// <summary>Field number for the "_NegotiationStatus" field.</summary>
  public const int NegotiationStatusFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfNegotiationStatus.Types.NegotiationStatus> _repeated_NegotiationStatus_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfNegotiationStatus.Types.NegotiationStatus) x);
  private readonly pbc::RepeatedField<global::ListOfNegotiationStatus.Types.NegotiationStatus> NegotiationStatus_ = new pbc::RepeatedField<global::ListOfNegotiationStatus.Types.NegotiationStatus>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfNegotiationStatus.Types.NegotiationStatus> NegotiationStatus {
    get { return NegotiationStatus_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNegotiationStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNegotiationStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!NegotiationStatus_.Equals(other.NegotiationStatus_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= NegotiationStatus_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    NegotiationStatus_.WriteTo(output, _repeated_NegotiationStatus_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += NegotiationStatus_.CalculateSize(_repeated_NegotiationStatus_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNegotiationStatus other) {
    if (other == null) {
      return;
    }
    NegotiationStatus_.Add(other.NegotiationStatus_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          NegotiationStatus_.AddEntriesFrom(input, _repeated_NegotiationStatus_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfNegotiationStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NegotiationStatus {
      [pbr::OriginalName("NegotiationStatus_Complete_1")] Complete1 = 1,
      [pbr::OriginalName("NegotiationStatus_Failed_2")] Failed2 = 2,
      [pbr::OriginalName("NegotiationStatus_InProgress_0")] InProgress0 = 3,
      [pbr::OriginalName("NegotiationStatus_NoNegotiation_4")] NoNegotiation4 = 4,
      [pbr::OriginalName("NegotiationStatus_Unknown_3")] Unknown3 = 5,
    }

  }
  #endregion

}

public sealed partial class ListOfOpenFileMode : pb::IMessage<ListOfOpenFileMode> {
  private static readonly pb::MessageParser<ListOfOpenFileMode> _parser = new pb::MessageParser<ListOfOpenFileMode>(() => new ListOfOpenFileMode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfOpenFileMode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOpenFileMode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOpenFileMode(ListOfOpenFileMode other) : this() {
    OpenFileMode_ = other.OpenFileMode_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOpenFileMode Clone() {
    return new ListOfOpenFileMode(this);
  }

  /// <summary>Field number for the "_OpenFileMode" field.</summary>
  public const int OpenFileModeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfOpenFileMode.Types.OpenFileMode> _repeated_OpenFileMode_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfOpenFileMode.Types.OpenFileMode) x);
  private readonly pbc::RepeatedField<global::ListOfOpenFileMode.Types.OpenFileMode> OpenFileMode_ = new pbc::RepeatedField<global::ListOfOpenFileMode.Types.OpenFileMode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfOpenFileMode.Types.OpenFileMode> OpenFileMode {
    get { return OpenFileMode_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfOpenFileMode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfOpenFileMode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!OpenFileMode_.Equals(other.OpenFileMode_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= OpenFileMode_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    OpenFileMode_.WriteTo(output, _repeated_OpenFileMode_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += OpenFileMode_.CalculateSize(_repeated_OpenFileMode_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfOpenFileMode other) {
    if (other == null) {
      return;
    }
    OpenFileMode_.Add(other.OpenFileMode_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          OpenFileMode_.AddEntriesFrom(input, _repeated_OpenFileMode_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfOpenFileMode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum OpenFileMode {
      [pbr::OriginalName("OpenFileMode_Append_8")] Append8 = 1,
      [pbr::OriginalName("OpenFileMode_EraseExisting_4")] EraseExisting4 = 2,
      [pbr::OriginalName("OpenFileMode_Read_1")] Read1 = 3,
      [pbr::OriginalName("OpenFileMode_Write_2")] Write2 = 4,
    }

  }
  #endregion

}

public sealed partial class ListOfOverrideValueHandling : pb::IMessage<ListOfOverrideValueHandling> {
  private static readonly pb::MessageParser<ListOfOverrideValueHandling> _parser = new pb::MessageParser<ListOfOverrideValueHandling>(() => new ListOfOverrideValueHandling());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfOverrideValueHandling> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOverrideValueHandling() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOverrideValueHandling(ListOfOverrideValueHandling other) : this() {
    OverrideValueHandling_ = other.OverrideValueHandling_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOverrideValueHandling Clone() {
    return new ListOfOverrideValueHandling(this);
  }

  /// <summary>Field number for the "_OverrideValueHandling" field.</summary>
  public const int OverrideValueHandlingFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfOverrideValueHandling.Types.OverrideValueHandling> _repeated_OverrideValueHandling_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfOverrideValueHandling.Types.OverrideValueHandling) x);
  private readonly pbc::RepeatedField<global::ListOfOverrideValueHandling.Types.OverrideValueHandling> OverrideValueHandling_ = new pbc::RepeatedField<global::ListOfOverrideValueHandling.Types.OverrideValueHandling>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfOverrideValueHandling.Types.OverrideValueHandling> OverrideValueHandling {
    get { return OverrideValueHandling_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfOverrideValueHandling);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfOverrideValueHandling other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!OverrideValueHandling_.Equals(other.OverrideValueHandling_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= OverrideValueHandling_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    OverrideValueHandling_.WriteTo(output, _repeated_OverrideValueHandling_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += OverrideValueHandling_.CalculateSize(_repeated_OverrideValueHandling_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfOverrideValueHandling other) {
    if (other == null) {
      return;
    }
    OverrideValueHandling_.Add(other.OverrideValueHandling_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          OverrideValueHandling_.AddEntriesFrom(input, _repeated_OverrideValueHandling_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfOverrideValueHandling message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum OverrideValueHandling {
      [pbr::OriginalName("OverrideValueHandling_Disabled_0")] Disabled0 = 1,
      [pbr::OriginalName("OverrideValueHandling_LastUsableValue_1")] LastUsableValue1 = 2,
      [pbr::OriginalName("OverrideValueHandling_OverrideValue_2")] OverrideValue2 = 3,
    }

  }
  #endregion

}

public sealed partial class ListOfPubSubDiagnosticsCounterClassification : pb::IMessage<ListOfPubSubDiagnosticsCounterClassification> {
  private static readonly pb::MessageParser<ListOfPubSubDiagnosticsCounterClassification> _parser = new pb::MessageParser<ListOfPubSubDiagnosticsCounterClassification>(() => new ListOfPubSubDiagnosticsCounterClassification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPubSubDiagnosticsCounterClassification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubDiagnosticsCounterClassification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubDiagnosticsCounterClassification(ListOfPubSubDiagnosticsCounterClassification other) : this() {
    PubSubDiagnosticsCounterClassification_ = other.PubSubDiagnosticsCounterClassification_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubDiagnosticsCounterClassification Clone() {
    return new ListOfPubSubDiagnosticsCounterClassification(this);
  }

  /// <summary>Field number for the "_PubSubDiagnosticsCounterClassification" field.</summary>
  public const int PubSubDiagnosticsCounterClassificationFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfPubSubDiagnosticsCounterClassification.Types.PubSubDiagnosticsCounterClassification> _repeated_PubSubDiagnosticsCounterClassification_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfPubSubDiagnosticsCounterClassification.Types.PubSubDiagnosticsCounterClassification) x);
  private readonly pbc::RepeatedField<global::ListOfPubSubDiagnosticsCounterClassification.Types.PubSubDiagnosticsCounterClassification> PubSubDiagnosticsCounterClassification_ = new pbc::RepeatedField<global::ListOfPubSubDiagnosticsCounterClassification.Types.PubSubDiagnosticsCounterClassification>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfPubSubDiagnosticsCounterClassification.Types.PubSubDiagnosticsCounterClassification> PubSubDiagnosticsCounterClassification {
    get { return PubSubDiagnosticsCounterClassification_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPubSubDiagnosticsCounterClassification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPubSubDiagnosticsCounterClassification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PubSubDiagnosticsCounterClassification_.Equals(other.PubSubDiagnosticsCounterClassification_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PubSubDiagnosticsCounterClassification_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PubSubDiagnosticsCounterClassification_.WriteTo(output, _repeated_PubSubDiagnosticsCounterClassification_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PubSubDiagnosticsCounterClassification_.CalculateSize(_repeated_PubSubDiagnosticsCounterClassification_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPubSubDiagnosticsCounterClassification other) {
    if (other == null) {
      return;
    }
    PubSubDiagnosticsCounterClassification_.Add(other.PubSubDiagnosticsCounterClassification_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          PubSubDiagnosticsCounterClassification_.AddEntriesFrom(input, _repeated_PubSubDiagnosticsCounterClassification_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfPubSubDiagnosticsCounterClassification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PubSubDiagnosticsCounterClassification {
      [pbr::OriginalName("PubSubDiagnosticsCounterClassification_Error_1")] Error1 = 1,
      [pbr::OriginalName("PubSubDiagnosticsCounterClassification_Information_0")] Information0 = 2,
    }

  }
  #endregion

}

public sealed partial class ListOfPubSubState : pb::IMessage<ListOfPubSubState> {
  private static readonly pb::MessageParser<ListOfPubSubState> _parser = new pb::MessageParser<ListOfPubSubState>(() => new ListOfPubSubState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPubSubState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubState(ListOfPubSubState other) : this() {
    PubSubState_ = other.PubSubState_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubState Clone() {
    return new ListOfPubSubState(this);
  }

  /// <summary>Field number for the "_PubSubState" field.</summary>
  public const int PubSubStateFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfPubSubState.Types.PubSubState> _repeated_PubSubState_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfPubSubState.Types.PubSubState) x);
  private readonly pbc::RepeatedField<global::ListOfPubSubState.Types.PubSubState> PubSubState_ = new pbc::RepeatedField<global::ListOfPubSubState.Types.PubSubState>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfPubSubState.Types.PubSubState> PubSubState {
    get { return PubSubState_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPubSubState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPubSubState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PubSubState_.Equals(other.PubSubState_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PubSubState_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PubSubState_.WriteTo(output, _repeated_PubSubState_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PubSubState_.CalculateSize(_repeated_PubSubState_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPubSubState other) {
    if (other == null) {
      return;
    }
    PubSubState_.Add(other.PubSubState_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          PubSubState_.AddEntriesFrom(input, _repeated_PubSubState_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfPubSubState message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PubSubState {
      [pbr::OriginalName("PubSubState_Disabled_0")] Disabled0 = 1,
      [pbr::OriginalName("PubSubState_Error_3")] Error3 = 2,
      [pbr::OriginalName("PubSubState_Operational_2")] Operational2 = 3,
      [pbr::OriginalName("PubSubState_Paused_1")] Paused1 = 4,
      [pbr::OriginalName("PubSubState_PreOperational_4")] PreOperational4 = 5,
    }

  }
  #endregion

}

public sealed partial class ListOfSByte : pb::IMessage<ListOfSByte> {
  private static readonly pb::MessageParser<ListOfSByte> _parser = new pb::MessageParser<ListOfSByte>(() => new ListOfSByte());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSByte> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSByte() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSByte(ListOfSByte other) : this() {
    sByte_ = other.sByte_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSByte Clone() {
    return new ListOfSByte(this);
  }

  /// <summary>Field number for the "SByte" field.</summary>
  public const int SByteFieldNumber = 1;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_sByte_codec
      = pb::FieldCodec.ForBytes(10);
  private readonly pbc::RepeatedField<pb::ByteString> sByte_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> SByte {
    get { return sByte_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSByte);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSByte other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!sByte_.Equals(other.sByte_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= sByte_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    sByte_.WriteTo(output, _repeated_sByte_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += sByte_.CalculateSize(_repeated_sByte_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSByte other) {
    if (other == null) {
      return;
    }
    sByte_.Add(other.sByte_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          sByte_.AddEntriesFrom(input, _repeated_sByte_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfString : pb::IMessage<ListOfString> {
  private static readonly pb::MessageParser<ListOfString> _parser = new pb::MessageParser<ListOfString>(() => new ListOfString());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfString> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfString() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfString(ListOfString other) : this() {
    string_ = other.string_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfString Clone() {
    return new ListOfString(this);
  }

  /// <summary>Field number for the "String" field.</summary>
  public const int StringFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_string_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> string_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> String {
    get { return string_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfString);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfString other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!string_.Equals(other.string_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= string_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    string_.WriteTo(output, _repeated_string_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += string_.CalculateSize(_repeated_string_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfString other) {
    if (other == null) {
      return;
    }
    string_.Add(other.string_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          string_.AddEntriesFrom(input, _repeated_string_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfTsnFailureCode : pb::IMessage<ListOfTsnFailureCode> {
  private static readonly pb::MessageParser<ListOfTsnFailureCode> _parser = new pb::MessageParser<ListOfTsnFailureCode>(() => new ListOfTsnFailureCode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTsnFailureCode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnFailureCode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnFailureCode(ListOfTsnFailureCode other) : this() {
    TsnFailureCode_ = other.TsnFailureCode_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnFailureCode Clone() {
    return new ListOfTsnFailureCode(this);
  }

  /// <summary>Field number for the "_TsnFailureCode" field.</summary>
  public const int TsnFailureCodeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfTsnFailureCode.Types.TsnFailureCode> _repeated_TsnFailureCode_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfTsnFailureCode.Types.TsnFailureCode) x);
  private readonly pbc::RepeatedField<global::ListOfTsnFailureCode.Types.TsnFailureCode> TsnFailureCode_ = new pbc::RepeatedField<global::ListOfTsnFailureCode.Types.TsnFailureCode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfTsnFailureCode.Types.TsnFailureCode> TsnFailureCode {
    get { return TsnFailureCode_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTsnFailureCode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTsnFailureCode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TsnFailureCode_.Equals(other.TsnFailureCode_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TsnFailureCode_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TsnFailureCode_.WriteTo(output, _repeated_TsnFailureCode_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TsnFailureCode_.CalculateSize(_repeated_TsnFailureCode_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTsnFailureCode other) {
    if (other == null) {
      return;
    }
    TsnFailureCode_.Add(other.TsnFailureCode_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          TsnFailureCode_.AddEntriesFrom(input, _repeated_TsnFailureCode_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfTsnFailureCode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TsnFailureCode {
      [pbr::OriginalName("TsnFailureCode_BridgeDoesNotProvideNetworkId_22")] BridgeDoesNotProvideNetworkId22 = 1,
      [pbr::OriginalName("TsnFailureCode_CannotStoreDestinationAddress_12")] CannotStoreDestinationAddress12 = 2,
      [pbr::OriginalName("TsnFailureCode_EgressPortNotAvbCapable_8")] EgressPortNotAvbCapable8 = 3,
      [pbr::OriginalName("TsnFailureCode_FeatureNotPropagated_20")] FeatureNotPropagated20 = 4,
      [pbr::OriginalName("TsnFailureCode_FeatureNotSupported_25")] FeatureNotSupported25 = 5,
      [pbr::OriginalName("TsnFailureCode_FirstValueChangedForStreamId_16")] FirstValueChangedForStreamId16 = 6,
      [pbr::OriginalName("TsnFailureCode_InsufficientBandwidth_1")] InsufficientBandwidth1 = 7,
      [pbr::OriginalName("TsnFailureCode_InsufficientResources_2")] InsufficientResources2 = 8,
      [pbr::OriginalName("TsnFailureCode_InsufficientTrafficClassBandwidth_3")] InsufficientTrafficClassBandwidth3 = 9,
      [pbr::OriginalName("TsnFailureCode_LatencyHasChanged_7")] LatencyHasChanged7 = 10,
      [pbr::OriginalName("TsnFailureCode_MaxFanInPortsLimitReached_15")] MaxFanInPortsLimitReached15 = 11,
      [pbr::OriginalName("TsnFailureCode_MaxFrameSizeTooLarge_14")] MaxFrameSizeTooLarge14 = 12,
      [pbr::OriginalName("TsnFailureCode_MaxLatencyExceeded_21")] MaxLatencyExceeded21 = 13,
      [pbr::OriginalName("TsnFailureCode_NoFailure_0")] NoFailure0 = 14,
      [pbr::OriginalName("TsnFailureCode_OutOfMmrpResources_11")] OutOfMmrpResources11 = 15,
      [pbr::OriginalName("TsnFailureCode_OutOfMsrpResources_10")] OutOfMsrpResources10 = 16,
      [pbr::OriginalName("TsnFailureCode_PriorityIsNotAnSrcClass_13")] PriorityIsNotAnSrcClass13 = 17,
      [pbr::OriginalName("TsnFailureCode_SrClassPriorityMismatch_19")] SrClassPriorityMismatch19 = 18,
      [pbr::OriginalName("TsnFailureCode_StreamDestinationAddressInUse_5")] StreamDestinationAddressInUse5 = 19,
      [pbr::OriginalName("TsnFailureCode_StreamIdInUse_4")] StreamIdInUse4 = 20,
      [pbr::OriginalName("TsnFailureCode_StreamIdTypeNotSupported_24")] StreamIdTypeNotSupported24 = 21,
      [pbr::OriginalName("TsnFailureCode_StreamPreemptedByHigherRank_6")] StreamPreemptedByHigherRank6 = 22,
      [pbr::OriginalName("TsnFailureCode_StreamTransformNotSupported_23")] StreamTransformNotSupported23 = 23,
      [pbr::OriginalName("TsnFailureCode_UseDifferentDestinationAddress_9")] UseDifferentDestinationAddress9 = 24,
      [pbr::OriginalName("TsnFailureCode_VlanBlockedOnEgress_17")] VlanBlockedOnEgress17 = 25,
      [pbr::OriginalName("TsnFailureCode_VlanTaggingDisabledOnEgress_18")] VlanTaggingDisabledOnEgress18 = 26,
    }

  }
  #endregion

}

public sealed partial class ListOfTsnListenerStatus : pb::IMessage<ListOfTsnListenerStatus> {
  private static readonly pb::MessageParser<ListOfTsnListenerStatus> _parser = new pb::MessageParser<ListOfTsnListenerStatus>(() => new ListOfTsnListenerStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTsnListenerStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnListenerStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnListenerStatus(ListOfTsnListenerStatus other) : this() {
    TsnListenerStatus_ = other.TsnListenerStatus_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnListenerStatus Clone() {
    return new ListOfTsnListenerStatus(this);
  }

  /// <summary>Field number for the "_TsnListenerStatus" field.</summary>
  public const int TsnListenerStatusFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfTsnListenerStatus.Types.TsnListenerStatus> _repeated_TsnListenerStatus_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfTsnListenerStatus.Types.TsnListenerStatus) x);
  private readonly pbc::RepeatedField<global::ListOfTsnListenerStatus.Types.TsnListenerStatus> TsnListenerStatus_ = new pbc::RepeatedField<global::ListOfTsnListenerStatus.Types.TsnListenerStatus>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfTsnListenerStatus.Types.TsnListenerStatus> TsnListenerStatus {
    get { return TsnListenerStatus_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTsnListenerStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTsnListenerStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TsnListenerStatus_.Equals(other.TsnListenerStatus_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TsnListenerStatus_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TsnListenerStatus_.WriteTo(output, _repeated_TsnListenerStatus_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TsnListenerStatus_.CalculateSize(_repeated_TsnListenerStatus_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTsnListenerStatus other) {
    if (other == null) {
      return;
    }
    TsnListenerStatus_.Add(other.TsnListenerStatus_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          TsnListenerStatus_.AddEntriesFrom(input, _repeated_TsnListenerStatus_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfTsnListenerStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TsnListenerStatus {
      [pbr::OriginalName("TsnListenerStatus_Failed_3")] Failed3 = 1,
      [pbr::OriginalName("TsnListenerStatus_None_0")] None0 = 2,
      [pbr::OriginalName("TsnListenerStatus_PartialFailed_2")] PartialFailed2 = 3,
      [pbr::OriginalName("TsnListenerStatus_Ready_1")] Ready1 = 4,
    }

  }
  #endregion

}

public sealed partial class ListOfTsnStreamState : pb::IMessage<ListOfTsnStreamState> {
  private static readonly pb::MessageParser<ListOfTsnStreamState> _parser = new pb::MessageParser<ListOfTsnStreamState>(() => new ListOfTsnStreamState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTsnStreamState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnStreamState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnStreamState(ListOfTsnStreamState other) : this() {
    TsnStreamState_ = other.TsnStreamState_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnStreamState Clone() {
    return new ListOfTsnStreamState(this);
  }

  /// <summary>Field number for the "_TsnStreamState" field.</summary>
  public const int TsnStreamStateFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfTsnStreamState.Types.TsnStreamState> _repeated_TsnStreamState_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfTsnStreamState.Types.TsnStreamState) x);
  private readonly pbc::RepeatedField<global::ListOfTsnStreamState.Types.TsnStreamState> TsnStreamState_ = new pbc::RepeatedField<global::ListOfTsnStreamState.Types.TsnStreamState>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfTsnStreamState.Types.TsnStreamState> TsnStreamState {
    get { return TsnStreamState_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTsnStreamState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTsnStreamState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TsnStreamState_.Equals(other.TsnStreamState_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TsnStreamState_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TsnStreamState_.WriteTo(output, _repeated_TsnStreamState_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TsnStreamState_.CalculateSize(_repeated_TsnStreamState_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTsnStreamState other) {
    if (other == null) {
      return;
    }
    TsnStreamState_.Add(other.TsnStreamState_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          TsnStreamState_.AddEntriesFrom(input, _repeated_TsnStreamState_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfTsnStreamState message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TsnStreamState {
      [pbr::OriginalName("TsnStreamState_Configuring_1")] Configuring1 = 1,
      [pbr::OriginalName("TsnStreamState_Disabled_0")] Disabled0 = 2,
      [pbr::OriginalName("TsnStreamState_Error_4")] Error4 = 3,
      [pbr::OriginalName("TsnStreamState_Operational_3")] Operational3 = 4,
      [pbr::OriginalName("TsnStreamState_Ready_2")] Ready2 = 5,
    }

  }
  #endregion

}

public sealed partial class ListOfTsnTalkerStatus : pb::IMessage<ListOfTsnTalkerStatus> {
  private static readonly pb::MessageParser<ListOfTsnTalkerStatus> _parser = new pb::MessageParser<ListOfTsnTalkerStatus>(() => new ListOfTsnTalkerStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTsnTalkerStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnTalkerStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnTalkerStatus(ListOfTsnTalkerStatus other) : this() {
    TsnTalkerStatus_ = other.TsnTalkerStatus_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTsnTalkerStatus Clone() {
    return new ListOfTsnTalkerStatus(this);
  }

  /// <summary>Field number for the "_TsnTalkerStatus" field.</summary>
  public const int TsnTalkerStatusFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListOfTsnTalkerStatus.Types.TsnTalkerStatus> _repeated_TsnTalkerStatus_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::ListOfTsnTalkerStatus.Types.TsnTalkerStatus) x);
  private readonly pbc::RepeatedField<global::ListOfTsnTalkerStatus.Types.TsnTalkerStatus> TsnTalkerStatus_ = new pbc::RepeatedField<global::ListOfTsnTalkerStatus.Types.TsnTalkerStatus>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListOfTsnTalkerStatus.Types.TsnTalkerStatus> TsnTalkerStatus {
    get { return TsnTalkerStatus_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTsnTalkerStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTsnTalkerStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TsnTalkerStatus_.Equals(other.TsnTalkerStatus_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TsnTalkerStatus_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TsnTalkerStatus_.WriteTo(output, _repeated_TsnTalkerStatus_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TsnTalkerStatus_.CalculateSize(_repeated_TsnTalkerStatus_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTsnTalkerStatus other) {
    if (other == null) {
      return;
    }
    TsnTalkerStatus_.Add(other.TsnTalkerStatus_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          TsnTalkerStatus_.AddEntriesFrom(input, _repeated_TsnTalkerStatus_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListOfTsnTalkerStatus message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TsnTalkerStatus {
      [pbr::OriginalName("TsnTalkerStatus_Failed_2")] Failed2 = 1,
      [pbr::OriginalName("TsnTalkerStatus_None_0")] None0 = 2,
      [pbr::OriginalName("TsnTalkerStatus_Ready_1")] Ready1 = 3,
    }

  }
  #endregion

}

public sealed partial class ListOfUInt16 : pb::IMessage<ListOfUInt16> {
  private static readonly pb::MessageParser<ListOfUInt16> _parser = new pb::MessageParser<ListOfUInt16>(() => new ListOfUInt16());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUInt16> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt16() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt16(ListOfUInt16 other) : this() {
    uInt16_ = other.uInt16_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt16 Clone() {
    return new ListOfUInt16(this);
  }

  /// <summary>Field number for the "UInt16" field.</summary>
  public const int UInt16FieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_uInt16_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> uInt16_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> UInt16 {
    get { return uInt16_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUInt16);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUInt16 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!uInt16_.Equals(other.uInt16_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= uInt16_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    uInt16_.WriteTo(output, _repeated_uInt16_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += uInt16_.CalculateSize(_repeated_uInt16_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUInt16 other) {
    if (other == null) {
      return;
    }
    uInt16_.Add(other.uInt16_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          uInt16_.AddEntriesFrom(input, _repeated_uInt16_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUInt32 : pb::IMessage<ListOfUInt32> {
  private static readonly pb::MessageParser<ListOfUInt32> _parser = new pb::MessageParser<ListOfUInt32>(() => new ListOfUInt32());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUInt32> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt32() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt32(ListOfUInt32 other) : this() {
    uInt32_ = other.uInt32_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt32 Clone() {
    return new ListOfUInt32(this);
  }

  /// <summary>Field number for the "UInt32" field.</summary>
  public const int UInt32FieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_uInt32_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> uInt32_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> UInt32 {
    get { return uInt32_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUInt32);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUInt32 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!uInt32_.Equals(other.uInt32_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= uInt32_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    uInt32_.WriteTo(output, _repeated_uInt32_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += uInt32_.CalculateSize(_repeated_uInt32_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUInt32 other) {
    if (other == null) {
      return;
    }
    uInt32_.Add(other.uInt32_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          uInt32_.AddEntriesFrom(input, _repeated_uInt32_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUInt64 : pb::IMessage<ListOfUInt64> {
  private static readonly pb::MessageParser<ListOfUInt64> _parser = new pb::MessageParser<ListOfUInt64>(() => new ListOfUInt64());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUInt64> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt64() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt64(ListOfUInt64 other) : this() {
    uInt64_ = other.uInt64_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUInt64 Clone() {
    return new ListOfUInt64(this);
  }

  /// <summary>Field number for the "UInt64" field.</summary>
  public const int UInt64FieldNumber = 1;
  private static readonly pb::FieldCodec<ulong> _repeated_uInt64_codec
      = pb::FieldCodec.ForUInt64(8);
  private readonly pbc::RepeatedField<ulong> uInt64_ = new pbc::RepeatedField<ulong>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> UInt64 {
    get { return uInt64_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUInt64);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUInt64 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!uInt64_.Equals(other.uInt64_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= uInt64_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    uInt64_.WriteTo(output, _repeated_uInt64_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += uInt64_.CalculateSize(_repeated_uInt64_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUInt64 other) {
    if (other == null) {
      return;
    }
    uInt64_.Add(other.uInt64_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          uInt64_.AddEntriesFrom(input, _repeated_uInt64_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUadpDataSetMessageContentMask : pb::IMessage<ListOfUadpDataSetMessageContentMask> {
  private static readonly pb::MessageParser<ListOfUadpDataSetMessageContentMask> _parser = new pb::MessageParser<ListOfUadpDataSetMessageContentMask>(() => new ListOfUadpDataSetMessageContentMask());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUadpDataSetMessageContentMask> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetMessageContentMask() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetMessageContentMask(ListOfUadpDataSetMessageContentMask other) : this() {
    uadpDataSetMessageContentMask_ = other.uadpDataSetMessageContentMask_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetMessageContentMask Clone() {
    return new ListOfUadpDataSetMessageContentMask(this);
  }

  /// <summary>Field number for the "UadpDataSetMessageContentMask" field.</summary>
  public const int UadpDataSetMessageContentMaskFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_uadpDataSetMessageContentMask_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> uadpDataSetMessageContentMask_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> UadpDataSetMessageContentMask {
    get { return uadpDataSetMessageContentMask_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUadpDataSetMessageContentMask);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUadpDataSetMessageContentMask other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!uadpDataSetMessageContentMask_.Equals(other.uadpDataSetMessageContentMask_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= uadpDataSetMessageContentMask_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    uadpDataSetMessageContentMask_.WriteTo(output, _repeated_uadpDataSetMessageContentMask_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += uadpDataSetMessageContentMask_.CalculateSize(_repeated_uadpDataSetMessageContentMask_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUadpDataSetMessageContentMask other) {
    if (other == null) {
      return;
    }
    uadpDataSetMessageContentMask_.Add(other.uadpDataSetMessageContentMask_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          uadpDataSetMessageContentMask_.AddEntriesFrom(input, _repeated_uadpDataSetMessageContentMask_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUadpNetworkMessageContentMask : pb::IMessage<ListOfUadpNetworkMessageContentMask> {
  private static readonly pb::MessageParser<ListOfUadpNetworkMessageContentMask> _parser = new pb::MessageParser<ListOfUadpNetworkMessageContentMask>(() => new ListOfUadpNetworkMessageContentMask());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUadpNetworkMessageContentMask> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpNetworkMessageContentMask() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpNetworkMessageContentMask(ListOfUadpNetworkMessageContentMask other) : this() {
    uadpNetworkMessageContentMask_ = other.uadpNetworkMessageContentMask_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpNetworkMessageContentMask Clone() {
    return new ListOfUadpNetworkMessageContentMask(this);
  }

  /// <summary>Field number for the "UadpNetworkMessageContentMask" field.</summary>
  public const int UadpNetworkMessageContentMaskFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_uadpNetworkMessageContentMask_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> uadpNetworkMessageContentMask_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> UadpNetworkMessageContentMask {
    get { return uadpNetworkMessageContentMask_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUadpNetworkMessageContentMask);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUadpNetworkMessageContentMask other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!uadpNetworkMessageContentMask_.Equals(other.uadpNetworkMessageContentMask_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= uadpNetworkMessageContentMask_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    uadpNetworkMessageContentMask_.WriteTo(output, _repeated_uadpNetworkMessageContentMask_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += uadpNetworkMessageContentMask_.CalculateSize(_repeated_uadpNetworkMessageContentMask_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUadpNetworkMessageContentMask other) {
    if (other == null) {
      return;
    }
    uadpNetworkMessageContentMask_.Add(other.uadpNetworkMessageContentMask_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          uadpNetworkMessageContentMask_.AddEntriesFrom(input, _repeated_uadpNetworkMessageContentMask_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class LocalizedText : pb::IMessage<LocalizedText> {
  private static readonly pb::MessageParser<LocalizedText> _parser = new pb::MessageParser<LocalizedText>(() => new LocalizedText());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocalizedText> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalizedText() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalizedText(LocalizedText other) : this() {
    locale_ = other.locale_;
    text_ = other.text_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalizedText Clone() {
    return new LocalizedText(this);
  }

  /// <summary>Field number for the "Locale" field.</summary>
  public const int LocaleFieldNumber = 1;
  private readonly static string LocaleDefaultValue = "";

  private string locale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Locale {
    get { return locale_ ?? LocaleDefaultValue; }
    set {
      locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Locale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLocale {
    get { return locale_ != null; }
  }
  /// <summary>Clears the value of the "Locale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLocale() {
    locale_ = null;
  }

  /// <summary>Field number for the "Text" field.</summary>
  public const int TextFieldNumber = 2;
  private readonly static string TextDefaultValue = "";

  private string text_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return text_ ?? TextDefaultValue; }
    set {
      text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Text" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasText {
    get { return text_ != null; }
  }
  /// <summary>Clears the value of the "Text" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearText() {
    text_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocalizedText);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocalizedText other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Locale != other.Locale) return false;
    if (Text != other.Text) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLocale) hash ^= Locale.GetHashCode();
    if (HasText) hash ^= Text.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasLocale) {
      output.WriteRawTag(10);
      output.WriteString(Locale);
    }
    if (HasText) {
      output.WriteRawTag(18);
      output.WriteString(Text);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasLocale) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
    }
    if (HasText) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocalizedText other) {
    if (other == null) {
      return;
    }
    if (other.HasLocale) {
      Locale = other.Locale;
    }
    if (other.HasText) {
      Text = other.Text;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Locale = input.ReadString();
          break;
        }
        case 18: {
          Text = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MdnsDiscoveryConfiguration : pb::IMessage<MdnsDiscoveryConfiguration> {
  private static readonly pb::MessageParser<MdnsDiscoveryConfiguration> _parser = new pb::MessageParser<MdnsDiscoveryConfiguration>(() => new MdnsDiscoveryConfiguration());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MdnsDiscoveryConfiguration> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[88]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MdnsDiscoveryConfiguration() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MdnsDiscoveryConfiguration(MdnsDiscoveryConfiguration other) : this() {
    mdnsServerName_ = other.mdnsServerName_;
    serverCapabilities_ = other.serverCapabilities_ != null ? other.serverCapabilities_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MdnsDiscoveryConfiguration Clone() {
    return new MdnsDiscoveryConfiguration(this);
  }

  /// <summary>Field number for the "MdnsServerName" field.</summary>
  public const int MdnsServerNameFieldNumber = 1;
  private readonly static string MdnsServerNameDefaultValue = "";

  private string mdnsServerName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MdnsServerName {
    get { return mdnsServerName_ ?? MdnsServerNameDefaultValue; }
    set {
      mdnsServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "MdnsServerName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMdnsServerName {
    get { return mdnsServerName_ != null; }
  }
  /// <summary>Clears the value of the "MdnsServerName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMdnsServerName() {
    mdnsServerName_ = null;
  }

  /// <summary>Field number for the "ServerCapabilities" field.</summary>
  public const int ServerCapabilitiesFieldNumber = 2;
  private global::ListOfString serverCapabilities_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ServerCapabilities {
    get { return serverCapabilities_; }
    set {
      serverCapabilities_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MdnsDiscoveryConfiguration);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MdnsDiscoveryConfiguration other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MdnsServerName != other.MdnsServerName) return false;
    if (!object.Equals(ServerCapabilities, other.ServerCapabilities)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMdnsServerName) hash ^= MdnsServerName.GetHashCode();
    if (serverCapabilities_ != null) hash ^= ServerCapabilities.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMdnsServerName) {
      output.WriteRawTag(10);
      output.WriteString(MdnsServerName);
    }
    if (serverCapabilities_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ServerCapabilities);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMdnsServerName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MdnsServerName);
    }
    if (serverCapabilities_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerCapabilities);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MdnsDiscoveryConfiguration other) {
    if (other == null) {
      return;
    }
    if (other.HasMdnsServerName) {
      MdnsServerName = other.MdnsServerName;
    }
    if (other.serverCapabilities_ != null) {
      if (serverCapabilities_ == null) {
        ServerCapabilities = new global::ListOfString();
      }
      ServerCapabilities.MergeFrom(other.ServerCapabilities);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MdnsServerName = input.ReadString();
          break;
        }
        case 18: {
          if (serverCapabilities_ == null) {
            ServerCapabilities = new global::ListOfString();
          }
          input.ReadMessage(ServerCapabilities);
          break;
        }
      }
    }
  }

}

public sealed partial class MethodAttributes : pb::IMessage<MethodAttributes> {
  private static readonly pb::MessageParser<MethodAttributes> _parser = new pb::MessageParser<MethodAttributes>(() => new MethodAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MethodAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[89]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MethodAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MethodAttributes(MethodAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    executable_ = other.executable_;
    specifiedAttributes_ = other.specifiedAttributes_;
    userExecutable_ = other.userExecutable_;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MethodAttributes Clone() {
    return new MethodAttributes(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "Executable" field.</summary>
  public const int ExecutableFieldNumber = 3;
  private readonly static bool ExecutableDefaultValue = false;

  private bool executable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Executable {
    get { if ((_hasBits0 & 1) != 0) { return executable_; } else { return ExecutableDefaultValue; } }
    set {
      _hasBits0 |= 1;
      executable_ = value;
    }
  }
  /// <summary>Gets whether the "Executable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExecutable {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Executable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExecutable() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 4;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 2) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "UserExecutable" field.</summary>
  public const int UserExecutableFieldNumber = 5;
  private readonly static bool UserExecutableDefaultValue = false;

  private bool userExecutable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UserExecutable {
    get { if ((_hasBits0 & 4) != 0) { return userExecutable_; } else { return UserExecutableDefaultValue; } }
    set {
      _hasBits0 |= 4;
      userExecutable_ = value;
    }
  }
  /// <summary>Gets whether the "UserExecutable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserExecutable {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "UserExecutable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserExecutable() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 6;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 7;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 16) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MethodAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MethodAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (Executable != other.Executable) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserExecutable != other.UserExecutable) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasExecutable) hash ^= Executable.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserExecutable) hash ^= UserExecutable.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasExecutable) {
      output.WriteRawTag(24);
      output.WriteBool(Executable);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(32);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserExecutable) {
      output.WriteRawTag(40);
      output.WriteBool(UserExecutable);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(48);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(56);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasExecutable) {
      size += 1 + 1;
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserExecutable) {
      size += 1 + 1;
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MethodAttributes other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasExecutable) {
      Executable = other.Executable;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserExecutable) {
      UserExecutable = other.UserExecutable;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 24: {
          Executable = input.ReadBool();
          break;
        }
        case 32: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 40: {
          UserExecutable = input.ReadBool();
          break;
        }
        case 48: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 56: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ModificationInfo : pb::IMessage<ModificationInfo> {
  private static readonly pb::MessageParser<ModificationInfo> _parser = new pb::MessageParser<ModificationInfo>(() => new ModificationInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModificationInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[90]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModificationInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModificationInfo(ModificationInfo other) : this() {
    _hasBits0 = other._hasBits0;
    modificationTime_ = other.modificationTime_;
    updateType_ = other.updateType_;
    userName_ = other.userName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModificationInfo Clone() {
    return new ModificationInfo(this);
  }

  /// <summary>Field number for the "ModificationTime" field.</summary>
  public const int ModificationTimeFieldNumber = 1;
  private readonly static long ModificationTimeDefaultValue = 0L;

  private long modificationTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ModificationTime {
    get { if ((_hasBits0 & 1) != 0) { return modificationTime_; } else { return ModificationTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      modificationTime_ = value;
    }
  }
  /// <summary>Gets whether the "ModificationTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasModificationTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ModificationTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearModificationTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "UpdateType" field.</summary>
  public const int UpdateTypeFieldNumber = 2;
  private readonly static global::ModificationInfo.Types.HistoryUpdateType UpdateTypeDefaultValue = global::ModificationInfo.Types.HistoryUpdateType.Delete4;

  private global::ModificationInfo.Types.HistoryUpdateType updateType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModificationInfo.Types.HistoryUpdateType UpdateType {
    get { if ((_hasBits0 & 2) != 0) { return updateType_; } else { return UpdateTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      updateType_ = value;
    }
  }
  /// <summary>Gets whether the "UpdateType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUpdateType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "UpdateType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUpdateType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 3;
  private readonly static string UserNameDefaultValue = "";

  private string userName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_ ?? UserNameDefaultValue; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName {
    get { return userName_ != null; }
  }
  /// <summary>Clears the value of the "UserName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName() {
    userName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModificationInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModificationInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ModificationTime != other.ModificationTime) return false;
    if (UpdateType != other.UpdateType) return false;
    if (UserName != other.UserName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasModificationTime) hash ^= ModificationTime.GetHashCode();
    if (HasUpdateType) hash ^= UpdateType.GetHashCode();
    if (HasUserName) hash ^= UserName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasModificationTime) {
      output.WriteRawTag(8);
      output.WriteInt64(ModificationTime);
    }
    if (HasUpdateType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) UpdateType);
    }
    if (HasUserName) {
      output.WriteRawTag(26);
      output.WriteString(UserName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasModificationTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ModificationTime);
    }
    if (HasUpdateType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateType);
    }
    if (HasUserName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModificationInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasModificationTime) {
      ModificationTime = other.ModificationTime;
    }
    if (other.HasUpdateType) {
      UpdateType = other.UpdateType;
    }
    if (other.HasUserName) {
      UserName = other.UserName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ModificationTime = input.ReadInt64();
          break;
        }
        case 16: {
          UpdateType = (global::ModificationInfo.Types.HistoryUpdateType) input.ReadEnum();
          break;
        }
        case 26: {
          UserName = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ModificationInfo message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum HistoryUpdateType {
      [pbr::OriginalName("HistoryUpdateType_Delete_4")] Delete4 = 1,
      [pbr::OriginalName("HistoryUpdateType_Insert_1")] Insert1 = 2,
      [pbr::OriginalName("HistoryUpdateType_Replace_2")] Replace2 = 3,
      [pbr::OriginalName("HistoryUpdateType_Update_3")] Update3 = 4,
    }

  }
  #endregion

}

public sealed partial class NetworkAddressDataType : pb::IMessage<NetworkAddressDataType> {
  private static readonly pb::MessageParser<NetworkAddressDataType> _parser = new pb::MessageParser<NetworkAddressDataType>(() => new NetworkAddressDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NetworkAddressDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[91]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkAddressDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkAddressDataType(NetworkAddressDataType other) : this() {
    networkInterface_ = other.networkInterface_;
    url_ = other.url_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkAddressDataType Clone() {
    return new NetworkAddressDataType(this);
  }

  /// <summary>Field number for the "NetworkInterface" field.</summary>
  public const int NetworkInterfaceFieldNumber = 1;
  private readonly static string NetworkInterfaceDefaultValue = "";

  private string networkInterface_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NetworkInterface {
    get { return networkInterface_ ?? NetworkInterfaceDefaultValue; }
    set {
      networkInterface_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "NetworkInterface" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkInterface {
    get { return networkInterface_ != null; }
  }
  /// <summary>Clears the value of the "NetworkInterface" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkInterface() {
    networkInterface_ = null;
  }

  /// <summary>Field number for the "Url" field.</summary>
  public const int UrlFieldNumber = 2;
  private readonly static string UrlDefaultValue = "";

  private string url_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Url {
    get { return url_ ?? UrlDefaultValue; }
    set {
      url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Url" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUrl {
    get { return url_ != null; }
  }
  /// <summary>Clears the value of the "Url" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUrl() {
    url_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NetworkAddressDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NetworkAddressDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NetworkInterface != other.NetworkInterface) return false;
    if (Url != other.Url) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNetworkInterface) hash ^= NetworkInterface.GetHashCode();
    if (HasUrl) hash ^= Url.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasNetworkInterface) {
      output.WriteRawTag(10);
      output.WriteString(NetworkInterface);
    }
    if (HasUrl) {
      output.WriteRawTag(18);
      output.WriteString(Url);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasNetworkInterface) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkInterface);
    }
    if (HasUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NetworkAddressDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasNetworkInterface) {
      NetworkInterface = other.NetworkInterface;
    }
    if (other.HasUrl) {
      Url = other.Url;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NetworkInterface = input.ReadString();
          break;
        }
        case 18: {
          Url = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class NetworkAddressUrlDataType : pb::IMessage<NetworkAddressUrlDataType> {
  private static readonly pb::MessageParser<NetworkAddressUrlDataType> _parser = new pb::MessageParser<NetworkAddressUrlDataType>(() => new NetworkAddressUrlDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NetworkAddressUrlDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[92]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkAddressUrlDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkAddressUrlDataType(NetworkAddressUrlDataType other) : this() {
    networkInterface_ = other.networkInterface_;
    url_ = other.url_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkAddressUrlDataType Clone() {
    return new NetworkAddressUrlDataType(this);
  }

  /// <summary>Field number for the "NetworkInterface" field.</summary>
  public const int NetworkInterfaceFieldNumber = 1;
  private readonly static string NetworkInterfaceDefaultValue = "";

  private string networkInterface_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NetworkInterface {
    get { return networkInterface_ ?? NetworkInterfaceDefaultValue; }
    set {
      networkInterface_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "NetworkInterface" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkInterface {
    get { return networkInterface_ != null; }
  }
  /// <summary>Clears the value of the "NetworkInterface" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkInterface() {
    networkInterface_ = null;
  }

  /// <summary>Field number for the "Url" field.</summary>
  public const int UrlFieldNumber = 2;
  private readonly static string UrlDefaultValue = "";

  private string url_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Url {
    get { return url_ ?? UrlDefaultValue; }
    set {
      url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Url" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUrl {
    get { return url_ != null; }
  }
  /// <summary>Clears the value of the "Url" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUrl() {
    url_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NetworkAddressUrlDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NetworkAddressUrlDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NetworkInterface != other.NetworkInterface) return false;
    if (Url != other.Url) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNetworkInterface) hash ^= NetworkInterface.GetHashCode();
    if (HasUrl) hash ^= Url.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasNetworkInterface) {
      output.WriteRawTag(10);
      output.WriteString(NetworkInterface);
    }
    if (HasUrl) {
      output.WriteRawTag(18);
      output.WriteString(Url);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasNetworkInterface) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkInterface);
    }
    if (HasUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NetworkAddressUrlDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasNetworkInterface) {
      NetworkInterface = other.NetworkInterface;
    }
    if (other.HasUrl) {
      Url = other.Url;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NetworkInterface = input.ReadString();
          break;
        }
        case 18: {
          Url = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class NodeId : pb::IMessage<NodeId> {
  private static readonly pb::MessageParser<NodeId> _parser = new pb::MessageParser<NodeId>(() => new NodeId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NodeId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[93]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeId(NodeId other) : this() {
    identifier_ = other.identifier_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeId Clone() {
    return new NodeId(this);
  }

  /// <summary>Field number for the "Identifier" field.</summary>
  public const int IdentifierFieldNumber = 1;
  private readonly static string IdentifierDefaultValue = "";

  private string identifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Identifier {
    get { return identifier_ ?? IdentifierDefaultValue; }
    set {
      identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Identifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIdentifier {
    get { return identifier_ != null; }
  }
  /// <summary>Clears the value of the "Identifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIdentifier() {
    identifier_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NodeId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NodeId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Identifier != other.Identifier) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIdentifier) hash ^= Identifier.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIdentifier) {
      output.WriteRawTag(10);
      output.WriteString(Identifier);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIdentifier) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NodeId other) {
    if (other == null) {
      return;
    }
    if (other.HasIdentifier) {
      Identifier = other.Identifier;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Identifier = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ObjectAttributes : pb::IMessage<ObjectAttributes> {
  private static readonly pb::MessageParser<ObjectAttributes> _parser = new pb::MessageParser<ObjectAttributes>(() => new ObjectAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[94]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAttributes(ObjectAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    eventNotifier_ = other.eventNotifier_;
    specifiedAttributes_ = other.specifiedAttributes_;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAttributes Clone() {
    return new ObjectAttributes(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 3;
  private readonly static uint EventNotifierDefaultValue = 0;

  private uint eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotifier {
    get { if ((_hasBits0 & 1) != 0) { return eventNotifier_; } else { return EventNotifierDefaultValue; } }
    set {
      _hasBits0 |= 1;
      eventNotifier_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotifier {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "EventNotifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotifier() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 4;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 2) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 5;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 4) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 6;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 8) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (EventNotifier != other.EventNotifier) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasEventNotifier) hash ^= EventNotifier.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasEventNotifier) {
      output.WriteRawTag(24);
      output.WriteUInt32(EventNotifier);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(32);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(40);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(48);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasEventNotifier) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotifier);
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectAttributes other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasEventNotifier) {
      EventNotifier = other.EventNotifier;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 24: {
          EventNotifier = input.ReadUInt32();
          break;
        }
        case 32: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 40: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 48: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ObjectTypeAttributes : pb::IMessage<ObjectTypeAttributes> {
  private static readonly pb::MessageParser<ObjectTypeAttributes> _parser = new pb::MessageParser<ObjectTypeAttributes>(() => new ObjectTypeAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectTypeAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[95]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectTypeAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectTypeAttributes(ObjectTypeAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    specifiedAttributes_ = other.specifiedAttributes_;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectTypeAttributes Clone() {
    return new ObjectTypeAttributes(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 3;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 1) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 4;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 2) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 5;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 4) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 6;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 8) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectTypeAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectTypeAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(24);
      output.WriteBool(IsAbstract);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(32);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(40);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(48);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectTypeAttributes other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 24: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 32: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 40: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 48: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OptionSet : pb::IMessage<OptionSet> {
  private static readonly pb::MessageParser<OptionSet> _parser = new pb::MessageParser<OptionSet>(() => new OptionSet());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OptionSet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[96]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptionSet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptionSet(OptionSet other) : this() {
    validBits_ = other.validBits_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptionSet Clone() {
    return new OptionSet(this);
  }

  /// <summary>Field number for the "ValidBits" field.</summary>
  public const int ValidBitsFieldNumber = 1;
  private readonly static pb::ByteString ValidBitsDefaultValue = pb::ByteString.Empty;

  private pb::ByteString validBits_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ValidBits {
    get { return validBits_ ?? ValidBitsDefaultValue; }
    set {
      validBits_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ValidBits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValidBits {
    get { return validBits_ != null; }
  }
  /// <summary>Clears the value of the "ValidBits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValidBits() {
    validBits_ = null;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 2;
  private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

  private pb::ByteString value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Value {
    get { return value_ ?? ValueDefaultValue; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValue {
    get { return value_ != null; }
  }
  /// <summary>Clears the value of the "Value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValue() {
    value_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OptionSet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OptionSet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ValidBits != other.ValidBits) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasValidBits) hash ^= ValidBits.GetHashCode();
    if (HasValue) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasValidBits) {
      output.WriteRawTag(10);
      output.WriteBytes(ValidBits);
    }
    if (HasValue) {
      output.WriteRawTag(18);
      output.WriteBytes(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasValidBits) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValidBits);
    }
    if (HasValue) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OptionSet other) {
    if (other == null) {
      return;
    }
    if (other.HasValidBits) {
      ValidBits = other.ValidBits;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ValidBits = input.ReadBytes();
          break;
        }
        case 18: {
          Value = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Orientation : pb::IMessage<Orientation> {
  private static readonly pb::MessageParser<Orientation> _parser = new pb::MessageParser<Orientation>(() => new Orientation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Orientation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[97]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation(Orientation other) : this() {
    _hasBits0 = other._hasBits0;
    a_ = other.a_;
    b_ = other.b_;
    c_ = other.c_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation Clone() {
    return new Orientation(this);
  }

  /// <summary>Field number for the "A" field.</summary>
  public const int AFieldNumber = 1;
  private readonly static double ADefaultValue = 0D;

  private double a_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double A {
    get { if ((_hasBits0 & 1) != 0) { return a_; } else { return ADefaultValue; } }
    set {
      _hasBits0 |= 1;
      a_ = value;
    }
  }
  /// <summary>Gets whether the "A" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasA {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "A" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearA() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "B" field.</summary>
  public const int BFieldNumber = 2;
  private readonly static double BDefaultValue = 0D;

  private double b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double B {
    get { if ((_hasBits0 & 2) != 0) { return b_; } else { return BDefaultValue; } }
    set {
      _hasBits0 |= 2;
      b_ = value;
    }
  }
  /// <summary>Gets whether the "B" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasB {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "B" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearB() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "C" field.</summary>
  public const int CFieldNumber = 3;
  private readonly static double CDefaultValue = 0D;

  private double c_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double C {
    get { if ((_hasBits0 & 4) != 0) { return c_; } else { return CDefaultValue; } }
    set {
      _hasBits0 |= 4;
      c_ = value;
    }
  }
  /// <summary>Gets whether the "C" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasC {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "C" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearC() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Orientation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Orientation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(A, other.A)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(B, other.B)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(C, other.C)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasA) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(A);
    if (HasB) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(B);
    if (HasC) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(C);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasA) {
      output.WriteRawTag(9);
      output.WriteDouble(A);
    }
    if (HasB) {
      output.WriteRawTag(17);
      output.WriteDouble(B);
    }
    if (HasC) {
      output.WriteRawTag(25);
      output.WriteDouble(C);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasA) {
      size += 1 + 8;
    }
    if (HasB) {
      size += 1 + 8;
    }
    if (HasC) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Orientation other) {
    if (other == null) {
      return;
    }
    if (other.HasA) {
      A = other.A;
    }
    if (other.HasB) {
      B = other.B;
    }
    if (other.HasC) {
      C = other.C;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          A = input.ReadDouble();
          break;
        }
        case 17: {
          B = input.ReadDouble();
          break;
        }
        case 25: {
          C = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class QualifiedName : pb::IMessage<QualifiedName> {
  private static readonly pb::MessageParser<QualifiedName> _parser = new pb::MessageParser<QualifiedName>(() => new QualifiedName());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QualifiedName> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[98]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QualifiedName() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QualifiedName(QualifiedName other) : this() {
    _hasBits0 = other._hasBits0;
    name_ = other.name_;
    namespaceIndex_ = other.namespaceIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QualifiedName Clone() {
    return new QualifiedName(this);
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 1;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "NamespaceIndex" field.</summary>
  public const int NamespaceIndexFieldNumber = 2;
  private readonly static uint NamespaceIndexDefaultValue = 0;

  private uint namespaceIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NamespaceIndex {
    get { if ((_hasBits0 & 1) != 0) { return namespaceIndex_; } else { return NamespaceIndexDefaultValue; } }
    set {
      _hasBits0 |= 1;
      namespaceIndex_ = value;
    }
  }
  /// <summary>Gets whether the "NamespaceIndex" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNamespaceIndex {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "NamespaceIndex" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNamespaceIndex() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QualifiedName);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QualifiedName other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (NamespaceIndex != other.NamespaceIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasName) hash ^= Name.GetHashCode();
    if (HasNamespaceIndex) hash ^= NamespaceIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasName) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (HasNamespaceIndex) {
      output.WriteRawTag(16);
      output.WriteUInt32(NamespaceIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasNamespaceIndex) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NamespaceIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QualifiedName other) {
    if (other == null) {
      return;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasNamespaceIndex) {
      NamespaceIndex = other.NamespaceIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          NamespaceIndex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Range : pb::IMessage<Range> {
  private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Range> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[99]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Range() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Range(Range other) : this() {
    _hasBits0 = other._hasBits0;
    high_ = other.high_;
    low_ = other.low_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Range Clone() {
    return new Range(this);
  }

  /// <summary>Field number for the "High" field.</summary>
  public const int HighFieldNumber = 1;
  private readonly static double HighDefaultValue = 0D;

  private double high_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double High {
    get { if ((_hasBits0 & 1) != 0) { return high_; } else { return HighDefaultValue; } }
    set {
      _hasBits0 |= 1;
      high_ = value;
    }
  }
  /// <summary>Gets whether the "High" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHigh {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "High" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHigh() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Low" field.</summary>
  public const int LowFieldNumber = 2;
  private readonly static double LowDefaultValue = 0D;

  private double low_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Low {
    get { if ((_hasBits0 & 2) != 0) { return low_; } else { return LowDefaultValue; } }
    set {
      _hasBits0 |= 2;
      low_ = value;
    }
  }
  /// <summary>Gets whether the "Low" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLow {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Low" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLow() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Range);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Range other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasHigh) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
    if (HasLow) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasHigh) {
      output.WriteRawTag(9);
      output.WriteDouble(High);
    }
    if (HasLow) {
      output.WriteRawTag(17);
      output.WriteDouble(Low);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasHigh) {
      size += 1 + 8;
    }
    if (HasLow) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Range other) {
    if (other == null) {
      return;
    }
    if (other.HasHigh) {
      High = other.High;
    }
    if (other.HasLow) {
      Low = other.Low;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          High = input.ReadDouble();
          break;
        }
        case 17: {
          Low = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class RationalNumber : pb::IMessage<RationalNumber> {
  private static readonly pb::MessageParser<RationalNumber> _parser = new pb::MessageParser<RationalNumber>(() => new RationalNumber());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RationalNumber> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[100]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RationalNumber() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RationalNumber(RationalNumber other) : this() {
    _hasBits0 = other._hasBits0;
    denominator_ = other.denominator_;
    numerator_ = other.numerator_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RationalNumber Clone() {
    return new RationalNumber(this);
  }

  /// <summary>Field number for the "Denominator" field.</summary>
  public const int DenominatorFieldNumber = 1;
  private readonly static uint DenominatorDefaultValue = 0;

  private uint denominator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Denominator {
    get { if ((_hasBits0 & 1) != 0) { return denominator_; } else { return DenominatorDefaultValue; } }
    set {
      _hasBits0 |= 1;
      denominator_ = value;
    }
  }
  /// <summary>Gets whether the "Denominator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDenominator {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Denominator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDenominator() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Numerator" field.</summary>
  public const int NumeratorFieldNumber = 2;
  private readonly static int NumeratorDefaultValue = 0;

  private int numerator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Numerator {
    get { if ((_hasBits0 & 2) != 0) { return numerator_; } else { return NumeratorDefaultValue; } }
    set {
      _hasBits0 |= 2;
      numerator_ = value;
    }
  }
  /// <summary>Gets whether the "Numerator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNumerator {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Numerator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNumerator() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RationalNumber);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RationalNumber other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Denominator != other.Denominator) return false;
    if (Numerator != other.Numerator) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDenominator) hash ^= Denominator.GetHashCode();
    if (HasNumerator) hash ^= Numerator.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDenominator) {
      output.WriteRawTag(8);
      output.WriteUInt32(Denominator);
    }
    if (HasNumerator) {
      output.WriteRawTag(16);
      output.WriteInt32(Numerator);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDenominator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Denominator);
    }
    if (HasNumerator) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Numerator);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RationalNumber other) {
    if (other == null) {
      return;
    }
    if (other.HasDenominator) {
      Denominator = other.Denominator;
    }
    if (other.HasNumerator) {
      Numerator = other.Numerator;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Denominator = input.ReadUInt32();
          break;
        }
        case 16: {
          Numerator = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ReadAnnotationDataDetails : pb::IMessage<ReadAnnotationDataDetails> {
  private static readonly pb::MessageParser<ReadAnnotationDataDetails> _parser = new pb::MessageParser<ReadAnnotationDataDetails>(() => new ReadAnnotationDataDetails());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadAnnotationDataDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[101]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadAnnotationDataDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadAnnotationDataDetails(ReadAnnotationDataDetails other) : this() {
    reqTimes_ = other.reqTimes_ != null ? other.reqTimes_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadAnnotationDataDetails Clone() {
    return new ReadAnnotationDataDetails(this);
  }

  /// <summary>Field number for the "ReqTimes" field.</summary>
  public const int ReqTimesFieldNumber = 1;
  private global::ListOfDateTime reqTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDateTime ReqTimes {
    get { return reqTimes_; }
    set {
      reqTimes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadAnnotationDataDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadAnnotationDataDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ReqTimes, other.ReqTimes)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (reqTimes_ != null) hash ^= ReqTimes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (reqTimes_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ReqTimes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (reqTimes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqTimes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadAnnotationDataDetails other) {
    if (other == null) {
      return;
    }
    if (other.reqTimes_ != null) {
      if (reqTimes_ == null) {
        ReqTimes = new global::ListOfDateTime();
      }
      ReqTimes.MergeFrom(other.ReqTimes);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (reqTimes_ == null) {
            ReqTimes = new global::ListOfDateTime();
          }
          input.ReadMessage(ReqTimes);
          break;
        }
      }
    }
  }

}

public sealed partial class ReadAtTimeDetails : pb::IMessage<ReadAtTimeDetails> {
  private static readonly pb::MessageParser<ReadAtTimeDetails> _parser = new pb::MessageParser<ReadAtTimeDetails>(() => new ReadAtTimeDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadAtTimeDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[102]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadAtTimeDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadAtTimeDetails(ReadAtTimeDetails other) : this() {
    _hasBits0 = other._hasBits0;
    reqTimes_ = other.reqTimes_ != null ? other.reqTimes_.Clone() : null;
    useSimpleBounds_ = other.useSimpleBounds_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadAtTimeDetails Clone() {
    return new ReadAtTimeDetails(this);
  }

  /// <summary>Field number for the "ReqTimes" field.</summary>
  public const int ReqTimesFieldNumber = 1;
  private global::ListOfDateTime reqTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDateTime ReqTimes {
    get { return reqTimes_; }
    set {
      reqTimes_ = value;
    }
  }

  /// <summary>Field number for the "UseSimpleBounds" field.</summary>
  public const int UseSimpleBoundsFieldNumber = 2;
  private readonly static bool UseSimpleBoundsDefaultValue = false;

  private bool useSimpleBounds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseSimpleBounds {
    get { if ((_hasBits0 & 1) != 0) { return useSimpleBounds_; } else { return UseSimpleBoundsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      useSimpleBounds_ = value;
    }
  }
  /// <summary>Gets whether the "UseSimpleBounds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUseSimpleBounds {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "UseSimpleBounds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUseSimpleBounds() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadAtTimeDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadAtTimeDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ReqTimes, other.ReqTimes)) return false;
    if (UseSimpleBounds != other.UseSimpleBounds) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (reqTimes_ != null) hash ^= ReqTimes.GetHashCode();
    if (HasUseSimpleBounds) hash ^= UseSimpleBounds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (reqTimes_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ReqTimes);
    }
    if (HasUseSimpleBounds) {
      output.WriteRawTag(16);
      output.WriteBool(UseSimpleBounds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (reqTimes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqTimes);
    }
    if (HasUseSimpleBounds) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadAtTimeDetails other) {
    if (other == null) {
      return;
    }
    if (other.reqTimes_ != null) {
      if (reqTimes_ == null) {
        ReqTimes = new global::ListOfDateTime();
      }
      ReqTimes.MergeFrom(other.ReqTimes);
    }
    if (other.HasUseSimpleBounds) {
      UseSimpleBounds = other.UseSimpleBounds;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (reqTimes_ == null) {
            ReqTimes = new global::ListOfDateTime();
          }
          input.ReadMessage(ReqTimes);
          break;
        }
        case 16: {
          UseSimpleBounds = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class ReadRawModifiedDetails : pb::IMessage<ReadRawModifiedDetails> {
  private static readonly pb::MessageParser<ReadRawModifiedDetails> _parser = new pb::MessageParser<ReadRawModifiedDetails>(() => new ReadRawModifiedDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadRawModifiedDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[103]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadRawModifiedDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadRawModifiedDetails(ReadRawModifiedDetails other) : this() {
    _hasBits0 = other._hasBits0;
    endTime_ = other.endTime_;
    isReadModified_ = other.isReadModified_;
    numValuesPerNode_ = other.numValuesPerNode_;
    returnBounds_ = other.returnBounds_;
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadRawModifiedDetails Clone() {
    return new ReadRawModifiedDetails(this);
  }

  /// <summary>Field number for the "EndTime" field.</summary>
  public const int EndTimeFieldNumber = 1;
  private readonly static long EndTimeDefaultValue = 0L;

  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { if ((_hasBits0 & 1) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      endTime_ = value;
    }
  }
  /// <summary>Gets whether the "EndTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "EndTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "IsReadModified" field.</summary>
  public const int IsReadModifiedFieldNumber = 2;
  private readonly static bool IsReadModifiedDefaultValue = false;

  private bool isReadModified_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReadModified {
    get { if ((_hasBits0 & 2) != 0) { return isReadModified_; } else { return IsReadModifiedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isReadModified_ = value;
    }
  }
  /// <summary>Gets whether the "IsReadModified" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsReadModified {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsReadModified" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsReadModified() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NumValuesPerNode" field.</summary>
  public const int NumValuesPerNodeFieldNumber = 3;
  private readonly static uint NumValuesPerNodeDefaultValue = 0;

  private uint numValuesPerNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NumValuesPerNode {
    get { if ((_hasBits0 & 4) != 0) { return numValuesPerNode_; } else { return NumValuesPerNodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      numValuesPerNode_ = value;
    }
  }
  /// <summary>Gets whether the "NumValuesPerNode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNumValuesPerNode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "NumValuesPerNode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNumValuesPerNode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ReturnBounds" field.</summary>
  public const int ReturnBoundsFieldNumber = 4;
  private readonly static bool ReturnBoundsDefaultValue = false;

  private bool returnBounds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReturnBounds {
    get { if ((_hasBits0 & 8) != 0) { return returnBounds_; } else { return ReturnBoundsDefaultValue; } }
    set {
      _hasBits0 |= 8;
      returnBounds_ = value;
    }
  }
  /// <summary>Gets whether the "ReturnBounds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReturnBounds {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ReturnBounds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReturnBounds() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 5;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 16) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadRawModifiedDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadRawModifiedDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndTime != other.EndTime) return false;
    if (IsReadModified != other.IsReadModified) return false;
    if (NumValuesPerNode != other.NumValuesPerNode) return false;
    if (ReturnBounds != other.ReturnBounds) return false;
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndTime) hash ^= EndTime.GetHashCode();
    if (HasIsReadModified) hash ^= IsReadModified.GetHashCode();
    if (HasNumValuesPerNode) hash ^= NumValuesPerNode.GetHashCode();
    if (HasReturnBounds) hash ^= ReturnBounds.GetHashCode();
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndTime) {
      output.WriteRawTag(8);
      output.WriteInt64(EndTime);
    }
    if (HasIsReadModified) {
      output.WriteRawTag(16);
      output.WriteBool(IsReadModified);
    }
    if (HasNumValuesPerNode) {
      output.WriteRawTag(24);
      output.WriteUInt32(NumValuesPerNode);
    }
    if (HasReturnBounds) {
      output.WriteRawTag(32);
      output.WriteBool(ReturnBounds);
    }
    if (HasStartTime) {
      output.WriteRawTag(40);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (HasIsReadModified) {
      size += 1 + 1;
    }
    if (HasNumValuesPerNode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumValuesPerNode);
    }
    if (HasReturnBounds) {
      size += 1 + 1;
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadRawModifiedDetails other) {
    if (other == null) {
      return;
    }
    if (other.HasEndTime) {
      EndTime = other.EndTime;
    }
    if (other.HasIsReadModified) {
      IsReadModified = other.IsReadModified;
    }
    if (other.HasNumValuesPerNode) {
      NumValuesPerNode = other.NumValuesPerNode;
    }
    if (other.HasReturnBounds) {
      ReturnBounds = other.ReturnBounds;
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EndTime = input.ReadInt64();
          break;
        }
        case 16: {
          IsReadModified = input.ReadBool();
          break;
        }
        case 24: {
          NumValuesPerNode = input.ReadUInt32();
          break;
        }
        case 32: {
          ReturnBounds = input.ReadBool();
          break;
        }
        case 40: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ReadValueId : pb::IMessage<ReadValueId> {
  private static readonly pb::MessageParser<ReadValueId> _parser = new pb::MessageParser<ReadValueId>(() => new ReadValueId());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadValueId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[104]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadValueId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadValueId(ReadValueId other) : this() {
    _hasBits0 = other._hasBits0;
    attributeId_ = other.attributeId_;
    dataEncoding_ = other.dataEncoding_ != null ? other.dataEncoding_.Clone() : null;
    indexRange_ = other.indexRange_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadValueId Clone() {
    return new ReadValueId(this);
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 1;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataEncoding" field.</summary>
  public const int DataEncodingFieldNumber = 2;
  private global::QualifiedName dataEncoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName DataEncoding {
    get { return dataEncoding_; }
    set {
      dataEncoding_ = value;
    }
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 3;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 4;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadValueId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadValueId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttributeId != other.AttributeId) return false;
    if (!object.Equals(DataEncoding, other.DataEncoding)) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (dataEncoding_ != null) hash ^= DataEncoding.GetHashCode();
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAttributeId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AttributeId);
    }
    if (dataEncoding_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataEncoding);
    }
    if (HasIndexRange) {
      output.WriteRawTag(26);
      output.WriteString(IndexRange);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NodeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (dataEncoding_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataEncoding);
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadValueId other) {
    if (other == null) {
      return;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.dataEncoding_ != null) {
      if (dataEncoding_ == null) {
        DataEncoding = new global::QualifiedName();
      }
      DataEncoding.MergeFrom(other.DataEncoding);
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (dataEncoding_ == null) {
            DataEncoding = new global::QualifiedName();
          }
          input.ReadMessage(DataEncoding);
          break;
        }
        case 26: {
          IndexRange = input.ReadString();
          break;
        }
        case 34: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
      }
    }
  }

}

public sealed partial class ReaderGroupMessageDataType : pb::IMessage<ReaderGroupMessageDataType> {
  private static readonly pb::MessageParser<ReaderGroupMessageDataType> _parser = new pb::MessageParser<ReaderGroupMessageDataType>(() => new ReaderGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReaderGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[105]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupMessageDataType(ReaderGroupMessageDataType other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupMessageDataType Clone() {
    return new ReaderGroupMessageDataType(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReaderGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReaderGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReaderGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class ReaderGroupTransportDataType : pb::IMessage<ReaderGroupTransportDataType> {
  private static readonly pb::MessageParser<ReaderGroupTransportDataType> _parser = new pb::MessageParser<ReaderGroupTransportDataType>(() => new ReaderGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReaderGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[106]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupTransportDataType(ReaderGroupTransportDataType other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupTransportDataType Clone() {
    return new ReaderGroupTransportDataType(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReaderGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReaderGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReaderGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class RedundantServerDataType : pb::IMessage<RedundantServerDataType> {
  private static readonly pb::MessageParser<RedundantServerDataType> _parser = new pb::MessageParser<RedundantServerDataType>(() => new RedundantServerDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RedundantServerDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[107]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RedundantServerDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RedundantServerDataType(RedundantServerDataType other) : this() {
    _hasBits0 = other._hasBits0;
    serverId_ = other.serverId_;
    ServerState_ = other.ServerState_;
    serviceLevel_ = other.serviceLevel_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RedundantServerDataType Clone() {
    return new RedundantServerDataType(this);
  }

  /// <summary>Field number for the "ServerId" field.</summary>
  public const int ServerIdFieldNumber = 1;
  private readonly static string ServerIdDefaultValue = "";

  private string serverId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerId {
    get { return serverId_ ?? ServerIdDefaultValue; }
    set {
      serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerId {
    get { return serverId_ != null; }
  }
  /// <summary>Clears the value of the "ServerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerId() {
    serverId_ = null;
  }

  /// <summary>Field number for the "_ServerState" field.</summary>
  public const int ServerStateFieldNumber = 2;
  private readonly static global::RedundantServerDataType.Types.ServerState ServerStateDefaultValue = global::RedundantServerDataType.Types.ServerState.CommunicationFault6;

  private global::RedundantServerDataType.Types.ServerState ServerState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RedundantServerDataType.Types.ServerState ServerState {
    get { if ((_hasBits0 & 1) != 0) { return ServerState_; } else { return ServerStateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ServerState_ = value;
    }
  }
  /// <summary>Gets whether the "_ServerState" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerState {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_ServerState" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerState() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ServiceLevel" field.</summary>
  public const int ServiceLevelFieldNumber = 3;
  private readonly static uint ServiceLevelDefaultValue = 0;

  private uint serviceLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServiceLevel {
    get { if ((_hasBits0 & 2) != 0) { return serviceLevel_; } else { return ServiceLevelDefaultValue; } }
    set {
      _hasBits0 |= 2;
      serviceLevel_ = value;
    }
  }
  /// <summary>Gets whether the "ServiceLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServiceLevel {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ServiceLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServiceLevel() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RedundantServerDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RedundantServerDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerId != other.ServerId) return false;
    if (ServerState != other.ServerState) return false;
    if (ServiceLevel != other.ServiceLevel) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasServerId) hash ^= ServerId.GetHashCode();
    if (HasServerState) hash ^= ServerState.GetHashCode();
    if (HasServiceLevel) hash ^= ServiceLevel.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasServerId) {
      output.WriteRawTag(10);
      output.WriteString(ServerId);
    }
    if (HasServerState) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ServerState);
    }
    if (HasServiceLevel) {
      output.WriteRawTag(24);
      output.WriteUInt32(ServiceLevel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasServerId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
    }
    if (HasServerState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServerState);
    }
    if (HasServiceLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceLevel);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RedundantServerDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasServerId) {
      ServerId = other.ServerId;
    }
    if (other.HasServerState) {
      ServerState = other.ServerState;
    }
    if (other.HasServiceLevel) {
      ServiceLevel = other.ServiceLevel;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ServerId = input.ReadString();
          break;
        }
        case 16: {
          ServerState = (global::RedundantServerDataType.Types.ServerState) input.ReadEnum();
          break;
        }
        case 24: {
          ServiceLevel = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the RedundantServerDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ServerState {
      [pbr::OriginalName("ServerState_CommunicationFault_6")] CommunicationFault6 = 1,
      [pbr::OriginalName("ServerState_Failed_1")] Failed1 = 2,
      [pbr::OriginalName("ServerState_NoConfiguration_2")] NoConfiguration2 = 3,
      [pbr::OriginalName("ServerState_Running_0")] Running0 = 4,
      [pbr::OriginalName("ServerState_Shutdown_4")] Shutdown4 = 5,
      [pbr::OriginalName("ServerState_Suspended_3")] Suspended3 = 6,
      [pbr::OriginalName("ServerState_Test_5")] Test5 = 7,
      [pbr::OriginalName("ServerState_Unknown_7")] Unknown7 = 8,
    }

  }
  #endregion

}

public sealed partial class ReferenceDescription : pb::IMessage<ReferenceDescription> {
  private static readonly pb::MessageParser<ReferenceDescription> _parser = new pb::MessageParser<ReferenceDescription>(() => new ReferenceDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReferenceDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[108]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceDescription(ReferenceDescription other) : this() {
    _hasBits0 = other._hasBits0;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    isForward_ = other.isForward_;
    NodeClass_ = other.NodeClass_;
    nodeId_ = other.nodeId_ != null ? other.nodeId_.Clone() : null;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    typeDefinition_ = other.typeDefinition_ != null ? other.typeDefinition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceDescription Clone() {
    return new ReferenceDescription(this);
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 1;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "IsForward" field.</summary>
  public const int IsForwardFieldNumber = 3;
  private readonly static bool IsForwardDefaultValue = false;

  private bool isForward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsForward {
    get { if ((_hasBits0 & 1) != 0) { return isForward_; } else { return IsForwardDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isForward_ = value;
    }
  }
  /// <summary>Gets whether the "IsForward" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsForward {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsForward" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsForward() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 4;
  private readonly static global::ReferenceDescription.Types.NodeClass NodeClassDefaultValue = global::ReferenceDescription.Types.NodeClass.DataType64;

  private global::ReferenceDescription.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReferenceDescription.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 2) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 2;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NodeId" field.</summary>
  public const int NodeIdFieldNumber = 5;
  private global::ExpandedNodeId nodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId NodeId {
    get { return nodeId_; }
    set {
      nodeId_ = value;
    }
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 6;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "TypeDefinition" field.</summary>
  public const int TypeDefinitionFieldNumber = 7;
  private global::ExpandedNodeId typeDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TypeDefinition {
    get { return typeDefinition_; }
    set {
      typeDefinition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReferenceDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReferenceDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (IsForward != other.IsForward) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (!object.Equals(TypeDefinition, other.TypeDefinition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasIsForward) hash ^= IsForward.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (nodeId_ != null) hash ^= NodeId.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (typeDefinition_ != null) hash ^= TypeDefinition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (browseName_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BrowseName);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasIsForward) {
      output.WriteRawTag(24);
      output.WriteBool(IsForward);
    }
    if (HasNodeClass) {
      output.WriteRawTag(32);
      output.WriteEnum((int) NodeClass);
    }
    if (nodeId_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(NodeId);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(ReferenceTypeId);
    }
    if (typeDefinition_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(TypeDefinition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasIsForward) {
      size += 1 + 1;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (nodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (typeDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeDefinition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReferenceDescription other) {
    if (other == null) {
      return;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasIsForward) {
      IsForward = other.IsForward;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.nodeId_ != null) {
      if (nodeId_ == null) {
        NodeId = new global::ExpandedNodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.typeDefinition_ != null) {
      if (typeDefinition_ == null) {
        TypeDefinition = new global::ExpandedNodeId();
      }
      TypeDefinition.MergeFrom(other.TypeDefinition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 24: {
          IsForward = input.ReadBool();
          break;
        }
        case 32: {
          NodeClass = (global::ReferenceDescription.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 42: {
          if (nodeId_ == null) {
            NodeId = new global::ExpandedNodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 50: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 58: {
          if (typeDefinition_ == null) {
            TypeDefinition = new global::ExpandedNodeId();
          }
          input.ReadMessage(TypeDefinition);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ReferenceDescription message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class ReferenceNode : pb::IMessage<ReferenceNode> {
  private static readonly pb::MessageParser<ReferenceNode> _parser = new pb::MessageParser<ReferenceNode>(() => new ReferenceNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReferenceNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[109]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceNode(ReferenceNode other) : this() {
    _hasBits0 = other._hasBits0;
    isInverse_ = other.isInverse_;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    targetId_ = other.targetId_ != null ? other.targetId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceNode Clone() {
    return new ReferenceNode(this);
  }

  /// <summary>Field number for the "IsInverse" field.</summary>
  public const int IsInverseFieldNumber = 1;
  private readonly static bool IsInverseDefaultValue = false;

  private bool isInverse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInverse {
    get { if ((_hasBits0 & 1) != 0) { return isInverse_; } else { return IsInverseDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isInverse_ = value;
    }
  }
  /// <summary>Gets whether the "IsInverse" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsInverse {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsInverse" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsInverse() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 2;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "TargetId" field.</summary>
  public const int TargetIdFieldNumber = 3;
  private global::ExpandedNodeId targetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TargetId {
    get { return targetId_; }
    set {
      targetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReferenceNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReferenceNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsInverse != other.IsInverse) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (!object.Equals(TargetId, other.TargetId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIsInverse) hash ^= IsInverse.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (targetId_ != null) hash ^= TargetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIsInverse) {
      output.WriteRawTag(8);
      output.WriteBool(IsInverse);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ReferenceTypeId);
    }
    if (targetId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TargetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIsInverse) {
      size += 1 + 1;
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (targetId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReferenceNode other) {
    if (other == null) {
      return;
    }
    if (other.HasIsInverse) {
      IsInverse = other.IsInverse;
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.targetId_ != null) {
      if (targetId_ == null) {
        TargetId = new global::ExpandedNodeId();
      }
      TargetId.MergeFrom(other.TargetId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsInverse = input.ReadBool();
          break;
        }
        case 18: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 26: {
          if (targetId_ == null) {
            TargetId = new global::ExpandedNodeId();
          }
          input.ReadMessage(TargetId);
          break;
        }
      }
    }
  }

}

public sealed partial class ReferenceTypeAttributes : pb::IMessage<ReferenceTypeAttributes> {
  private static readonly pb::MessageParser<ReferenceTypeAttributes> _parser = new pb::MessageParser<ReferenceTypeAttributes>(() => new ReferenceTypeAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReferenceTypeAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[110]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceTypeAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceTypeAttributes(ReferenceTypeAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    inverseName_ = other.inverseName_ != null ? other.inverseName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    specifiedAttributes_ = other.specifiedAttributes_;
    symmetric_ = other.symmetric_;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceTypeAttributes Clone() {
    return new ReferenceTypeAttributes(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "InverseName" field.</summary>
  public const int InverseNameFieldNumber = 3;
  private global::LocalizedText inverseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText InverseName {
    get { return inverseName_; }
    set {
      inverseName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 4;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 1) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 5;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 2) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Symmetric" field.</summary>
  public const int SymmetricFieldNumber = 6;
  private readonly static bool SymmetricDefaultValue = false;

  private bool symmetric_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Symmetric {
    get { if ((_hasBits0 & 4) != 0) { return symmetric_; } else { return SymmetricDefaultValue; } }
    set {
      _hasBits0 |= 4;
      symmetric_ = value;
    }
  }
  /// <summary>Gets whether the "Symmetric" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymmetric {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Symmetric" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymmetric() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 7;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 8;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 16) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReferenceTypeAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReferenceTypeAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (!object.Equals(InverseName, other.InverseName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (Symmetric != other.Symmetric) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (inverseName_ != null) hash ^= InverseName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasSymmetric) hash ^= Symmetric.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (inverseName_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(InverseName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(32);
      output.WriteBool(IsAbstract);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(40);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasSymmetric) {
      output.WriteRawTag(48);
      output.WriteBool(Symmetric);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(56);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(64);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (inverseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InverseName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasSymmetric) {
      size += 1 + 1;
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReferenceTypeAttributes other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.inverseName_ != null) {
      if (inverseName_ == null) {
        InverseName = new global::LocalizedText();
      }
      InverseName.MergeFrom(other.InverseName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasSymmetric) {
      Symmetric = other.Symmetric;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 26: {
          if (inverseName_ == null) {
            InverseName = new global::LocalizedText();
          }
          input.ReadMessage(InverseName);
          break;
        }
        case 32: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 40: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 48: {
          Symmetric = input.ReadBool();
          break;
        }
        case 56: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 64: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RelativePathElement : pb::IMessage<RelativePathElement> {
  private static readonly pb::MessageParser<RelativePathElement> _parser = new pb::MessageParser<RelativePathElement>(() => new RelativePathElement());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RelativePathElement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[111]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RelativePathElement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RelativePathElement(RelativePathElement other) : this() {
    _hasBits0 = other._hasBits0;
    includeSubtypes_ = other.includeSubtypes_;
    isInverse_ = other.isInverse_;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    targetName_ = other.targetName_ != null ? other.targetName_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RelativePathElement Clone() {
    return new RelativePathElement(this);
  }

  /// <summary>Field number for the "IncludeSubtypes" field.</summary>
  public const int IncludeSubtypesFieldNumber = 1;
  private readonly static bool IncludeSubtypesDefaultValue = false;

  private bool includeSubtypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IncludeSubtypes {
    get { if ((_hasBits0 & 1) != 0) { return includeSubtypes_; } else { return IncludeSubtypesDefaultValue; } }
    set {
      _hasBits0 |= 1;
      includeSubtypes_ = value;
    }
  }
  /// <summary>Gets whether the "IncludeSubtypes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIncludeSubtypes {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IncludeSubtypes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIncludeSubtypes() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "IsInverse" field.</summary>
  public const int IsInverseFieldNumber = 2;
  private readonly static bool IsInverseDefaultValue = false;

  private bool isInverse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInverse {
    get { if ((_hasBits0 & 2) != 0) { return isInverse_; } else { return IsInverseDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isInverse_ = value;
    }
  }
  /// <summary>Gets whether the "IsInverse" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsInverse {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsInverse" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsInverse() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 3;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "TargetName" field.</summary>
  public const int TargetNameFieldNumber = 4;
  private global::QualifiedName targetName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName TargetName {
    get { return targetName_; }
    set {
      targetName_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RelativePathElement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RelativePathElement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IncludeSubtypes != other.IncludeSubtypes) return false;
    if (IsInverse != other.IsInverse) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (!object.Equals(TargetName, other.TargetName)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIncludeSubtypes) hash ^= IncludeSubtypes.GetHashCode();
    if (HasIsInverse) hash ^= IsInverse.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (targetName_ != null) hash ^= TargetName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIncludeSubtypes) {
      output.WriteRawTag(8);
      output.WriteBool(IncludeSubtypes);
    }
    if (HasIsInverse) {
      output.WriteRawTag(16);
      output.WriteBool(IsInverse);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ReferenceTypeId);
    }
    if (targetName_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(TargetName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIncludeSubtypes) {
      size += 1 + 1;
    }
    if (HasIsInverse) {
      size += 1 + 1;
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (targetName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RelativePathElement other) {
    if (other == null) {
      return;
    }
    if (other.HasIncludeSubtypes) {
      IncludeSubtypes = other.IncludeSubtypes;
    }
    if (other.HasIsInverse) {
      IsInverse = other.IsInverse;
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.targetName_ != null) {
      if (targetName_ == null) {
        TargetName = new global::QualifiedName();
      }
      TargetName.MergeFrom(other.TargetName);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IncludeSubtypes = input.ReadBool();
          break;
        }
        case 16: {
          IsInverse = input.ReadBool();
          break;
        }
        case 26: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 34: {
          if (targetName_ == null) {
            TargetName = new global::QualifiedName();
          }
          input.ReadMessage(TargetName);
          break;
        }
      }
    }
  }

}

public sealed partial class RolePermissionType : pb::IMessage<RolePermissionType> {
  private static readonly pb::MessageParser<RolePermissionType> _parser = new pb::MessageParser<RolePermissionType>(() => new RolePermissionType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RolePermissionType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[112]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RolePermissionType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RolePermissionType(RolePermissionType other) : this() {
    _hasBits0 = other._hasBits0;
    permissions_ = other.permissions_;
    roleId_ = other.roleId_ != null ? other.roleId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RolePermissionType Clone() {
    return new RolePermissionType(this);
  }

  /// <summary>Field number for the "Permissions" field.</summary>
  public const int PermissionsFieldNumber = 1;
  private readonly static uint PermissionsDefaultValue = 0;

  private uint permissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Permissions {
    get { if ((_hasBits0 & 1) != 0) { return permissions_; } else { return PermissionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      permissions_ = value;
    }
  }
  /// <summary>Gets whether the "Permissions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPermissions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Permissions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPermissions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RoleId" field.</summary>
  public const int RoleIdFieldNumber = 2;
  private global::NodeId roleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId RoleId {
    get { return roleId_; }
    set {
      roleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RolePermissionType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RolePermissionType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Permissions != other.Permissions) return false;
    if (!object.Equals(RoleId, other.RoleId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPermissions) hash ^= Permissions.GetHashCode();
    if (roleId_ != null) hash ^= RoleId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPermissions) {
      output.WriteRawTag(8);
      output.WriteUInt32(Permissions);
    }
    if (roleId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RoleId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPermissions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Permissions);
    }
    if (roleId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RolePermissionType other) {
    if (other == null) {
      return;
    }
    if (other.HasPermissions) {
      Permissions = other.Permissions;
    }
    if (other.roleId_ != null) {
      if (roleId_ == null) {
        RoleId = new global::NodeId();
      }
      RoleId.MergeFrom(other.RoleId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Permissions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (roleId_ == null) {
            RoleId = new global::NodeId();
          }
          input.ReadMessage(RoleId);
          break;
        }
      }
    }
  }

}

public sealed partial class SamplingIntervalDiagnosticsDataType : pb::IMessage<SamplingIntervalDiagnosticsDataType> {
  private static readonly pb::MessageParser<SamplingIntervalDiagnosticsDataType> _parser = new pb::MessageParser<SamplingIntervalDiagnosticsDataType>(() => new SamplingIntervalDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SamplingIntervalDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[113]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SamplingIntervalDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SamplingIntervalDiagnosticsDataType(SamplingIntervalDiagnosticsDataType other) : this() {
    _hasBits0 = other._hasBits0;
    disabledMonitoredItemCount_ = other.disabledMonitoredItemCount_;
    maxMonitoredItemCount_ = other.maxMonitoredItemCount_;
    monitoredItemCount_ = other.monitoredItemCount_;
    samplingInterval_ = other.samplingInterval_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SamplingIntervalDiagnosticsDataType Clone() {
    return new SamplingIntervalDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "DisabledMonitoredItemCount" field.</summary>
  public const int DisabledMonitoredItemCountFieldNumber = 1;
  private readonly static uint DisabledMonitoredItemCountDefaultValue = 0;

  private uint disabledMonitoredItemCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DisabledMonitoredItemCount {
    get { if ((_hasBits0 & 1) != 0) { return disabledMonitoredItemCount_; } else { return DisabledMonitoredItemCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      disabledMonitoredItemCount_ = value;
    }
  }
  /// <summary>Gets whether the "DisabledMonitoredItemCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisabledMonitoredItemCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DisabledMonitoredItemCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisabledMonitoredItemCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "MaxMonitoredItemCount" field.</summary>
  public const int MaxMonitoredItemCountFieldNumber = 2;
  private readonly static uint MaxMonitoredItemCountDefaultValue = 0;

  private uint maxMonitoredItemCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxMonitoredItemCount {
    get { if ((_hasBits0 & 2) != 0) { return maxMonitoredItemCount_; } else { return MaxMonitoredItemCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      maxMonitoredItemCount_ = value;
    }
  }
  /// <summary>Gets whether the "MaxMonitoredItemCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxMonitoredItemCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MaxMonitoredItemCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxMonitoredItemCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "MonitoredItemCount" field.</summary>
  public const int MonitoredItemCountFieldNumber = 3;
  private readonly static uint MonitoredItemCountDefaultValue = 0;

  private uint monitoredItemCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MonitoredItemCount {
    get { if ((_hasBits0 & 4) != 0) { return monitoredItemCount_; } else { return MonitoredItemCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      monitoredItemCount_ = value;
    }
  }
  /// <summary>Gets whether the "MonitoredItemCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMonitoredItemCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "MonitoredItemCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMonitoredItemCount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SamplingInterval" field.</summary>
  public const int SamplingIntervalFieldNumber = 4;
  private readonly static double SamplingIntervalDefaultValue = 0D;

  private double samplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double SamplingInterval {
    get { if ((_hasBits0 & 8) != 0) { return samplingInterval_; } else { return SamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 8;
      samplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "SamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSamplingInterval {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSamplingInterval() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SamplingIntervalDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SamplingIntervalDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DisabledMonitoredItemCount != other.DisabledMonitoredItemCount) return false;
    if (MaxMonitoredItemCount != other.MaxMonitoredItemCount) return false;
    if (MonitoredItemCount != other.MonitoredItemCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SamplingInterval, other.SamplingInterval)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDisabledMonitoredItemCount) hash ^= DisabledMonitoredItemCount.GetHashCode();
    if (HasMaxMonitoredItemCount) hash ^= MaxMonitoredItemCount.GetHashCode();
    if (HasMonitoredItemCount) hash ^= MonitoredItemCount.GetHashCode();
    if (HasSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SamplingInterval);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDisabledMonitoredItemCount) {
      output.WriteRawTag(8);
      output.WriteUInt32(DisabledMonitoredItemCount);
    }
    if (HasMaxMonitoredItemCount) {
      output.WriteRawTag(16);
      output.WriteUInt32(MaxMonitoredItemCount);
    }
    if (HasMonitoredItemCount) {
      output.WriteRawTag(24);
      output.WriteUInt32(MonitoredItemCount);
    }
    if (HasSamplingInterval) {
      output.WriteRawTag(33);
      output.WriteDouble(SamplingInterval);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDisabledMonitoredItemCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisabledMonitoredItemCount);
    }
    if (HasMaxMonitoredItemCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxMonitoredItemCount);
    }
    if (HasMonitoredItemCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonitoredItemCount);
    }
    if (HasSamplingInterval) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SamplingIntervalDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDisabledMonitoredItemCount) {
      DisabledMonitoredItemCount = other.DisabledMonitoredItemCount;
    }
    if (other.HasMaxMonitoredItemCount) {
      MaxMonitoredItemCount = other.MaxMonitoredItemCount;
    }
    if (other.HasMonitoredItemCount) {
      MonitoredItemCount = other.MonitoredItemCount;
    }
    if (other.HasSamplingInterval) {
      SamplingInterval = other.SamplingInterval;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DisabledMonitoredItemCount = input.ReadUInt32();
          break;
        }
        case 16: {
          MaxMonitoredItemCount = input.ReadUInt32();
          break;
        }
        case 24: {
          MonitoredItemCount = input.ReadUInt32();
          break;
        }
        case 33: {
          SamplingInterval = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class SemanticChangeStructureDataType : pb::IMessage<SemanticChangeStructureDataType> {
  private static readonly pb::MessageParser<SemanticChangeStructureDataType> _parser = new pb::MessageParser<SemanticChangeStructureDataType>(() => new SemanticChangeStructureDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SemanticChangeStructureDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[114]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SemanticChangeStructureDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SemanticChangeStructureDataType(SemanticChangeStructureDataType other) : this() {
    affected_ = other.affected_ != null ? other.affected_.Clone() : null;
    affectedType_ = other.affectedType_ != null ? other.affectedType_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SemanticChangeStructureDataType Clone() {
    return new SemanticChangeStructureDataType(this);
  }

  /// <summary>Field number for the "Affected" field.</summary>
  public const int AffectedFieldNumber = 1;
  private global::NodeId affected_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId Affected {
    get { return affected_; }
    set {
      affected_ = value;
    }
  }

  /// <summary>Field number for the "AffectedType" field.</summary>
  public const int AffectedTypeFieldNumber = 2;
  private global::NodeId affectedType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId AffectedType {
    get { return affectedType_; }
    set {
      affectedType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SemanticChangeStructureDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SemanticChangeStructureDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Affected, other.Affected)) return false;
    if (!object.Equals(AffectedType, other.AffectedType)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (affected_ != null) hash ^= Affected.GetHashCode();
    if (affectedType_ != null) hash ^= AffectedType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (affected_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Affected);
    }
    if (affectedType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AffectedType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (affected_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Affected);
    }
    if (affectedType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AffectedType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SemanticChangeStructureDataType other) {
    if (other == null) {
      return;
    }
    if (other.affected_ != null) {
      if (affected_ == null) {
        Affected = new global::NodeId();
      }
      Affected.MergeFrom(other.Affected);
    }
    if (other.affectedType_ != null) {
      if (affectedType_ == null) {
        AffectedType = new global::NodeId();
      }
      AffectedType.MergeFrom(other.AffectedType);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (affected_ == null) {
            Affected = new global::NodeId();
          }
          input.ReadMessage(Affected);
          break;
        }
        case 18: {
          if (affectedType_ == null) {
            AffectedType = new global::NodeId();
          }
          input.ReadMessage(AffectedType);
          break;
        }
      }
    }
  }

}

public sealed partial class ServerDiagnosticsSummaryDataType : pb::IMessage<ServerDiagnosticsSummaryDataType> {
  private static readonly pb::MessageParser<ServerDiagnosticsSummaryDataType> _parser = new pb::MessageParser<ServerDiagnosticsSummaryDataType>(() => new ServerDiagnosticsSummaryDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerDiagnosticsSummaryDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[115]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerDiagnosticsSummaryDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerDiagnosticsSummaryDataType(ServerDiagnosticsSummaryDataType other) : this() {
    _hasBits0 = other._hasBits0;
    cumulatedSessionCount_ = other.cumulatedSessionCount_;
    cumulatedSubscriptionCount_ = other.cumulatedSubscriptionCount_;
    currentSessionCount_ = other.currentSessionCount_;
    currentSubscriptionCount_ = other.currentSubscriptionCount_;
    publishingIntervalCount_ = other.publishingIntervalCount_;
    rejectedRequestsCount_ = other.rejectedRequestsCount_;
    rejectedSessionCount_ = other.rejectedSessionCount_;
    securityRejectedRequestsCount_ = other.securityRejectedRequestsCount_;
    securityRejectedSessionCount_ = other.securityRejectedSessionCount_;
    serverViewCount_ = other.serverViewCount_;
    sessionAbortCount_ = other.sessionAbortCount_;
    sessionTimeoutCount_ = other.sessionTimeoutCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerDiagnosticsSummaryDataType Clone() {
    return new ServerDiagnosticsSummaryDataType(this);
  }

  /// <summary>Field number for the "CumulatedSessionCount" field.</summary>
  public const int CumulatedSessionCountFieldNumber = 1;
  private readonly static uint CumulatedSessionCountDefaultValue = 0;

  private uint cumulatedSessionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CumulatedSessionCount {
    get { if ((_hasBits0 & 1) != 0) { return cumulatedSessionCount_; } else { return CumulatedSessionCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      cumulatedSessionCount_ = value;
    }
  }
  /// <summary>Gets whether the "CumulatedSessionCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCumulatedSessionCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "CumulatedSessionCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCumulatedSessionCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "CumulatedSubscriptionCount" field.</summary>
  public const int CumulatedSubscriptionCountFieldNumber = 2;
  private readonly static uint CumulatedSubscriptionCountDefaultValue = 0;

  private uint cumulatedSubscriptionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CumulatedSubscriptionCount {
    get { if ((_hasBits0 & 2) != 0) { return cumulatedSubscriptionCount_; } else { return CumulatedSubscriptionCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      cumulatedSubscriptionCount_ = value;
    }
  }
  /// <summary>Gets whether the "CumulatedSubscriptionCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCumulatedSubscriptionCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "CumulatedSubscriptionCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCumulatedSubscriptionCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "CurrentSessionCount" field.</summary>
  public const int CurrentSessionCountFieldNumber = 3;
  private readonly static uint CurrentSessionCountDefaultValue = 0;

  private uint currentSessionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentSessionCount {
    get { if ((_hasBits0 & 4) != 0) { return currentSessionCount_; } else { return CurrentSessionCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      currentSessionCount_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentSessionCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentSessionCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "CurrentSessionCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentSessionCount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "CurrentSubscriptionCount" field.</summary>
  public const int CurrentSubscriptionCountFieldNumber = 4;
  private readonly static uint CurrentSubscriptionCountDefaultValue = 0;

  private uint currentSubscriptionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentSubscriptionCount {
    get { if ((_hasBits0 & 8) != 0) { return currentSubscriptionCount_; } else { return CurrentSubscriptionCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      currentSubscriptionCount_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentSubscriptionCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentSubscriptionCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "CurrentSubscriptionCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentSubscriptionCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "PublishingIntervalCount" field.</summary>
  public const int PublishingIntervalCountFieldNumber = 5;
  private readonly static uint PublishingIntervalCountDefaultValue = 0;

  private uint publishingIntervalCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PublishingIntervalCount {
    get { if ((_hasBits0 & 16) != 0) { return publishingIntervalCount_; } else { return PublishingIntervalCountDefaultValue; } }
    set {
      _hasBits0 |= 16;
      publishingIntervalCount_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingIntervalCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingIntervalCount {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "PublishingIntervalCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingIntervalCount() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "RejectedRequestsCount" field.</summary>
  public const int RejectedRequestsCountFieldNumber = 6;
  private readonly static uint RejectedRequestsCountDefaultValue = 0;

  private uint rejectedRequestsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RejectedRequestsCount {
    get { if ((_hasBits0 & 32) != 0) { return rejectedRequestsCount_; } else { return RejectedRequestsCountDefaultValue; } }
    set {
      _hasBits0 |= 32;
      rejectedRequestsCount_ = value;
    }
  }
  /// <summary>Gets whether the "RejectedRequestsCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRejectedRequestsCount {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "RejectedRequestsCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRejectedRequestsCount() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "RejectedSessionCount" field.</summary>
  public const int RejectedSessionCountFieldNumber = 7;
  private readonly static uint RejectedSessionCountDefaultValue = 0;

  private uint rejectedSessionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RejectedSessionCount {
    get { if ((_hasBits0 & 64) != 0) { return rejectedSessionCount_; } else { return RejectedSessionCountDefaultValue; } }
    set {
      _hasBits0 |= 64;
      rejectedSessionCount_ = value;
    }
  }
  /// <summary>Gets whether the "RejectedSessionCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRejectedSessionCount {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "RejectedSessionCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRejectedSessionCount() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "SecurityRejectedRequestsCount" field.</summary>
  public const int SecurityRejectedRequestsCountFieldNumber = 8;
  private readonly static uint SecurityRejectedRequestsCountDefaultValue = 0;

  private uint securityRejectedRequestsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SecurityRejectedRequestsCount {
    get { if ((_hasBits0 & 128) != 0) { return securityRejectedRequestsCount_; } else { return SecurityRejectedRequestsCountDefaultValue; } }
    set {
      _hasBits0 |= 128;
      securityRejectedRequestsCount_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityRejectedRequestsCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityRejectedRequestsCount {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "SecurityRejectedRequestsCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityRejectedRequestsCount() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "SecurityRejectedSessionCount" field.</summary>
  public const int SecurityRejectedSessionCountFieldNumber = 9;
  private readonly static uint SecurityRejectedSessionCountDefaultValue = 0;

  private uint securityRejectedSessionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SecurityRejectedSessionCount {
    get { if ((_hasBits0 & 256) != 0) { return securityRejectedSessionCount_; } else { return SecurityRejectedSessionCountDefaultValue; } }
    set {
      _hasBits0 |= 256;
      securityRejectedSessionCount_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityRejectedSessionCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityRejectedSessionCount {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "SecurityRejectedSessionCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityRejectedSessionCount() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "ServerViewCount" field.</summary>
  public const int ServerViewCountFieldNumber = 10;
  private readonly static uint ServerViewCountDefaultValue = 0;

  private uint serverViewCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerViewCount {
    get { if ((_hasBits0 & 512) != 0) { return serverViewCount_; } else { return ServerViewCountDefaultValue; } }
    set {
      _hasBits0 |= 512;
      serverViewCount_ = value;
    }
  }
  /// <summary>Gets whether the "ServerViewCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerViewCount {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "ServerViewCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerViewCount() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "SessionAbortCount" field.</summary>
  public const int SessionAbortCountFieldNumber = 11;
  private readonly static uint SessionAbortCountDefaultValue = 0;

  private uint sessionAbortCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SessionAbortCount {
    get { if ((_hasBits0 & 1024) != 0) { return sessionAbortCount_; } else { return SessionAbortCountDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      sessionAbortCount_ = value;
    }
  }
  /// <summary>Gets whether the "SessionAbortCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSessionAbortCount {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "SessionAbortCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSessionAbortCount() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "SessionTimeoutCount" field.</summary>
  public const int SessionTimeoutCountFieldNumber = 12;
  private readonly static uint SessionTimeoutCountDefaultValue = 0;

  private uint sessionTimeoutCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SessionTimeoutCount {
    get { if ((_hasBits0 & 2048) != 0) { return sessionTimeoutCount_; } else { return SessionTimeoutCountDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      sessionTimeoutCount_ = value;
    }
  }
  /// <summary>Gets whether the "SessionTimeoutCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSessionTimeoutCount {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "SessionTimeoutCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSessionTimeoutCount() {
    _hasBits0 &= ~2048;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerDiagnosticsSummaryDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerDiagnosticsSummaryDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CumulatedSessionCount != other.CumulatedSessionCount) return false;
    if (CumulatedSubscriptionCount != other.CumulatedSubscriptionCount) return false;
    if (CurrentSessionCount != other.CurrentSessionCount) return false;
    if (CurrentSubscriptionCount != other.CurrentSubscriptionCount) return false;
    if (PublishingIntervalCount != other.PublishingIntervalCount) return false;
    if (RejectedRequestsCount != other.RejectedRequestsCount) return false;
    if (RejectedSessionCount != other.RejectedSessionCount) return false;
    if (SecurityRejectedRequestsCount != other.SecurityRejectedRequestsCount) return false;
    if (SecurityRejectedSessionCount != other.SecurityRejectedSessionCount) return false;
    if (ServerViewCount != other.ServerViewCount) return false;
    if (SessionAbortCount != other.SessionAbortCount) return false;
    if (SessionTimeoutCount != other.SessionTimeoutCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCumulatedSessionCount) hash ^= CumulatedSessionCount.GetHashCode();
    if (HasCumulatedSubscriptionCount) hash ^= CumulatedSubscriptionCount.GetHashCode();
    if (HasCurrentSessionCount) hash ^= CurrentSessionCount.GetHashCode();
    if (HasCurrentSubscriptionCount) hash ^= CurrentSubscriptionCount.GetHashCode();
    if (HasPublishingIntervalCount) hash ^= PublishingIntervalCount.GetHashCode();
    if (HasRejectedRequestsCount) hash ^= RejectedRequestsCount.GetHashCode();
    if (HasRejectedSessionCount) hash ^= RejectedSessionCount.GetHashCode();
    if (HasSecurityRejectedRequestsCount) hash ^= SecurityRejectedRequestsCount.GetHashCode();
    if (HasSecurityRejectedSessionCount) hash ^= SecurityRejectedSessionCount.GetHashCode();
    if (HasServerViewCount) hash ^= ServerViewCount.GetHashCode();
    if (HasSessionAbortCount) hash ^= SessionAbortCount.GetHashCode();
    if (HasSessionTimeoutCount) hash ^= SessionTimeoutCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCumulatedSessionCount) {
      output.WriteRawTag(8);
      output.WriteUInt32(CumulatedSessionCount);
    }
    if (HasCumulatedSubscriptionCount) {
      output.WriteRawTag(16);
      output.WriteUInt32(CumulatedSubscriptionCount);
    }
    if (HasCurrentSessionCount) {
      output.WriteRawTag(24);
      output.WriteUInt32(CurrentSessionCount);
    }
    if (HasCurrentSubscriptionCount) {
      output.WriteRawTag(32);
      output.WriteUInt32(CurrentSubscriptionCount);
    }
    if (HasPublishingIntervalCount) {
      output.WriteRawTag(40);
      output.WriteUInt32(PublishingIntervalCount);
    }
    if (HasRejectedRequestsCount) {
      output.WriteRawTag(48);
      output.WriteUInt32(RejectedRequestsCount);
    }
    if (HasRejectedSessionCount) {
      output.WriteRawTag(56);
      output.WriteUInt32(RejectedSessionCount);
    }
    if (HasSecurityRejectedRequestsCount) {
      output.WriteRawTag(64);
      output.WriteUInt32(SecurityRejectedRequestsCount);
    }
    if (HasSecurityRejectedSessionCount) {
      output.WriteRawTag(72);
      output.WriteUInt32(SecurityRejectedSessionCount);
    }
    if (HasServerViewCount) {
      output.WriteRawTag(80);
      output.WriteUInt32(ServerViewCount);
    }
    if (HasSessionAbortCount) {
      output.WriteRawTag(88);
      output.WriteUInt32(SessionAbortCount);
    }
    if (HasSessionTimeoutCount) {
      output.WriteRawTag(96);
      output.WriteUInt32(SessionTimeoutCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCumulatedSessionCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CumulatedSessionCount);
    }
    if (HasCumulatedSubscriptionCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CumulatedSubscriptionCount);
    }
    if (HasCurrentSessionCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentSessionCount);
    }
    if (HasCurrentSubscriptionCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentSubscriptionCount);
    }
    if (HasPublishingIntervalCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PublishingIntervalCount);
    }
    if (HasRejectedRequestsCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RejectedRequestsCount);
    }
    if (HasRejectedSessionCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RejectedSessionCount);
    }
    if (HasSecurityRejectedRequestsCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecurityRejectedRequestsCount);
    }
    if (HasSecurityRejectedSessionCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecurityRejectedSessionCount);
    }
    if (HasServerViewCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerViewCount);
    }
    if (HasSessionAbortCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionAbortCount);
    }
    if (HasSessionTimeoutCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionTimeoutCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerDiagnosticsSummaryDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasCumulatedSessionCount) {
      CumulatedSessionCount = other.CumulatedSessionCount;
    }
    if (other.HasCumulatedSubscriptionCount) {
      CumulatedSubscriptionCount = other.CumulatedSubscriptionCount;
    }
    if (other.HasCurrentSessionCount) {
      CurrentSessionCount = other.CurrentSessionCount;
    }
    if (other.HasCurrentSubscriptionCount) {
      CurrentSubscriptionCount = other.CurrentSubscriptionCount;
    }
    if (other.HasPublishingIntervalCount) {
      PublishingIntervalCount = other.PublishingIntervalCount;
    }
    if (other.HasRejectedRequestsCount) {
      RejectedRequestsCount = other.RejectedRequestsCount;
    }
    if (other.HasRejectedSessionCount) {
      RejectedSessionCount = other.RejectedSessionCount;
    }
    if (other.HasSecurityRejectedRequestsCount) {
      SecurityRejectedRequestsCount = other.SecurityRejectedRequestsCount;
    }
    if (other.HasSecurityRejectedSessionCount) {
      SecurityRejectedSessionCount = other.SecurityRejectedSessionCount;
    }
    if (other.HasServerViewCount) {
      ServerViewCount = other.ServerViewCount;
    }
    if (other.HasSessionAbortCount) {
      SessionAbortCount = other.SessionAbortCount;
    }
    if (other.HasSessionTimeoutCount) {
      SessionTimeoutCount = other.SessionTimeoutCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CumulatedSessionCount = input.ReadUInt32();
          break;
        }
        case 16: {
          CumulatedSubscriptionCount = input.ReadUInt32();
          break;
        }
        case 24: {
          CurrentSessionCount = input.ReadUInt32();
          break;
        }
        case 32: {
          CurrentSubscriptionCount = input.ReadUInt32();
          break;
        }
        case 40: {
          PublishingIntervalCount = input.ReadUInt32();
          break;
        }
        case 48: {
          RejectedRequestsCount = input.ReadUInt32();
          break;
        }
        case 56: {
          RejectedSessionCount = input.ReadUInt32();
          break;
        }
        case 64: {
          SecurityRejectedRequestsCount = input.ReadUInt32();
          break;
        }
        case 72: {
          SecurityRejectedSessionCount = input.ReadUInt32();
          break;
        }
        case 80: {
          ServerViewCount = input.ReadUInt32();
          break;
        }
        case 88: {
          SessionAbortCount = input.ReadUInt32();
          break;
        }
        case 96: {
          SessionTimeoutCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ServerOnNetwork : pb::IMessage<ServerOnNetwork> {
  private static readonly pb::MessageParser<ServerOnNetwork> _parser = new pb::MessageParser<ServerOnNetwork>(() => new ServerOnNetwork());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerOnNetwork> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[116]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerOnNetwork() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerOnNetwork(ServerOnNetwork other) : this() {
    _hasBits0 = other._hasBits0;
    discoveryUrl_ = other.discoveryUrl_;
    recordId_ = other.recordId_;
    serverCapabilities_ = other.serverCapabilities_ != null ? other.serverCapabilities_.Clone() : null;
    serverName_ = other.serverName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerOnNetwork Clone() {
    return new ServerOnNetwork(this);
  }

  /// <summary>Field number for the "DiscoveryUrl" field.</summary>
  public const int DiscoveryUrlFieldNumber = 1;
  private readonly static string DiscoveryUrlDefaultValue = "";

  private string discoveryUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DiscoveryUrl {
    get { return discoveryUrl_ ?? DiscoveryUrlDefaultValue; }
    set {
      discoveryUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "DiscoveryUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDiscoveryUrl {
    get { return discoveryUrl_ != null; }
  }
  /// <summary>Clears the value of the "DiscoveryUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDiscoveryUrl() {
    discoveryUrl_ = null;
  }

  /// <summary>Field number for the "RecordId" field.</summary>
  public const int RecordIdFieldNumber = 2;
  private readonly static uint RecordIdDefaultValue = 0;

  private uint recordId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RecordId {
    get { if ((_hasBits0 & 1) != 0) { return recordId_; } else { return RecordIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      recordId_ = value;
    }
  }
  /// <summary>Gets whether the "RecordId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRecordId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RecordId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRecordId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ServerCapabilities" field.</summary>
  public const int ServerCapabilitiesFieldNumber = 3;
  private global::ListOfString serverCapabilities_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ServerCapabilities {
    get { return serverCapabilities_; }
    set {
      serverCapabilities_ = value;
    }
  }

  /// <summary>Field number for the "ServerName" field.</summary>
  public const int ServerNameFieldNumber = 4;
  private readonly static string ServerNameDefaultValue = "";

  private string serverName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerName {
    get { return serverName_ ?? ServerNameDefaultValue; }
    set {
      serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerName {
    get { return serverName_ != null; }
  }
  /// <summary>Clears the value of the "ServerName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerName() {
    serverName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerOnNetwork);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerOnNetwork other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DiscoveryUrl != other.DiscoveryUrl) return false;
    if (RecordId != other.RecordId) return false;
    if (!object.Equals(ServerCapabilities, other.ServerCapabilities)) return false;
    if (ServerName != other.ServerName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDiscoveryUrl) hash ^= DiscoveryUrl.GetHashCode();
    if (HasRecordId) hash ^= RecordId.GetHashCode();
    if (serverCapabilities_ != null) hash ^= ServerCapabilities.GetHashCode();
    if (HasServerName) hash ^= ServerName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDiscoveryUrl) {
      output.WriteRawTag(10);
      output.WriteString(DiscoveryUrl);
    }
    if (HasRecordId) {
      output.WriteRawTag(16);
      output.WriteUInt32(RecordId);
    }
    if (serverCapabilities_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ServerCapabilities);
    }
    if (HasServerName) {
      output.WriteRawTag(34);
      output.WriteString(ServerName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDiscoveryUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscoveryUrl);
    }
    if (HasRecordId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordId);
    }
    if (serverCapabilities_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerCapabilities);
    }
    if (HasServerName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerOnNetwork other) {
    if (other == null) {
      return;
    }
    if (other.HasDiscoveryUrl) {
      DiscoveryUrl = other.DiscoveryUrl;
    }
    if (other.HasRecordId) {
      RecordId = other.RecordId;
    }
    if (other.serverCapabilities_ != null) {
      if (serverCapabilities_ == null) {
        ServerCapabilities = new global::ListOfString();
      }
      ServerCapabilities.MergeFrom(other.ServerCapabilities);
    }
    if (other.HasServerName) {
      ServerName = other.ServerName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DiscoveryUrl = input.ReadString();
          break;
        }
        case 16: {
          RecordId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (serverCapabilities_ == null) {
            ServerCapabilities = new global::ListOfString();
          }
          input.ReadMessage(ServerCapabilities);
          break;
        }
        case 34: {
          ServerName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ServerStatusDataType : pb::IMessage<ServerStatusDataType> {
  private static readonly pb::MessageParser<ServerStatusDataType> _parser = new pb::MessageParser<ServerStatusDataType>(() => new ServerStatusDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerStatusDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[117]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerStatusDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerStatusDataType(ServerStatusDataType other) : this() {
    _hasBits0 = other._hasBits0;
    BuildInfo_ = other.BuildInfo_ != null ? other.BuildInfo_.Clone() : null;
    currentTime_ = other.currentTime_;
    secondsTillShutdown_ = other.secondsTillShutdown_;
    shutdownReason_ = other.shutdownReason_ != null ? other.shutdownReason_.Clone() : null;
    startTime_ = other.startTime_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerStatusDataType Clone() {
    return new ServerStatusDataType(this);
  }

  /// <summary>Field number for the "_BuildInfo" field.</summary>
  public const int BuildInfoFieldNumber = 1;
  private global::BuildInfo BuildInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BuildInfo BuildInfo {
    get { return BuildInfo_; }
    set {
      BuildInfo_ = value;
    }
  }

  /// <summary>Field number for the "CurrentTime" field.</summary>
  public const int CurrentTimeFieldNumber = 2;
  private readonly static long CurrentTimeDefaultValue = 0L;

  private long currentTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CurrentTime {
    get { if ((_hasBits0 & 1) != 0) { return currentTime_; } else { return CurrentTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      currentTime_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "CurrentTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SecondsTillShutdown" field.</summary>
  public const int SecondsTillShutdownFieldNumber = 3;
  private readonly static uint SecondsTillShutdownDefaultValue = 0;

  private uint secondsTillShutdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SecondsTillShutdown {
    get { if ((_hasBits0 & 2) != 0) { return secondsTillShutdown_; } else { return SecondsTillShutdownDefaultValue; } }
    set {
      _hasBits0 |= 2;
      secondsTillShutdown_ = value;
    }
  }
  /// <summary>Gets whether the "SecondsTillShutdown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecondsTillShutdown {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SecondsTillShutdown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecondsTillShutdown() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ShutdownReason" field.</summary>
  public const int ShutdownReasonFieldNumber = 4;
  private global::LocalizedText shutdownReason_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText ShutdownReason {
    get { return shutdownReason_; }
    set {
      shutdownReason_ = value;
    }
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 5;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 4) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "State" field.</summary>
  public const int StateFieldNumber = 6;
  private readonly static global::ServerStatusDataType.Types.ServerState StateDefaultValue = global::ServerStatusDataType.Types.ServerState.CommunicationFault6;

  private global::ServerStatusDataType.Types.ServerState state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerStatusDataType.Types.ServerState State {
    get { if ((_hasBits0 & 8) != 0) { return state_; } else { return StateDefaultValue; } }
    set {
      _hasBits0 |= 8;
      state_ = value;
    }
  }
  /// <summary>Gets whether the "State" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasState {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "State" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearState() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerStatusDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerStatusDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BuildInfo, other.BuildInfo)) return false;
    if (CurrentTime != other.CurrentTime) return false;
    if (SecondsTillShutdown != other.SecondsTillShutdown) return false;
    if (!object.Equals(ShutdownReason, other.ShutdownReason)) return false;
    if (StartTime != other.StartTime) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuildInfo_ != null) hash ^= BuildInfo.GetHashCode();
    if (HasCurrentTime) hash ^= CurrentTime.GetHashCode();
    if (HasSecondsTillShutdown) hash ^= SecondsTillShutdown.GetHashCode();
    if (shutdownReason_ != null) hash ^= ShutdownReason.GetHashCode();
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (HasState) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuildInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BuildInfo);
    }
    if (HasCurrentTime) {
      output.WriteRawTag(16);
      output.WriteInt64(CurrentTime);
    }
    if (HasSecondsTillShutdown) {
      output.WriteRawTag(24);
      output.WriteUInt32(SecondsTillShutdown);
    }
    if (shutdownReason_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ShutdownReason);
    }
    if (HasStartTime) {
      output.WriteRawTag(40);
      output.WriteInt64(StartTime);
    }
    if (HasState) {
      output.WriteRawTag(48);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuildInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildInfo);
    }
    if (HasCurrentTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentTime);
    }
    if (HasSecondsTillShutdown) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsTillShutdown);
    }
    if (shutdownReason_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShutdownReason);
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (HasState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerStatusDataType other) {
    if (other == null) {
      return;
    }
    if (other.BuildInfo_ != null) {
      if (BuildInfo_ == null) {
        BuildInfo = new global::BuildInfo();
      }
      BuildInfo.MergeFrom(other.BuildInfo);
    }
    if (other.HasCurrentTime) {
      CurrentTime = other.CurrentTime;
    }
    if (other.HasSecondsTillShutdown) {
      SecondsTillShutdown = other.SecondsTillShutdown;
    }
    if (other.shutdownReason_ != null) {
      if (shutdownReason_ == null) {
        ShutdownReason = new global::LocalizedText();
      }
      ShutdownReason.MergeFrom(other.ShutdownReason);
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    if (other.HasState) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (BuildInfo_ == null) {
            BuildInfo = new global::BuildInfo();
          }
          input.ReadMessage(BuildInfo);
          break;
        }
        case 16: {
          CurrentTime = input.ReadInt64();
          break;
        }
        case 24: {
          SecondsTillShutdown = input.ReadUInt32();
          break;
        }
        case 34: {
          if (shutdownReason_ == null) {
            ShutdownReason = new global::LocalizedText();
          }
          input.ReadMessage(ShutdownReason);
          break;
        }
        case 40: {
          StartTime = input.ReadInt64();
          break;
        }
        case 48: {
          State = (global::ServerStatusDataType.Types.ServerState) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ServerStatusDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ServerState {
      [pbr::OriginalName("ServerState_CommunicationFault_6")] CommunicationFault6 = 1,
      [pbr::OriginalName("ServerState_Failed_1")] Failed1 = 2,
      [pbr::OriginalName("ServerState_NoConfiguration_2")] NoConfiguration2 = 3,
      [pbr::OriginalName("ServerState_Running_0")] Running0 = 4,
      [pbr::OriginalName("ServerState_Shutdown_4")] Shutdown4 = 5,
      [pbr::OriginalName("ServerState_Suspended_3")] Suspended3 = 6,
      [pbr::OriginalName("ServerState_Test_5")] Test5 = 7,
      [pbr::OriginalName("ServerState_Unknown_7")] Unknown7 = 8,
    }

  }
  #endregion

}

public sealed partial class ServiceCounterDataType : pb::IMessage<ServiceCounterDataType> {
  private static readonly pb::MessageParser<ServiceCounterDataType> _parser = new pb::MessageParser<ServiceCounterDataType>(() => new ServiceCounterDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServiceCounterDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[118]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceCounterDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceCounterDataType(ServiceCounterDataType other) : this() {
    _hasBits0 = other._hasBits0;
    errorCount_ = other.errorCount_;
    totalCount_ = other.totalCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceCounterDataType Clone() {
    return new ServiceCounterDataType(this);
  }

  /// <summary>Field number for the "ErrorCount" field.</summary>
  public const int ErrorCountFieldNumber = 1;
  private readonly static uint ErrorCountDefaultValue = 0;

  private uint errorCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ErrorCount {
    get { if ((_hasBits0 & 1) != 0) { return errorCount_; } else { return ErrorCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      errorCount_ = value;
    }
  }
  /// <summary>Gets whether the "ErrorCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasErrorCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ErrorCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearErrorCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "TotalCount" field.</summary>
  public const int TotalCountFieldNumber = 2;
  private readonly static uint TotalCountDefaultValue = 0;

  private uint totalCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalCount {
    get { if ((_hasBits0 & 2) != 0) { return totalCount_; } else { return TotalCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      totalCount_ = value;
    }
  }
  /// <summary>Gets whether the "TotalCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTotalCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "TotalCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTotalCount() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServiceCounterDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServiceCounterDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ErrorCount != other.ErrorCount) return false;
    if (TotalCount != other.TotalCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasErrorCount) hash ^= ErrorCount.GetHashCode();
    if (HasTotalCount) hash ^= TotalCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasErrorCount) {
      output.WriteRawTag(8);
      output.WriteUInt32(ErrorCount);
    }
    if (HasTotalCount) {
      output.WriteRawTag(16);
      output.WriteUInt32(TotalCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasErrorCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCount);
    }
    if (HasTotalCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServiceCounterDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasErrorCount) {
      ErrorCount = other.ErrorCount;
    }
    if (other.HasTotalCount) {
      TotalCount = other.TotalCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ErrorCount = input.ReadUInt32();
          break;
        }
        case 16: {
          TotalCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SessionSecurityDiagnosticsDataType : pb::IMessage<SessionSecurityDiagnosticsDataType> {
  private static readonly pb::MessageParser<SessionSecurityDiagnosticsDataType> _parser = new pb::MessageParser<SessionSecurityDiagnosticsDataType>(() => new SessionSecurityDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionSecurityDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[119]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionSecurityDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionSecurityDiagnosticsDataType(SessionSecurityDiagnosticsDataType other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationMechanism_ = other.authenticationMechanism_;
    clientCertificate_ = other.clientCertificate_;
    clientUserIdHistory_ = other.clientUserIdHistory_ != null ? other.clientUserIdHistory_.Clone() : null;
    clientUserIdOfSession_ = other.clientUserIdOfSession_;
    encoding_ = other.encoding_;
    securityMode_ = other.securityMode_;
    securityPolicyUri_ = other.securityPolicyUri_;
    sessionId_ = other.sessionId_ != null ? other.sessionId_.Clone() : null;
    transportProtocol_ = other.transportProtocol_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionSecurityDiagnosticsDataType Clone() {
    return new SessionSecurityDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "AuthenticationMechanism" field.</summary>
  public const int AuthenticationMechanismFieldNumber = 1;
  private readonly static string AuthenticationMechanismDefaultValue = "";

  private string authenticationMechanism_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationMechanism {
    get { return authenticationMechanism_ ?? AuthenticationMechanismDefaultValue; }
    set {
      authenticationMechanism_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationMechanism" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationMechanism {
    get { return authenticationMechanism_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationMechanism" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationMechanism() {
    authenticationMechanism_ = null;
  }

  /// <summary>Field number for the "ClientCertificate" field.</summary>
  public const int ClientCertificateFieldNumber = 2;
  private readonly static pb::ByteString ClientCertificateDefaultValue = pb::ByteString.Empty;

  private pb::ByteString clientCertificate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ClientCertificate {
    get { return clientCertificate_ ?? ClientCertificateDefaultValue; }
    set {
      clientCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ClientCertificate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientCertificate {
    get { return clientCertificate_ != null; }
  }
  /// <summary>Clears the value of the "ClientCertificate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientCertificate() {
    clientCertificate_ = null;
  }

  /// <summary>Field number for the "ClientUserIdHistory" field.</summary>
  public const int ClientUserIdHistoryFieldNumber = 3;
  private global::ListOfString clientUserIdHistory_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ClientUserIdHistory {
    get { return clientUserIdHistory_; }
    set {
      clientUserIdHistory_ = value;
    }
  }

  /// <summary>Field number for the "ClientUserIdOfSession" field.</summary>
  public const int ClientUserIdOfSessionFieldNumber = 4;
  private readonly static string ClientUserIdOfSessionDefaultValue = "";

  private string clientUserIdOfSession_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientUserIdOfSession {
    get { return clientUserIdOfSession_ ?? ClientUserIdOfSessionDefaultValue; }
    set {
      clientUserIdOfSession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ClientUserIdOfSession" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientUserIdOfSession {
    get { return clientUserIdOfSession_ != null; }
  }
  /// <summary>Clears the value of the "ClientUserIdOfSession" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientUserIdOfSession() {
    clientUserIdOfSession_ = null;
  }

  /// <summary>Field number for the "Encoding" field.</summary>
  public const int EncodingFieldNumber = 5;
  private readonly static string EncodingDefaultValue = "";

  private string encoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Encoding {
    get { return encoding_ ?? EncodingDefaultValue; }
    set {
      encoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Encoding" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEncoding {
    get { return encoding_ != null; }
  }
  /// <summary>Clears the value of the "Encoding" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEncoding() {
    encoding_ = null;
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 6;
  private readonly static global::SessionSecurityDiagnosticsDataType.Types.MessageSecurityMode SecurityModeDefaultValue = global::SessionSecurityDiagnosticsDataType.Types.MessageSecurityMode.Invalid0;

  private global::SessionSecurityDiagnosticsDataType.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SessionSecurityDiagnosticsDataType.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 1) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SecurityPolicyUri" field.</summary>
  public const int SecurityPolicyUriFieldNumber = 7;
  private readonly static string SecurityPolicyUriDefaultValue = "";

  private string securityPolicyUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityPolicyUri {
    get { return securityPolicyUri_ ?? SecurityPolicyUriDefaultValue; }
    set {
      securityPolicyUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityPolicyUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityPolicyUri {
    get { return securityPolicyUri_ != null; }
  }
  /// <summary>Clears the value of the "SecurityPolicyUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityPolicyUri() {
    securityPolicyUri_ = null;
  }

  /// <summary>Field number for the "SessionId" field.</summary>
  public const int SessionIdFieldNumber = 8;
  private global::NodeId sessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = value;
    }
  }

  /// <summary>Field number for the "TransportProtocol" field.</summary>
  public const int TransportProtocolFieldNumber = 9;
  private readonly static string TransportProtocolDefaultValue = "";

  private string transportProtocol_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TransportProtocol {
    get { return transportProtocol_ ?? TransportProtocolDefaultValue; }
    set {
      transportProtocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "TransportProtocol" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransportProtocol {
    get { return transportProtocol_ != null; }
  }
  /// <summary>Clears the value of the "TransportProtocol" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransportProtocol() {
    transportProtocol_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionSecurityDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionSecurityDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationMechanism != other.AuthenticationMechanism) return false;
    if (ClientCertificate != other.ClientCertificate) return false;
    if (!object.Equals(ClientUserIdHistory, other.ClientUserIdHistory)) return false;
    if (ClientUserIdOfSession != other.ClientUserIdOfSession) return false;
    if (Encoding != other.Encoding) return false;
    if (SecurityMode != other.SecurityMode) return false;
    if (SecurityPolicyUri != other.SecurityPolicyUri) return false;
    if (!object.Equals(SessionId, other.SessionId)) return false;
    if (TransportProtocol != other.TransportProtocol) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationMechanism) hash ^= AuthenticationMechanism.GetHashCode();
    if (HasClientCertificate) hash ^= ClientCertificate.GetHashCode();
    if (clientUserIdHistory_ != null) hash ^= ClientUserIdHistory.GetHashCode();
    if (HasClientUserIdOfSession) hash ^= ClientUserIdOfSession.GetHashCode();
    if (HasEncoding) hash ^= Encoding.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (HasSecurityPolicyUri) hash ^= SecurityPolicyUri.GetHashCode();
    if (sessionId_ != null) hash ^= SessionId.GetHashCode();
    if (HasTransportProtocol) hash ^= TransportProtocol.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationMechanism) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationMechanism);
    }
    if (HasClientCertificate) {
      output.WriteRawTag(18);
      output.WriteBytes(ClientCertificate);
    }
    if (clientUserIdHistory_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ClientUserIdHistory);
    }
    if (HasClientUserIdOfSession) {
      output.WriteRawTag(34);
      output.WriteString(ClientUserIdOfSession);
    }
    if (HasEncoding) {
      output.WriteRawTag(42);
      output.WriteString(Encoding);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(48);
      output.WriteEnum((int) SecurityMode);
    }
    if (HasSecurityPolicyUri) {
      output.WriteRawTag(58);
      output.WriteString(SecurityPolicyUri);
    }
    if (sessionId_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SessionId);
    }
    if (HasTransportProtocol) {
      output.WriteRawTag(74);
      output.WriteString(TransportProtocol);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationMechanism) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationMechanism);
    }
    if (HasClientCertificate) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientCertificate);
    }
    if (clientUserIdHistory_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientUserIdHistory);
    }
    if (HasClientUserIdOfSession) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientUserIdOfSession);
    }
    if (HasEncoding) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Encoding);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (HasSecurityPolicyUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityPolicyUri);
    }
    if (sessionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionId);
    }
    if (HasTransportProtocol) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TransportProtocol);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionSecurityDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationMechanism) {
      AuthenticationMechanism = other.AuthenticationMechanism;
    }
    if (other.HasClientCertificate) {
      ClientCertificate = other.ClientCertificate;
    }
    if (other.clientUserIdHistory_ != null) {
      if (clientUserIdHistory_ == null) {
        ClientUserIdHistory = new global::ListOfString();
      }
      ClientUserIdHistory.MergeFrom(other.ClientUserIdHistory);
    }
    if (other.HasClientUserIdOfSession) {
      ClientUserIdOfSession = other.ClientUserIdOfSession;
    }
    if (other.HasEncoding) {
      Encoding = other.Encoding;
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    if (other.HasSecurityPolicyUri) {
      SecurityPolicyUri = other.SecurityPolicyUri;
    }
    if (other.sessionId_ != null) {
      if (sessionId_ == null) {
        SessionId = new global::NodeId();
      }
      SessionId.MergeFrom(other.SessionId);
    }
    if (other.HasTransportProtocol) {
      TransportProtocol = other.TransportProtocol;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationMechanism = input.ReadString();
          break;
        }
        case 18: {
          ClientCertificate = input.ReadBytes();
          break;
        }
        case 26: {
          if (clientUserIdHistory_ == null) {
            ClientUserIdHistory = new global::ListOfString();
          }
          input.ReadMessage(ClientUserIdHistory);
          break;
        }
        case 34: {
          ClientUserIdOfSession = input.ReadString();
          break;
        }
        case 42: {
          Encoding = input.ReadString();
          break;
        }
        case 48: {
          SecurityMode = (global::SessionSecurityDiagnosticsDataType.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
        case 58: {
          SecurityPolicyUri = input.ReadString();
          break;
        }
        case 66: {
          if (sessionId_ == null) {
            SessionId = new global::NodeId();
          }
          input.ReadMessage(SessionId);
          break;
        }
        case 74: {
          TransportProtocol = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the SessionSecurityDiagnosticsDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class SessionlessInvokeRequestType : pb::IMessage<SessionlessInvokeRequestType> {
  private static readonly pb::MessageParser<SessionlessInvokeRequestType> _parser = new pb::MessageParser<SessionlessInvokeRequestType>(() => new SessionlessInvokeRequestType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionlessInvokeRequestType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[120]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionlessInvokeRequestType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionlessInvokeRequestType(SessionlessInvokeRequestType other) : this() {
    _hasBits0 = other._hasBits0;
    localeIds_ = other.localeIds_ != null ? other.localeIds_.Clone() : null;
    namespaceUris_ = other.namespaceUris_ != null ? other.namespaceUris_.Clone() : null;
    serverUris_ = other.serverUris_ != null ? other.serverUris_.Clone() : null;
    serviceId_ = other.serviceId_;
    urisVersion_ = other.urisVersion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionlessInvokeRequestType Clone() {
    return new SessionlessInvokeRequestType(this);
  }

  /// <summary>Field number for the "LocaleIds" field.</summary>
  public const int LocaleIdsFieldNumber = 1;
  private global::ListOfString localeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString LocaleIds {
    get { return localeIds_; }
    set {
      localeIds_ = value;
    }
  }

  /// <summary>Field number for the "NamespaceUris" field.</summary>
  public const int NamespaceUrisFieldNumber = 2;
  private global::ListOfString namespaceUris_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString NamespaceUris {
    get { return namespaceUris_; }
    set {
      namespaceUris_ = value;
    }
  }

  /// <summary>Field number for the "ServerUris" field.</summary>
  public const int ServerUrisFieldNumber = 3;
  private global::ListOfString serverUris_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ServerUris {
    get { return serverUris_; }
    set {
      serverUris_ = value;
    }
  }

  /// <summary>Field number for the "ServiceId" field.</summary>
  public const int ServiceIdFieldNumber = 4;
  private readonly static uint ServiceIdDefaultValue = 0;

  private uint serviceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServiceId {
    get { if ((_hasBits0 & 1) != 0) { return serviceId_; } else { return ServiceIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serviceId_ = value;
    }
  }
  /// <summary>Gets whether the "ServiceId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServiceId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ServiceId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServiceId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "UrisVersion" field.</summary>
  public const int UrisVersionFieldNumber = 5;
  private readonly static uint UrisVersionDefaultValue = 0;

  private uint urisVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UrisVersion {
    get { if ((_hasBits0 & 2) != 0) { return urisVersion_; } else { return UrisVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      urisVersion_ = value;
    }
  }
  /// <summary>Gets whether the "UrisVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUrisVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "UrisVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUrisVersion() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionlessInvokeRequestType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionlessInvokeRequestType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LocaleIds, other.LocaleIds)) return false;
    if (!object.Equals(NamespaceUris, other.NamespaceUris)) return false;
    if (!object.Equals(ServerUris, other.ServerUris)) return false;
    if (ServiceId != other.ServiceId) return false;
    if (UrisVersion != other.UrisVersion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (localeIds_ != null) hash ^= LocaleIds.GetHashCode();
    if (namespaceUris_ != null) hash ^= NamespaceUris.GetHashCode();
    if (serverUris_ != null) hash ^= ServerUris.GetHashCode();
    if (HasServiceId) hash ^= ServiceId.GetHashCode();
    if (HasUrisVersion) hash ^= UrisVersion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (localeIds_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(LocaleIds);
    }
    if (namespaceUris_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NamespaceUris);
    }
    if (serverUris_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ServerUris);
    }
    if (HasServiceId) {
      output.WriteRawTag(32);
      output.WriteUInt32(ServiceId);
    }
    if (HasUrisVersion) {
      output.WriteRawTag(40);
      output.WriteUInt32(UrisVersion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (localeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocaleIds);
    }
    if (namespaceUris_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NamespaceUris);
    }
    if (serverUris_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerUris);
    }
    if (HasServiceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceId);
    }
    if (HasUrisVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UrisVersion);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionlessInvokeRequestType other) {
    if (other == null) {
      return;
    }
    if (other.localeIds_ != null) {
      if (localeIds_ == null) {
        LocaleIds = new global::ListOfString();
      }
      LocaleIds.MergeFrom(other.LocaleIds);
    }
    if (other.namespaceUris_ != null) {
      if (namespaceUris_ == null) {
        NamespaceUris = new global::ListOfString();
      }
      NamespaceUris.MergeFrom(other.NamespaceUris);
    }
    if (other.serverUris_ != null) {
      if (serverUris_ == null) {
        ServerUris = new global::ListOfString();
      }
      ServerUris.MergeFrom(other.ServerUris);
    }
    if (other.HasServiceId) {
      ServiceId = other.ServiceId;
    }
    if (other.HasUrisVersion) {
      UrisVersion = other.UrisVersion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (localeIds_ == null) {
            LocaleIds = new global::ListOfString();
          }
          input.ReadMessage(LocaleIds);
          break;
        }
        case 18: {
          if (namespaceUris_ == null) {
            NamespaceUris = new global::ListOfString();
          }
          input.ReadMessage(NamespaceUris);
          break;
        }
        case 26: {
          if (serverUris_ == null) {
            ServerUris = new global::ListOfString();
          }
          input.ReadMessage(ServerUris);
          break;
        }
        case 32: {
          ServiceId = input.ReadUInt32();
          break;
        }
        case 40: {
          UrisVersion = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SessionlessInvokeResponseType : pb::IMessage<SessionlessInvokeResponseType> {
  private static readonly pb::MessageParser<SessionlessInvokeResponseType> _parser = new pb::MessageParser<SessionlessInvokeResponseType>(() => new SessionlessInvokeResponseType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionlessInvokeResponseType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[121]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionlessInvokeResponseType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionlessInvokeResponseType(SessionlessInvokeResponseType other) : this() {
    _hasBits0 = other._hasBits0;
    namespaceUris_ = other.namespaceUris_ != null ? other.namespaceUris_.Clone() : null;
    serverUris_ = other.serverUris_ != null ? other.serverUris_.Clone() : null;
    serviceId_ = other.serviceId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionlessInvokeResponseType Clone() {
    return new SessionlessInvokeResponseType(this);
  }

  /// <summary>Field number for the "NamespaceUris" field.</summary>
  public const int NamespaceUrisFieldNumber = 1;
  private global::ListOfString namespaceUris_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString NamespaceUris {
    get { return namespaceUris_; }
    set {
      namespaceUris_ = value;
    }
  }

  /// <summary>Field number for the "ServerUris" field.</summary>
  public const int ServerUrisFieldNumber = 2;
  private global::ListOfString serverUris_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ServerUris {
    get { return serverUris_; }
    set {
      serverUris_ = value;
    }
  }

  /// <summary>Field number for the "ServiceId" field.</summary>
  public const int ServiceIdFieldNumber = 3;
  private readonly static uint ServiceIdDefaultValue = 0;

  private uint serviceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServiceId {
    get { if ((_hasBits0 & 1) != 0) { return serviceId_; } else { return ServiceIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serviceId_ = value;
    }
  }
  /// <summary>Gets whether the "ServiceId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServiceId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ServiceId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServiceId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionlessInvokeResponseType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionlessInvokeResponseType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NamespaceUris, other.NamespaceUris)) return false;
    if (!object.Equals(ServerUris, other.ServerUris)) return false;
    if (ServiceId != other.ServiceId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (namespaceUris_ != null) hash ^= NamespaceUris.GetHashCode();
    if (serverUris_ != null) hash ^= ServerUris.GetHashCode();
    if (HasServiceId) hash ^= ServiceId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (namespaceUris_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NamespaceUris);
    }
    if (serverUris_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ServerUris);
    }
    if (HasServiceId) {
      output.WriteRawTag(24);
      output.WriteUInt32(ServiceId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (namespaceUris_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NamespaceUris);
    }
    if (serverUris_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerUris);
    }
    if (HasServiceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionlessInvokeResponseType other) {
    if (other == null) {
      return;
    }
    if (other.namespaceUris_ != null) {
      if (namespaceUris_ == null) {
        NamespaceUris = new global::ListOfString();
      }
      NamespaceUris.MergeFrom(other.NamespaceUris);
    }
    if (other.serverUris_ != null) {
      if (serverUris_ == null) {
        ServerUris = new global::ListOfString();
      }
      ServerUris.MergeFrom(other.ServerUris);
    }
    if (other.HasServiceId) {
      ServiceId = other.ServiceId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (namespaceUris_ == null) {
            NamespaceUris = new global::ListOfString();
          }
          input.ReadMessage(NamespaceUris);
          break;
        }
        case 18: {
          if (serverUris_ == null) {
            ServerUris = new global::ListOfString();
          }
          input.ReadMessage(ServerUris);
          break;
        }
        case 24: {
          ServiceId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SignatureData : pb::IMessage<SignatureData> {
  private static readonly pb::MessageParser<SignatureData> _parser = new pb::MessageParser<SignatureData>(() => new SignatureData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SignatureData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[122]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignatureData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignatureData(SignatureData other) : this() {
    algorithm_ = other.algorithm_;
    signature_ = other.signature_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignatureData Clone() {
    return new SignatureData(this);
  }

  /// <summary>Field number for the "Algorithm" field.</summary>
  public const int AlgorithmFieldNumber = 1;
  private readonly static string AlgorithmDefaultValue = "";

  private string algorithm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Algorithm {
    get { return algorithm_ ?? AlgorithmDefaultValue; }
    set {
      algorithm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Algorithm" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAlgorithm {
    get { return algorithm_ != null; }
  }
  /// <summary>Clears the value of the "Algorithm" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAlgorithm() {
    algorithm_ = null;
  }

  /// <summary>Field number for the "Signature" field.</summary>
  public const int SignatureFieldNumber = 2;
  private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Signature {
    get { return signature_ ?? SignatureDefaultValue; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Signature" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSignature {
    get { return signature_ != null; }
  }
  /// <summary>Clears the value of the "Signature" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSignature() {
    signature_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SignatureData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SignatureData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Algorithm != other.Algorithm) return false;
    if (Signature != other.Signature) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAlgorithm) hash ^= Algorithm.GetHashCode();
    if (HasSignature) hash ^= Signature.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAlgorithm) {
      output.WriteRawTag(10);
      output.WriteString(Algorithm);
    }
    if (HasSignature) {
      output.WriteRawTag(18);
      output.WriteBytes(Signature);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAlgorithm) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Algorithm);
    }
    if (HasSignature) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SignatureData other) {
    if (other == null) {
      return;
    }
    if (other.HasAlgorithm) {
      Algorithm = other.Algorithm;
    }
    if (other.HasSignature) {
      Signature = other.Signature;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Algorithm = input.ReadString();
          break;
        }
        case 18: {
          Signature = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class SignedSoftwareCertificate : pb::IMessage<SignedSoftwareCertificate> {
  private static readonly pb::MessageParser<SignedSoftwareCertificate> _parser = new pb::MessageParser<SignedSoftwareCertificate>(() => new SignedSoftwareCertificate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SignedSoftwareCertificate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[123]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignedSoftwareCertificate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignedSoftwareCertificate(SignedSoftwareCertificate other) : this() {
    certificateData_ = other.certificateData_;
    signature_ = other.signature_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignedSoftwareCertificate Clone() {
    return new SignedSoftwareCertificate(this);
  }

  /// <summary>Field number for the "CertificateData" field.</summary>
  public const int CertificateDataFieldNumber = 1;
  private readonly static pb::ByteString CertificateDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString certificateData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CertificateData {
    get { return certificateData_ ?? CertificateDataDefaultValue; }
    set {
      certificateData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "CertificateData" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCertificateData {
    get { return certificateData_ != null; }
  }
  /// <summary>Clears the value of the "CertificateData" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCertificateData() {
    certificateData_ = null;
  }

  /// <summary>Field number for the "Signature" field.</summary>
  public const int SignatureFieldNumber = 2;
  private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Signature {
    get { return signature_ ?? SignatureDefaultValue; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Signature" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSignature {
    get { return signature_ != null; }
  }
  /// <summary>Clears the value of the "Signature" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSignature() {
    signature_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SignedSoftwareCertificate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SignedSoftwareCertificate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CertificateData != other.CertificateData) return false;
    if (Signature != other.Signature) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCertificateData) hash ^= CertificateData.GetHashCode();
    if (HasSignature) hash ^= Signature.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCertificateData) {
      output.WriteRawTag(10);
      output.WriteBytes(CertificateData);
    }
    if (HasSignature) {
      output.WriteRawTag(18);
      output.WriteBytes(Signature);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCertificateData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CertificateData);
    }
    if (HasSignature) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SignedSoftwareCertificate other) {
    if (other == null) {
      return;
    }
    if (other.HasCertificateData) {
      CertificateData = other.CertificateData;
    }
    if (other.HasSignature) {
      Signature = other.Signature;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CertificateData = input.ReadBytes();
          break;
        }
        case 18: {
          Signature = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class SimpleTypeDescription : pb::IMessage<SimpleTypeDescription> {
  private static readonly pb::MessageParser<SimpleTypeDescription> _parser = new pb::MessageParser<SimpleTypeDescription>(() => new SimpleTypeDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SimpleTypeDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[124]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SimpleTypeDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SimpleTypeDescription(SimpleTypeDescription other) : this() {
    _hasBits0 = other._hasBits0;
    baseDataType_ = other.baseDataType_ != null ? other.baseDataType_.Clone() : null;
    builtInType_ = other.builtInType_;
    dataTypeId_ = other.dataTypeId_ != null ? other.dataTypeId_.Clone() : null;
    name_ = other.name_ != null ? other.name_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SimpleTypeDescription Clone() {
    return new SimpleTypeDescription(this);
  }

  /// <summary>Field number for the "BaseDataType" field.</summary>
  public const int BaseDataTypeFieldNumber = 1;
  private global::NodeId baseDataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId BaseDataType {
    get { return baseDataType_; }
    set {
      baseDataType_ = value;
    }
  }

  /// <summary>Field number for the "BuiltInType" field.</summary>
  public const int BuiltInTypeFieldNumber = 2;
  private readonly static uint BuiltInTypeDefaultValue = 0;

  private uint builtInType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BuiltInType {
    get { if ((_hasBits0 & 1) != 0) { return builtInType_; } else { return BuiltInTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      builtInType_ = value;
    }
  }
  /// <summary>Gets whether the "BuiltInType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBuiltInType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "BuiltInType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBuiltInType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataTypeId" field.</summary>
  public const int DataTypeIdFieldNumber = 3;
  private global::NodeId dataTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataTypeId {
    get { return dataTypeId_; }
    set {
      dataTypeId_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 4;
  private global::QualifiedName name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName Name {
    get { return name_; }
    set {
      name_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SimpleTypeDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SimpleTypeDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseDataType, other.BaseDataType)) return false;
    if (BuiltInType != other.BuiltInType) return false;
    if (!object.Equals(DataTypeId, other.DataTypeId)) return false;
    if (!object.Equals(Name, other.Name)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseDataType_ != null) hash ^= BaseDataType.GetHashCode();
    if (HasBuiltInType) hash ^= BuiltInType.GetHashCode();
    if (dataTypeId_ != null) hash ^= DataTypeId.GetHashCode();
    if (name_ != null) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseDataType_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseDataType);
    }
    if (HasBuiltInType) {
      output.WriteRawTag(16);
      output.WriteUInt32(BuiltInType);
    }
    if (dataTypeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataTypeId);
    }
    if (name_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseDataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseDataType);
    }
    if (HasBuiltInType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuiltInType);
    }
    if (dataTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTypeId);
    }
    if (name_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SimpleTypeDescription other) {
    if (other == null) {
      return;
    }
    if (other.baseDataType_ != null) {
      if (baseDataType_ == null) {
        BaseDataType = new global::NodeId();
      }
      BaseDataType.MergeFrom(other.BaseDataType);
    }
    if (other.HasBuiltInType) {
      BuiltInType = other.BuiltInType;
    }
    if (other.dataTypeId_ != null) {
      if (dataTypeId_ == null) {
        DataTypeId = new global::NodeId();
      }
      DataTypeId.MergeFrom(other.DataTypeId);
    }
    if (other.name_ != null) {
      if (name_ == null) {
        Name = new global::QualifiedName();
      }
      Name.MergeFrom(other.Name);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (baseDataType_ == null) {
            BaseDataType = new global::NodeId();
          }
          input.ReadMessage(BaseDataType);
          break;
        }
        case 16: {
          BuiltInType = input.ReadUInt32();
          break;
        }
        case 26: {
          if (dataTypeId_ == null) {
            DataTypeId = new global::NodeId();
          }
          input.ReadMessage(DataTypeId);
          break;
        }
        case 34: {
          if (name_ == null) {
            Name = new global::QualifiedName();
          }
          input.ReadMessage(Name);
          break;
        }
      }
    }
  }

}

public sealed partial class StatusCode : pb::IMessage<StatusCode> {
  private static readonly pb::MessageParser<StatusCode> _parser = new pb::MessageParser<StatusCode>(() => new StatusCode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StatusCode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[125]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusCode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusCode(StatusCode other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusCode Clone() {
    return new StatusCode(this);
  }

  /// <summary>Field number for the "Code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static uint CodeDefaultValue = 0;

  private uint code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "Code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StatusCode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StatusCode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteUInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StatusCode other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class StructureField : pb::IMessage<StructureField> {
  private static readonly pb::MessageParser<StructureField> _parser = new pb::MessageParser<StructureField>(() => new StructureField());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StructureField> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[126]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureField() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureField(StructureField other) : this() {
    _hasBits0 = other._hasBits0;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    isOptional_ = other.isOptional_;
    maxStringLength_ = other.maxStringLength_;
    name_ = other.name_;
    valueRank_ = other.valueRank_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureField Clone() {
    return new StructureField(this);
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 1;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 2;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "IsOptional" field.</summary>
  public const int IsOptionalFieldNumber = 4;
  private readonly static bool IsOptionalDefaultValue = false;

  private bool isOptional_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOptional {
    get { if ((_hasBits0 & 1) != 0) { return isOptional_; } else { return IsOptionalDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isOptional_ = value;
    }
  }
  /// <summary>Gets whether the "IsOptional" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsOptional {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsOptional" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsOptional() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "MaxStringLength" field.</summary>
  public const int MaxStringLengthFieldNumber = 5;
  private readonly static uint MaxStringLengthDefaultValue = 0;

  private uint maxStringLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxStringLength {
    get { if ((_hasBits0 & 2) != 0) { return maxStringLength_; } else { return MaxStringLengthDefaultValue; } }
    set {
      _hasBits0 |= 2;
      maxStringLength_ = value;
    }
  }
  /// <summary>Gets whether the "MaxStringLength" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxStringLength {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MaxStringLength" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxStringLength() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 6;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 7;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 4) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 4;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StructureField);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StructureField other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (IsOptional != other.IsOptional) return false;
    if (MaxStringLength != other.MaxStringLength) return false;
    if (Name != other.Name) return false;
    if (ValueRank != other.ValueRank) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (HasIsOptional) hash ^= IsOptional.GetHashCode();
    if (HasMaxStringLength) hash ^= MaxStringLength.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (arrayDimensions_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ArrayDimensions);
    }
    if (dataType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (HasIsOptional) {
      output.WriteRawTag(32);
      output.WriteBool(IsOptional);
    }
    if (HasMaxStringLength) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxStringLength);
    }
    if (HasName) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (HasValueRank) {
      output.WriteRawTag(56);
      output.WriteInt32(ValueRank);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (HasIsOptional) {
      size += 1 + 1;
    }
    if (HasMaxStringLength) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxStringLength);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasValueRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StructureField other) {
    if (other == null) {
      return;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.HasIsOptional) {
      IsOptional = other.IsOptional;
    }
    if (other.HasMaxStringLength) {
      MaxStringLength = other.MaxStringLength;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 18: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 32: {
          IsOptional = input.ReadBool();
          break;
        }
        case 40: {
          MaxStringLength = input.ReadUInt32();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 56: {
          ValueRank = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SubscriptionAcknowledgement : pb::IMessage<SubscriptionAcknowledgement> {
  private static readonly pb::MessageParser<SubscriptionAcknowledgement> _parser = new pb::MessageParser<SubscriptionAcknowledgement>(() => new SubscriptionAcknowledgement());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SubscriptionAcknowledgement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[127]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscriptionAcknowledgement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscriptionAcknowledgement(SubscriptionAcknowledgement other) : this() {
    _hasBits0 = other._hasBits0;
    sequenceNumber_ = other.sequenceNumber_;
    subscriptionId_ = other.subscriptionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscriptionAcknowledgement Clone() {
    return new SubscriptionAcknowledgement(this);
  }

  /// <summary>Field number for the "SequenceNumber" field.</summary>
  public const int SequenceNumberFieldNumber = 1;
  private readonly static uint SequenceNumberDefaultValue = 0;

  private uint sequenceNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SequenceNumber {
    get { if ((_hasBits0 & 1) != 0) { return sequenceNumber_; } else { return SequenceNumberDefaultValue; } }
    set {
      _hasBits0 |= 1;
      sequenceNumber_ = value;
    }
  }
  /// <summary>Gets whether the "SequenceNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSequenceNumber {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SequenceNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSequenceNumber() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 2;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 2) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SubscriptionAcknowledgement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SubscriptionAcknowledgement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SequenceNumber != other.SequenceNumber) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSequenceNumber) hash ^= SequenceNumber.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasSequenceNumber) {
      output.WriteRawTag(8);
      output.WriteUInt32(SequenceNumber);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(SubscriptionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSequenceNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceNumber);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SubscriptionAcknowledgement other) {
    if (other == null) {
      return;
    }
    if (other.HasSequenceNumber) {
      SequenceNumber = other.SequenceNumber;
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SequenceNumber = input.ReadUInt32();
          break;
        }
        case 16: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SubscriptionDiagnosticsDataType : pb::IMessage<SubscriptionDiagnosticsDataType> {
  private static readonly pb::MessageParser<SubscriptionDiagnosticsDataType> _parser = new pb::MessageParser<SubscriptionDiagnosticsDataType>(() => new SubscriptionDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SubscriptionDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[128]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscriptionDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscriptionDiagnosticsDataType(SubscriptionDiagnosticsDataType other) : this() {
    _hasBits0 = other._hasBits0;
    currentKeepAliveCount_ = other.currentKeepAliveCount_;
    currentLifetimeCount_ = other.currentLifetimeCount_;
    dataChangeNotificationsCount_ = other.dataChangeNotificationsCount_;
    disableCount_ = other.disableCount_;
    disabledMonitoredItemCount_ = other.disabledMonitoredItemCount_;
    discardedMessageCount_ = other.discardedMessageCount_;
    enableCount_ = other.enableCount_;
    eventNotificationsCount_ = other.eventNotificationsCount_;
    eventQueueOverFlowCount_ = other.eventQueueOverFlowCount_;
    latePublishRequestCount_ = other.latePublishRequestCount_;
    maxKeepAliveCount_ = other.maxKeepAliveCount_;
    maxLifetimeCount_ = other.maxLifetimeCount_;
    maxNotificationsPerPublish_ = other.maxNotificationsPerPublish_;
    modifyCount_ = other.modifyCount_;
    monitoredItemCount_ = other.monitoredItemCount_;
    monitoringQueueOverflowCount_ = other.monitoringQueueOverflowCount_;
    nextSequenceNumber_ = other.nextSequenceNumber_;
    notificationsCount_ = other.notificationsCount_;
    priority_ = other.priority_;
    publishRequestCount_ = other.publishRequestCount_;
    publishingEnabled_ = other.publishingEnabled_;
    publishingInterval_ = other.publishingInterval_;
    republishMessageCount_ = other.republishMessageCount_;
    republishMessageRequestCount_ = other.republishMessageRequestCount_;
    republishRequestCount_ = other.republishRequestCount_;
    sessionId_ = other.sessionId_ != null ? other.sessionId_.Clone() : null;
    subscriptionId_ = other.subscriptionId_;
    transferRequestCount_ = other.transferRequestCount_;
    transferredToAltClientCount_ = other.transferredToAltClientCount_;
    transferredToSameClientCount_ = other.transferredToSameClientCount_;
    unacknowledgedMessageCount_ = other.unacknowledgedMessageCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscriptionDiagnosticsDataType Clone() {
    return new SubscriptionDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "CurrentKeepAliveCount" field.</summary>
  public const int CurrentKeepAliveCountFieldNumber = 1;
  private readonly static uint CurrentKeepAliveCountDefaultValue = 0;

  private uint currentKeepAliveCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentKeepAliveCount {
    get { if ((_hasBits0 & 1) != 0) { return currentKeepAliveCount_; } else { return CurrentKeepAliveCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      currentKeepAliveCount_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentKeepAliveCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentKeepAliveCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "CurrentKeepAliveCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentKeepAliveCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "CurrentLifetimeCount" field.</summary>
  public const int CurrentLifetimeCountFieldNumber = 2;
  private readonly static uint CurrentLifetimeCountDefaultValue = 0;

  private uint currentLifetimeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentLifetimeCount {
    get { if ((_hasBits0 & 2) != 0) { return currentLifetimeCount_; } else { return CurrentLifetimeCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      currentLifetimeCount_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentLifetimeCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentLifetimeCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "CurrentLifetimeCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentLifetimeCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "DataChangeNotificationsCount" field.</summary>
  public const int DataChangeNotificationsCountFieldNumber = 3;
  private readonly static uint DataChangeNotificationsCountDefaultValue = 0;

  private uint dataChangeNotificationsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataChangeNotificationsCount {
    get { if ((_hasBits0 & 4) != 0) { return dataChangeNotificationsCount_; } else { return DataChangeNotificationsCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      dataChangeNotificationsCount_ = value;
    }
  }
  /// <summary>Gets whether the "DataChangeNotificationsCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataChangeNotificationsCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "DataChangeNotificationsCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataChangeNotificationsCount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "DisableCount" field.</summary>
  public const int DisableCountFieldNumber = 4;
  private readonly static uint DisableCountDefaultValue = 0;

  private uint disableCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DisableCount {
    get { if ((_hasBits0 & 8) != 0) { return disableCount_; } else { return DisableCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      disableCount_ = value;
    }
  }
  /// <summary>Gets whether the "DisableCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisableCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "DisableCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisableCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "DisabledMonitoredItemCount" field.</summary>
  public const int DisabledMonitoredItemCountFieldNumber = 5;
  private readonly static uint DisabledMonitoredItemCountDefaultValue = 0;

  private uint disabledMonitoredItemCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DisabledMonitoredItemCount {
    get { if ((_hasBits0 & 16) != 0) { return disabledMonitoredItemCount_; } else { return DisabledMonitoredItemCountDefaultValue; } }
    set {
      _hasBits0 |= 16;
      disabledMonitoredItemCount_ = value;
    }
  }
  /// <summary>Gets whether the "DisabledMonitoredItemCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDisabledMonitoredItemCount {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "DisabledMonitoredItemCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDisabledMonitoredItemCount() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "DiscardedMessageCount" field.</summary>
  public const int DiscardedMessageCountFieldNumber = 6;
  private readonly static uint DiscardedMessageCountDefaultValue = 0;

  private uint discardedMessageCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DiscardedMessageCount {
    get { if ((_hasBits0 & 32) != 0) { return discardedMessageCount_; } else { return DiscardedMessageCountDefaultValue; } }
    set {
      _hasBits0 |= 32;
      discardedMessageCount_ = value;
    }
  }
  /// <summary>Gets whether the "DiscardedMessageCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDiscardedMessageCount {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "DiscardedMessageCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDiscardedMessageCount() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "EnableCount" field.</summary>
  public const int EnableCountFieldNumber = 7;
  private readonly static uint EnableCountDefaultValue = 0;

  private uint enableCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnableCount {
    get { if ((_hasBits0 & 64) != 0) { return enableCount_; } else { return EnableCountDefaultValue; } }
    set {
      _hasBits0 |= 64;
      enableCount_ = value;
    }
  }
  /// <summary>Gets whether the "EnableCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnableCount {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "EnableCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnableCount() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "EventNotificationsCount" field.</summary>
  public const int EventNotificationsCountFieldNumber = 8;
  private readonly static uint EventNotificationsCountDefaultValue = 0;

  private uint eventNotificationsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotificationsCount {
    get { if ((_hasBits0 & 128) != 0) { return eventNotificationsCount_; } else { return EventNotificationsCountDefaultValue; } }
    set {
      _hasBits0 |= 128;
      eventNotificationsCount_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotificationsCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotificationsCount {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "EventNotificationsCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotificationsCount() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "EventQueueOverFlowCount" field.</summary>
  public const int EventQueueOverFlowCountFieldNumber = 9;
  private readonly static uint EventQueueOverFlowCountDefaultValue = 0;

  private uint eventQueueOverFlowCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventQueueOverFlowCount {
    get { if ((_hasBits0 & 256) != 0) { return eventQueueOverFlowCount_; } else { return EventQueueOverFlowCountDefaultValue; } }
    set {
      _hasBits0 |= 256;
      eventQueueOverFlowCount_ = value;
    }
  }
  /// <summary>Gets whether the "EventQueueOverFlowCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventQueueOverFlowCount {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "EventQueueOverFlowCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventQueueOverFlowCount() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "LatePublishRequestCount" field.</summary>
  public const int LatePublishRequestCountFieldNumber = 10;
  private readonly static uint LatePublishRequestCountDefaultValue = 0;

  private uint latePublishRequestCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LatePublishRequestCount {
    get { if ((_hasBits0 & 512) != 0) { return latePublishRequestCount_; } else { return LatePublishRequestCountDefaultValue; } }
    set {
      _hasBits0 |= 512;
      latePublishRequestCount_ = value;
    }
  }
  /// <summary>Gets whether the "LatePublishRequestCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLatePublishRequestCount {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "LatePublishRequestCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLatePublishRequestCount() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "MaxKeepAliveCount" field.</summary>
  public const int MaxKeepAliveCountFieldNumber = 11;
  private readonly static uint MaxKeepAliveCountDefaultValue = 0;

  private uint maxKeepAliveCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxKeepAliveCount {
    get { if ((_hasBits0 & 1024) != 0) { return maxKeepAliveCount_; } else { return MaxKeepAliveCountDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      maxKeepAliveCount_ = value;
    }
  }
  /// <summary>Gets whether the "MaxKeepAliveCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxKeepAliveCount {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "MaxKeepAliveCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxKeepAliveCount() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "MaxLifetimeCount" field.</summary>
  public const int MaxLifetimeCountFieldNumber = 12;
  private readonly static uint MaxLifetimeCountDefaultValue = 0;

  private uint maxLifetimeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxLifetimeCount {
    get { if ((_hasBits0 & 2048) != 0) { return maxLifetimeCount_; } else { return MaxLifetimeCountDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      maxLifetimeCount_ = value;
    }
  }
  /// <summary>Gets whether the "MaxLifetimeCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxLifetimeCount {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "MaxLifetimeCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxLifetimeCount() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "MaxNotificationsPerPublish" field.</summary>
  public const int MaxNotificationsPerPublishFieldNumber = 13;
  private readonly static uint MaxNotificationsPerPublishDefaultValue = 0;

  private uint maxNotificationsPerPublish_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxNotificationsPerPublish {
    get { if ((_hasBits0 & 4096) != 0) { return maxNotificationsPerPublish_; } else { return MaxNotificationsPerPublishDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      maxNotificationsPerPublish_ = value;
    }
  }
  /// <summary>Gets whether the "MaxNotificationsPerPublish" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxNotificationsPerPublish {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "MaxNotificationsPerPublish" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxNotificationsPerPublish() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "ModifyCount" field.</summary>
  public const int ModifyCountFieldNumber = 14;
  private readonly static uint ModifyCountDefaultValue = 0;

  private uint modifyCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ModifyCount {
    get { if ((_hasBits0 & 8192) != 0) { return modifyCount_; } else { return ModifyCountDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      modifyCount_ = value;
    }
  }
  /// <summary>Gets whether the "ModifyCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasModifyCount {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "ModifyCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearModifyCount() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "MonitoredItemCount" field.</summary>
  public const int MonitoredItemCountFieldNumber = 15;
  private readonly static uint MonitoredItemCountDefaultValue = 0;

  private uint monitoredItemCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MonitoredItemCount {
    get { if ((_hasBits0 & 16384) != 0) { return monitoredItemCount_; } else { return MonitoredItemCountDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      monitoredItemCount_ = value;
    }
  }
  /// <summary>Gets whether the "MonitoredItemCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMonitoredItemCount {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "MonitoredItemCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMonitoredItemCount() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "MonitoringQueueOverflowCount" field.</summary>
  public const int MonitoringQueueOverflowCountFieldNumber = 16;
  private readonly static uint MonitoringQueueOverflowCountDefaultValue = 0;

  private uint monitoringQueueOverflowCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MonitoringQueueOverflowCount {
    get { if ((_hasBits0 & 32768) != 0) { return monitoringQueueOverflowCount_; } else { return MonitoringQueueOverflowCountDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      monitoringQueueOverflowCount_ = value;
    }
  }
  /// <summary>Gets whether the "MonitoringQueueOverflowCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMonitoringQueueOverflowCount {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "MonitoringQueueOverflowCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMonitoringQueueOverflowCount() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "NextSequenceNumber" field.</summary>
  public const int NextSequenceNumberFieldNumber = 17;
  private readonly static uint NextSequenceNumberDefaultValue = 0;

  private uint nextSequenceNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NextSequenceNumber {
    get { if ((_hasBits0 & 65536) != 0) { return nextSequenceNumber_; } else { return NextSequenceNumberDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      nextSequenceNumber_ = value;
    }
  }
  /// <summary>Gets whether the "NextSequenceNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNextSequenceNumber {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "NextSequenceNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNextSequenceNumber() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "NotificationsCount" field.</summary>
  public const int NotificationsCountFieldNumber = 18;
  private readonly static uint NotificationsCountDefaultValue = 0;

  private uint notificationsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NotificationsCount {
    get { if ((_hasBits0 & 131072) != 0) { return notificationsCount_; } else { return NotificationsCountDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      notificationsCount_ = value;
    }
  }
  /// <summary>Gets whether the "NotificationsCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNotificationsCount {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "NotificationsCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNotificationsCount() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "Priority" field.</summary>
  public const int PriorityFieldNumber = 19;
  private readonly static uint PriorityDefaultValue = 0;

  private uint priority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Priority {
    get { if ((_hasBits0 & 262144) != 0) { return priority_; } else { return PriorityDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      priority_ = value;
    }
  }
  /// <summary>Gets whether the "Priority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPriority {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "Priority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPriority() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "PublishRequestCount" field.</summary>
  public const int PublishRequestCountFieldNumber = 20;
  private readonly static uint PublishRequestCountDefaultValue = 0;

  private uint publishRequestCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PublishRequestCount {
    get { if ((_hasBits0 & 524288) != 0) { return publishRequestCount_; } else { return PublishRequestCountDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      publishRequestCount_ = value;
    }
  }
  /// <summary>Gets whether the "PublishRequestCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishRequestCount {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "PublishRequestCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishRequestCount() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "PublishingEnabled" field.</summary>
  public const int PublishingEnabledFieldNumber = 21;
  private readonly static bool PublishingEnabledDefaultValue = false;

  private bool publishingEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PublishingEnabled {
    get { if ((_hasBits0 & 1048576) != 0) { return publishingEnabled_; } else { return PublishingEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      publishingEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingEnabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingEnabled {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "PublishingEnabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingEnabled() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "PublishingInterval" field.</summary>
  public const int PublishingIntervalFieldNumber = 22;
  private readonly static double PublishingIntervalDefaultValue = 0D;

  private double publishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double PublishingInterval {
    get { if ((_hasBits0 & 2097152) != 0) { return publishingInterval_; } else { return PublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      publishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingInterval {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "PublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingInterval() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "RepublishMessageCount" field.</summary>
  public const int RepublishMessageCountFieldNumber = 23;
  private readonly static uint RepublishMessageCountDefaultValue = 0;

  private uint republishMessageCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RepublishMessageCount {
    get { if ((_hasBits0 & 4194304) != 0) { return republishMessageCount_; } else { return RepublishMessageCountDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      republishMessageCount_ = value;
    }
  }
  /// <summary>Gets whether the "RepublishMessageCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRepublishMessageCount {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "RepublishMessageCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRepublishMessageCount() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "RepublishMessageRequestCount" field.</summary>
  public const int RepublishMessageRequestCountFieldNumber = 24;
  private readonly static uint RepublishMessageRequestCountDefaultValue = 0;

  private uint republishMessageRequestCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RepublishMessageRequestCount {
    get { if ((_hasBits0 & 8388608) != 0) { return republishMessageRequestCount_; } else { return RepublishMessageRequestCountDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      republishMessageRequestCount_ = value;
    }
  }
  /// <summary>Gets whether the "RepublishMessageRequestCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRepublishMessageRequestCount {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "RepublishMessageRequestCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRepublishMessageRequestCount() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "RepublishRequestCount" field.</summary>
  public const int RepublishRequestCountFieldNumber = 25;
  private readonly static uint RepublishRequestCountDefaultValue = 0;

  private uint republishRequestCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RepublishRequestCount {
    get { if ((_hasBits0 & 16777216) != 0) { return republishRequestCount_; } else { return RepublishRequestCountDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      republishRequestCount_ = value;
    }
  }
  /// <summary>Gets whether the "RepublishRequestCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRepublishRequestCount {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "RepublishRequestCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRepublishRequestCount() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "SessionId" field.</summary>
  public const int SessionIdFieldNumber = 26;
  private global::NodeId sessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 27;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 33554432) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "TransferRequestCount" field.</summary>
  public const int TransferRequestCountFieldNumber = 28;
  private readonly static uint TransferRequestCountDefaultValue = 0;

  private uint transferRequestCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TransferRequestCount {
    get { if ((_hasBits0 & 67108864) != 0) { return transferRequestCount_; } else { return TransferRequestCountDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      transferRequestCount_ = value;
    }
  }
  /// <summary>Gets whether the "TransferRequestCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransferRequestCount {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "TransferRequestCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransferRequestCount() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "TransferredToAltClientCount" field.</summary>
  public const int TransferredToAltClientCountFieldNumber = 29;
  private readonly static uint TransferredToAltClientCountDefaultValue = 0;

  private uint transferredToAltClientCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TransferredToAltClientCount {
    get { if ((_hasBits0 & 134217728) != 0) { return transferredToAltClientCount_; } else { return TransferredToAltClientCountDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      transferredToAltClientCount_ = value;
    }
  }
  /// <summary>Gets whether the "TransferredToAltClientCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransferredToAltClientCount {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "TransferredToAltClientCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransferredToAltClientCount() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "TransferredToSameClientCount" field.</summary>
  public const int TransferredToSameClientCountFieldNumber = 30;
  private readonly static uint TransferredToSameClientCountDefaultValue = 0;

  private uint transferredToSameClientCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TransferredToSameClientCount {
    get { if ((_hasBits0 & 268435456) != 0) { return transferredToSameClientCount_; } else { return TransferredToSameClientCountDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      transferredToSameClientCount_ = value;
    }
  }
  /// <summary>Gets whether the "TransferredToSameClientCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransferredToSameClientCount {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "TransferredToSameClientCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransferredToSameClientCount() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "UnacknowledgedMessageCount" field.</summary>
  public const int UnacknowledgedMessageCountFieldNumber = 31;
  private readonly static uint UnacknowledgedMessageCountDefaultValue = 0;

  private uint unacknowledgedMessageCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnacknowledgedMessageCount {
    get { if ((_hasBits0 & 536870912) != 0) { return unacknowledgedMessageCount_; } else { return UnacknowledgedMessageCountDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      unacknowledgedMessageCount_ = value;
    }
  }
  /// <summary>Gets whether the "UnacknowledgedMessageCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUnacknowledgedMessageCount {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "UnacknowledgedMessageCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUnacknowledgedMessageCount() {
    _hasBits0 &= ~536870912;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SubscriptionDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SubscriptionDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurrentKeepAliveCount != other.CurrentKeepAliveCount) return false;
    if (CurrentLifetimeCount != other.CurrentLifetimeCount) return false;
    if (DataChangeNotificationsCount != other.DataChangeNotificationsCount) return false;
    if (DisableCount != other.DisableCount) return false;
    if (DisabledMonitoredItemCount != other.DisabledMonitoredItemCount) return false;
    if (DiscardedMessageCount != other.DiscardedMessageCount) return false;
    if (EnableCount != other.EnableCount) return false;
    if (EventNotificationsCount != other.EventNotificationsCount) return false;
    if (EventQueueOverFlowCount != other.EventQueueOverFlowCount) return false;
    if (LatePublishRequestCount != other.LatePublishRequestCount) return false;
    if (MaxKeepAliveCount != other.MaxKeepAliveCount) return false;
    if (MaxLifetimeCount != other.MaxLifetimeCount) return false;
    if (MaxNotificationsPerPublish != other.MaxNotificationsPerPublish) return false;
    if (ModifyCount != other.ModifyCount) return false;
    if (MonitoredItemCount != other.MonitoredItemCount) return false;
    if (MonitoringQueueOverflowCount != other.MonitoringQueueOverflowCount) return false;
    if (NextSequenceNumber != other.NextSequenceNumber) return false;
    if (NotificationsCount != other.NotificationsCount) return false;
    if (Priority != other.Priority) return false;
    if (PublishRequestCount != other.PublishRequestCount) return false;
    if (PublishingEnabled != other.PublishingEnabled) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PublishingInterval, other.PublishingInterval)) return false;
    if (RepublishMessageCount != other.RepublishMessageCount) return false;
    if (RepublishMessageRequestCount != other.RepublishMessageRequestCount) return false;
    if (RepublishRequestCount != other.RepublishRequestCount) return false;
    if (!object.Equals(SessionId, other.SessionId)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    if (TransferRequestCount != other.TransferRequestCount) return false;
    if (TransferredToAltClientCount != other.TransferredToAltClientCount) return false;
    if (TransferredToSameClientCount != other.TransferredToSameClientCount) return false;
    if (UnacknowledgedMessageCount != other.UnacknowledgedMessageCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCurrentKeepAliveCount) hash ^= CurrentKeepAliveCount.GetHashCode();
    if (HasCurrentLifetimeCount) hash ^= CurrentLifetimeCount.GetHashCode();
    if (HasDataChangeNotificationsCount) hash ^= DataChangeNotificationsCount.GetHashCode();
    if (HasDisableCount) hash ^= DisableCount.GetHashCode();
    if (HasDisabledMonitoredItemCount) hash ^= DisabledMonitoredItemCount.GetHashCode();
    if (HasDiscardedMessageCount) hash ^= DiscardedMessageCount.GetHashCode();
    if (HasEnableCount) hash ^= EnableCount.GetHashCode();
    if (HasEventNotificationsCount) hash ^= EventNotificationsCount.GetHashCode();
    if (HasEventQueueOverFlowCount) hash ^= EventQueueOverFlowCount.GetHashCode();
    if (HasLatePublishRequestCount) hash ^= LatePublishRequestCount.GetHashCode();
    if (HasMaxKeepAliveCount) hash ^= MaxKeepAliveCount.GetHashCode();
    if (HasMaxLifetimeCount) hash ^= MaxLifetimeCount.GetHashCode();
    if (HasMaxNotificationsPerPublish) hash ^= MaxNotificationsPerPublish.GetHashCode();
    if (HasModifyCount) hash ^= ModifyCount.GetHashCode();
    if (HasMonitoredItemCount) hash ^= MonitoredItemCount.GetHashCode();
    if (HasMonitoringQueueOverflowCount) hash ^= MonitoringQueueOverflowCount.GetHashCode();
    if (HasNextSequenceNumber) hash ^= NextSequenceNumber.GetHashCode();
    if (HasNotificationsCount) hash ^= NotificationsCount.GetHashCode();
    if (HasPriority) hash ^= Priority.GetHashCode();
    if (HasPublishRequestCount) hash ^= PublishRequestCount.GetHashCode();
    if (HasPublishingEnabled) hash ^= PublishingEnabled.GetHashCode();
    if (HasPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PublishingInterval);
    if (HasRepublishMessageCount) hash ^= RepublishMessageCount.GetHashCode();
    if (HasRepublishMessageRequestCount) hash ^= RepublishMessageRequestCount.GetHashCode();
    if (HasRepublishRequestCount) hash ^= RepublishRequestCount.GetHashCode();
    if (sessionId_ != null) hash ^= SessionId.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (HasTransferRequestCount) hash ^= TransferRequestCount.GetHashCode();
    if (HasTransferredToAltClientCount) hash ^= TransferredToAltClientCount.GetHashCode();
    if (HasTransferredToSameClientCount) hash ^= TransferredToSameClientCount.GetHashCode();
    if (HasUnacknowledgedMessageCount) hash ^= UnacknowledgedMessageCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCurrentKeepAliveCount) {
      output.WriteRawTag(8);
      output.WriteUInt32(CurrentKeepAliveCount);
    }
    if (HasCurrentLifetimeCount) {
      output.WriteRawTag(16);
      output.WriteUInt32(CurrentLifetimeCount);
    }
    if (HasDataChangeNotificationsCount) {
      output.WriteRawTag(24);
      output.WriteUInt32(DataChangeNotificationsCount);
    }
    if (HasDisableCount) {
      output.WriteRawTag(32);
      output.WriteUInt32(DisableCount);
    }
    if (HasDisabledMonitoredItemCount) {
      output.WriteRawTag(40);
      output.WriteUInt32(DisabledMonitoredItemCount);
    }
    if (HasDiscardedMessageCount) {
      output.WriteRawTag(48);
      output.WriteUInt32(DiscardedMessageCount);
    }
    if (HasEnableCount) {
      output.WriteRawTag(56);
      output.WriteUInt32(EnableCount);
    }
    if (HasEventNotificationsCount) {
      output.WriteRawTag(64);
      output.WriteUInt32(EventNotificationsCount);
    }
    if (HasEventQueueOverFlowCount) {
      output.WriteRawTag(72);
      output.WriteUInt32(EventQueueOverFlowCount);
    }
    if (HasLatePublishRequestCount) {
      output.WriteRawTag(80);
      output.WriteUInt32(LatePublishRequestCount);
    }
    if (HasMaxKeepAliveCount) {
      output.WriteRawTag(88);
      output.WriteUInt32(MaxKeepAliveCount);
    }
    if (HasMaxLifetimeCount) {
      output.WriteRawTag(96);
      output.WriteUInt32(MaxLifetimeCount);
    }
    if (HasMaxNotificationsPerPublish) {
      output.WriteRawTag(104);
      output.WriteUInt32(MaxNotificationsPerPublish);
    }
    if (HasModifyCount) {
      output.WriteRawTag(112);
      output.WriteUInt32(ModifyCount);
    }
    if (HasMonitoredItemCount) {
      output.WriteRawTag(120);
      output.WriteUInt32(MonitoredItemCount);
    }
    if (HasMonitoringQueueOverflowCount) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(MonitoringQueueOverflowCount);
    }
    if (HasNextSequenceNumber) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(NextSequenceNumber);
    }
    if (HasNotificationsCount) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(NotificationsCount);
    }
    if (HasPriority) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(Priority);
    }
    if (HasPublishRequestCount) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(PublishRequestCount);
    }
    if (HasPublishingEnabled) {
      output.WriteRawTag(168, 1);
      output.WriteBool(PublishingEnabled);
    }
    if (HasPublishingInterval) {
      output.WriteRawTag(177, 1);
      output.WriteDouble(PublishingInterval);
    }
    if (HasRepublishMessageCount) {
      output.WriteRawTag(184, 1);
      output.WriteUInt32(RepublishMessageCount);
    }
    if (HasRepublishMessageRequestCount) {
      output.WriteRawTag(192, 1);
      output.WriteUInt32(RepublishMessageRequestCount);
    }
    if (HasRepublishRequestCount) {
      output.WriteRawTag(200, 1);
      output.WriteUInt32(RepublishRequestCount);
    }
    if (sessionId_ != null) {
      output.WriteRawTag(210, 1);
      output.WriteMessage(SessionId);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(216, 1);
      output.WriteUInt32(SubscriptionId);
    }
    if (HasTransferRequestCount) {
      output.WriteRawTag(224, 1);
      output.WriteUInt32(TransferRequestCount);
    }
    if (HasTransferredToAltClientCount) {
      output.WriteRawTag(232, 1);
      output.WriteUInt32(TransferredToAltClientCount);
    }
    if (HasTransferredToSameClientCount) {
      output.WriteRawTag(240, 1);
      output.WriteUInt32(TransferredToSameClientCount);
    }
    if (HasUnacknowledgedMessageCount) {
      output.WriteRawTag(248, 1);
      output.WriteUInt32(UnacknowledgedMessageCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCurrentKeepAliveCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentKeepAliveCount);
    }
    if (HasCurrentLifetimeCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentLifetimeCount);
    }
    if (HasDataChangeNotificationsCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataChangeNotificationsCount);
    }
    if (HasDisableCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisableCount);
    }
    if (HasDisabledMonitoredItemCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisabledMonitoredItemCount);
    }
    if (HasDiscardedMessageCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiscardedMessageCount);
    }
    if (HasEnableCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnableCount);
    }
    if (HasEventNotificationsCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotificationsCount);
    }
    if (HasEventQueueOverFlowCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventQueueOverFlowCount);
    }
    if (HasLatePublishRequestCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatePublishRequestCount);
    }
    if (HasMaxKeepAliveCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxKeepAliveCount);
    }
    if (HasMaxLifetimeCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLifetimeCount);
    }
    if (HasMaxNotificationsPerPublish) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNotificationsPerPublish);
    }
    if (HasModifyCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModifyCount);
    }
    if (HasMonitoredItemCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonitoredItemCount);
    }
    if (HasMonitoringQueueOverflowCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonitoringQueueOverflowCount);
    }
    if (HasNextSequenceNumber) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NextSequenceNumber);
    }
    if (HasNotificationsCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NotificationsCount);
    }
    if (HasPriority) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
    }
    if (HasPublishRequestCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PublishRequestCount);
    }
    if (HasPublishingEnabled) {
      size += 2 + 1;
    }
    if (HasPublishingInterval) {
      size += 2 + 8;
    }
    if (HasRepublishMessageCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RepublishMessageCount);
    }
    if (HasRepublishMessageRequestCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RepublishMessageRequestCount);
    }
    if (HasRepublishRequestCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RepublishRequestCount);
    }
    if (sessionId_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SessionId);
    }
    if (HasSubscriptionId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (HasTransferRequestCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TransferRequestCount);
    }
    if (HasTransferredToAltClientCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TransferredToAltClientCount);
    }
    if (HasTransferredToSameClientCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TransferredToSameClientCount);
    }
    if (HasUnacknowledgedMessageCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnacknowledgedMessageCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SubscriptionDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasCurrentKeepAliveCount) {
      CurrentKeepAliveCount = other.CurrentKeepAliveCount;
    }
    if (other.HasCurrentLifetimeCount) {
      CurrentLifetimeCount = other.CurrentLifetimeCount;
    }
    if (other.HasDataChangeNotificationsCount) {
      DataChangeNotificationsCount = other.DataChangeNotificationsCount;
    }
    if (other.HasDisableCount) {
      DisableCount = other.DisableCount;
    }
    if (other.HasDisabledMonitoredItemCount) {
      DisabledMonitoredItemCount = other.DisabledMonitoredItemCount;
    }
    if (other.HasDiscardedMessageCount) {
      DiscardedMessageCount = other.DiscardedMessageCount;
    }
    if (other.HasEnableCount) {
      EnableCount = other.EnableCount;
    }
    if (other.HasEventNotificationsCount) {
      EventNotificationsCount = other.EventNotificationsCount;
    }
    if (other.HasEventQueueOverFlowCount) {
      EventQueueOverFlowCount = other.EventQueueOverFlowCount;
    }
    if (other.HasLatePublishRequestCount) {
      LatePublishRequestCount = other.LatePublishRequestCount;
    }
    if (other.HasMaxKeepAliveCount) {
      MaxKeepAliveCount = other.MaxKeepAliveCount;
    }
    if (other.HasMaxLifetimeCount) {
      MaxLifetimeCount = other.MaxLifetimeCount;
    }
    if (other.HasMaxNotificationsPerPublish) {
      MaxNotificationsPerPublish = other.MaxNotificationsPerPublish;
    }
    if (other.HasModifyCount) {
      ModifyCount = other.ModifyCount;
    }
    if (other.HasMonitoredItemCount) {
      MonitoredItemCount = other.MonitoredItemCount;
    }
    if (other.HasMonitoringQueueOverflowCount) {
      MonitoringQueueOverflowCount = other.MonitoringQueueOverflowCount;
    }
    if (other.HasNextSequenceNumber) {
      NextSequenceNumber = other.NextSequenceNumber;
    }
    if (other.HasNotificationsCount) {
      NotificationsCount = other.NotificationsCount;
    }
    if (other.HasPriority) {
      Priority = other.Priority;
    }
    if (other.HasPublishRequestCount) {
      PublishRequestCount = other.PublishRequestCount;
    }
    if (other.HasPublishingEnabled) {
      PublishingEnabled = other.PublishingEnabled;
    }
    if (other.HasPublishingInterval) {
      PublishingInterval = other.PublishingInterval;
    }
    if (other.HasRepublishMessageCount) {
      RepublishMessageCount = other.RepublishMessageCount;
    }
    if (other.HasRepublishMessageRequestCount) {
      RepublishMessageRequestCount = other.RepublishMessageRequestCount;
    }
    if (other.HasRepublishRequestCount) {
      RepublishRequestCount = other.RepublishRequestCount;
    }
    if (other.sessionId_ != null) {
      if (sessionId_ == null) {
        SessionId = new global::NodeId();
      }
      SessionId.MergeFrom(other.SessionId);
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    if (other.HasTransferRequestCount) {
      TransferRequestCount = other.TransferRequestCount;
    }
    if (other.HasTransferredToAltClientCount) {
      TransferredToAltClientCount = other.TransferredToAltClientCount;
    }
    if (other.HasTransferredToSameClientCount) {
      TransferredToSameClientCount = other.TransferredToSameClientCount;
    }
    if (other.HasUnacknowledgedMessageCount) {
      UnacknowledgedMessageCount = other.UnacknowledgedMessageCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CurrentKeepAliveCount = input.ReadUInt32();
          break;
        }
        case 16: {
          CurrentLifetimeCount = input.ReadUInt32();
          break;
        }
        case 24: {
          DataChangeNotificationsCount = input.ReadUInt32();
          break;
        }
        case 32: {
          DisableCount = input.ReadUInt32();
          break;
        }
        case 40: {
          DisabledMonitoredItemCount = input.ReadUInt32();
          break;
        }
        case 48: {
          DiscardedMessageCount = input.ReadUInt32();
          break;
        }
        case 56: {
          EnableCount = input.ReadUInt32();
          break;
        }
        case 64: {
          EventNotificationsCount = input.ReadUInt32();
          break;
        }
        case 72: {
          EventQueueOverFlowCount = input.ReadUInt32();
          break;
        }
        case 80: {
          LatePublishRequestCount = input.ReadUInt32();
          break;
        }
        case 88: {
          MaxKeepAliveCount = input.ReadUInt32();
          break;
        }
        case 96: {
          MaxLifetimeCount = input.ReadUInt32();
          break;
        }
        case 104: {
          MaxNotificationsPerPublish = input.ReadUInt32();
          break;
        }
        case 112: {
          ModifyCount = input.ReadUInt32();
          break;
        }
        case 120: {
          MonitoredItemCount = input.ReadUInt32();
          break;
        }
        case 128: {
          MonitoringQueueOverflowCount = input.ReadUInt32();
          break;
        }
        case 136: {
          NextSequenceNumber = input.ReadUInt32();
          break;
        }
        case 144: {
          NotificationsCount = input.ReadUInt32();
          break;
        }
        case 152: {
          Priority = input.ReadUInt32();
          break;
        }
        case 160: {
          PublishRequestCount = input.ReadUInt32();
          break;
        }
        case 168: {
          PublishingEnabled = input.ReadBool();
          break;
        }
        case 177: {
          PublishingInterval = input.ReadDouble();
          break;
        }
        case 184: {
          RepublishMessageCount = input.ReadUInt32();
          break;
        }
        case 192: {
          RepublishMessageRequestCount = input.ReadUInt32();
          break;
        }
        case 200: {
          RepublishRequestCount = input.ReadUInt32();
          break;
        }
        case 210: {
          if (sessionId_ == null) {
            SessionId = new global::NodeId();
          }
          input.ReadMessage(SessionId);
          break;
        }
        case 216: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
        case 224: {
          TransferRequestCount = input.ReadUInt32();
          break;
        }
        case 232: {
          TransferredToAltClientCount = input.ReadUInt32();
          break;
        }
        case 240: {
          TransferredToSameClientCount = input.ReadUInt32();
          break;
        }
        case 248: {
          UnacknowledgedMessageCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ThreeDCartesianCoordinates : pb::IMessage<ThreeDCartesianCoordinates> {
  private static readonly pb::MessageParser<ThreeDCartesianCoordinates> _parser = new pb::MessageParser<ThreeDCartesianCoordinates>(() => new ThreeDCartesianCoordinates());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ThreeDCartesianCoordinates> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[129]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDCartesianCoordinates() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDCartesianCoordinates(ThreeDCartesianCoordinates other) : this() {
    _hasBits0 = other._hasBits0;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDCartesianCoordinates Clone() {
    return new ThreeDCartesianCoordinates(this);
  }

  /// <summary>Field number for the "X" field.</summary>
  public const int XFieldNumber = 1;
  private readonly static double XDefaultValue = 0D;

  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
    set {
      _hasBits0 |= 1;
      x_ = value;
    }
  }
  /// <summary>Gets whether the "X" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasX {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "X" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearX() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Y" field.</summary>
  public const int YFieldNumber = 2;
  private readonly static double YDefaultValue = 0D;

  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
    set {
      _hasBits0 |= 2;
      y_ = value;
    }
  }
  /// <summary>Gets whether the "Y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasY {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearY() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Z" field.</summary>
  public const int ZFieldNumber = 3;
  private readonly static double ZDefaultValue = 0D;

  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
    set {
      _hasBits0 |= 4;
      z_ = value;
    }
  }
  /// <summary>Gets whether the "Z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasZ {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearZ() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ThreeDCartesianCoordinates);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ThreeDCartesianCoordinates other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
    if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
    if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasX) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (HasY) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (HasZ) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasX) {
      size += 1 + 8;
    }
    if (HasY) {
      size += 1 + 8;
    }
    if (HasZ) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ThreeDCartesianCoordinates other) {
    if (other == null) {
      return;
    }
    if (other.HasX) {
      X = other.X;
    }
    if (other.HasY) {
      Y = other.Y;
    }
    if (other.HasZ) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class ThreeDOrientation : pb::IMessage<ThreeDOrientation> {
  private static readonly pb::MessageParser<ThreeDOrientation> _parser = new pb::MessageParser<ThreeDOrientation>(() => new ThreeDOrientation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ThreeDOrientation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[130]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDOrientation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDOrientation(ThreeDOrientation other) : this() {
    _hasBits0 = other._hasBits0;
    a_ = other.a_;
    b_ = other.b_;
    c_ = other.c_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDOrientation Clone() {
    return new ThreeDOrientation(this);
  }

  /// <summary>Field number for the "A" field.</summary>
  public const int AFieldNumber = 1;
  private readonly static double ADefaultValue = 0D;

  private double a_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double A {
    get { if ((_hasBits0 & 1) != 0) { return a_; } else { return ADefaultValue; } }
    set {
      _hasBits0 |= 1;
      a_ = value;
    }
  }
  /// <summary>Gets whether the "A" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasA {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "A" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearA() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "B" field.</summary>
  public const int BFieldNumber = 2;
  private readonly static double BDefaultValue = 0D;

  private double b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double B {
    get { if ((_hasBits0 & 2) != 0) { return b_; } else { return BDefaultValue; } }
    set {
      _hasBits0 |= 2;
      b_ = value;
    }
  }
  /// <summary>Gets whether the "B" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasB {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "B" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearB() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "C" field.</summary>
  public const int CFieldNumber = 3;
  private readonly static double CDefaultValue = 0D;

  private double c_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double C {
    get { if ((_hasBits0 & 4) != 0) { return c_; } else { return CDefaultValue; } }
    set {
      _hasBits0 |= 4;
      c_ = value;
    }
  }
  /// <summary>Gets whether the "C" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasC {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "C" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearC() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ThreeDOrientation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ThreeDOrientation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(A, other.A)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(B, other.B)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(C, other.C)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasA) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(A);
    if (HasB) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(B);
    if (HasC) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(C);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasA) {
      output.WriteRawTag(9);
      output.WriteDouble(A);
    }
    if (HasB) {
      output.WriteRawTag(17);
      output.WriteDouble(B);
    }
    if (HasC) {
      output.WriteRawTag(25);
      output.WriteDouble(C);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasA) {
      size += 1 + 8;
    }
    if (HasB) {
      size += 1 + 8;
    }
    if (HasC) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ThreeDOrientation other) {
    if (other == null) {
      return;
    }
    if (other.HasA) {
      A = other.A;
    }
    if (other.HasB) {
      B = other.B;
    }
    if (other.HasC) {
      C = other.C;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          A = input.ReadDouble();
          break;
        }
        case 17: {
          B = input.ReadDouble();
          break;
        }
        case 25: {
          C = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class ThreeDVector : pb::IMessage<ThreeDVector> {
  private static readonly pb::MessageParser<ThreeDVector> _parser = new pb::MessageParser<ThreeDVector>(() => new ThreeDVector());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ThreeDVector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[131]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDVector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDVector(ThreeDVector other) : this() {
    _hasBits0 = other._hasBits0;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDVector Clone() {
    return new ThreeDVector(this);
  }

  /// <summary>Field number for the "X" field.</summary>
  public const int XFieldNumber = 1;
  private readonly static double XDefaultValue = 0D;

  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
    set {
      _hasBits0 |= 1;
      x_ = value;
    }
  }
  /// <summary>Gets whether the "X" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasX {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "X" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearX() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Y" field.</summary>
  public const int YFieldNumber = 2;
  private readonly static double YDefaultValue = 0D;

  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
    set {
      _hasBits0 |= 2;
      y_ = value;
    }
  }
  /// <summary>Gets whether the "Y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasY {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearY() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Z" field.</summary>
  public const int ZFieldNumber = 3;
  private readonly static double ZDefaultValue = 0D;

  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
    set {
      _hasBits0 |= 4;
      z_ = value;
    }
  }
  /// <summary>Gets whether the "Z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasZ {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearZ() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ThreeDVector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ThreeDVector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
    if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
    if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasX) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (HasY) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (HasZ) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasX) {
      size += 1 + 8;
    }
    if (HasY) {
      size += 1 + 8;
    }
    if (HasZ) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ThreeDVector other) {
    if (other == null) {
      return;
    }
    if (other.HasX) {
      X = other.X;
    }
    if (other.HasY) {
      Y = other.Y;
    }
    if (other.HasZ) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class TimeZoneDataType : pb::IMessage<TimeZoneDataType> {
  private static readonly pb::MessageParser<TimeZoneDataType> _parser = new pb::MessageParser<TimeZoneDataType>(() => new TimeZoneDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimeZoneDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[132]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeZoneDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeZoneDataType(TimeZoneDataType other) : this() {
    _hasBits0 = other._hasBits0;
    daylightSavingInOffset_ = other.daylightSavingInOffset_;
    offset_ = other.offset_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeZoneDataType Clone() {
    return new TimeZoneDataType(this);
  }

  /// <summary>Field number for the "DaylightSavingInOffset" field.</summary>
  public const int DaylightSavingInOffsetFieldNumber = 1;
  private readonly static bool DaylightSavingInOffsetDefaultValue = false;

  private bool daylightSavingInOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DaylightSavingInOffset {
    get { if ((_hasBits0 & 1) != 0) { return daylightSavingInOffset_; } else { return DaylightSavingInOffsetDefaultValue; } }
    set {
      _hasBits0 |= 1;
      daylightSavingInOffset_ = value;
    }
  }
  /// <summary>Gets whether the "DaylightSavingInOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDaylightSavingInOffset {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DaylightSavingInOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDaylightSavingInOffset() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Offset" field.</summary>
  public const int OffsetFieldNumber = 2;
  private readonly static int OffsetDefaultValue = 0;

  private int offset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Offset {
    get { if ((_hasBits0 & 2) != 0) { return offset_; } else { return OffsetDefaultValue; } }
    set {
      _hasBits0 |= 2;
      offset_ = value;
    }
  }
  /// <summary>Gets whether the "Offset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOffset {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Offset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOffset() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimeZoneDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimeZoneDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DaylightSavingInOffset != other.DaylightSavingInOffset) return false;
    if (Offset != other.Offset) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDaylightSavingInOffset) hash ^= DaylightSavingInOffset.GetHashCode();
    if (HasOffset) hash ^= Offset.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDaylightSavingInOffset) {
      output.WriteRawTag(8);
      output.WriteBool(DaylightSavingInOffset);
    }
    if (HasOffset) {
      output.WriteRawTag(16);
      output.WriteInt32(Offset);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDaylightSavingInOffset) {
      size += 1 + 1;
    }
    if (HasOffset) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimeZoneDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDaylightSavingInOffset) {
      DaylightSavingInOffset = other.DaylightSavingInOffset;
    }
    if (other.HasOffset) {
      Offset = other.Offset;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DaylightSavingInOffset = input.ReadBool();
          break;
        }
        case 16: {
          Offset = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TransferResult : pb::IMessage<TransferResult> {
  private static readonly pb::MessageParser<TransferResult> _parser = new pb::MessageParser<TransferResult>(() => new TransferResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TransferResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[133]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferResult(TransferResult other) : this() {
    availableSequenceNumbers_ = other.availableSequenceNumbers_ != null ? other.availableSequenceNumbers_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferResult Clone() {
    return new TransferResult(this);
  }

  /// <summary>Field number for the "AvailableSequenceNumbers" field.</summary>
  public const int AvailableSequenceNumbersFieldNumber = 1;
  private global::ListOfUInt32 availableSequenceNumbers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 AvailableSequenceNumbers {
    get { return availableSequenceNumbers_; }
    set {
      availableSequenceNumbers_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 2;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TransferResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TransferResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AvailableSequenceNumbers, other.AvailableSequenceNumbers)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (availableSequenceNumbers_ != null) hash ^= AvailableSequenceNumbers.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (availableSequenceNumbers_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AvailableSequenceNumbers);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (availableSequenceNumbers_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvailableSequenceNumbers);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TransferResult other) {
    if (other == null) {
      return;
    }
    if (other.availableSequenceNumbers_ != null) {
      if (availableSequenceNumbers_ == null) {
        AvailableSequenceNumbers = new global::ListOfUInt32();
      }
      AvailableSequenceNumbers.MergeFrom(other.AvailableSequenceNumbers);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (availableSequenceNumbers_ == null) {
            AvailableSequenceNumbers = new global::ListOfUInt32();
          }
          input.ReadMessage(AvailableSequenceNumbers);
          break;
        }
        case 18: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class TrustListDataType : pb::IMessage<TrustListDataType> {
  private static readonly pb::MessageParser<TrustListDataType> _parser = new pb::MessageParser<TrustListDataType>(() => new TrustListDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TrustListDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[134]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrustListDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrustListDataType(TrustListDataType other) : this() {
    _hasBits0 = other._hasBits0;
    issuerCertificates_ = other.issuerCertificates_ != null ? other.issuerCertificates_.Clone() : null;
    issuerCrls_ = other.issuerCrls_ != null ? other.issuerCrls_.Clone() : null;
    specifiedLists_ = other.specifiedLists_;
    trustedCertificates_ = other.trustedCertificates_ != null ? other.trustedCertificates_.Clone() : null;
    trustedCrls_ = other.trustedCrls_ != null ? other.trustedCrls_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrustListDataType Clone() {
    return new TrustListDataType(this);
  }

  /// <summary>Field number for the "IssuerCertificates" field.</summary>
  public const int IssuerCertificatesFieldNumber = 1;
  private global::ListOfByteString issuerCertificates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfByteString IssuerCertificates {
    get { return issuerCertificates_; }
    set {
      issuerCertificates_ = value;
    }
  }

  /// <summary>Field number for the "IssuerCrls" field.</summary>
  public const int IssuerCrlsFieldNumber = 2;
  private global::ListOfByteString issuerCrls_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfByteString IssuerCrls {
    get { return issuerCrls_; }
    set {
      issuerCrls_ = value;
    }
  }

  /// <summary>Field number for the "SpecifiedLists" field.</summary>
  public const int SpecifiedListsFieldNumber = 3;
  private readonly static uint SpecifiedListsDefaultValue = 0;

  private uint specifiedLists_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedLists {
    get { if ((_hasBits0 & 1) != 0) { return specifiedLists_; } else { return SpecifiedListsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      specifiedLists_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedLists" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedLists {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedLists" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedLists() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "TrustedCertificates" field.</summary>
  public const int TrustedCertificatesFieldNumber = 4;
  private global::ListOfByteString trustedCertificates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfByteString TrustedCertificates {
    get { return trustedCertificates_; }
    set {
      trustedCertificates_ = value;
    }
  }

  /// <summary>Field number for the "TrustedCrls" field.</summary>
  public const int TrustedCrlsFieldNumber = 5;
  private global::ListOfByteString trustedCrls_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfByteString TrustedCrls {
    get { return trustedCrls_; }
    set {
      trustedCrls_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TrustListDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TrustListDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(IssuerCertificates, other.IssuerCertificates)) return false;
    if (!object.Equals(IssuerCrls, other.IssuerCrls)) return false;
    if (SpecifiedLists != other.SpecifiedLists) return false;
    if (!object.Equals(TrustedCertificates, other.TrustedCertificates)) return false;
    if (!object.Equals(TrustedCrls, other.TrustedCrls)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (issuerCertificates_ != null) hash ^= IssuerCertificates.GetHashCode();
    if (issuerCrls_ != null) hash ^= IssuerCrls.GetHashCode();
    if (HasSpecifiedLists) hash ^= SpecifiedLists.GetHashCode();
    if (trustedCertificates_ != null) hash ^= TrustedCertificates.GetHashCode();
    if (trustedCrls_ != null) hash ^= TrustedCrls.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (issuerCertificates_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(IssuerCertificates);
    }
    if (issuerCrls_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(IssuerCrls);
    }
    if (HasSpecifiedLists) {
      output.WriteRawTag(24);
      output.WriteUInt32(SpecifiedLists);
    }
    if (trustedCertificates_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(TrustedCertificates);
    }
    if (trustedCrls_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(TrustedCrls);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (issuerCertificates_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssuerCertificates);
    }
    if (issuerCrls_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssuerCrls);
    }
    if (HasSpecifiedLists) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedLists);
    }
    if (trustedCertificates_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrustedCertificates);
    }
    if (trustedCrls_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrustedCrls);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TrustListDataType other) {
    if (other == null) {
      return;
    }
    if (other.issuerCertificates_ != null) {
      if (issuerCertificates_ == null) {
        IssuerCertificates = new global::ListOfByteString();
      }
      IssuerCertificates.MergeFrom(other.IssuerCertificates);
    }
    if (other.issuerCrls_ != null) {
      if (issuerCrls_ == null) {
        IssuerCrls = new global::ListOfByteString();
      }
      IssuerCrls.MergeFrom(other.IssuerCrls);
    }
    if (other.HasSpecifiedLists) {
      SpecifiedLists = other.SpecifiedLists;
    }
    if (other.trustedCertificates_ != null) {
      if (trustedCertificates_ == null) {
        TrustedCertificates = new global::ListOfByteString();
      }
      TrustedCertificates.MergeFrom(other.TrustedCertificates);
    }
    if (other.trustedCrls_ != null) {
      if (trustedCrls_ == null) {
        TrustedCrls = new global::ListOfByteString();
      }
      TrustedCrls.MergeFrom(other.TrustedCrls);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (issuerCertificates_ == null) {
            IssuerCertificates = new global::ListOfByteString();
          }
          input.ReadMessage(IssuerCertificates);
          break;
        }
        case 18: {
          if (issuerCrls_ == null) {
            IssuerCrls = new global::ListOfByteString();
          }
          input.ReadMessage(IssuerCrls);
          break;
        }
        case 24: {
          SpecifiedLists = input.ReadUInt32();
          break;
        }
        case 34: {
          if (trustedCertificates_ == null) {
            TrustedCertificates = new global::ListOfByteString();
          }
          input.ReadMessage(TrustedCertificates);
          break;
        }
        case 42: {
          if (trustedCrls_ == null) {
            TrustedCrls = new global::ListOfByteString();
          }
          input.ReadMessage(TrustedCrls);
          break;
        }
      }
    }
  }

}

public sealed partial class UadpDataSetReaderMessageDataType : pb::IMessage<UadpDataSetReaderMessageDataType> {
  private static readonly pb::MessageParser<UadpDataSetReaderMessageDataType> _parser = new pb::MessageParser<UadpDataSetReaderMessageDataType>(() => new UadpDataSetReaderMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UadpDataSetReaderMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[135]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpDataSetReaderMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpDataSetReaderMessageDataType(UadpDataSetReaderMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetClassId_ = other.dataSetClassId_ != null ? other.dataSetClassId_.Clone() : null;
    dataSetMessageContentMask_ = other.dataSetMessageContentMask_;
    dataSetOffset_ = other.dataSetOffset_;
    groupVersion_ = other.groupVersion_;
    networkMessageContentMask_ = other.networkMessageContentMask_;
    networkMessageNumber_ = other.networkMessageNumber_;
    processingOffset_ = other.processingOffset_;
    publishingInterval_ = other.publishingInterval_;
    receiveOffset_ = other.receiveOffset_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpDataSetReaderMessageDataType Clone() {
    return new UadpDataSetReaderMessageDataType(this);
  }

  /// <summary>Field number for the "DataSetClassId" field.</summary>
  public const int DataSetClassIdFieldNumber = 1;
  private global::Guid dataSetClassId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Guid DataSetClassId {
    get { return dataSetClassId_; }
    set {
      dataSetClassId_ = value;
    }
  }

  /// <summary>Field number for the "DataSetMessageContentMask" field.</summary>
  public const int DataSetMessageContentMaskFieldNumber = 2;
  private readonly static uint DataSetMessageContentMaskDefaultValue = 0;

  private uint dataSetMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetMessageContentMask {
    get { if ((_hasBits0 & 1) != 0) { return dataSetMessageContentMask_; } else { return DataSetMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetMessageContentMask {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetMessageContentMask() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetOffset" field.</summary>
  public const int DataSetOffsetFieldNumber = 3;
  private readonly static uint DataSetOffsetDefaultValue = 0;

  private uint dataSetOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetOffset {
    get { if ((_hasBits0 & 2) != 0) { return dataSetOffset_; } else { return DataSetOffsetDefaultValue; } }
    set {
      _hasBits0 |= 2;
      dataSetOffset_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetOffset {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DataSetOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetOffset() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "GroupVersion" field.</summary>
  public const int GroupVersionFieldNumber = 4;
  private readonly static uint GroupVersionDefaultValue = 0;

  private uint groupVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupVersion {
    get { if ((_hasBits0 & 4) != 0) { return groupVersion_; } else { return GroupVersionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      groupVersion_ = value;
    }
  }
  /// <summary>Gets whether the "GroupVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGroupVersion {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "GroupVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGroupVersion() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "NetworkMessageContentMask" field.</summary>
  public const int NetworkMessageContentMaskFieldNumber = 5;
  private readonly static uint NetworkMessageContentMaskDefaultValue = 0;

  private uint networkMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageContentMask {
    get { if ((_hasBits0 & 8) != 0) { return networkMessageContentMask_; } else { return NetworkMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      networkMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageContentMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageContentMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "NetworkMessageNumber" field.</summary>
  public const int NetworkMessageNumberFieldNumber = 6;
  private readonly static uint NetworkMessageNumberDefaultValue = 0;

  private uint networkMessageNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageNumber {
    get { if ((_hasBits0 & 16) != 0) { return networkMessageNumber_; } else { return NetworkMessageNumberDefaultValue; } }
    set {
      _hasBits0 |= 16;
      networkMessageNumber_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageNumber {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageNumber() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "ProcessingOffset" field.</summary>
  public const int ProcessingOffsetFieldNumber = 7;
  private readonly static double ProcessingOffsetDefaultValue = 0D;

  private double processingOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ProcessingOffset {
    get { if ((_hasBits0 & 32) != 0) { return processingOffset_; } else { return ProcessingOffsetDefaultValue; } }
    set {
      _hasBits0 |= 32;
      processingOffset_ = value;
    }
  }
  /// <summary>Gets whether the "ProcessingOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessingOffset {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ProcessingOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessingOffset() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "PublishingInterval" field.</summary>
  public const int PublishingIntervalFieldNumber = 8;
  private readonly static double PublishingIntervalDefaultValue = 0D;

  private double publishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double PublishingInterval {
    get { if ((_hasBits0 & 64) != 0) { return publishingInterval_; } else { return PublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 64;
      publishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingInterval {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "PublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingInterval() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "ReceiveOffset" field.</summary>
  public const int ReceiveOffsetFieldNumber = 9;
  private readonly static double ReceiveOffsetDefaultValue = 0D;

  private double receiveOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ReceiveOffset {
    get { if ((_hasBits0 & 128) != 0) { return receiveOffset_; } else { return ReceiveOffsetDefaultValue; } }
    set {
      _hasBits0 |= 128;
      receiveOffset_ = value;
    }
  }
  /// <summary>Gets whether the "ReceiveOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReceiveOffset {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "ReceiveOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReceiveOffset() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UadpDataSetReaderMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UadpDataSetReaderMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataSetClassId, other.DataSetClassId)) return false;
    if (DataSetMessageContentMask != other.DataSetMessageContentMask) return false;
    if (DataSetOffset != other.DataSetOffset) return false;
    if (GroupVersion != other.GroupVersion) return false;
    if (NetworkMessageContentMask != other.NetworkMessageContentMask) return false;
    if (NetworkMessageNumber != other.NetworkMessageNumber) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProcessingOffset, other.ProcessingOffset)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PublishingInterval, other.PublishingInterval)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReceiveOffset, other.ReceiveOffset)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataSetClassId_ != null) hash ^= DataSetClassId.GetHashCode();
    if (HasDataSetMessageContentMask) hash ^= DataSetMessageContentMask.GetHashCode();
    if (HasDataSetOffset) hash ^= DataSetOffset.GetHashCode();
    if (HasGroupVersion) hash ^= GroupVersion.GetHashCode();
    if (HasNetworkMessageContentMask) hash ^= NetworkMessageContentMask.GetHashCode();
    if (HasNetworkMessageNumber) hash ^= NetworkMessageNumber.GetHashCode();
    if (HasProcessingOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProcessingOffset);
    if (HasPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PublishingInterval);
    if (HasReceiveOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReceiveOffset);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataSetClassId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataSetClassId);
    }
    if (HasDataSetMessageContentMask) {
      output.WriteRawTag(16);
      output.WriteUInt32(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      output.WriteRawTag(24);
      output.WriteUInt32(DataSetOffset);
    }
    if (HasGroupVersion) {
      output.WriteRawTag(32);
      output.WriteUInt32(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      output.WriteRawTag(40);
      output.WriteUInt32(NetworkMessageContentMask);
    }
    if (HasNetworkMessageNumber) {
      output.WriteRawTag(48);
      output.WriteUInt32(NetworkMessageNumber);
    }
    if (HasProcessingOffset) {
      output.WriteRawTag(57);
      output.WriteDouble(ProcessingOffset);
    }
    if (HasPublishingInterval) {
      output.WriteRawTag(65);
      output.WriteDouble(PublishingInterval);
    }
    if (HasReceiveOffset) {
      output.WriteRawTag(73);
      output.WriteDouble(ReceiveOffset);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataSetClassId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetClassId);
    }
    if (HasDataSetMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetOffset);
    }
    if (HasGroupVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageContentMask);
    }
    if (HasNetworkMessageNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageNumber);
    }
    if (HasProcessingOffset) {
      size += 1 + 8;
    }
    if (HasPublishingInterval) {
      size += 1 + 8;
    }
    if (HasReceiveOffset) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UadpDataSetReaderMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.dataSetClassId_ != null) {
      if (dataSetClassId_ == null) {
        DataSetClassId = new global::Guid();
      }
      DataSetClassId.MergeFrom(other.DataSetClassId);
    }
    if (other.HasDataSetMessageContentMask) {
      DataSetMessageContentMask = other.DataSetMessageContentMask;
    }
    if (other.HasDataSetOffset) {
      DataSetOffset = other.DataSetOffset;
    }
    if (other.HasGroupVersion) {
      GroupVersion = other.GroupVersion;
    }
    if (other.HasNetworkMessageContentMask) {
      NetworkMessageContentMask = other.NetworkMessageContentMask;
    }
    if (other.HasNetworkMessageNumber) {
      NetworkMessageNumber = other.NetworkMessageNumber;
    }
    if (other.HasProcessingOffset) {
      ProcessingOffset = other.ProcessingOffset;
    }
    if (other.HasPublishingInterval) {
      PublishingInterval = other.PublishingInterval;
    }
    if (other.HasReceiveOffset) {
      ReceiveOffset = other.ReceiveOffset;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataSetClassId_ == null) {
            DataSetClassId = new global::Guid();
          }
          input.ReadMessage(DataSetClassId);
          break;
        }
        case 16: {
          DataSetMessageContentMask = input.ReadUInt32();
          break;
        }
        case 24: {
          DataSetOffset = input.ReadUInt32();
          break;
        }
        case 32: {
          GroupVersion = input.ReadUInt32();
          break;
        }
        case 40: {
          NetworkMessageContentMask = input.ReadUInt32();
          break;
        }
        case 48: {
          NetworkMessageNumber = input.ReadUInt32();
          break;
        }
        case 57: {
          ProcessingOffset = input.ReadDouble();
          break;
        }
        case 65: {
          PublishingInterval = input.ReadDouble();
          break;
        }
        case 73: {
          ReceiveOffset = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class UadpDataSetWriterMessageDataType : pb::IMessage<UadpDataSetWriterMessageDataType> {
  private static readonly pb::MessageParser<UadpDataSetWriterMessageDataType> _parser = new pb::MessageParser<UadpDataSetWriterMessageDataType>(() => new UadpDataSetWriterMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UadpDataSetWriterMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[136]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpDataSetWriterMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpDataSetWriterMessageDataType(UadpDataSetWriterMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    configuredSize_ = other.configuredSize_;
    dataSetMessageContentMask_ = other.dataSetMessageContentMask_;
    dataSetOffset_ = other.dataSetOffset_;
    networkMessageNumber_ = other.networkMessageNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpDataSetWriterMessageDataType Clone() {
    return new UadpDataSetWriterMessageDataType(this);
  }

  /// <summary>Field number for the "ConfiguredSize" field.</summary>
  public const int ConfiguredSizeFieldNumber = 1;
  private readonly static uint ConfiguredSizeDefaultValue = 0;

  private uint configuredSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ConfiguredSize {
    get { if ((_hasBits0 & 1) != 0) { return configuredSize_; } else { return ConfiguredSizeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      configuredSize_ = value;
    }
  }
  /// <summary>Gets whether the "ConfiguredSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasConfiguredSize {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ConfiguredSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConfiguredSize() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetMessageContentMask" field.</summary>
  public const int DataSetMessageContentMaskFieldNumber = 2;
  private readonly static uint DataSetMessageContentMaskDefaultValue = 0;

  private uint dataSetMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetMessageContentMask {
    get { if ((_hasBits0 & 2) != 0) { return dataSetMessageContentMask_; } else { return DataSetMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 2;
      dataSetMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetMessageContentMask {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DataSetMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetMessageContentMask() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "DataSetOffset" field.</summary>
  public const int DataSetOffsetFieldNumber = 3;
  private readonly static uint DataSetOffsetDefaultValue = 0;

  private uint dataSetOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetOffset {
    get { if ((_hasBits0 & 4) != 0) { return dataSetOffset_; } else { return DataSetOffsetDefaultValue; } }
    set {
      _hasBits0 |= 4;
      dataSetOffset_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetOffset {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "DataSetOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetOffset() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "NetworkMessageNumber" field.</summary>
  public const int NetworkMessageNumberFieldNumber = 4;
  private readonly static uint NetworkMessageNumberDefaultValue = 0;

  private uint networkMessageNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageNumber {
    get { if ((_hasBits0 & 8) != 0) { return networkMessageNumber_; } else { return NetworkMessageNumberDefaultValue; } }
    set {
      _hasBits0 |= 8;
      networkMessageNumber_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageNumber {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageNumber() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UadpDataSetWriterMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UadpDataSetWriterMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfiguredSize != other.ConfiguredSize) return false;
    if (DataSetMessageContentMask != other.DataSetMessageContentMask) return false;
    if (DataSetOffset != other.DataSetOffset) return false;
    if (NetworkMessageNumber != other.NetworkMessageNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConfiguredSize) hash ^= ConfiguredSize.GetHashCode();
    if (HasDataSetMessageContentMask) hash ^= DataSetMessageContentMask.GetHashCode();
    if (HasDataSetOffset) hash ^= DataSetOffset.GetHashCode();
    if (HasNetworkMessageNumber) hash ^= NetworkMessageNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasConfiguredSize) {
      output.WriteRawTag(8);
      output.WriteUInt32(ConfiguredSize);
    }
    if (HasDataSetMessageContentMask) {
      output.WriteRawTag(16);
      output.WriteUInt32(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      output.WriteRawTag(24);
      output.WriteUInt32(DataSetOffset);
    }
    if (HasNetworkMessageNumber) {
      output.WriteRawTag(32);
      output.WriteUInt32(NetworkMessageNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasConfiguredSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfiguredSize);
    }
    if (HasDataSetMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetOffset);
    }
    if (HasNetworkMessageNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UadpDataSetWriterMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasConfiguredSize) {
      ConfiguredSize = other.ConfiguredSize;
    }
    if (other.HasDataSetMessageContentMask) {
      DataSetMessageContentMask = other.DataSetMessageContentMask;
    }
    if (other.HasDataSetOffset) {
      DataSetOffset = other.DataSetOffset;
    }
    if (other.HasNetworkMessageNumber) {
      NetworkMessageNumber = other.NetworkMessageNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ConfiguredSize = input.ReadUInt32();
          break;
        }
        case 16: {
          DataSetMessageContentMask = input.ReadUInt32();
          break;
        }
        case 24: {
          DataSetOffset = input.ReadUInt32();
          break;
        }
        case 32: {
          NetworkMessageNumber = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UadpWriterGroupMessageDataType : pb::IMessage<UadpWriterGroupMessageDataType> {
  private static readonly pb::MessageParser<UadpWriterGroupMessageDataType> _parser = new pb::MessageParser<UadpWriterGroupMessageDataType>(() => new UadpWriterGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UadpWriterGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[137]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpWriterGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpWriterGroupMessageDataType(UadpWriterGroupMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetOrdering_ = other.dataSetOrdering_;
    groupVersion_ = other.groupVersion_;
    networkMessageContentMask_ = other.networkMessageContentMask_;
    publishingOffset_ = other.publishingOffset_ != null ? other.publishingOffset_.Clone() : null;
    samplingOffset_ = other.samplingOffset_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UadpWriterGroupMessageDataType Clone() {
    return new UadpWriterGroupMessageDataType(this);
  }

  /// <summary>Field number for the "DataSetOrdering" field.</summary>
  public const int DataSetOrderingFieldNumber = 1;
  private readonly static global::UadpWriterGroupMessageDataType.Types.DataSetOrderingType DataSetOrderingDefaultValue = global::UadpWriterGroupMessageDataType.Types.DataSetOrderingType.AscendingWriterIdSingle2;

  private global::UadpWriterGroupMessageDataType.Types.DataSetOrderingType dataSetOrdering_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UadpWriterGroupMessageDataType.Types.DataSetOrderingType DataSetOrdering {
    get { if ((_hasBits0 & 1) != 0) { return dataSetOrdering_; } else { return DataSetOrderingDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetOrdering_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetOrdering" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetOrdering {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetOrdering" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetOrdering() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "GroupVersion" field.</summary>
  public const int GroupVersionFieldNumber = 2;
  private readonly static uint GroupVersionDefaultValue = 0;

  private uint groupVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupVersion {
    get { if ((_hasBits0 & 2) != 0) { return groupVersion_; } else { return GroupVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      groupVersion_ = value;
    }
  }
  /// <summary>Gets whether the "GroupVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGroupVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "GroupVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGroupVersion() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NetworkMessageContentMask" field.</summary>
  public const int NetworkMessageContentMaskFieldNumber = 3;
  private readonly static uint NetworkMessageContentMaskDefaultValue = 0;

  private uint networkMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageContentMask {
    get { if ((_hasBits0 & 4) != 0) { return networkMessageContentMask_; } else { return NetworkMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      networkMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageContentMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageContentMask() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "PublishingOffset" field.</summary>
  public const int PublishingOffsetFieldNumber = 4;
  private global::ListOfDouble publishingOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDouble PublishingOffset {
    get { return publishingOffset_; }
    set {
      publishingOffset_ = value;
    }
  }

  /// <summary>Field number for the "SamplingOffset" field.</summary>
  public const int SamplingOffsetFieldNumber = 5;
  private readonly static double SamplingOffsetDefaultValue = 0D;

  private double samplingOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double SamplingOffset {
    get { if ((_hasBits0 & 8) != 0) { return samplingOffset_; } else { return SamplingOffsetDefaultValue; } }
    set {
      _hasBits0 |= 8;
      samplingOffset_ = value;
    }
  }
  /// <summary>Gets whether the "SamplingOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSamplingOffset {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SamplingOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSamplingOffset() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UadpWriterGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UadpWriterGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataSetOrdering != other.DataSetOrdering) return false;
    if (GroupVersion != other.GroupVersion) return false;
    if (NetworkMessageContentMask != other.NetworkMessageContentMask) return false;
    if (!object.Equals(PublishingOffset, other.PublishingOffset)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SamplingOffset, other.SamplingOffset)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDataSetOrdering) hash ^= DataSetOrdering.GetHashCode();
    if (HasGroupVersion) hash ^= GroupVersion.GetHashCode();
    if (HasNetworkMessageContentMask) hash ^= NetworkMessageContentMask.GetHashCode();
    if (publishingOffset_ != null) hash ^= PublishingOffset.GetHashCode();
    if (HasSamplingOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SamplingOffset);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDataSetOrdering) {
      output.WriteRawTag(8);
      output.WriteEnum((int) DataSetOrdering);
    }
    if (HasGroupVersion) {
      output.WriteRawTag(16);
      output.WriteUInt32(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      output.WriteRawTag(24);
      output.WriteUInt32(NetworkMessageContentMask);
    }
    if (publishingOffset_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(PublishingOffset);
    }
    if (HasSamplingOffset) {
      output.WriteRawTag(41);
      output.WriteDouble(SamplingOffset);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDataSetOrdering) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataSetOrdering);
    }
    if (HasGroupVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageContentMask);
    }
    if (publishingOffset_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishingOffset);
    }
    if (HasSamplingOffset) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UadpWriterGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDataSetOrdering) {
      DataSetOrdering = other.DataSetOrdering;
    }
    if (other.HasGroupVersion) {
      GroupVersion = other.GroupVersion;
    }
    if (other.HasNetworkMessageContentMask) {
      NetworkMessageContentMask = other.NetworkMessageContentMask;
    }
    if (other.publishingOffset_ != null) {
      if (publishingOffset_ == null) {
        PublishingOffset = new global::ListOfDouble();
      }
      PublishingOffset.MergeFrom(other.PublishingOffset);
    }
    if (other.HasSamplingOffset) {
      SamplingOffset = other.SamplingOffset;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DataSetOrdering = (global::UadpWriterGroupMessageDataType.Types.DataSetOrderingType) input.ReadEnum();
          break;
        }
        case 16: {
          GroupVersion = input.ReadUInt32();
          break;
        }
        case 24: {
          NetworkMessageContentMask = input.ReadUInt32();
          break;
        }
        case 34: {
          if (publishingOffset_ == null) {
            PublishingOffset = new global::ListOfDouble();
          }
          input.ReadMessage(PublishingOffset);
          break;
        }
        case 41: {
          SamplingOffset = input.ReadDouble();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the UadpWriterGroupMessageDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DataSetOrderingType {
      [pbr::OriginalName("DataSetOrderingType_AscendingWriterIdSingle_2")] AscendingWriterIdSingle2 = 1,
      [pbr::OriginalName("DataSetOrderingType_AscendingWriterId_1")] AscendingWriterId1 = 2,
      [pbr::OriginalName("DataSetOrderingType_Undefined_0")] Undefined0 = 3,
    }

  }
  #endregion

}

public sealed partial class Union : pb::IMessage<Union> {
  private static readonly pb::MessageParser<Union> _parser = new pb::MessageParser<Union>(() => new Union());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Union> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[138]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Union() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Union(Union other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Union Clone() {
    return new Union(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Union);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Union other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Union other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class UnsignedRationalNumber : pb::IMessage<UnsignedRationalNumber> {
  private static readonly pb::MessageParser<UnsignedRationalNumber> _parser = new pb::MessageParser<UnsignedRationalNumber>(() => new UnsignedRationalNumber());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnsignedRationalNumber> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[139]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnsignedRationalNumber() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnsignedRationalNumber(UnsignedRationalNumber other) : this() {
    _hasBits0 = other._hasBits0;
    denominator_ = other.denominator_;
    numerator_ = other.numerator_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnsignedRationalNumber Clone() {
    return new UnsignedRationalNumber(this);
  }

  /// <summary>Field number for the "Denominator" field.</summary>
  public const int DenominatorFieldNumber = 1;
  private readonly static uint DenominatorDefaultValue = 0;

  private uint denominator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Denominator {
    get { if ((_hasBits0 & 1) != 0) { return denominator_; } else { return DenominatorDefaultValue; } }
    set {
      _hasBits0 |= 1;
      denominator_ = value;
    }
  }
  /// <summary>Gets whether the "Denominator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDenominator {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Denominator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDenominator() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Numerator" field.</summary>
  public const int NumeratorFieldNumber = 2;
  private readonly static uint NumeratorDefaultValue = 0;

  private uint numerator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Numerator {
    get { if ((_hasBits0 & 2) != 0) { return numerator_; } else { return NumeratorDefaultValue; } }
    set {
      _hasBits0 |= 2;
      numerator_ = value;
    }
  }
  /// <summary>Gets whether the "Numerator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNumerator {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Numerator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNumerator() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnsignedRationalNumber);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnsignedRationalNumber other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Denominator != other.Denominator) return false;
    if (Numerator != other.Numerator) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDenominator) hash ^= Denominator.GetHashCode();
    if (HasNumerator) hash ^= Numerator.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDenominator) {
      output.WriteRawTag(8);
      output.WriteUInt32(Denominator);
    }
    if (HasNumerator) {
      output.WriteRawTag(16);
      output.WriteUInt32(Numerator);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDenominator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Denominator);
    }
    if (HasNumerator) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Numerator);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnsignedRationalNumber other) {
    if (other == null) {
      return;
    }
    if (other.HasDenominator) {
      Denominator = other.Denominator;
    }
    if (other.HasNumerator) {
      Numerator = other.Numerator;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Denominator = input.ReadUInt32();
          break;
        }
        case 16: {
          Numerator = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UserIdentityToken : pb::IMessage<UserIdentityToken> {
  private static readonly pb::MessageParser<UserIdentityToken> _parser = new pb::MessageParser<UserIdentityToken>(() => new UserIdentityToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserIdentityToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[140]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserIdentityToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserIdentityToken(UserIdentityToken other) : this() {
    certificateData_ = other.certificateData_;
    encryptionAlgorithm_ = other.encryptionAlgorithm_;
    password_ = other.password_;
    policyId_ = other.policyId_;
    tokenData_ = other.tokenData_;
    userName_ = other.userName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserIdentityToken Clone() {
    return new UserIdentityToken(this);
  }

  /// <summary>Field number for the "CertificateData" field.</summary>
  public const int CertificateDataFieldNumber = 1;
  private readonly static pb::ByteString CertificateDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString certificateData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CertificateData {
    get { return certificateData_ ?? CertificateDataDefaultValue; }
    set {
      certificateData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "CertificateData" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCertificateData {
    get { return certificateData_ != null; }
  }
  /// <summary>Clears the value of the "CertificateData" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCertificateData() {
    certificateData_ = null;
  }

  /// <summary>Field number for the "EncryptionAlgorithm" field.</summary>
  public const int EncryptionAlgorithmFieldNumber = 2;
  private readonly static string EncryptionAlgorithmDefaultValue = "";

  private string encryptionAlgorithm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EncryptionAlgorithm {
    get { return encryptionAlgorithm_ ?? EncryptionAlgorithmDefaultValue; }
    set {
      encryptionAlgorithm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EncryptionAlgorithm" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEncryptionAlgorithm {
    get { return encryptionAlgorithm_ != null; }
  }
  /// <summary>Clears the value of the "EncryptionAlgorithm" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEncryptionAlgorithm() {
    encryptionAlgorithm_ = null;
  }

  /// <summary>Field number for the "Password" field.</summary>
  public const int PasswordFieldNumber = 3;
  private readonly static pb::ByteString PasswordDefaultValue = pb::ByteString.Empty;

  private pb::ByteString password_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Password {
    get { return password_ ?? PasswordDefaultValue; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Password" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPassword {
    get { return password_ != null; }
  }
  /// <summary>Clears the value of the "Password" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPassword() {
    password_ = null;
  }

  /// <summary>Field number for the "PolicyId" field.</summary>
  public const int PolicyIdFieldNumber = 4;
  private readonly static string PolicyIdDefaultValue = "";

  private string policyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PolicyId {
    get { return policyId_ ?? PolicyIdDefaultValue; }
    set {
      policyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "PolicyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPolicyId {
    get { return policyId_ != null; }
  }
  /// <summary>Clears the value of the "PolicyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPolicyId() {
    policyId_ = null;
  }

  /// <summary>Field number for the "TokenData" field.</summary>
  public const int TokenDataFieldNumber = 5;
  private readonly static pb::ByteString TokenDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString tokenData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString TokenData {
    get { return tokenData_ ?? TokenDataDefaultValue; }
    set {
      tokenData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "TokenData" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTokenData {
    get { return tokenData_ != null; }
  }
  /// <summary>Clears the value of the "TokenData" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTokenData() {
    tokenData_ = null;
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 6;
  private readonly static string UserNameDefaultValue = "";

  private string userName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_ ?? UserNameDefaultValue; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName {
    get { return userName_ != null; }
  }
  /// <summary>Clears the value of the "UserName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName() {
    userName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserIdentityToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserIdentityToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CertificateData != other.CertificateData) return false;
    if (EncryptionAlgorithm != other.EncryptionAlgorithm) return false;
    if (Password != other.Password) return false;
    if (PolicyId != other.PolicyId) return false;
    if (TokenData != other.TokenData) return false;
    if (UserName != other.UserName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCertificateData) hash ^= CertificateData.GetHashCode();
    if (HasEncryptionAlgorithm) hash ^= EncryptionAlgorithm.GetHashCode();
    if (HasPassword) hash ^= Password.GetHashCode();
    if (HasPolicyId) hash ^= PolicyId.GetHashCode();
    if (HasTokenData) hash ^= TokenData.GetHashCode();
    if (HasUserName) hash ^= UserName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCertificateData) {
      output.WriteRawTag(10);
      output.WriteBytes(CertificateData);
    }
    if (HasEncryptionAlgorithm) {
      output.WriteRawTag(18);
      output.WriteString(EncryptionAlgorithm);
    }
    if (HasPassword) {
      output.WriteRawTag(26);
      output.WriteBytes(Password);
    }
    if (HasPolicyId) {
      output.WriteRawTag(34);
      output.WriteString(PolicyId);
    }
    if (HasTokenData) {
      output.WriteRawTag(42);
      output.WriteBytes(TokenData);
    }
    if (HasUserName) {
      output.WriteRawTag(50);
      output.WriteString(UserName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCertificateData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CertificateData);
    }
    if (HasEncryptionAlgorithm) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptionAlgorithm);
    }
    if (HasPassword) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
    }
    if (HasPolicyId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyId);
    }
    if (HasTokenData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(TokenData);
    }
    if (HasUserName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserIdentityToken other) {
    if (other == null) {
      return;
    }
    if (other.HasCertificateData) {
      CertificateData = other.CertificateData;
    }
    if (other.HasEncryptionAlgorithm) {
      EncryptionAlgorithm = other.EncryptionAlgorithm;
    }
    if (other.HasPassword) {
      Password = other.Password;
    }
    if (other.HasPolicyId) {
      PolicyId = other.PolicyId;
    }
    if (other.HasTokenData) {
      TokenData = other.TokenData;
    }
    if (other.HasUserName) {
      UserName = other.UserName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CertificateData = input.ReadBytes();
          break;
        }
        case 18: {
          EncryptionAlgorithm = input.ReadString();
          break;
        }
        case 26: {
          Password = input.ReadBytes();
          break;
        }
        case 34: {
          PolicyId = input.ReadString();
          break;
        }
        case 42: {
          TokenData = input.ReadBytes();
          break;
        }
        case 50: {
          UserName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UserNameIdentityToken : pb::IMessage<UserNameIdentityToken> {
  private static readonly pb::MessageParser<UserNameIdentityToken> _parser = new pb::MessageParser<UserNameIdentityToken>(() => new UserNameIdentityToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserNameIdentityToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[141]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserNameIdentityToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserNameIdentityToken(UserNameIdentityToken other) : this() {
    encryptionAlgorithm_ = other.encryptionAlgorithm_;
    password_ = other.password_;
    policyId_ = other.policyId_;
    userName_ = other.userName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserNameIdentityToken Clone() {
    return new UserNameIdentityToken(this);
  }

  /// <summary>Field number for the "EncryptionAlgorithm" field.</summary>
  public const int EncryptionAlgorithmFieldNumber = 1;
  private readonly static string EncryptionAlgorithmDefaultValue = "";

  private string encryptionAlgorithm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EncryptionAlgorithm {
    get { return encryptionAlgorithm_ ?? EncryptionAlgorithmDefaultValue; }
    set {
      encryptionAlgorithm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EncryptionAlgorithm" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEncryptionAlgorithm {
    get { return encryptionAlgorithm_ != null; }
  }
  /// <summary>Clears the value of the "EncryptionAlgorithm" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEncryptionAlgorithm() {
    encryptionAlgorithm_ = null;
  }

  /// <summary>Field number for the "Password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private readonly static pb::ByteString PasswordDefaultValue = pb::ByteString.Empty;

  private pb::ByteString password_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Password {
    get { return password_ ?? PasswordDefaultValue; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Password" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPassword {
    get { return password_ != null; }
  }
  /// <summary>Clears the value of the "Password" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPassword() {
    password_ = null;
  }

  /// <summary>Field number for the "PolicyId" field.</summary>
  public const int PolicyIdFieldNumber = 3;
  private readonly static string PolicyIdDefaultValue = "";

  private string policyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PolicyId {
    get { return policyId_ ?? PolicyIdDefaultValue; }
    set {
      policyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "PolicyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPolicyId {
    get { return policyId_ != null; }
  }
  /// <summary>Clears the value of the "PolicyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPolicyId() {
    policyId_ = null;
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 4;
  private readonly static string UserNameDefaultValue = "";

  private string userName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_ ?? UserNameDefaultValue; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName {
    get { return userName_ != null; }
  }
  /// <summary>Clears the value of the "UserName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName() {
    userName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserNameIdentityToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserNameIdentityToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EncryptionAlgorithm != other.EncryptionAlgorithm) return false;
    if (Password != other.Password) return false;
    if (PolicyId != other.PolicyId) return false;
    if (UserName != other.UserName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEncryptionAlgorithm) hash ^= EncryptionAlgorithm.GetHashCode();
    if (HasPassword) hash ^= Password.GetHashCode();
    if (HasPolicyId) hash ^= PolicyId.GetHashCode();
    if (HasUserName) hash ^= UserName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEncryptionAlgorithm) {
      output.WriteRawTag(10);
      output.WriteString(EncryptionAlgorithm);
    }
    if (HasPassword) {
      output.WriteRawTag(18);
      output.WriteBytes(Password);
    }
    if (HasPolicyId) {
      output.WriteRawTag(26);
      output.WriteString(PolicyId);
    }
    if (HasUserName) {
      output.WriteRawTag(34);
      output.WriteString(UserName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEncryptionAlgorithm) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptionAlgorithm);
    }
    if (HasPassword) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
    }
    if (HasPolicyId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyId);
    }
    if (HasUserName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserNameIdentityToken other) {
    if (other == null) {
      return;
    }
    if (other.HasEncryptionAlgorithm) {
      EncryptionAlgorithm = other.EncryptionAlgorithm;
    }
    if (other.HasPassword) {
      Password = other.Password;
    }
    if (other.HasPolicyId) {
      PolicyId = other.PolicyId;
    }
    if (other.HasUserName) {
      UserName = other.UserName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EncryptionAlgorithm = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadBytes();
          break;
        }
        case 26: {
          PolicyId = input.ReadString();
          break;
        }
        case 34: {
          UserName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UserTokenPolicy : pb::IMessage<UserTokenPolicy> {
  private static readonly pb::MessageParser<UserTokenPolicy> _parser = new pb::MessageParser<UserTokenPolicy>(() => new UserTokenPolicy());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserTokenPolicy> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[142]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserTokenPolicy() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserTokenPolicy(UserTokenPolicy other) : this() {
    _hasBits0 = other._hasBits0;
    issuedTokenType_ = other.issuedTokenType_;
    issuerEndpointUrl_ = other.issuerEndpointUrl_;
    policyId_ = other.policyId_;
    securityPolicyUri_ = other.securityPolicyUri_;
    tokenType_ = other.tokenType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserTokenPolicy Clone() {
    return new UserTokenPolicy(this);
  }

  /// <summary>Field number for the "IssuedTokenType" field.</summary>
  public const int IssuedTokenTypeFieldNumber = 1;
  private readonly static string IssuedTokenTypeDefaultValue = "";

  private string issuedTokenType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IssuedTokenType {
    get { return issuedTokenType_ ?? IssuedTokenTypeDefaultValue; }
    set {
      issuedTokenType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IssuedTokenType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIssuedTokenType {
    get { return issuedTokenType_ != null; }
  }
  /// <summary>Clears the value of the "IssuedTokenType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIssuedTokenType() {
    issuedTokenType_ = null;
  }

  /// <summary>Field number for the "IssuerEndpointUrl" field.</summary>
  public const int IssuerEndpointUrlFieldNumber = 2;
  private readonly static string IssuerEndpointUrlDefaultValue = "";

  private string issuerEndpointUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IssuerEndpointUrl {
    get { return issuerEndpointUrl_ ?? IssuerEndpointUrlDefaultValue; }
    set {
      issuerEndpointUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IssuerEndpointUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIssuerEndpointUrl {
    get { return issuerEndpointUrl_ != null; }
  }
  /// <summary>Clears the value of the "IssuerEndpointUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIssuerEndpointUrl() {
    issuerEndpointUrl_ = null;
  }

  /// <summary>Field number for the "PolicyId" field.</summary>
  public const int PolicyIdFieldNumber = 3;
  private readonly static string PolicyIdDefaultValue = "";

  private string policyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PolicyId {
    get { return policyId_ ?? PolicyIdDefaultValue; }
    set {
      policyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "PolicyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPolicyId {
    get { return policyId_ != null; }
  }
  /// <summary>Clears the value of the "PolicyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPolicyId() {
    policyId_ = null;
  }

  /// <summary>Field number for the "SecurityPolicyUri" field.</summary>
  public const int SecurityPolicyUriFieldNumber = 4;
  private readonly static string SecurityPolicyUriDefaultValue = "";

  private string securityPolicyUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityPolicyUri {
    get { return securityPolicyUri_ ?? SecurityPolicyUriDefaultValue; }
    set {
      securityPolicyUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityPolicyUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityPolicyUri {
    get { return securityPolicyUri_ != null; }
  }
  /// <summary>Clears the value of the "SecurityPolicyUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityPolicyUri() {
    securityPolicyUri_ = null;
  }

  /// <summary>Field number for the "TokenType" field.</summary>
  public const int TokenTypeFieldNumber = 5;
  private readonly static global::UserTokenPolicy.Types.UserTokenType TokenTypeDefaultValue = global::UserTokenPolicy.Types.UserTokenType.Anonymous0;

  private global::UserTokenPolicy.Types.UserTokenType tokenType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UserTokenPolicy.Types.UserTokenType TokenType {
    get { if ((_hasBits0 & 1) != 0) { return tokenType_; } else { return TokenTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      tokenType_ = value;
    }
  }
  /// <summary>Gets whether the "TokenType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTokenType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "TokenType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTokenType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserTokenPolicy);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserTokenPolicy other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IssuedTokenType != other.IssuedTokenType) return false;
    if (IssuerEndpointUrl != other.IssuerEndpointUrl) return false;
    if (PolicyId != other.PolicyId) return false;
    if (SecurityPolicyUri != other.SecurityPolicyUri) return false;
    if (TokenType != other.TokenType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIssuedTokenType) hash ^= IssuedTokenType.GetHashCode();
    if (HasIssuerEndpointUrl) hash ^= IssuerEndpointUrl.GetHashCode();
    if (HasPolicyId) hash ^= PolicyId.GetHashCode();
    if (HasSecurityPolicyUri) hash ^= SecurityPolicyUri.GetHashCode();
    if (HasTokenType) hash ^= TokenType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIssuedTokenType) {
      output.WriteRawTag(10);
      output.WriteString(IssuedTokenType);
    }
    if (HasIssuerEndpointUrl) {
      output.WriteRawTag(18);
      output.WriteString(IssuerEndpointUrl);
    }
    if (HasPolicyId) {
      output.WriteRawTag(26);
      output.WriteString(PolicyId);
    }
    if (HasSecurityPolicyUri) {
      output.WriteRawTag(34);
      output.WriteString(SecurityPolicyUri);
    }
    if (HasTokenType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) TokenType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIssuedTokenType) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IssuedTokenType);
    }
    if (HasIssuerEndpointUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IssuerEndpointUrl);
    }
    if (HasPolicyId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyId);
    }
    if (HasSecurityPolicyUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityPolicyUri);
    }
    if (HasTokenType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TokenType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserTokenPolicy other) {
    if (other == null) {
      return;
    }
    if (other.HasIssuedTokenType) {
      IssuedTokenType = other.IssuedTokenType;
    }
    if (other.HasIssuerEndpointUrl) {
      IssuerEndpointUrl = other.IssuerEndpointUrl;
    }
    if (other.HasPolicyId) {
      PolicyId = other.PolicyId;
    }
    if (other.HasSecurityPolicyUri) {
      SecurityPolicyUri = other.SecurityPolicyUri;
    }
    if (other.HasTokenType) {
      TokenType = other.TokenType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          IssuedTokenType = input.ReadString();
          break;
        }
        case 18: {
          IssuerEndpointUrl = input.ReadString();
          break;
        }
        case 26: {
          PolicyId = input.ReadString();
          break;
        }
        case 34: {
          SecurityPolicyUri = input.ReadString();
          break;
        }
        case 40: {
          TokenType = (global::UserTokenPolicy.Types.UserTokenType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the UserTokenPolicy message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum UserTokenType {
      [pbr::OriginalName("UserTokenType_Anonymous_0")] Anonymous0 = 1,
      [pbr::OriginalName("UserTokenType_Certificate_2")] Certificate2 = 2,
      [pbr::OriginalName("UserTokenType_IssuedToken_3")] IssuedToken3 = 3,
      [pbr::OriginalName("UserTokenType_UserName_1")] UserName1 = 4,
    }

  }
  #endregion

}

public sealed partial class ValueType : pb::IMessage<ValueType> {
  private static readonly pb::MessageParser<ValueType> _parser = new pb::MessageParser<ValueType>(() => new ValueType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ValueType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[143]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ValueType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ValueType(ValueType other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ValueType Clone() {
    return new ValueType(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ValueType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ValueType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ValueType other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class Variant : pb::IMessage<Variant> {
  private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Variant> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[144]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Variant() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Variant(Variant other) : this() {
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Variant Clone() {
    return new Variant(this);
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 1;
  private global::ValueType value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ValueType Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Variant);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Variant other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (value_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Variant other) {
    if (other == null) {
      return;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::ValueType();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (value_ == null) {
            Value = new global::ValueType();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class Vector : pb::IMessage<Vector> {
  private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[145]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector(Vector other) : this() {
    _hasBits0 = other._hasBits0;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector Clone() {
    return new Vector(this);
  }

  /// <summary>Field number for the "X" field.</summary>
  public const int XFieldNumber = 1;
  private readonly static double XDefaultValue = 0D;

  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
    set {
      _hasBits0 |= 1;
      x_ = value;
    }
  }
  /// <summary>Gets whether the "X" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasX {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "X" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearX() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Y" field.</summary>
  public const int YFieldNumber = 2;
  private readonly static double YDefaultValue = 0D;

  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
    set {
      _hasBits0 |= 2;
      y_ = value;
    }
  }
  /// <summary>Gets whether the "Y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasY {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearY() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Z" field.</summary>
  public const int ZFieldNumber = 3;
  private readonly static double ZDefaultValue = 0D;

  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
    set {
      _hasBits0 |= 4;
      z_ = value;
    }
  }
  /// <summary>Gets whether the "Z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasZ {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearZ() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
    if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
    if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasX) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (HasY) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (HasZ) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasX) {
      size += 1 + 8;
    }
    if (HasY) {
      size += 1 + 8;
    }
    if (HasZ) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector other) {
    if (other == null) {
      return;
    }
    if (other.HasX) {
      X = other.X;
    }
    if (other.HasY) {
      Y = other.Y;
    }
    if (other.HasZ) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class ViewAttributes : pb::IMessage<ViewAttributes> {
  private static readonly pb::MessageParser<ViewAttributes> _parser = new pb::MessageParser<ViewAttributes>(() => new ViewAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ViewAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[146]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewAttributes(ViewAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    containsNoLoops_ = other.containsNoLoops_;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    eventNotifier_ = other.eventNotifier_;
    specifiedAttributes_ = other.specifiedAttributes_;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewAttributes Clone() {
    return new ViewAttributes(this);
  }

  /// <summary>Field number for the "ContainsNoLoops" field.</summary>
  public const int ContainsNoLoopsFieldNumber = 1;
  private readonly static bool ContainsNoLoopsDefaultValue = false;

  private bool containsNoLoops_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ContainsNoLoops {
    get { if ((_hasBits0 & 1) != 0) { return containsNoLoops_; } else { return ContainsNoLoopsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      containsNoLoops_ = value;
    }
  }
  /// <summary>Gets whether the "ContainsNoLoops" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContainsNoLoops {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ContainsNoLoops" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContainsNoLoops() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 2;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 3;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 4;
  private readonly static uint EventNotifierDefaultValue = 0;

  private uint eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotifier {
    get { if ((_hasBits0 & 2) != 0) { return eventNotifier_; } else { return EventNotifierDefaultValue; } }
    set {
      _hasBits0 |= 2;
      eventNotifier_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotifier {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "EventNotifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotifier() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 5;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 4) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 4;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 6;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 7;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 16) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ViewAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ViewAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ContainsNoLoops != other.ContainsNoLoops) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (EventNotifier != other.EventNotifier) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasContainsNoLoops) hash ^= ContainsNoLoops.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasEventNotifier) hash ^= EventNotifier.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasContainsNoLoops) {
      output.WriteRawTag(8);
      output.WriteBool(ContainsNoLoops);
    }
    if (description_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DisplayName);
    }
    if (HasEventNotifier) {
      output.WriteRawTag(32);
      output.WriteUInt32(EventNotifier);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(40);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(48);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(56);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasContainsNoLoops) {
      size += 1 + 1;
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasEventNotifier) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotifier);
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ViewAttributes other) {
    if (other == null) {
      return;
    }
    if (other.HasContainsNoLoops) {
      ContainsNoLoops = other.ContainsNoLoops;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasEventNotifier) {
      EventNotifier = other.EventNotifier;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ContainsNoLoops = input.ReadBool();
          break;
        }
        case 18: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 26: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 32: {
          EventNotifier = input.ReadUInt32();
          break;
        }
        case 40: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 48: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 56: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ViewDescription : pb::IMessage<ViewDescription> {
  private static readonly pb::MessageParser<ViewDescription> _parser = new pb::MessageParser<ViewDescription>(() => new ViewDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ViewDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[147]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewDescription(ViewDescription other) : this() {
    _hasBits0 = other._hasBits0;
    timestamp_ = other.timestamp_;
    viewId_ = other.viewId_ != null ? other.viewId_.Clone() : null;
    viewVersion_ = other.viewVersion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewDescription Clone() {
    return new ViewDescription(this);
  }

  /// <summary>Field number for the "Timestamp" field.</summary>
  public const int TimestampFieldNumber = 1;
  private readonly static long TimestampDefaultValue = 0L;

  private long timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Timestamp {
    get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 1;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "Timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestamp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestamp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ViewId" field.</summary>
  public const int ViewIdFieldNumber = 2;
  private global::NodeId viewId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ViewId {
    get { return viewId_; }
    set {
      viewId_ = value;
    }
  }

  /// <summary>Field number for the "ViewVersion" field.</summary>
  public const int ViewVersionFieldNumber = 3;
  private readonly static uint ViewVersionDefaultValue = 0;

  private uint viewVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ViewVersion {
    get { if ((_hasBits0 & 2) != 0) { return viewVersion_; } else { return ViewVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      viewVersion_ = value;
    }
  }
  /// <summary>Gets whether the "ViewVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasViewVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ViewVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearViewVersion() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ViewDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ViewDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Timestamp != other.Timestamp) return false;
    if (!object.Equals(ViewId, other.ViewId)) return false;
    if (ViewVersion != other.ViewVersion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (viewId_ != null) hash ^= ViewId.GetHashCode();
    if (HasViewVersion) hash ^= ViewVersion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasTimestamp) {
      output.WriteRawTag(8);
      output.WriteInt64(Timestamp);
    }
    if (viewId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ViewId);
    }
    if (HasViewVersion) {
      output.WriteRawTag(24);
      output.WriteUInt32(ViewVersion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (viewId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewId);
    }
    if (HasViewVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ViewVersion);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ViewDescription other) {
    if (other == null) {
      return;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    if (other.viewId_ != null) {
      if (viewId_ == null) {
        ViewId = new global::NodeId();
      }
      ViewId.MergeFrom(other.ViewId);
    }
    if (other.HasViewVersion) {
      ViewVersion = other.ViewVersion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 18: {
          if (viewId_ == null) {
            ViewId = new global::NodeId();
          }
          input.ReadMessage(ViewId);
          break;
        }
        case 24: {
          ViewVersion = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class WriterGroupMessageDataType : pb::IMessage<WriterGroupMessageDataType> {
  private static readonly pb::MessageParser<WriterGroupMessageDataType> _parser = new pb::MessageParser<WriterGroupMessageDataType>(() => new WriterGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WriterGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[148]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupMessageDataType(WriterGroupMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetOrdering_ = other.dataSetOrdering_;
    groupVersion_ = other.groupVersion_;
    networkMessageContentMask_ = other.networkMessageContentMask_;
    publishingOffset_ = other.publishingOffset_ != null ? other.publishingOffset_.Clone() : null;
    samplingOffset_ = other.samplingOffset_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupMessageDataType Clone() {
    return new WriterGroupMessageDataType(this);
  }

  /// <summary>Field number for the "DataSetOrdering" field.</summary>
  public const int DataSetOrderingFieldNumber = 1;
  private readonly static global::WriterGroupMessageDataType.Types.DataSetOrderingType DataSetOrderingDefaultValue = global::WriterGroupMessageDataType.Types.DataSetOrderingType.AscendingWriterIdSingle2;

  private global::WriterGroupMessageDataType.Types.DataSetOrderingType dataSetOrdering_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WriterGroupMessageDataType.Types.DataSetOrderingType DataSetOrdering {
    get { if ((_hasBits0 & 1) != 0) { return dataSetOrdering_; } else { return DataSetOrderingDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetOrdering_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetOrdering" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetOrdering {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetOrdering" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetOrdering() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "GroupVersion" field.</summary>
  public const int GroupVersionFieldNumber = 2;
  private readonly static uint GroupVersionDefaultValue = 0;

  private uint groupVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupVersion {
    get { if ((_hasBits0 & 2) != 0) { return groupVersion_; } else { return GroupVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      groupVersion_ = value;
    }
  }
  /// <summary>Gets whether the "GroupVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGroupVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "GroupVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGroupVersion() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NetworkMessageContentMask" field.</summary>
  public const int NetworkMessageContentMaskFieldNumber = 3;
  private readonly static uint NetworkMessageContentMaskDefaultValue = 0;

  private uint networkMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageContentMask {
    get { if ((_hasBits0 & 4) != 0) { return networkMessageContentMask_; } else { return NetworkMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      networkMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageContentMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageContentMask() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "PublishingOffset" field.</summary>
  public const int PublishingOffsetFieldNumber = 4;
  private global::ListOfDouble publishingOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDouble PublishingOffset {
    get { return publishingOffset_; }
    set {
      publishingOffset_ = value;
    }
  }

  /// <summary>Field number for the "SamplingOffset" field.</summary>
  public const int SamplingOffsetFieldNumber = 5;
  private readonly static double SamplingOffsetDefaultValue = 0D;

  private double samplingOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double SamplingOffset {
    get { if ((_hasBits0 & 8) != 0) { return samplingOffset_; } else { return SamplingOffsetDefaultValue; } }
    set {
      _hasBits0 |= 8;
      samplingOffset_ = value;
    }
  }
  /// <summary>Gets whether the "SamplingOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSamplingOffset {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SamplingOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSamplingOffset() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WriterGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WriterGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataSetOrdering != other.DataSetOrdering) return false;
    if (GroupVersion != other.GroupVersion) return false;
    if (NetworkMessageContentMask != other.NetworkMessageContentMask) return false;
    if (!object.Equals(PublishingOffset, other.PublishingOffset)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SamplingOffset, other.SamplingOffset)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDataSetOrdering) hash ^= DataSetOrdering.GetHashCode();
    if (HasGroupVersion) hash ^= GroupVersion.GetHashCode();
    if (HasNetworkMessageContentMask) hash ^= NetworkMessageContentMask.GetHashCode();
    if (publishingOffset_ != null) hash ^= PublishingOffset.GetHashCode();
    if (HasSamplingOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SamplingOffset);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDataSetOrdering) {
      output.WriteRawTag(8);
      output.WriteEnum((int) DataSetOrdering);
    }
    if (HasGroupVersion) {
      output.WriteRawTag(16);
      output.WriteUInt32(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      output.WriteRawTag(24);
      output.WriteUInt32(NetworkMessageContentMask);
    }
    if (publishingOffset_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(PublishingOffset);
    }
    if (HasSamplingOffset) {
      output.WriteRawTag(41);
      output.WriteDouble(SamplingOffset);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDataSetOrdering) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataSetOrdering);
    }
    if (HasGroupVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageContentMask);
    }
    if (publishingOffset_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishingOffset);
    }
    if (HasSamplingOffset) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WriterGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDataSetOrdering) {
      DataSetOrdering = other.DataSetOrdering;
    }
    if (other.HasGroupVersion) {
      GroupVersion = other.GroupVersion;
    }
    if (other.HasNetworkMessageContentMask) {
      NetworkMessageContentMask = other.NetworkMessageContentMask;
    }
    if (other.publishingOffset_ != null) {
      if (publishingOffset_ == null) {
        PublishingOffset = new global::ListOfDouble();
      }
      PublishingOffset.MergeFrom(other.PublishingOffset);
    }
    if (other.HasSamplingOffset) {
      SamplingOffset = other.SamplingOffset;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DataSetOrdering = (global::WriterGroupMessageDataType.Types.DataSetOrderingType) input.ReadEnum();
          break;
        }
        case 16: {
          GroupVersion = input.ReadUInt32();
          break;
        }
        case 24: {
          NetworkMessageContentMask = input.ReadUInt32();
          break;
        }
        case 34: {
          if (publishingOffset_ == null) {
            PublishingOffset = new global::ListOfDouble();
          }
          input.ReadMessage(PublishingOffset);
          break;
        }
        case 41: {
          SamplingOffset = input.ReadDouble();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the WriterGroupMessageDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DataSetOrderingType {
      [pbr::OriginalName("DataSetOrderingType_AscendingWriterIdSingle_2")] AscendingWriterIdSingle2 = 1,
      [pbr::OriginalName("DataSetOrderingType_AscendingWriterId_1")] AscendingWriterId1 = 2,
      [pbr::OriginalName("DataSetOrderingType_Undefined_0")] Undefined0 = 3,
    }

  }
  #endregion

}

public sealed partial class WriterGroupTransportDataType : pb::IMessage<WriterGroupTransportDataType> {
  private static readonly pb::MessageParser<WriterGroupTransportDataType> _parser = new pb::MessageParser<WriterGroupTransportDataType>(() => new WriterGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WriterGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[149]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupTransportDataType(WriterGroupTransportDataType other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationProfileUri_ = other.authenticationProfileUri_;
    messageRepeatCount_ = other.messageRepeatCount_;
    messageRepeatDelay_ = other.messageRepeatDelay_;
    queueName_ = other.queueName_;
    requestedDeliveryGuarantee_ = other.requestedDeliveryGuarantee_;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupTransportDataType Clone() {
    return new WriterGroupTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "MessageRepeatCount" field.</summary>
  public const int MessageRepeatCountFieldNumber = 2;
  private readonly static uint MessageRepeatCountDefaultValue = 0;

  private uint messageRepeatCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageRepeatCount {
    get { if ((_hasBits0 & 1) != 0) { return messageRepeatCount_; } else { return MessageRepeatCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      messageRepeatCount_ = value;
    }
  }
  /// <summary>Gets whether the "MessageRepeatCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageRepeatCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MessageRepeatCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageRepeatCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "MessageRepeatDelay" field.</summary>
  public const int MessageRepeatDelayFieldNumber = 3;
  private readonly static double MessageRepeatDelayDefaultValue = 0D;

  private double messageRepeatDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MessageRepeatDelay {
    get { if ((_hasBits0 & 2) != 0) { return messageRepeatDelay_; } else { return MessageRepeatDelayDefaultValue; } }
    set {
      _hasBits0 |= 2;
      messageRepeatDelay_ = value;
    }
  }
  /// <summary>Gets whether the "MessageRepeatDelay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageRepeatDelay {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MessageRepeatDelay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageRepeatDelay() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "QueueName" field.</summary>
  public const int QueueNameFieldNumber = 4;
  private readonly static string QueueNameDefaultValue = "";

  private string queueName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string QueueName {
    get { return queueName_ ?? QueueNameDefaultValue; }
    set {
      queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "QueueName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQueueName {
    get { return queueName_ != null; }
  }
  /// <summary>Clears the value of the "QueueName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQueueName() {
    queueName_ = null;
  }

  /// <summary>Field number for the "RequestedDeliveryGuarantee" field.</summary>
  public const int RequestedDeliveryGuaranteeFieldNumber = 5;
  private readonly static global::WriterGroupTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuaranteeDefaultValue = global::WriterGroupTransportDataType.Types.BrokerTransportQualityOfService.AtLeastOnce2;

  private global::WriterGroupTransportDataType.Types.BrokerTransportQualityOfService requestedDeliveryGuarantee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WriterGroupTransportDataType.Types.BrokerTransportQualityOfService RequestedDeliveryGuarantee {
    get { if ((_hasBits0 & 4) != 0) { return requestedDeliveryGuarantee_; } else { return RequestedDeliveryGuaranteeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      requestedDeliveryGuarantee_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedDeliveryGuarantee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedDeliveryGuarantee {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "RequestedDeliveryGuarantee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedDeliveryGuarantee() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 6;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WriterGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WriterGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (MessageRepeatCount != other.MessageRepeatCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MessageRepeatDelay, other.MessageRepeatDelay)) return false;
    if (QueueName != other.QueueName) return false;
    if (RequestedDeliveryGuarantee != other.RequestedDeliveryGuarantee) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (HasMessageRepeatCount) hash ^= MessageRepeatCount.GetHashCode();
    if (HasMessageRepeatDelay) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MessageRepeatDelay);
    if (HasQueueName) hash ^= QueueName.GetHashCode();
    if (HasRequestedDeliveryGuarantee) hash ^= RequestedDeliveryGuarantee.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (HasMessageRepeatCount) {
      output.WriteRawTag(16);
      output.WriteUInt32(MessageRepeatCount);
    }
    if (HasMessageRepeatDelay) {
      output.WriteRawTag(25);
      output.WriteDouble(MessageRepeatDelay);
    }
    if (HasQueueName) {
      output.WriteRawTag(34);
      output.WriteString(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      output.WriteRawTag(40);
      output.WriteEnum((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      output.WriteRawTag(50);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (HasMessageRepeatCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageRepeatCount);
    }
    if (HasMessageRepeatDelay) {
      size += 1 + 8;
    }
    if (HasQueueName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
    }
    if (HasRequestedDeliveryGuarantee) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestedDeliveryGuarantee);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WriterGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.HasMessageRepeatCount) {
      MessageRepeatCount = other.MessageRepeatCount;
    }
    if (other.HasMessageRepeatDelay) {
      MessageRepeatDelay = other.MessageRepeatDelay;
    }
    if (other.HasQueueName) {
      QueueName = other.QueueName;
    }
    if (other.HasRequestedDeliveryGuarantee) {
      RequestedDeliveryGuarantee = other.RequestedDeliveryGuarantee;
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 16: {
          MessageRepeatCount = input.ReadUInt32();
          break;
        }
        case 25: {
          MessageRepeatDelay = input.ReadDouble();
          break;
        }
        case 34: {
          QueueName = input.ReadString();
          break;
        }
        case 40: {
          RequestedDeliveryGuarantee = (global::WriterGroupTransportDataType.Types.BrokerTransportQualityOfService) input.ReadEnum();
          break;
        }
        case 50: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the WriterGroupTransportDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrokerTransportQualityOfService {
      [pbr::OriginalName("BrokerTransportQualityOfService_AtLeastOnce_2")] AtLeastOnce2 = 1,
      [pbr::OriginalName("BrokerTransportQualityOfService_AtMostOnce_3")] AtMostOnce3 = 2,
      [pbr::OriginalName("BrokerTransportQualityOfService_BestEffort_1")] BestEffort1 = 3,
      [pbr::OriginalName("BrokerTransportQualityOfService_ExactlyOnce_4")] ExactlyOnce4 = 4,
      [pbr::OriginalName("BrokerTransportQualityOfService_NotSpecified_0")] NotSpecified0 = 5,
    }

  }
  #endregion

}

public sealed partial class X509IdentityToken : pb::IMessage<X509IdentityToken> {
  private static readonly pb::MessageParser<X509IdentityToken> _parser = new pb::MessageParser<X509IdentityToken>(() => new X509IdentityToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<X509IdentityToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[150]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public X509IdentityToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public X509IdentityToken(X509IdentityToken other) : this() {
    certificateData_ = other.certificateData_;
    policyId_ = other.policyId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public X509IdentityToken Clone() {
    return new X509IdentityToken(this);
  }

  /// <summary>Field number for the "CertificateData" field.</summary>
  public const int CertificateDataFieldNumber = 1;
  private readonly static pb::ByteString CertificateDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString certificateData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CertificateData {
    get { return certificateData_ ?? CertificateDataDefaultValue; }
    set {
      certificateData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "CertificateData" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCertificateData {
    get { return certificateData_ != null; }
  }
  /// <summary>Clears the value of the "CertificateData" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCertificateData() {
    certificateData_ = null;
  }

  /// <summary>Field number for the "PolicyId" field.</summary>
  public const int PolicyIdFieldNumber = 2;
  private readonly static string PolicyIdDefaultValue = "";

  private string policyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PolicyId {
    get { return policyId_ ?? PolicyIdDefaultValue; }
    set {
      policyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "PolicyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPolicyId {
    get { return policyId_ != null; }
  }
  /// <summary>Clears the value of the "PolicyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPolicyId() {
    policyId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as X509IdentityToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(X509IdentityToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CertificateData != other.CertificateData) return false;
    if (PolicyId != other.PolicyId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCertificateData) hash ^= CertificateData.GetHashCode();
    if (HasPolicyId) hash ^= PolicyId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCertificateData) {
      output.WriteRawTag(10);
      output.WriteBytes(CertificateData);
    }
    if (HasPolicyId) {
      output.WriteRawTag(18);
      output.WriteString(PolicyId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCertificateData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CertificateData);
    }
    if (HasPolicyId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(X509IdentityToken other) {
    if (other == null) {
      return;
    }
    if (other.HasCertificateData) {
      CertificateData = other.CertificateData;
    }
    if (other.HasPolicyId) {
      PolicyId = other.PolicyId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CertificateData = input.ReadBytes();
          break;
        }
        case 18: {
          PolicyId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class XVType : pb::IMessage<XVType> {
  private static readonly pb::MessageParser<XVType> _parser = new pb::MessageParser<XVType>(() => new XVType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<XVType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[151]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public XVType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public XVType(XVType other) : this() {
    _hasBits0 = other._hasBits0;
    value_ = other.value_;
    x_ = other.x_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public XVType Clone() {
    return new XVType(this);
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 1;
  private readonly static float ValueDefaultValue = 0F;

  private float value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Value {
    get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
    set {
      _hasBits0 |= 1;
      value_ = value;
    }
  }
  /// <summary>Gets whether the "Value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValue {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValue() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "X" field.</summary>
  public const int XFieldNumber = 2;
  private readonly static double XDefaultValue = 0D;

  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { if ((_hasBits0 & 2) != 0) { return x_; } else { return XDefaultValue; } }
    set {
      _hasBits0 |= 2;
      x_ = value;
    }
  }
  /// <summary>Gets whether the "X" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasX {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "X" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearX() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as XVType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(XVType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
    if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasValue) {
      output.WriteRawTag(13);
      output.WriteFloat(Value);
    }
    if (HasX) {
      output.WriteRawTag(17);
      output.WriteDouble(X);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasValue) {
      size += 1 + 4;
    }
    if (HasX) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(XVType other) {
    if (other == null) {
      return;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    if (other.HasX) {
      X = other.X;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Value = input.ReadFloat();
          break;
        }
        case 17: {
          X = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class XmlElementType : pb::IMessage<XmlElementType> {
  private static readonly pb::MessageParser<XmlElementType> _parser = new pb::MessageParser<XmlElementType>(() => new XmlElementType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<XmlElementType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[152]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public XmlElementType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public XmlElementType(XmlElementType other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public XmlElementType Clone() {
    return new XmlElementType(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as XmlElementType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(XmlElementType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(XmlElementType other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class AddNodesResult : pb::IMessage<AddNodesResult> {
  private static readonly pb::MessageParser<AddNodesResult> _parser = new pb::MessageParser<AddNodesResult>(() => new AddNodesResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddNodesResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[153]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesResult(AddNodesResult other) : this() {
    addedNodeId_ = other.addedNodeId_ != null ? other.addedNodeId_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesResult Clone() {
    return new AddNodesResult(this);
  }

  /// <summary>Field number for the "AddedNodeId" field.</summary>
  public const int AddedNodeIdFieldNumber = 1;
  private global::NodeId addedNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId AddedNodeId {
    get { return addedNodeId_; }
    set {
      addedNodeId_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 2;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddNodesResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddNodesResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AddedNodeId, other.AddedNodeId)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (addedNodeId_ != null) hash ^= AddedNodeId.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (addedNodeId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AddedNodeId);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (addedNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddedNodeId);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddNodesResult other) {
    if (other == null) {
      return;
    }
    if (other.addedNodeId_ != null) {
      if (addedNodeId_ == null) {
        AddedNodeId = new global::NodeId();
      }
      AddedNodeId.MergeFrom(other.AddedNodeId);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (addedNodeId_ == null) {
            AddedNodeId = new global::NodeId();
          }
          input.ReadMessage(AddedNodeId);
          break;
        }
        case 18: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class AddReferencesItem : pb::IMessage<AddReferencesItem> {
  private static readonly pb::MessageParser<AddReferencesItem> _parser = new pb::MessageParser<AddReferencesItem>(() => new AddReferencesItem());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddReferencesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[154]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesItem(AddReferencesItem other) : this() {
    _hasBits0 = other._hasBits0;
    isForward_ = other.isForward_;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    sourceNodeId_ = other.sourceNodeId_ != null ? other.sourceNodeId_.Clone() : null;
    targetNodeClass_ = other.targetNodeClass_;
    targetNodeId_ = other.targetNodeId_ != null ? other.targetNodeId_.Clone() : null;
    targetServerUri_ = other.targetServerUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesItem Clone() {
    return new AddReferencesItem(this);
  }

  /// <summary>Field number for the "IsForward" field.</summary>
  public const int IsForwardFieldNumber = 1;
  private readonly static bool IsForwardDefaultValue = false;

  private bool isForward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsForward {
    get { if ((_hasBits0 & 1) != 0) { return isForward_; } else { return IsForwardDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isForward_ = value;
    }
  }
  /// <summary>Gets whether the "IsForward" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsForward {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsForward" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsForward() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 2;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "SourceNodeId" field.</summary>
  public const int SourceNodeIdFieldNumber = 3;
  private global::NodeId sourceNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId SourceNodeId {
    get { return sourceNodeId_; }
    set {
      sourceNodeId_ = value;
    }
  }

  /// <summary>Field number for the "TargetNodeClass" field.</summary>
  public const int TargetNodeClassFieldNumber = 4;
  private readonly static global::AddReferencesItem.Types.NodeClass TargetNodeClassDefaultValue = global::AddReferencesItem.Types.NodeClass.DataType64;

  private global::AddReferencesItem.Types.NodeClass targetNodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AddReferencesItem.Types.NodeClass TargetNodeClass {
    get { if ((_hasBits0 & 2) != 0) { return targetNodeClass_; } else { return TargetNodeClassDefaultValue; } }
    set {
      _hasBits0 |= 2;
      targetNodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "TargetNodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTargetNodeClass {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "TargetNodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTargetNodeClass() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "TargetNodeId" field.</summary>
  public const int TargetNodeIdFieldNumber = 5;
  private global::ExpandedNodeId targetNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TargetNodeId {
    get { return targetNodeId_; }
    set {
      targetNodeId_ = value;
    }
  }

  /// <summary>Field number for the "TargetServerUri" field.</summary>
  public const int TargetServerUriFieldNumber = 6;
  private readonly static string TargetServerUriDefaultValue = "";

  private string targetServerUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetServerUri {
    get { return targetServerUri_ ?? TargetServerUriDefaultValue; }
    set {
      targetServerUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "TargetServerUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTargetServerUri {
    get { return targetServerUri_ != null; }
  }
  /// <summary>Clears the value of the "TargetServerUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTargetServerUri() {
    targetServerUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddReferencesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddReferencesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsForward != other.IsForward) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (!object.Equals(SourceNodeId, other.SourceNodeId)) return false;
    if (TargetNodeClass != other.TargetNodeClass) return false;
    if (!object.Equals(TargetNodeId, other.TargetNodeId)) return false;
    if (TargetServerUri != other.TargetServerUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIsForward) hash ^= IsForward.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (sourceNodeId_ != null) hash ^= SourceNodeId.GetHashCode();
    if (HasTargetNodeClass) hash ^= TargetNodeClass.GetHashCode();
    if (targetNodeId_ != null) hash ^= TargetNodeId.GetHashCode();
    if (HasTargetServerUri) hash ^= TargetServerUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIsForward) {
      output.WriteRawTag(8);
      output.WriteBool(IsForward);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ReferenceTypeId);
    }
    if (sourceNodeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SourceNodeId);
    }
    if (HasTargetNodeClass) {
      output.WriteRawTag(32);
      output.WriteEnum((int) TargetNodeClass);
    }
    if (targetNodeId_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(TargetNodeId);
    }
    if (HasTargetServerUri) {
      output.WriteRawTag(50);
      output.WriteString(TargetServerUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIsForward) {
      size += 1 + 1;
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (sourceNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceNodeId);
    }
    if (HasTargetNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetNodeClass);
    }
    if (targetNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetNodeId);
    }
    if (HasTargetServerUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetServerUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddReferencesItem other) {
    if (other == null) {
      return;
    }
    if (other.HasIsForward) {
      IsForward = other.IsForward;
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.sourceNodeId_ != null) {
      if (sourceNodeId_ == null) {
        SourceNodeId = new global::NodeId();
      }
      SourceNodeId.MergeFrom(other.SourceNodeId);
    }
    if (other.HasTargetNodeClass) {
      TargetNodeClass = other.TargetNodeClass;
    }
    if (other.targetNodeId_ != null) {
      if (targetNodeId_ == null) {
        TargetNodeId = new global::ExpandedNodeId();
      }
      TargetNodeId.MergeFrom(other.TargetNodeId);
    }
    if (other.HasTargetServerUri) {
      TargetServerUri = other.TargetServerUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsForward = input.ReadBool();
          break;
        }
        case 18: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 26: {
          if (sourceNodeId_ == null) {
            SourceNodeId = new global::NodeId();
          }
          input.ReadMessage(SourceNodeId);
          break;
        }
        case 32: {
          TargetNodeClass = (global::AddReferencesItem.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 42: {
          if (targetNodeId_ == null) {
            TargetNodeId = new global::ExpandedNodeId();
          }
          input.ReadMessage(TargetNodeId);
          break;
        }
        case 50: {
          TargetServerUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the AddReferencesItem message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class AggregateFilter : pb::IMessage<AggregateFilter> {
  private static readonly pb::MessageParser<AggregateFilter> _parser = new pb::MessageParser<AggregateFilter>(() => new AggregateFilter());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AggregateFilter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[155]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateFilter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateFilter(AggregateFilter other) : this() {
    _hasBits0 = other._hasBits0;
    AggregateConfiguration_ = other.AggregateConfiguration_ != null ? other.AggregateConfiguration_.Clone() : null;
    aggregateType_ = other.aggregateType_ != null ? other.aggregateType_.Clone() : null;
    processingInterval_ = other.processingInterval_;
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AggregateFilter Clone() {
    return new AggregateFilter(this);
  }

  /// <summary>Field number for the "_AggregateConfiguration" field.</summary>
  public const int AggregateConfigurationFieldNumber = 1;
  private global::AggregateConfiguration AggregateConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AggregateConfiguration AggregateConfiguration {
    get { return AggregateConfiguration_; }
    set {
      AggregateConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "AggregateType" field.</summary>
  public const int AggregateTypeFieldNumber = 2;
  private global::NodeId aggregateType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId AggregateType {
    get { return aggregateType_; }
    set {
      aggregateType_ = value;
    }
  }

  /// <summary>Field number for the "ProcessingInterval" field.</summary>
  public const int ProcessingIntervalFieldNumber = 3;
  private readonly static double ProcessingIntervalDefaultValue = 0D;

  private double processingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ProcessingInterval {
    get { if ((_hasBits0 & 1) != 0) { return processingInterval_; } else { return ProcessingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 1;
      processingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "ProcessingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessingInterval {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ProcessingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessingInterval() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 4;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 2) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AggregateFilter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AggregateFilter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AggregateConfiguration, other.AggregateConfiguration)) return false;
    if (!object.Equals(AggregateType, other.AggregateType)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProcessingInterval, other.ProcessingInterval)) return false;
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AggregateConfiguration_ != null) hash ^= AggregateConfiguration.GetHashCode();
    if (aggregateType_ != null) hash ^= AggregateType.GetHashCode();
    if (HasProcessingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProcessingInterval);
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AggregateConfiguration_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AggregateType);
    }
    if (HasProcessingInterval) {
      output.WriteRawTag(25);
      output.WriteDouble(ProcessingInterval);
    }
    if (HasStartTime) {
      output.WriteRawTag(32);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AggregateConfiguration_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateType);
    }
    if (HasProcessingInterval) {
      size += 1 + 8;
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AggregateFilter other) {
    if (other == null) {
      return;
    }
    if (other.AggregateConfiguration_ != null) {
      if (AggregateConfiguration_ == null) {
        AggregateConfiguration = new global::AggregateConfiguration();
      }
      AggregateConfiguration.MergeFrom(other.AggregateConfiguration);
    }
    if (other.aggregateType_ != null) {
      if (aggregateType_ == null) {
        AggregateType = new global::NodeId();
      }
      AggregateType.MergeFrom(other.AggregateType);
    }
    if (other.HasProcessingInterval) {
      ProcessingInterval = other.ProcessingInterval;
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (AggregateConfiguration_ == null) {
            AggregateConfiguration = new global::AggregateConfiguration();
          }
          input.ReadMessage(AggregateConfiguration);
          break;
        }
        case 18: {
          if (aggregateType_ == null) {
            AggregateType = new global::NodeId();
          }
          input.ReadMessage(AggregateType);
          break;
        }
        case 25: {
          ProcessingInterval = input.ReadDouble();
          break;
        }
        case 32: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class AliasNameDataType : pb::IMessage<AliasNameDataType> {
  private static readonly pb::MessageParser<AliasNameDataType> _parser = new pb::MessageParser<AliasNameDataType>(() => new AliasNameDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AliasNameDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[156]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AliasNameDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AliasNameDataType(AliasNameDataType other) : this() {
    aliasName_ = other.aliasName_ != null ? other.aliasName_.Clone() : null;
    referencedNodes_ = other.referencedNodes_ != null ? other.referencedNodes_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AliasNameDataType Clone() {
    return new AliasNameDataType(this);
  }

  /// <summary>Field number for the "AliasName" field.</summary>
  public const int AliasNameFieldNumber = 1;
  private global::QualifiedName aliasName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName AliasName {
    get { return aliasName_; }
    set {
      aliasName_ = value;
    }
  }

  /// <summary>Field number for the "ReferencedNodes" field.</summary>
  public const int ReferencedNodesFieldNumber = 2;
  private global::ListOfExpandedNodeId referencedNodes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfExpandedNodeId ReferencedNodes {
    get { return referencedNodes_; }
    set {
      referencedNodes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AliasNameDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AliasNameDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AliasName, other.AliasName)) return false;
    if (!object.Equals(ReferencedNodes, other.ReferencedNodes)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (aliasName_ != null) hash ^= AliasName.GetHashCode();
    if (referencedNodes_ != null) hash ^= ReferencedNodes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (aliasName_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AliasName);
    }
    if (referencedNodes_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ReferencedNodes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (aliasName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AliasName);
    }
    if (referencedNodes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencedNodes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AliasNameDataType other) {
    if (other == null) {
      return;
    }
    if (other.aliasName_ != null) {
      if (aliasName_ == null) {
        AliasName = new global::QualifiedName();
      }
      AliasName.MergeFrom(other.AliasName);
    }
    if (other.referencedNodes_ != null) {
      if (referencedNodes_ == null) {
        ReferencedNodes = new global::ListOfExpandedNodeId();
      }
      ReferencedNodes.MergeFrom(other.ReferencedNodes);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (aliasName_ == null) {
            AliasName = new global::QualifiedName();
          }
          input.ReadMessage(AliasName);
          break;
        }
        case 18: {
          if (referencedNodes_ == null) {
            ReferencedNodes = new global::ListOfExpandedNodeId();
          }
          input.ReadMessage(ReferencedNodes);
          break;
        }
      }
    }
  }

}

public sealed partial class ApplicationDescription : pb::IMessage<ApplicationDescription> {
  private static readonly pb::MessageParser<ApplicationDescription> _parser = new pb::MessageParser<ApplicationDescription>(() => new ApplicationDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ApplicationDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[157]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ApplicationDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ApplicationDescription(ApplicationDescription other) : this() {
    _hasBits0 = other._hasBits0;
    applicationName_ = other.applicationName_ != null ? other.applicationName_.Clone() : null;
    ApplicationType_ = other.ApplicationType_;
    applicationUri_ = other.applicationUri_;
    discoveryProfileUri_ = other.discoveryProfileUri_;
    discoveryUrls_ = other.discoveryUrls_ != null ? other.discoveryUrls_.Clone() : null;
    gatewayServerUri_ = other.gatewayServerUri_;
    productUri_ = other.productUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ApplicationDescription Clone() {
    return new ApplicationDescription(this);
  }

  /// <summary>Field number for the "ApplicationName" field.</summary>
  public const int ApplicationNameFieldNumber = 1;
  private global::LocalizedText applicationName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText ApplicationName {
    get { return applicationName_; }
    set {
      applicationName_ = value;
    }
  }

  /// <summary>Field number for the "_ApplicationType" field.</summary>
  public const int ApplicationTypeFieldNumber = 2;
  private readonly static global::ApplicationDescription.Types.ApplicationType ApplicationTypeDefaultValue = global::ApplicationDescription.Types.ApplicationType.ClientAndServer2;

  private global::ApplicationDescription.Types.ApplicationType ApplicationType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ApplicationDescription.Types.ApplicationType ApplicationType {
    get { if ((_hasBits0 & 1) != 0) { return ApplicationType_; } else { return ApplicationTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ApplicationType_ = value;
    }
  }
  /// <summary>Gets whether the "_ApplicationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasApplicationType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_ApplicationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearApplicationType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ApplicationUri" field.</summary>
  public const int ApplicationUriFieldNumber = 3;
  private readonly static string ApplicationUriDefaultValue = "";

  private string applicationUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ApplicationUri {
    get { return applicationUri_ ?? ApplicationUriDefaultValue; }
    set {
      applicationUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ApplicationUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasApplicationUri {
    get { return applicationUri_ != null; }
  }
  /// <summary>Clears the value of the "ApplicationUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearApplicationUri() {
    applicationUri_ = null;
  }

  /// <summary>Field number for the "DiscoveryProfileUri" field.</summary>
  public const int DiscoveryProfileUriFieldNumber = 4;
  private readonly static string DiscoveryProfileUriDefaultValue = "";

  private string discoveryProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DiscoveryProfileUri {
    get { return discoveryProfileUri_ ?? DiscoveryProfileUriDefaultValue; }
    set {
      discoveryProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "DiscoveryProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDiscoveryProfileUri {
    get { return discoveryProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "DiscoveryProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDiscoveryProfileUri() {
    discoveryProfileUri_ = null;
  }

  /// <summary>Field number for the "DiscoveryUrls" field.</summary>
  public const int DiscoveryUrlsFieldNumber = 5;
  private global::ListOfString discoveryUrls_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString DiscoveryUrls {
    get { return discoveryUrls_; }
    set {
      discoveryUrls_ = value;
    }
  }

  /// <summary>Field number for the "GatewayServerUri" field.</summary>
  public const int GatewayServerUriFieldNumber = 6;
  private readonly static string GatewayServerUriDefaultValue = "";

  private string gatewayServerUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GatewayServerUri {
    get { return gatewayServerUri_ ?? GatewayServerUriDefaultValue; }
    set {
      gatewayServerUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "GatewayServerUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGatewayServerUri {
    get { return gatewayServerUri_ != null; }
  }
  /// <summary>Clears the value of the "GatewayServerUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGatewayServerUri() {
    gatewayServerUri_ = null;
  }

  /// <summary>Field number for the "ProductUri" field.</summary>
  public const int ProductUriFieldNumber = 7;
  private readonly static string ProductUriDefaultValue = "";

  private string productUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductUri {
    get { return productUri_ ?? ProductUriDefaultValue; }
    set {
      productUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ProductUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProductUri {
    get { return productUri_ != null; }
  }
  /// <summary>Clears the value of the "ProductUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProductUri() {
    productUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ApplicationDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ApplicationDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ApplicationName, other.ApplicationName)) return false;
    if (ApplicationType != other.ApplicationType) return false;
    if (ApplicationUri != other.ApplicationUri) return false;
    if (DiscoveryProfileUri != other.DiscoveryProfileUri) return false;
    if (!object.Equals(DiscoveryUrls, other.DiscoveryUrls)) return false;
    if (GatewayServerUri != other.GatewayServerUri) return false;
    if (ProductUri != other.ProductUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (applicationName_ != null) hash ^= ApplicationName.GetHashCode();
    if (HasApplicationType) hash ^= ApplicationType.GetHashCode();
    if (HasApplicationUri) hash ^= ApplicationUri.GetHashCode();
    if (HasDiscoveryProfileUri) hash ^= DiscoveryProfileUri.GetHashCode();
    if (discoveryUrls_ != null) hash ^= DiscoveryUrls.GetHashCode();
    if (HasGatewayServerUri) hash ^= GatewayServerUri.GetHashCode();
    if (HasProductUri) hash ^= ProductUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (applicationName_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ApplicationName);
    }
    if (HasApplicationType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ApplicationType);
    }
    if (HasApplicationUri) {
      output.WriteRawTag(26);
      output.WriteString(ApplicationUri);
    }
    if (HasDiscoveryProfileUri) {
      output.WriteRawTag(34);
      output.WriteString(DiscoveryProfileUri);
    }
    if (discoveryUrls_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DiscoveryUrls);
    }
    if (HasGatewayServerUri) {
      output.WriteRawTag(50);
      output.WriteString(GatewayServerUri);
    }
    if (HasProductUri) {
      output.WriteRawTag(58);
      output.WriteString(ProductUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (applicationName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationName);
    }
    if (HasApplicationType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ApplicationType);
    }
    if (HasApplicationUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ApplicationUri);
    }
    if (HasDiscoveryProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscoveryProfileUri);
    }
    if (discoveryUrls_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscoveryUrls);
    }
    if (HasGatewayServerUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayServerUri);
    }
    if (HasProductUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ApplicationDescription other) {
    if (other == null) {
      return;
    }
    if (other.applicationName_ != null) {
      if (applicationName_ == null) {
        ApplicationName = new global::LocalizedText();
      }
      ApplicationName.MergeFrom(other.ApplicationName);
    }
    if (other.HasApplicationType) {
      ApplicationType = other.ApplicationType;
    }
    if (other.HasApplicationUri) {
      ApplicationUri = other.ApplicationUri;
    }
    if (other.HasDiscoveryProfileUri) {
      DiscoveryProfileUri = other.DiscoveryProfileUri;
    }
    if (other.discoveryUrls_ != null) {
      if (discoveryUrls_ == null) {
        DiscoveryUrls = new global::ListOfString();
      }
      DiscoveryUrls.MergeFrom(other.DiscoveryUrls);
    }
    if (other.HasGatewayServerUri) {
      GatewayServerUri = other.GatewayServerUri;
    }
    if (other.HasProductUri) {
      ProductUri = other.ProductUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (applicationName_ == null) {
            ApplicationName = new global::LocalizedText();
          }
          input.ReadMessage(ApplicationName);
          break;
        }
        case 16: {
          ApplicationType = (global::ApplicationDescription.Types.ApplicationType) input.ReadEnum();
          break;
        }
        case 26: {
          ApplicationUri = input.ReadString();
          break;
        }
        case 34: {
          DiscoveryProfileUri = input.ReadString();
          break;
        }
        case 42: {
          if (discoveryUrls_ == null) {
            DiscoveryUrls = new global::ListOfString();
          }
          input.ReadMessage(DiscoveryUrls);
          break;
        }
        case 50: {
          GatewayServerUri = input.ReadString();
          break;
        }
        case 58: {
          ProductUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ApplicationDescription message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ApplicationType {
      [pbr::OriginalName("ApplicationType_ClientAndServer_2")] ClientAndServer2 = 1,
      [pbr::OriginalName("ApplicationType_Client_1")] Client1 = 2,
      [pbr::OriginalName("ApplicationType_DiscoveryServer_3")] DiscoveryServer3 = 3,
      [pbr::OriginalName("ApplicationType_Server_0")] Server0 = 4,
    }

  }
  #endregion

}

public sealed partial class Argument : pb::IMessage<Argument> {
  private static readonly pb::MessageParser<Argument> _parser = new pb::MessageParser<Argument>(() => new Argument());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Argument> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[158]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Argument() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Argument(Argument other) : this() {
    _hasBits0 = other._hasBits0;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    name_ = other.name_;
    valueRank_ = other.valueRank_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Argument Clone() {
    return new Argument(this);
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 1;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 2;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 4;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 5;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 1) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 1;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Argument);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Argument other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (Name != other.Name) return false;
    if (ValueRank != other.ValueRank) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (arrayDimensions_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ArrayDimensions);
    }
    if (dataType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (HasName) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (HasValueRank) {
      output.WriteRawTag(40);
      output.WriteInt32(ValueRank);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasValueRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Argument other) {
    if (other == null) {
      return;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 18: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 40: {
          ValueRank = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BrowseDescription : pb::IMessage<BrowseDescription> {
  private static readonly pb::MessageParser<BrowseDescription> _parser = new pb::MessageParser<BrowseDescription>(() => new BrowseDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowseDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[159]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseDescription(BrowseDescription other) : this() {
    _hasBits0 = other._hasBits0;
    BrowseDirection_ = other.BrowseDirection_;
    includeSubtypes_ = other.includeSubtypes_;
    nodeClassMask_ = other.nodeClassMask_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    resultMask_ = other.resultMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseDescription Clone() {
    return new BrowseDescription(this);
  }

  /// <summary>Field number for the "_BrowseDirection" field.</summary>
  public const int BrowseDirectionFieldNumber = 1;
  private readonly static global::BrowseDescription.Types.BrowseDirection BrowseDirectionDefaultValue = global::BrowseDescription.Types.BrowseDirection.Both2;

  private global::BrowseDescription.Types.BrowseDirection BrowseDirection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BrowseDescription.Types.BrowseDirection BrowseDirection {
    get { if ((_hasBits0 & 1) != 0) { return BrowseDirection_; } else { return BrowseDirectionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      BrowseDirection_ = value;
    }
  }
  /// <summary>Gets whether the "_BrowseDirection" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBrowseDirection {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_BrowseDirection" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBrowseDirection() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "IncludeSubtypes" field.</summary>
  public const int IncludeSubtypesFieldNumber = 2;
  private readonly static bool IncludeSubtypesDefaultValue = false;

  private bool includeSubtypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IncludeSubtypes {
    get { if ((_hasBits0 & 2) != 0) { return includeSubtypes_; } else { return IncludeSubtypesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      includeSubtypes_ = value;
    }
  }
  /// <summary>Gets whether the "IncludeSubtypes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIncludeSubtypes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IncludeSubtypes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIncludeSubtypes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NodeClassMask" field.</summary>
  public const int NodeClassMaskFieldNumber = 3;
  private readonly static uint NodeClassMaskDefaultValue = 0;

  private uint nodeClassMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NodeClassMask {
    get { if ((_hasBits0 & 4) != 0) { return nodeClassMask_; } else { return NodeClassMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      nodeClassMask_ = value;
    }
  }
  /// <summary>Gets whether the "NodeClassMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClassMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "NodeClassMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClassMask() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 4;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 5;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "ResultMask" field.</summary>
  public const int ResultMaskFieldNumber = 6;
  private readonly static uint ResultMaskDefaultValue = 0;

  private uint resultMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ResultMask {
    get { if ((_hasBits0 & 8) != 0) { return resultMask_; } else { return ResultMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      resultMask_ = value;
    }
  }
  /// <summary>Gets whether the "ResultMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResultMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ResultMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResultMask() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowseDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowseDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BrowseDirection != other.BrowseDirection) return false;
    if (IncludeSubtypes != other.IncludeSubtypes) return false;
    if (NodeClassMask != other.NodeClassMask) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (ResultMask != other.ResultMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBrowseDirection) hash ^= BrowseDirection.GetHashCode();
    if (HasIncludeSubtypes) hash ^= IncludeSubtypes.GetHashCode();
    if (HasNodeClassMask) hash ^= NodeClassMask.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (HasResultMask) hash ^= ResultMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBrowseDirection) {
      output.WriteRawTag(8);
      output.WriteEnum((int) BrowseDirection);
    }
    if (HasIncludeSubtypes) {
      output.WriteRawTag(16);
      output.WriteBool(IncludeSubtypes);
    }
    if (HasNodeClassMask) {
      output.WriteRawTag(24);
      output.WriteUInt32(NodeClassMask);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NodeId);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ReferenceTypeId);
    }
    if (HasResultMask) {
      output.WriteRawTag(48);
      output.WriteUInt32(ResultMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBrowseDirection) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BrowseDirection);
    }
    if (HasIncludeSubtypes) {
      size += 1 + 1;
    }
    if (HasNodeClassMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeClassMask);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (HasResultMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowseDescription other) {
    if (other == null) {
      return;
    }
    if (other.HasBrowseDirection) {
      BrowseDirection = other.BrowseDirection;
    }
    if (other.HasIncludeSubtypes) {
      IncludeSubtypes = other.IncludeSubtypes;
    }
    if (other.HasNodeClassMask) {
      NodeClassMask = other.NodeClassMask;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.HasResultMask) {
      ResultMask = other.ResultMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BrowseDirection = (global::BrowseDescription.Types.BrowseDirection) input.ReadEnum();
          break;
        }
        case 16: {
          IncludeSubtypes = input.ReadBool();
          break;
        }
        case 24: {
          NodeClassMask = input.ReadUInt32();
          break;
        }
        case 34: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 42: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 48: {
          ResultMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BrowseDescription message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum BrowseDirection {
      [pbr::OriginalName("BrowseDirection_Both_2")] Both2 = 1,
      [pbr::OriginalName("BrowseDirection_Forward_0")] Forward0 = 2,
      [pbr::OriginalName("BrowseDirection_Invalid_3")] Invalid3 = 3,
      [pbr::OriginalName("BrowseDirection_Inverse_1")] Inverse1 = 4,
    }

  }
  #endregion

}

public sealed partial class BrowsePathTarget : pb::IMessage<BrowsePathTarget> {
  private static readonly pb::MessageParser<BrowsePathTarget> _parser = new pb::MessageParser<BrowsePathTarget>(() => new BrowsePathTarget());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowsePathTarget> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[160]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePathTarget() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePathTarget(BrowsePathTarget other) : this() {
    _hasBits0 = other._hasBits0;
    remainingPathIndex_ = other.remainingPathIndex_;
    targetId_ = other.targetId_ != null ? other.targetId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePathTarget Clone() {
    return new BrowsePathTarget(this);
  }

  /// <summary>Field number for the "RemainingPathIndex" field.</summary>
  public const int RemainingPathIndexFieldNumber = 1;
  private readonly static uint RemainingPathIndexDefaultValue = 0;

  private uint remainingPathIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RemainingPathIndex {
    get { if ((_hasBits0 & 1) != 0) { return remainingPathIndex_; } else { return RemainingPathIndexDefaultValue; } }
    set {
      _hasBits0 |= 1;
      remainingPathIndex_ = value;
    }
  }
  /// <summary>Gets whether the "RemainingPathIndex" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRemainingPathIndex {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RemainingPathIndex" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRemainingPathIndex() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "TargetId" field.</summary>
  public const int TargetIdFieldNumber = 2;
  private global::ExpandedNodeId targetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TargetId {
    get { return targetId_; }
    set {
      targetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowsePathTarget);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowsePathTarget other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RemainingPathIndex != other.RemainingPathIndex) return false;
    if (!object.Equals(TargetId, other.TargetId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRemainingPathIndex) hash ^= RemainingPathIndex.GetHashCode();
    if (targetId_ != null) hash ^= TargetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasRemainingPathIndex) {
      output.WriteRawTag(8);
      output.WriteUInt32(RemainingPathIndex);
    }
    if (targetId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TargetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRemainingPathIndex) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemainingPathIndex);
    }
    if (targetId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowsePathTarget other) {
    if (other == null) {
      return;
    }
    if (other.HasRemainingPathIndex) {
      RemainingPathIndex = other.RemainingPathIndex;
    }
    if (other.targetId_ != null) {
      if (targetId_ == null) {
        TargetId = new global::ExpandedNodeId();
      }
      TargetId.MergeFrom(other.TargetId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RemainingPathIndex = input.ReadUInt32();
          break;
        }
        case 18: {
          if (targetId_ == null) {
            TargetId = new global::ExpandedNodeId();
          }
          input.ReadMessage(TargetId);
          break;
        }
      }
    }
  }

}

public sealed partial class CurrencyUnitType : pb::IMessage<CurrencyUnitType> {
  private static readonly pb::MessageParser<CurrencyUnitType> _parser = new pb::MessageParser<CurrencyUnitType>(() => new CurrencyUnitType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurrencyUnitType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[161]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrencyUnitType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrencyUnitType(CurrencyUnitType other) : this() {
    _hasBits0 = other._hasBits0;
    alphabeticCode_ = other.alphabeticCode_;
    currency_ = other.currency_ != null ? other.currency_.Clone() : null;
    exponent_ = other.exponent_;
    numericCode_ = other.numericCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrencyUnitType Clone() {
    return new CurrencyUnitType(this);
  }

  /// <summary>Field number for the "AlphabeticCode" field.</summary>
  public const int AlphabeticCodeFieldNumber = 1;
  private readonly static string AlphabeticCodeDefaultValue = "";

  private string alphabeticCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AlphabeticCode {
    get { return alphabeticCode_ ?? AlphabeticCodeDefaultValue; }
    set {
      alphabeticCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AlphabeticCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAlphabeticCode {
    get { return alphabeticCode_ != null; }
  }
  /// <summary>Clears the value of the "AlphabeticCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAlphabeticCode() {
    alphabeticCode_ = null;
  }

  /// <summary>Field number for the "Currency" field.</summary>
  public const int CurrencyFieldNumber = 2;
  private global::LocalizedText currency_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Currency {
    get { return currency_; }
    set {
      currency_ = value;
    }
  }

  /// <summary>Field number for the "Exponent" field.</summary>
  public const int ExponentFieldNumber = 3;
  private readonly static pb::ByteString ExponentDefaultValue = pb::ByteString.Empty;

  private pb::ByteString exponent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Exponent {
    get { return exponent_ ?? ExponentDefaultValue; }
    set {
      exponent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Exponent" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExponent {
    get { return exponent_ != null; }
  }
  /// <summary>Clears the value of the "Exponent" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExponent() {
    exponent_ = null;
  }

  /// <summary>Field number for the "NumericCode" field.</summary>
  public const int NumericCodeFieldNumber = 4;
  private readonly static int NumericCodeDefaultValue = 0;

  private int numericCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumericCode {
    get { if ((_hasBits0 & 1) != 0) { return numericCode_; } else { return NumericCodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      numericCode_ = value;
    }
  }
  /// <summary>Gets whether the "NumericCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNumericCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "NumericCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNumericCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurrencyUnitType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurrencyUnitType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AlphabeticCode != other.AlphabeticCode) return false;
    if (!object.Equals(Currency, other.Currency)) return false;
    if (Exponent != other.Exponent) return false;
    if (NumericCode != other.NumericCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAlphabeticCode) hash ^= AlphabeticCode.GetHashCode();
    if (currency_ != null) hash ^= Currency.GetHashCode();
    if (HasExponent) hash ^= Exponent.GetHashCode();
    if (HasNumericCode) hash ^= NumericCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAlphabeticCode) {
      output.WriteRawTag(10);
      output.WriteString(AlphabeticCode);
    }
    if (currency_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Currency);
    }
    if (HasExponent) {
      output.WriteRawTag(26);
      output.WriteBytes(Exponent);
    }
    if (HasNumericCode) {
      output.WriteRawTag(32);
      output.WriteInt32(NumericCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAlphabeticCode) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AlphabeticCode);
    }
    if (currency_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Currency);
    }
    if (HasExponent) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Exponent);
    }
    if (HasNumericCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumericCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurrencyUnitType other) {
    if (other == null) {
      return;
    }
    if (other.HasAlphabeticCode) {
      AlphabeticCode = other.AlphabeticCode;
    }
    if (other.currency_ != null) {
      if (currency_ == null) {
        Currency = new global::LocalizedText();
      }
      Currency.MergeFrom(other.Currency);
    }
    if (other.HasExponent) {
      Exponent = other.Exponent;
    }
    if (other.HasNumericCode) {
      NumericCode = other.NumericCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AlphabeticCode = input.ReadString();
          break;
        }
        case 18: {
          if (currency_ == null) {
            Currency = new global::LocalizedText();
          }
          input.ReadMessage(Currency);
          break;
        }
        case 26: {
          Exponent = input.ReadBytes();
          break;
        }
        case 32: {
          NumericCode = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DataSetReaderMessageDataType : pb::IMessage<DataSetReaderMessageDataType> {
  private static readonly pb::MessageParser<DataSetReaderMessageDataType> _parser = new pb::MessageParser<DataSetReaderMessageDataType>(() => new DataSetReaderMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSetReaderMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[162]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderMessageDataType(DataSetReaderMessageDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetClassId_ = other.dataSetClassId_ != null ? other.dataSetClassId_.Clone() : null;
    dataSetMessageContentMask_ = other.dataSetMessageContentMask_;
    dataSetOffset_ = other.dataSetOffset_;
    groupVersion_ = other.groupVersion_;
    networkMessageContentMask_ = other.networkMessageContentMask_;
    networkMessageNumber_ = other.networkMessageNumber_;
    processingOffset_ = other.processingOffset_;
    publishingInterval_ = other.publishingInterval_;
    receiveOffset_ = other.receiveOffset_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderMessageDataType Clone() {
    return new DataSetReaderMessageDataType(this);
  }

  /// <summary>Field number for the "DataSetClassId" field.</summary>
  public const int DataSetClassIdFieldNumber = 1;
  private global::Guid dataSetClassId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Guid DataSetClassId {
    get { return dataSetClassId_; }
    set {
      dataSetClassId_ = value;
    }
  }

  /// <summary>Field number for the "DataSetMessageContentMask" field.</summary>
  public const int DataSetMessageContentMaskFieldNumber = 2;
  private readonly static uint DataSetMessageContentMaskDefaultValue = 0;

  private uint dataSetMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetMessageContentMask {
    get { if ((_hasBits0 & 1) != 0) { return dataSetMessageContentMask_; } else { return DataSetMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetMessageContentMask {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetMessageContentMask() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetOffset" field.</summary>
  public const int DataSetOffsetFieldNumber = 3;
  private readonly static uint DataSetOffsetDefaultValue = 0;

  private uint dataSetOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetOffset {
    get { if ((_hasBits0 & 2) != 0) { return dataSetOffset_; } else { return DataSetOffsetDefaultValue; } }
    set {
      _hasBits0 |= 2;
      dataSetOffset_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetOffset {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DataSetOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetOffset() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "GroupVersion" field.</summary>
  public const int GroupVersionFieldNumber = 4;
  private readonly static uint GroupVersionDefaultValue = 0;

  private uint groupVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupVersion {
    get { if ((_hasBits0 & 4) != 0) { return groupVersion_; } else { return GroupVersionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      groupVersion_ = value;
    }
  }
  /// <summary>Gets whether the "GroupVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGroupVersion {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "GroupVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGroupVersion() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "NetworkMessageContentMask" field.</summary>
  public const int NetworkMessageContentMaskFieldNumber = 5;
  private readonly static uint NetworkMessageContentMaskDefaultValue = 0;

  private uint networkMessageContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageContentMask {
    get { if ((_hasBits0 & 8) != 0) { return networkMessageContentMask_; } else { return NetworkMessageContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      networkMessageContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageContentMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageContentMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "NetworkMessageNumber" field.</summary>
  public const int NetworkMessageNumberFieldNumber = 6;
  private readonly static uint NetworkMessageNumberDefaultValue = 0;

  private uint networkMessageNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NetworkMessageNumber {
    get { if ((_hasBits0 & 16) != 0) { return networkMessageNumber_; } else { return NetworkMessageNumberDefaultValue; } }
    set {
      _hasBits0 |= 16;
      networkMessageNumber_ = value;
    }
  }
  /// <summary>Gets whether the "NetworkMessageNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNetworkMessageNumber {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "NetworkMessageNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNetworkMessageNumber() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "ProcessingOffset" field.</summary>
  public const int ProcessingOffsetFieldNumber = 7;
  private readonly static double ProcessingOffsetDefaultValue = 0D;

  private double processingOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ProcessingOffset {
    get { if ((_hasBits0 & 32) != 0) { return processingOffset_; } else { return ProcessingOffsetDefaultValue; } }
    set {
      _hasBits0 |= 32;
      processingOffset_ = value;
    }
  }
  /// <summary>Gets whether the "ProcessingOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessingOffset {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ProcessingOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessingOffset() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "PublishingInterval" field.</summary>
  public const int PublishingIntervalFieldNumber = 8;
  private readonly static double PublishingIntervalDefaultValue = 0D;

  private double publishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double PublishingInterval {
    get { if ((_hasBits0 & 64) != 0) { return publishingInterval_; } else { return PublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 64;
      publishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingInterval {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "PublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingInterval() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "ReceiveOffset" field.</summary>
  public const int ReceiveOffsetFieldNumber = 9;
  private readonly static double ReceiveOffsetDefaultValue = 0D;

  private double receiveOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ReceiveOffset {
    get { if ((_hasBits0 & 128) != 0) { return receiveOffset_; } else { return ReceiveOffsetDefaultValue; } }
    set {
      _hasBits0 |= 128;
      receiveOffset_ = value;
    }
  }
  /// <summary>Gets whether the "ReceiveOffset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReceiveOffset {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "ReceiveOffset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReceiveOffset() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSetReaderMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSetReaderMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataSetClassId, other.DataSetClassId)) return false;
    if (DataSetMessageContentMask != other.DataSetMessageContentMask) return false;
    if (DataSetOffset != other.DataSetOffset) return false;
    if (GroupVersion != other.GroupVersion) return false;
    if (NetworkMessageContentMask != other.NetworkMessageContentMask) return false;
    if (NetworkMessageNumber != other.NetworkMessageNumber) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProcessingOffset, other.ProcessingOffset)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PublishingInterval, other.PublishingInterval)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReceiveOffset, other.ReceiveOffset)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataSetClassId_ != null) hash ^= DataSetClassId.GetHashCode();
    if (HasDataSetMessageContentMask) hash ^= DataSetMessageContentMask.GetHashCode();
    if (HasDataSetOffset) hash ^= DataSetOffset.GetHashCode();
    if (HasGroupVersion) hash ^= GroupVersion.GetHashCode();
    if (HasNetworkMessageContentMask) hash ^= NetworkMessageContentMask.GetHashCode();
    if (HasNetworkMessageNumber) hash ^= NetworkMessageNumber.GetHashCode();
    if (HasProcessingOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProcessingOffset);
    if (HasPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PublishingInterval);
    if (HasReceiveOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReceiveOffset);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataSetClassId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataSetClassId);
    }
    if (HasDataSetMessageContentMask) {
      output.WriteRawTag(16);
      output.WriteUInt32(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      output.WriteRawTag(24);
      output.WriteUInt32(DataSetOffset);
    }
    if (HasGroupVersion) {
      output.WriteRawTag(32);
      output.WriteUInt32(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      output.WriteRawTag(40);
      output.WriteUInt32(NetworkMessageContentMask);
    }
    if (HasNetworkMessageNumber) {
      output.WriteRawTag(48);
      output.WriteUInt32(NetworkMessageNumber);
    }
    if (HasProcessingOffset) {
      output.WriteRawTag(57);
      output.WriteDouble(ProcessingOffset);
    }
    if (HasPublishingInterval) {
      output.WriteRawTag(65);
      output.WriteDouble(PublishingInterval);
    }
    if (HasReceiveOffset) {
      output.WriteRawTag(73);
      output.WriteDouble(ReceiveOffset);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataSetClassId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetClassId);
    }
    if (HasDataSetMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetMessageContentMask);
    }
    if (HasDataSetOffset) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetOffset);
    }
    if (HasGroupVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupVersion);
    }
    if (HasNetworkMessageContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageContentMask);
    }
    if (HasNetworkMessageNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkMessageNumber);
    }
    if (HasProcessingOffset) {
      size += 1 + 8;
    }
    if (HasPublishingInterval) {
      size += 1 + 8;
    }
    if (HasReceiveOffset) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSetReaderMessageDataType other) {
    if (other == null) {
      return;
    }
    if (other.dataSetClassId_ != null) {
      if (dataSetClassId_ == null) {
        DataSetClassId = new global::Guid();
      }
      DataSetClassId.MergeFrom(other.DataSetClassId);
    }
    if (other.HasDataSetMessageContentMask) {
      DataSetMessageContentMask = other.DataSetMessageContentMask;
    }
    if (other.HasDataSetOffset) {
      DataSetOffset = other.DataSetOffset;
    }
    if (other.HasGroupVersion) {
      GroupVersion = other.GroupVersion;
    }
    if (other.HasNetworkMessageContentMask) {
      NetworkMessageContentMask = other.NetworkMessageContentMask;
    }
    if (other.HasNetworkMessageNumber) {
      NetworkMessageNumber = other.NetworkMessageNumber;
    }
    if (other.HasProcessingOffset) {
      ProcessingOffset = other.ProcessingOffset;
    }
    if (other.HasPublishingInterval) {
      PublishingInterval = other.PublishingInterval;
    }
    if (other.HasReceiveOffset) {
      ReceiveOffset = other.ReceiveOffset;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataSetClassId_ == null) {
            DataSetClassId = new global::Guid();
          }
          input.ReadMessage(DataSetClassId);
          break;
        }
        case 16: {
          DataSetMessageContentMask = input.ReadUInt32();
          break;
        }
        case 24: {
          DataSetOffset = input.ReadUInt32();
          break;
        }
        case 32: {
          GroupVersion = input.ReadUInt32();
          break;
        }
        case 40: {
          NetworkMessageContentMask = input.ReadUInt32();
          break;
        }
        case 48: {
          NetworkMessageNumber = input.ReadUInt32();
          break;
        }
        case 57: {
          ProcessingOffset = input.ReadDouble();
          break;
        }
        case 65: {
          PublishingInterval = input.ReadDouble();
          break;
        }
        case 73: {
          ReceiveOffset = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class DataTypeAttributes : pb::IMessage<DataTypeAttributes> {
  private static readonly pb::MessageParser<DataTypeAttributes> _parser = new pb::MessageParser<DataTypeAttributes>(() => new DataTypeAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataTypeAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[163]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeAttributes(DataTypeAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    specifiedAttributes_ = other.specifiedAttributes_;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeAttributes Clone() {
    return new DataTypeAttributes(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 3;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 1) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 4;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 2) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 5;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 4) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 6;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 8) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataTypeAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataTypeAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(24);
      output.WriteBool(IsAbstract);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(32);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(40);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(48);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataTypeAttributes other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 24: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 32: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 40: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 48: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DataValue : pb::IMessage<DataValue> {
  private static readonly pb::MessageParser<DataValue> _parser = new pb::MessageParser<DataValue>(() => new DataValue());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[164]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataValue(DataValue other) : this() {
    _hasBits0 = other._hasBits0;
    serverPicoseconds_ = other.serverPicoseconds_;
    serverTimestamp_ = other.serverTimestamp_;
    sourcePicoseconds_ = other.sourcePicoseconds_;
    sourceTimestamp_ = other.sourceTimestamp_;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataValue Clone() {
    return new DataValue(this);
  }

  /// <summary>Field number for the "ServerPicoseconds" field.</summary>
  public const int ServerPicosecondsFieldNumber = 1;
  private readonly static uint ServerPicosecondsDefaultValue = 0;

  private uint serverPicoseconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerPicoseconds {
    get { if ((_hasBits0 & 1) != 0) { return serverPicoseconds_; } else { return ServerPicosecondsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serverPicoseconds_ = value;
    }
  }
  /// <summary>Gets whether the "ServerPicoseconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerPicoseconds {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ServerPicoseconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerPicoseconds() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ServerTimestamp" field.</summary>
  public const int ServerTimestampFieldNumber = 2;
  private readonly static long ServerTimestampDefaultValue = 0L;

  private long serverTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ServerTimestamp {
    get { if ((_hasBits0 & 2) != 0) { return serverTimestamp_; } else { return ServerTimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      serverTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "ServerTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ServerTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerTimestamp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "SourcePicoseconds" field.</summary>
  public const int SourcePicosecondsFieldNumber = 3;
  private readonly static uint SourcePicosecondsDefaultValue = 0;

  private uint sourcePicoseconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SourcePicoseconds {
    get { if ((_hasBits0 & 4) != 0) { return sourcePicoseconds_; } else { return SourcePicosecondsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      sourcePicoseconds_ = value;
    }
  }
  /// <summary>Gets whether the "SourcePicoseconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSourcePicoseconds {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "SourcePicoseconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSourcePicoseconds() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SourceTimestamp" field.</summary>
  public const int SourceTimestampFieldNumber = 4;
  private readonly static long SourceTimestampDefaultValue = 0L;

  private long sourceTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SourceTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return sourceTimestamp_; } else { return SourceTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      sourceTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "SourceTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSourceTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SourceTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSourceTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 5;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 6;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerPicoseconds != other.ServerPicoseconds) return false;
    if (ServerTimestamp != other.ServerTimestamp) return false;
    if (SourcePicoseconds != other.SourcePicoseconds) return false;
    if (SourceTimestamp != other.SourceTimestamp) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasServerPicoseconds) hash ^= ServerPicoseconds.GetHashCode();
    if (HasServerTimestamp) hash ^= ServerTimestamp.GetHashCode();
    if (HasSourcePicoseconds) hash ^= SourcePicoseconds.GetHashCode();
    if (HasSourceTimestamp) hash ^= SourceTimestamp.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasServerPicoseconds) {
      output.WriteRawTag(8);
      output.WriteUInt32(ServerPicoseconds);
    }
    if (HasServerTimestamp) {
      output.WriteRawTag(16);
      output.WriteInt64(ServerTimestamp);
    }
    if (HasSourcePicoseconds) {
      output.WriteRawTag(24);
      output.WriteUInt32(SourcePicoseconds);
    }
    if (HasSourceTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(SourceTimestamp);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(StatusCode);
    }
    if (value_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasServerPicoseconds) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerPicoseconds);
    }
    if (HasServerTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimestamp);
    }
    if (HasSourcePicoseconds) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourcePicoseconds);
    }
    if (HasSourceTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceTimestamp);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataValue other) {
    if (other == null) {
      return;
    }
    if (other.HasServerPicoseconds) {
      ServerPicoseconds = other.ServerPicoseconds;
    }
    if (other.HasServerTimestamp) {
      ServerTimestamp = other.ServerTimestamp;
    }
    if (other.HasSourcePicoseconds) {
      SourcePicoseconds = other.SourcePicoseconds;
    }
    if (other.HasSourceTimestamp) {
      SourceTimestamp = other.SourceTimestamp;
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ServerPicoseconds = input.ReadUInt32();
          break;
        }
        case 16: {
          ServerTimestamp = input.ReadInt64();
          break;
        }
        case 24: {
          SourcePicoseconds = input.ReadUInt32();
          break;
        }
        case 32: {
          SourceTimestamp = input.ReadInt64();
          break;
        }
        case 42: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
        case 50: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteAtTimeDetails : pb::IMessage<DeleteAtTimeDetails> {
  private static readonly pb::MessageParser<DeleteAtTimeDetails> _parser = new pb::MessageParser<DeleteAtTimeDetails>(() => new DeleteAtTimeDetails());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteAtTimeDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[165]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteAtTimeDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteAtTimeDetails(DeleteAtTimeDetails other) : this() {
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    reqTimes_ = other.reqTimes_ != null ? other.reqTimes_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteAtTimeDetails Clone() {
    return new DeleteAtTimeDetails(this);
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 1;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "ReqTimes" field.</summary>
  public const int ReqTimesFieldNumber = 2;
  private global::ListOfDateTime reqTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDateTime ReqTimes {
    get { return reqTimes_; }
    set {
      reqTimes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteAtTimeDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteAtTimeDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(ReqTimes, other.ReqTimes)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (reqTimes_ != null) hash ^= ReqTimes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NodeId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodeId);
    }
    if (reqTimes_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ReqTimes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (reqTimes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqTimes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteAtTimeDetails other) {
    if (other == null) {
      return;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.reqTimes_ != null) {
      if (reqTimes_ == null) {
        ReqTimes = new global::ListOfDateTime();
      }
      ReqTimes.MergeFrom(other.ReqTimes);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 18: {
          if (reqTimes_ == null) {
            ReqTimes = new global::ListOfDateTime();
          }
          input.ReadMessage(ReqTimes);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteEventDetails : pb::IMessage<DeleteEventDetails> {
  private static readonly pb::MessageParser<DeleteEventDetails> _parser = new pb::MessageParser<DeleteEventDetails>(() => new DeleteEventDetails());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteEventDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[166]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteEventDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteEventDetails(DeleteEventDetails other) : this() {
    eventIds_ = other.eventIds_ != null ? other.eventIds_.Clone() : null;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteEventDetails Clone() {
    return new DeleteEventDetails(this);
  }

  /// <summary>Field number for the "EventIds" field.</summary>
  public const int EventIdsFieldNumber = 1;
  private global::ListOfByteString eventIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfByteString EventIds {
    get { return eventIds_; }
    set {
      eventIds_ = value;
    }
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 2;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteEventDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteEventDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(EventIds, other.EventIds)) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (eventIds_ != null) hash ^= EventIds.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (eventIds_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EventIds);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NodeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (eventIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventIds);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteEventDetails other) {
    if (other == null) {
      return;
    }
    if (other.eventIds_ != null) {
      if (eventIds_ == null) {
        EventIds = new global::ListOfByteString();
      }
      EventIds.MergeFrom(other.EventIds);
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (eventIds_ == null) {
            EventIds = new global::ListOfByteString();
          }
          input.ReadMessage(EventIds);
          break;
        }
        case 18: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteNodesItem : pb::IMessage<DeleteNodesItem> {
  private static readonly pb::MessageParser<DeleteNodesItem> _parser = new pb::MessageParser<DeleteNodesItem>(() => new DeleteNodesItem());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteNodesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[167]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesItem(DeleteNodesItem other) : this() {
    _hasBits0 = other._hasBits0;
    deleteTargetReferences_ = other.deleteTargetReferences_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesItem Clone() {
    return new DeleteNodesItem(this);
  }

  /// <summary>Field number for the "DeleteTargetReferences" field.</summary>
  public const int DeleteTargetReferencesFieldNumber = 1;
  private readonly static bool DeleteTargetReferencesDefaultValue = false;

  private bool deleteTargetReferences_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DeleteTargetReferences {
    get { if ((_hasBits0 & 1) != 0) { return deleteTargetReferences_; } else { return DeleteTargetReferencesDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deleteTargetReferences_ = value;
    }
  }
  /// <summary>Gets whether the "DeleteTargetReferences" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeleteTargetReferences {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DeleteTargetReferences" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeleteTargetReferences() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 2;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteNodesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteNodesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeleteTargetReferences != other.DeleteTargetReferences) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeleteTargetReferences) hash ^= DeleteTargetReferences.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDeleteTargetReferences) {
      output.WriteRawTag(8);
      output.WriteBool(DeleteTargetReferences);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NodeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeleteTargetReferences) {
      size += 1 + 1;
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteNodesItem other) {
    if (other == null) {
      return;
    }
    if (other.HasDeleteTargetReferences) {
      DeleteTargetReferences = other.DeleteTargetReferences;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DeleteTargetReferences = input.ReadBool();
          break;
        }
        case 18: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteRawModifiedDetails : pb::IMessage<DeleteRawModifiedDetails> {
  private static readonly pb::MessageParser<DeleteRawModifiedDetails> _parser = new pb::MessageParser<DeleteRawModifiedDetails>(() => new DeleteRawModifiedDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteRawModifiedDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[168]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteRawModifiedDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteRawModifiedDetails(DeleteRawModifiedDetails other) : this() {
    _hasBits0 = other._hasBits0;
    endTime_ = other.endTime_;
    isDeleteModified_ = other.isDeleteModified_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteRawModifiedDetails Clone() {
    return new DeleteRawModifiedDetails(this);
  }

  /// <summary>Field number for the "EndTime" field.</summary>
  public const int EndTimeFieldNumber = 1;
  private readonly static long EndTimeDefaultValue = 0L;

  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { if ((_hasBits0 & 1) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      endTime_ = value;
    }
  }
  /// <summary>Gets whether the "EndTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "EndTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "IsDeleteModified" field.</summary>
  public const int IsDeleteModifiedFieldNumber = 2;
  private readonly static bool IsDeleteModifiedDefaultValue = false;

  private bool isDeleteModified_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDeleteModified {
    get { if ((_hasBits0 & 2) != 0) { return isDeleteModified_; } else { return IsDeleteModifiedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isDeleteModified_ = value;
    }
  }
  /// <summary>Gets whether the "IsDeleteModified" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsDeleteModified {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsDeleteModified" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsDeleteModified() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 3;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 4;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 4) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteRawModifiedDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteRawModifiedDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndTime != other.EndTime) return false;
    if (IsDeleteModified != other.IsDeleteModified) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndTime) hash ^= EndTime.GetHashCode();
    if (HasIsDeleteModified) hash ^= IsDeleteModified.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndTime) {
      output.WriteRawTag(8);
      output.WriteInt64(EndTime);
    }
    if (HasIsDeleteModified) {
      output.WriteRawTag(16);
      output.WriteBool(IsDeleteModified);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(NodeId);
    }
    if (HasStartTime) {
      output.WriteRawTag(32);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (HasIsDeleteModified) {
      size += 1 + 1;
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteRawModifiedDetails other) {
    if (other == null) {
      return;
    }
    if (other.HasEndTime) {
      EndTime = other.EndTime;
    }
    if (other.HasIsDeleteModified) {
      IsDeleteModified = other.IsDeleteModified;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EndTime = input.ReadInt64();
          break;
        }
        case 16: {
          IsDeleteModified = input.ReadBool();
          break;
        }
        case 26: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 32: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteReferencesItem : pb::IMessage<DeleteReferencesItem> {
  private static readonly pb::MessageParser<DeleteReferencesItem> _parser = new pb::MessageParser<DeleteReferencesItem>(() => new DeleteReferencesItem());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteReferencesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[169]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesItem(DeleteReferencesItem other) : this() {
    _hasBits0 = other._hasBits0;
    deleteBidirectional_ = other.deleteBidirectional_;
    isForward_ = other.isForward_;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    sourceNodeId_ = other.sourceNodeId_ != null ? other.sourceNodeId_.Clone() : null;
    targetNodeId_ = other.targetNodeId_ != null ? other.targetNodeId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesItem Clone() {
    return new DeleteReferencesItem(this);
  }

  /// <summary>Field number for the "DeleteBidirectional" field.</summary>
  public const int DeleteBidirectionalFieldNumber = 1;
  private readonly static bool DeleteBidirectionalDefaultValue = false;

  private bool deleteBidirectional_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DeleteBidirectional {
    get { if ((_hasBits0 & 1) != 0) { return deleteBidirectional_; } else { return DeleteBidirectionalDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deleteBidirectional_ = value;
    }
  }
  /// <summary>Gets whether the "DeleteBidirectional" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeleteBidirectional {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DeleteBidirectional" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeleteBidirectional() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "IsForward" field.</summary>
  public const int IsForwardFieldNumber = 2;
  private readonly static bool IsForwardDefaultValue = false;

  private bool isForward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsForward {
    get { if ((_hasBits0 & 2) != 0) { return isForward_; } else { return IsForwardDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isForward_ = value;
    }
  }
  /// <summary>Gets whether the "IsForward" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsForward {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsForward" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsForward() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 3;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "SourceNodeId" field.</summary>
  public const int SourceNodeIdFieldNumber = 4;
  private global::NodeId sourceNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId SourceNodeId {
    get { return sourceNodeId_; }
    set {
      sourceNodeId_ = value;
    }
  }

  /// <summary>Field number for the "TargetNodeId" field.</summary>
  public const int TargetNodeIdFieldNumber = 5;
  private global::ExpandedNodeId targetNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TargetNodeId {
    get { return targetNodeId_; }
    set {
      targetNodeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteReferencesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteReferencesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeleteBidirectional != other.DeleteBidirectional) return false;
    if (IsForward != other.IsForward) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (!object.Equals(SourceNodeId, other.SourceNodeId)) return false;
    if (!object.Equals(TargetNodeId, other.TargetNodeId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeleteBidirectional) hash ^= DeleteBidirectional.GetHashCode();
    if (HasIsForward) hash ^= IsForward.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (sourceNodeId_ != null) hash ^= SourceNodeId.GetHashCode();
    if (targetNodeId_ != null) hash ^= TargetNodeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDeleteBidirectional) {
      output.WriteRawTag(8);
      output.WriteBool(DeleteBidirectional);
    }
    if (HasIsForward) {
      output.WriteRawTag(16);
      output.WriteBool(IsForward);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ReferenceTypeId);
    }
    if (sourceNodeId_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SourceNodeId);
    }
    if (targetNodeId_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(TargetNodeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeleteBidirectional) {
      size += 1 + 1;
    }
    if (HasIsForward) {
      size += 1 + 1;
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (sourceNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceNodeId);
    }
    if (targetNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetNodeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteReferencesItem other) {
    if (other == null) {
      return;
    }
    if (other.HasDeleteBidirectional) {
      DeleteBidirectional = other.DeleteBidirectional;
    }
    if (other.HasIsForward) {
      IsForward = other.IsForward;
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.sourceNodeId_ != null) {
      if (sourceNodeId_ == null) {
        SourceNodeId = new global::NodeId();
      }
      SourceNodeId.MergeFrom(other.SourceNodeId);
    }
    if (other.targetNodeId_ != null) {
      if (targetNodeId_ == null) {
        TargetNodeId = new global::ExpandedNodeId();
      }
      TargetNodeId.MergeFrom(other.TargetNodeId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DeleteBidirectional = input.ReadBool();
          break;
        }
        case 16: {
          IsForward = input.ReadBool();
          break;
        }
        case 26: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 34: {
          if (sourceNodeId_ == null) {
            SourceNodeId = new global::NodeId();
          }
          input.ReadMessage(SourceNodeId);
          break;
        }
        case 42: {
          if (targetNodeId_ == null) {
            TargetNodeId = new global::ExpandedNodeId();
          }
          input.ReadMessage(TargetNodeId);
          break;
        }
      }
    }
  }

}

public sealed partial class DiagnosticInfo : pb::IMessage<DiagnosticInfo> {
  private static readonly pb::MessageParser<DiagnosticInfo> _parser = new pb::MessageParser<DiagnosticInfo>(() => new DiagnosticInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DiagnosticInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[170]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticInfo(DiagnosticInfo other) : this() {
    _hasBits0 = other._hasBits0;
    additionalInfo_ = other.additionalInfo_;
    innerDiagnosticInfo_ = other.innerDiagnosticInfo_;
    innerStatusCode_ = other.innerStatusCode_ != null ? other.innerStatusCode_.Clone() : null;
    locale_ = other.locale_;
    localizedText_ = other.localizedText_;
    namespaceUri_ = other.namespaceUri_;
    symbolicId_ = other.symbolicId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticInfo Clone() {
    return new DiagnosticInfo(this);
  }

  /// <summary>Field number for the "AdditionalInfo" field.</summary>
  public const int AdditionalInfoFieldNumber = 1;
  private readonly static string AdditionalInfoDefaultValue = "";

  private string additionalInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AdditionalInfo {
    get { return additionalInfo_ ?? AdditionalInfoDefaultValue; }
    set {
      additionalInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AdditionalInfo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdditionalInfo {
    get { return additionalInfo_ != null; }
  }
  /// <summary>Clears the value of the "AdditionalInfo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAdditionalInfo() {
    additionalInfo_ = null;
  }

  /// <summary>Field number for the "InnerDiagnosticInfo" field.</summary>
  public const int InnerDiagnosticInfoFieldNumber = 2;
  private readonly static pb::ByteString InnerDiagnosticInfoDefaultValue = pb::ByteString.Empty;

  private pb::ByteString innerDiagnosticInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString InnerDiagnosticInfo {
    get { return innerDiagnosticInfo_ ?? InnerDiagnosticInfoDefaultValue; }
    set {
      innerDiagnosticInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "InnerDiagnosticInfo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInnerDiagnosticInfo {
    get { return innerDiagnosticInfo_ != null; }
  }
  /// <summary>Clears the value of the "InnerDiagnosticInfo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInnerDiagnosticInfo() {
    innerDiagnosticInfo_ = null;
  }

  /// <summary>Field number for the "InnerStatusCode" field.</summary>
  public const int InnerStatusCodeFieldNumber = 3;
  private global::StatusCode innerStatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode InnerStatusCode {
    get { return innerStatusCode_; }
    set {
      innerStatusCode_ = value;
    }
  }

  /// <summary>Field number for the "Locale" field.</summary>
  public const int LocaleFieldNumber = 4;
  private readonly static int LocaleDefaultValue = 0;

  private int locale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Locale {
    get { if ((_hasBits0 & 1) != 0) { return locale_; } else { return LocaleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      locale_ = value;
    }
  }
  /// <summary>Gets whether the "Locale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLocale {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Locale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLocale() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "LocalizedText" field.</summary>
  public const int LocalizedTextFieldNumber = 5;
  private readonly static int LocalizedTextDefaultValue = 0;

  private int localizedText_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LocalizedText {
    get { if ((_hasBits0 & 2) != 0) { return localizedText_; } else { return LocalizedTextDefaultValue; } }
    set {
      _hasBits0 |= 2;
      localizedText_ = value;
    }
  }
  /// <summary>Gets whether the "LocalizedText" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLocalizedText {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "LocalizedText" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLocalizedText() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NamespaceUri" field.</summary>
  public const int NamespaceUriFieldNumber = 6;
  private readonly static int NamespaceUriDefaultValue = 0;

  private int namespaceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NamespaceUri {
    get { if ((_hasBits0 & 4) != 0) { return namespaceUri_; } else { return NamespaceUriDefaultValue; } }
    set {
      _hasBits0 |= 4;
      namespaceUri_ = value;
    }
  }
  /// <summary>Gets whether the "NamespaceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNamespaceUri {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "NamespaceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNamespaceUri() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SymbolicId" field.</summary>
  public const int SymbolicIdFieldNumber = 7;
  private readonly static int SymbolicIdDefaultValue = 0;

  private int symbolicId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SymbolicId {
    get { if ((_hasBits0 & 8) != 0) { return symbolicId_; } else { return SymbolicIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      symbolicId_ = value;
    }
  }
  /// <summary>Gets whether the "SymbolicId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolicId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SymbolicId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolicId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DiagnosticInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DiagnosticInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AdditionalInfo != other.AdditionalInfo) return false;
    if (InnerDiagnosticInfo != other.InnerDiagnosticInfo) return false;
    if (!object.Equals(InnerStatusCode, other.InnerStatusCode)) return false;
    if (Locale != other.Locale) return false;
    if (LocalizedText != other.LocalizedText) return false;
    if (NamespaceUri != other.NamespaceUri) return false;
    if (SymbolicId != other.SymbolicId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAdditionalInfo) hash ^= AdditionalInfo.GetHashCode();
    if (HasInnerDiagnosticInfo) hash ^= InnerDiagnosticInfo.GetHashCode();
    if (innerStatusCode_ != null) hash ^= InnerStatusCode.GetHashCode();
    if (HasLocale) hash ^= Locale.GetHashCode();
    if (HasLocalizedText) hash ^= LocalizedText.GetHashCode();
    if (HasNamespaceUri) hash ^= NamespaceUri.GetHashCode();
    if (HasSymbolicId) hash ^= SymbolicId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAdditionalInfo) {
      output.WriteRawTag(10);
      output.WriteString(AdditionalInfo);
    }
    if (HasInnerDiagnosticInfo) {
      output.WriteRawTag(18);
      output.WriteBytes(InnerDiagnosticInfo);
    }
    if (innerStatusCode_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(InnerStatusCode);
    }
    if (HasLocale) {
      output.WriteRawTag(32);
      output.WriteInt32(Locale);
    }
    if (HasLocalizedText) {
      output.WriteRawTag(40);
      output.WriteInt32(LocalizedText);
    }
    if (HasNamespaceUri) {
      output.WriteRawTag(48);
      output.WriteInt32(NamespaceUri);
    }
    if (HasSymbolicId) {
      output.WriteRawTag(56);
      output.WriteInt32(SymbolicId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAdditionalInfo) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AdditionalInfo);
    }
    if (HasInnerDiagnosticInfo) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(InnerDiagnosticInfo);
    }
    if (innerStatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InnerStatusCode);
    }
    if (HasLocale) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Locale);
    }
    if (HasLocalizedText) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalizedText);
    }
    if (HasNamespaceUri) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NamespaceUri);
    }
    if (HasSymbolicId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SymbolicId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DiagnosticInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasAdditionalInfo) {
      AdditionalInfo = other.AdditionalInfo;
    }
    if (other.HasInnerDiagnosticInfo) {
      InnerDiagnosticInfo = other.InnerDiagnosticInfo;
    }
    if (other.innerStatusCode_ != null) {
      if (innerStatusCode_ == null) {
        InnerStatusCode = new global::StatusCode();
      }
      InnerStatusCode.MergeFrom(other.InnerStatusCode);
    }
    if (other.HasLocale) {
      Locale = other.Locale;
    }
    if (other.HasLocalizedText) {
      LocalizedText = other.LocalizedText;
    }
    if (other.HasNamespaceUri) {
      NamespaceUri = other.NamespaceUri;
    }
    if (other.HasSymbolicId) {
      SymbolicId = other.SymbolicId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AdditionalInfo = input.ReadString();
          break;
        }
        case 18: {
          InnerDiagnosticInfo = input.ReadBytes();
          break;
        }
        case 26: {
          if (innerStatusCode_ == null) {
            InnerStatusCode = new global::StatusCode();
          }
          input.ReadMessage(InnerStatusCode);
          break;
        }
        case 32: {
          Locale = input.ReadInt32();
          break;
        }
        case 40: {
          LocalizedText = input.ReadInt32();
          break;
        }
        case 48: {
          NamespaceUri = input.ReadInt32();
          break;
        }
        case 56: {
          SymbolicId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DiscoveryConfiguration : pb::IMessage<DiscoveryConfiguration> {
  private static readonly pb::MessageParser<DiscoveryConfiguration> _parser = new pb::MessageParser<DiscoveryConfiguration>(() => new DiscoveryConfiguration());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DiscoveryConfiguration> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[171]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiscoveryConfiguration() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiscoveryConfiguration(DiscoveryConfiguration other) : this() {
    mdnsServerName_ = other.mdnsServerName_;
    serverCapabilities_ = other.serverCapabilities_ != null ? other.serverCapabilities_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiscoveryConfiguration Clone() {
    return new DiscoveryConfiguration(this);
  }

  /// <summary>Field number for the "MdnsServerName" field.</summary>
  public const int MdnsServerNameFieldNumber = 1;
  private readonly static string MdnsServerNameDefaultValue = "";

  private string mdnsServerName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MdnsServerName {
    get { return mdnsServerName_ ?? MdnsServerNameDefaultValue; }
    set {
      mdnsServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "MdnsServerName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMdnsServerName {
    get { return mdnsServerName_ != null; }
  }
  /// <summary>Clears the value of the "MdnsServerName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMdnsServerName() {
    mdnsServerName_ = null;
  }

  /// <summary>Field number for the "ServerCapabilities" field.</summary>
  public const int ServerCapabilitiesFieldNumber = 2;
  private global::ListOfString serverCapabilities_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ServerCapabilities {
    get { return serverCapabilities_; }
    set {
      serverCapabilities_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DiscoveryConfiguration);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DiscoveryConfiguration other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MdnsServerName != other.MdnsServerName) return false;
    if (!object.Equals(ServerCapabilities, other.ServerCapabilities)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMdnsServerName) hash ^= MdnsServerName.GetHashCode();
    if (serverCapabilities_ != null) hash ^= ServerCapabilities.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMdnsServerName) {
      output.WriteRawTag(10);
      output.WriteString(MdnsServerName);
    }
    if (serverCapabilities_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ServerCapabilities);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMdnsServerName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MdnsServerName);
    }
    if (serverCapabilities_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerCapabilities);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DiscoveryConfiguration other) {
    if (other == null) {
      return;
    }
    if (other.HasMdnsServerName) {
      MdnsServerName = other.MdnsServerName;
    }
    if (other.serverCapabilities_ != null) {
      if (serverCapabilities_ == null) {
        ServerCapabilities = new global::ListOfString();
      }
      ServerCapabilities.MergeFrom(other.ServerCapabilities);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MdnsServerName = input.ReadString();
          break;
        }
        case 18: {
          if (serverCapabilities_ == null) {
            ServerCapabilities = new global::ListOfString();
          }
          input.ReadMessage(ServerCapabilities);
          break;
        }
      }
    }
  }

}

public sealed partial class EUInformation : pb::IMessage<EUInformation> {
  private static readonly pb::MessageParser<EUInformation> _parser = new pb::MessageParser<EUInformation>(() => new EUInformation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EUInformation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[172]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EUInformation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EUInformation(EUInformation other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    namespaceUri_ = other.namespaceUri_;
    unitId_ = other.unitId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EUInformation Clone() {
    return new EUInformation(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "NamespaceUri" field.</summary>
  public const int NamespaceUriFieldNumber = 3;
  private readonly static string NamespaceUriDefaultValue = "";

  private string namespaceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NamespaceUri {
    get { return namespaceUri_ ?? NamespaceUriDefaultValue; }
    set {
      namespaceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "NamespaceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNamespaceUri {
    get { return namespaceUri_ != null; }
  }
  /// <summary>Clears the value of the "NamespaceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNamespaceUri() {
    namespaceUri_ = null;
  }

  /// <summary>Field number for the "UnitId" field.</summary>
  public const int UnitIdFieldNumber = 4;
  private readonly static int UnitIdDefaultValue = 0;

  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { if ((_hasBits0 & 1) != 0) { return unitId_; } else { return UnitIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      unitId_ = value;
    }
  }
  /// <summary>Gets whether the "UnitId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUnitId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "UnitId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUnitId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EUInformation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EUInformation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (NamespaceUri != other.NamespaceUri) return false;
    if (UnitId != other.UnitId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasNamespaceUri) hash ^= NamespaceUri.GetHashCode();
    if (HasUnitId) hash ^= UnitId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasNamespaceUri) {
      output.WriteRawTag(26);
      output.WriteString(NamespaceUri);
    }
    if (HasUnitId) {
      output.WriteRawTag(32);
      output.WriteInt32(UnitId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasNamespaceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceUri);
    }
    if (HasUnitId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EUInformation other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasNamespaceUri) {
      NamespaceUri = other.NamespaceUri;
    }
    if (other.HasUnitId) {
      UnitId = other.UnitId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 26: {
          NamespaceUri = input.ReadString();
          break;
        }
        case 32: {
          UnitId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class EndpointUrlListDataType : pb::IMessage<EndpointUrlListDataType> {
  private static readonly pb::MessageParser<EndpointUrlListDataType> _parser = new pb::MessageParser<EndpointUrlListDataType>(() => new EndpointUrlListDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EndpointUrlListDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[173]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointUrlListDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointUrlListDataType(EndpointUrlListDataType other) : this() {
    endpointUrlList_ = other.endpointUrlList_ != null ? other.endpointUrlList_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointUrlListDataType Clone() {
    return new EndpointUrlListDataType(this);
  }

  /// <summary>Field number for the "EndpointUrlList" field.</summary>
  public const int EndpointUrlListFieldNumber = 1;
  private global::ListOfString endpointUrlList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString EndpointUrlList {
    get { return endpointUrlList_; }
    set {
      endpointUrlList_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EndpointUrlListDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EndpointUrlListDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(EndpointUrlList, other.EndpointUrlList)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (endpointUrlList_ != null) hash ^= EndpointUrlList.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (endpointUrlList_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EndpointUrlList);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (endpointUrlList_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndpointUrlList);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EndpointUrlListDataType other) {
    if (other == null) {
      return;
    }
    if (other.endpointUrlList_ != null) {
      if (endpointUrlList_ == null) {
        EndpointUrlList = new global::ListOfString();
      }
      EndpointUrlList.MergeFrom(other.EndpointUrlList);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (endpointUrlList_ == null) {
            EndpointUrlList = new global::ListOfString();
          }
          input.ReadMessage(EndpointUrlList);
          break;
        }
      }
    }
  }

}

public sealed partial class EnumField : pb::IMessage<EnumField> {
  private static readonly pb::MessageParser<EnumField> _parser = new pb::MessageParser<EnumField>(() => new EnumField());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnumField> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[174]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumField() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumField(EnumField other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    name_ = other.name_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumField Clone() {
    return new EnumField(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 3;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 4;
  private readonly static long ValueDefaultValue = 0L;

  private long value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value {
    get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
    set {
      _hasBits0 |= 1;
      value_ = value;
    }
  }
  /// <summary>Gets whether the "Value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValue {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValue() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnumField);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnumField other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (Name != other.Name) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasValue) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasValue) {
      output.WriteRawTag(32);
      output.WriteInt64(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasValue) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnumField other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Value = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class EnumValueType : pb::IMessage<EnumValueType> {
  private static readonly pb::MessageParser<EnumValueType> _parser = new pb::MessageParser<EnumValueType>(() => new EnumValueType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnumValueType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[175]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumValueType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumValueType(EnumValueType other) : this() {
    _hasBits0 = other._hasBits0;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    name_ = other.name_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumValueType Clone() {
    return new EnumValueType(this);
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 1;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 3;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 4;
  private readonly static long ValueDefaultValue = 0L;

  private long value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value {
    get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
    set {
      _hasBits0 |= 1;
      value_ = value;
    }
  }
  /// <summary>Gets whether the "Value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValue {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValue() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnumValueType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnumValueType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (Name != other.Name) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasValue) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (description_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DisplayName);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasValue) {
      output.WriteRawTag(32);
      output.WriteInt64(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasValue) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnumValueType other) {
    if (other == null) {
      return;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 18: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Value = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ExtensionObject : pb::IMessage<ExtensionObject> {
  private static readonly pb::MessageParser<ExtensionObject> _parser = new pb::MessageParser<ExtensionObject>(() => new ExtensionObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExtensionObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[176]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtensionObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtensionObject(ExtensionObject other) : this() {
    body_ = other.body_ != null ? other.body_.Clone() : null;
    typeId_ = other.typeId_ != null ? other.typeId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtensionObject Clone() {
    return new ExtensionObject(this);
  }

  /// <summary>Field number for the "Body" field.</summary>
  public const int BodyFieldNumber = 1;
  private global::BodyType body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BodyType Body {
    get { return body_; }
    set {
      body_ = value;
    }
  }

  /// <summary>Field number for the "TypeId" field.</summary>
  public const int TypeIdFieldNumber = 2;
  private global::NodeId typeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId TypeId {
    get { return typeId_; }
    set {
      typeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExtensionObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExtensionObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Body, other.Body)) return false;
    if (!object.Equals(TypeId, other.TypeId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (body_ != null) hash ^= Body.GetHashCode();
    if (typeId_ != null) hash ^= TypeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (body_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Body);
    }
    if (typeId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TypeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (body_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
    }
    if (typeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExtensionObject other) {
    if (other == null) {
      return;
    }
    if (other.body_ != null) {
      if (body_ == null) {
        Body = new global::BodyType();
      }
      Body.MergeFrom(other.Body);
    }
    if (other.typeId_ != null) {
      if (typeId_ == null) {
        TypeId = new global::NodeId();
      }
      TypeId.MergeFrom(other.TypeId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (body_ == null) {
            Body = new global::BodyType();
          }
          input.ReadMessage(Body);
          break;
        }
        case 18: {
          if (typeId_ == null) {
            TypeId = new global::NodeId();
          }
          input.ReadMessage(TypeId);
          break;
        }
      }
    }
  }

}

public sealed partial class FieldTargetDataType : pb::IMessage<FieldTargetDataType> {
  private static readonly pb::MessageParser<FieldTargetDataType> _parser = new pb::MessageParser<FieldTargetDataType>(() => new FieldTargetDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FieldTargetDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[177]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldTargetDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldTargetDataType(FieldTargetDataType other) : this() {
    _hasBits0 = other._hasBits0;
    attributeId_ = other.attributeId_;
    dataSetFieldId_ = other.dataSetFieldId_ != null ? other.dataSetFieldId_.Clone() : null;
    overrideValue_ = other.overrideValue_ != null ? other.overrideValue_.Clone() : null;
    OverrideValueHandling_ = other.OverrideValueHandling_;
    receiverIndexRange_ = other.receiverIndexRange_;
    targetNodeId_ = other.targetNodeId_ != null ? other.targetNodeId_.Clone() : null;
    writeIndexRange_ = other.writeIndexRange_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldTargetDataType Clone() {
    return new FieldTargetDataType(this);
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 1;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetFieldId" field.</summary>
  public const int DataSetFieldIdFieldNumber = 2;
  private global::Guid dataSetFieldId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Guid DataSetFieldId {
    get { return dataSetFieldId_; }
    set {
      dataSetFieldId_ = value;
    }
  }

  /// <summary>Field number for the "OverrideValue" field.</summary>
  public const int OverrideValueFieldNumber = 3;
  private global::Variant overrideValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant OverrideValue {
    get { return overrideValue_; }
    set {
      overrideValue_ = value;
    }
  }

  /// <summary>Field number for the "_OverrideValueHandling" field.</summary>
  public const int OverrideValueHandlingFieldNumber = 4;
  private readonly static global::FieldTargetDataType.Types.OverrideValueHandling OverrideValueHandlingDefaultValue = global::FieldTargetDataType.Types.OverrideValueHandling.Disabled0;

  private global::FieldTargetDataType.Types.OverrideValueHandling OverrideValueHandling_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FieldTargetDataType.Types.OverrideValueHandling OverrideValueHandling {
    get { if ((_hasBits0 & 2) != 0) { return OverrideValueHandling_; } else { return OverrideValueHandlingDefaultValue; } }
    set {
      _hasBits0 |= 2;
      OverrideValueHandling_ = value;
    }
  }
  /// <summary>Gets whether the "_OverrideValueHandling" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOverrideValueHandling {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "_OverrideValueHandling" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOverrideValueHandling() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ReceiverIndexRange" field.</summary>
  public const int ReceiverIndexRangeFieldNumber = 5;
  private readonly static string ReceiverIndexRangeDefaultValue = "";

  private string receiverIndexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ReceiverIndexRange {
    get { return receiverIndexRange_ ?? ReceiverIndexRangeDefaultValue; }
    set {
      receiverIndexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ReceiverIndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReceiverIndexRange {
    get { return receiverIndexRange_ != null; }
  }
  /// <summary>Clears the value of the "ReceiverIndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReceiverIndexRange() {
    receiverIndexRange_ = null;
  }

  /// <summary>Field number for the "TargetNodeId" field.</summary>
  public const int TargetNodeIdFieldNumber = 6;
  private global::NodeId targetNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId TargetNodeId {
    get { return targetNodeId_; }
    set {
      targetNodeId_ = value;
    }
  }

  /// <summary>Field number for the "WriteIndexRange" field.</summary>
  public const int WriteIndexRangeFieldNumber = 7;
  private readonly static string WriteIndexRangeDefaultValue = "";

  private string writeIndexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WriteIndexRange {
    get { return writeIndexRange_ ?? WriteIndexRangeDefaultValue; }
    set {
      writeIndexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "WriteIndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteIndexRange {
    get { return writeIndexRange_ != null; }
  }
  /// <summary>Clears the value of the "WriteIndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteIndexRange() {
    writeIndexRange_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FieldTargetDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FieldTargetDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttributeId != other.AttributeId) return false;
    if (!object.Equals(DataSetFieldId, other.DataSetFieldId)) return false;
    if (!object.Equals(OverrideValue, other.OverrideValue)) return false;
    if (OverrideValueHandling != other.OverrideValueHandling) return false;
    if (ReceiverIndexRange != other.ReceiverIndexRange) return false;
    if (!object.Equals(TargetNodeId, other.TargetNodeId)) return false;
    if (WriteIndexRange != other.WriteIndexRange) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (dataSetFieldId_ != null) hash ^= DataSetFieldId.GetHashCode();
    if (overrideValue_ != null) hash ^= OverrideValue.GetHashCode();
    if (HasOverrideValueHandling) hash ^= OverrideValueHandling.GetHashCode();
    if (HasReceiverIndexRange) hash ^= ReceiverIndexRange.GetHashCode();
    if (targetNodeId_ != null) hash ^= TargetNodeId.GetHashCode();
    if (HasWriteIndexRange) hash ^= WriteIndexRange.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAttributeId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AttributeId);
    }
    if (dataSetFieldId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataSetFieldId);
    }
    if (overrideValue_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(OverrideValue);
    }
    if (HasOverrideValueHandling) {
      output.WriteRawTag(32);
      output.WriteEnum((int) OverrideValueHandling);
    }
    if (HasReceiverIndexRange) {
      output.WriteRawTag(42);
      output.WriteString(ReceiverIndexRange);
    }
    if (targetNodeId_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(TargetNodeId);
    }
    if (HasWriteIndexRange) {
      output.WriteRawTag(58);
      output.WriteString(WriteIndexRange);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (dataSetFieldId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetFieldId);
    }
    if (overrideValue_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverrideValue);
    }
    if (HasOverrideValueHandling) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OverrideValueHandling);
    }
    if (HasReceiverIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverIndexRange);
    }
    if (targetNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetNodeId);
    }
    if (HasWriteIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WriteIndexRange);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FieldTargetDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.dataSetFieldId_ != null) {
      if (dataSetFieldId_ == null) {
        DataSetFieldId = new global::Guid();
      }
      DataSetFieldId.MergeFrom(other.DataSetFieldId);
    }
    if (other.overrideValue_ != null) {
      if (overrideValue_ == null) {
        OverrideValue = new global::Variant();
      }
      OverrideValue.MergeFrom(other.OverrideValue);
    }
    if (other.HasOverrideValueHandling) {
      OverrideValueHandling = other.OverrideValueHandling;
    }
    if (other.HasReceiverIndexRange) {
      ReceiverIndexRange = other.ReceiverIndexRange;
    }
    if (other.targetNodeId_ != null) {
      if (targetNodeId_ == null) {
        TargetNodeId = new global::NodeId();
      }
      TargetNodeId.MergeFrom(other.TargetNodeId);
    }
    if (other.HasWriteIndexRange) {
      WriteIndexRange = other.WriteIndexRange;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (dataSetFieldId_ == null) {
            DataSetFieldId = new global::Guid();
          }
          input.ReadMessage(DataSetFieldId);
          break;
        }
        case 26: {
          if (overrideValue_ == null) {
            OverrideValue = new global::Variant();
          }
          input.ReadMessage(OverrideValue);
          break;
        }
        case 32: {
          OverrideValueHandling = (global::FieldTargetDataType.Types.OverrideValueHandling) input.ReadEnum();
          break;
        }
        case 42: {
          ReceiverIndexRange = input.ReadString();
          break;
        }
        case 50: {
          if (targetNodeId_ == null) {
            TargetNodeId = new global::NodeId();
          }
          input.ReadMessage(TargetNodeId);
          break;
        }
        case 58: {
          WriteIndexRange = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the FieldTargetDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum OverrideValueHandling {
      [pbr::OriginalName("OverrideValueHandling_Disabled_0")] Disabled0 = 1,
      [pbr::OriginalName("OverrideValueHandling_LastUsableValue_1")] LastUsableValue1 = 2,
      [pbr::OriginalName("OverrideValueHandling_OverrideValue_2")] OverrideValue2 = 3,
    }

  }
  #endregion

}

public sealed partial class Frame : pb::IMessage<Frame> {
  private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Frame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[178]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Frame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Frame(Frame other) : this() {
    cartesianCoordinates_ = other.cartesianCoordinates_ != null ? other.cartesianCoordinates_.Clone() : null;
    orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Frame Clone() {
    return new Frame(this);
  }

  /// <summary>Field number for the "CartesianCoordinates" field.</summary>
  public const int CartesianCoordinatesFieldNumber = 1;
  private global::ThreeDCartesianCoordinates cartesianCoordinates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ThreeDCartesianCoordinates CartesianCoordinates {
    get { return cartesianCoordinates_; }
    set {
      cartesianCoordinates_ = value;
    }
  }

  /// <summary>Field number for the "Orientation" field.</summary>
  public const int OrientationFieldNumber = 2;
  private global::ThreeDOrientation orientation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ThreeDOrientation Orientation {
    get { return orientation_; }
    set {
      orientation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Frame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Frame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CartesianCoordinates, other.CartesianCoordinates)) return false;
    if (!object.Equals(Orientation, other.Orientation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cartesianCoordinates_ != null) hash ^= CartesianCoordinates.GetHashCode();
    if (orientation_ != null) hash ^= Orientation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cartesianCoordinates_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CartesianCoordinates);
    }
    if (orientation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Orientation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cartesianCoordinates_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CartesianCoordinates);
    }
    if (orientation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Frame other) {
    if (other == null) {
      return;
    }
    if (other.cartesianCoordinates_ != null) {
      if (cartesianCoordinates_ == null) {
        CartesianCoordinates = new global::ThreeDCartesianCoordinates();
      }
      CartesianCoordinates.MergeFrom(other.CartesianCoordinates);
    }
    if (other.orientation_ != null) {
      if (orientation_ == null) {
        Orientation = new global::ThreeDOrientation();
      }
      Orientation.MergeFrom(other.Orientation);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (cartesianCoordinates_ == null) {
            CartesianCoordinates = new global::ThreeDCartesianCoordinates();
          }
          input.ReadMessage(CartesianCoordinates);
          break;
        }
        case 18: {
          if (orientation_ == null) {
            Orientation = new global::ThreeDOrientation();
          }
          input.ReadMessage(Orientation);
          break;
        }
      }
    }
  }

}

public sealed partial class GenericAttributeValue : pb::IMessage<GenericAttributeValue> {
  private static readonly pb::MessageParser<GenericAttributeValue> _parser = new pb::MessageParser<GenericAttributeValue>(() => new GenericAttributeValue());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GenericAttributeValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[179]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenericAttributeValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenericAttributeValue(GenericAttributeValue other) : this() {
    _hasBits0 = other._hasBits0;
    attributeId_ = other.attributeId_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenericAttributeValue Clone() {
    return new GenericAttributeValue(this);
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 1;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 2;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GenericAttributeValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GenericAttributeValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttributeId != other.AttributeId) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAttributeId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AttributeId);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GenericAttributeValue other) {
    if (other == null) {
      return;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryReadResult : pb::IMessage<HistoryReadResult> {
  private static readonly pb::MessageParser<HistoryReadResult> _parser = new pb::MessageParser<HistoryReadResult>(() => new HistoryReadResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryReadResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[180]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadResult(HistoryReadResult other) : this() {
    continuationPoint_ = other.continuationPoint_;
    historyData_ = other.historyData_ != null ? other.historyData_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadResult Clone() {
    return new HistoryReadResult(this);
  }

  /// <summary>Field number for the "ContinuationPoint" field.</summary>
  public const int ContinuationPointFieldNumber = 1;
  private readonly static pb::ByteString ContinuationPointDefaultValue = pb::ByteString.Empty;

  private pb::ByteString continuationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ContinuationPoint {
    get { return continuationPoint_ ?? ContinuationPointDefaultValue; }
    set {
      continuationPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ContinuationPoint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContinuationPoint {
    get { return continuationPoint_ != null; }
  }
  /// <summary>Clears the value of the "ContinuationPoint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContinuationPoint() {
    continuationPoint_ = null;
  }

  /// <summary>Field number for the "HistoryData" field.</summary>
  public const int HistoryDataFieldNumber = 2;
  private global::ExtensionObject historyData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject HistoryData {
    get { return historyData_; }
    set {
      historyData_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 3;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryReadResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryReadResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ContinuationPoint != other.ContinuationPoint) return false;
    if (!object.Equals(HistoryData, other.HistoryData)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasContinuationPoint) hash ^= ContinuationPoint.GetHashCode();
    if (historyData_ != null) hash ^= HistoryData.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasContinuationPoint) {
      output.WriteRawTag(10);
      output.WriteBytes(ContinuationPoint);
    }
    if (historyData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(HistoryData);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasContinuationPoint) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationPoint);
    }
    if (historyData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HistoryData);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryReadResult other) {
    if (other == null) {
      return;
    }
    if (other.HasContinuationPoint) {
      ContinuationPoint = other.ContinuationPoint;
    }
    if (other.historyData_ != null) {
      if (historyData_ == null) {
        HistoryData = new global::ExtensionObject();
      }
      HistoryData.MergeFrom(other.HistoryData);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContinuationPoint = input.ReadBytes();
          break;
        }
        case 18: {
          if (historyData_ == null) {
            HistoryData = new global::ExtensionObject();
          }
          input.ReadMessage(HistoryData);
          break;
        }
        case 26: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryReadValueId : pb::IMessage<HistoryReadValueId> {
  private static readonly pb::MessageParser<HistoryReadValueId> _parser = new pb::MessageParser<HistoryReadValueId>(() => new HistoryReadValueId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryReadValueId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[181]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadValueId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadValueId(HistoryReadValueId other) : this() {
    continuationPoint_ = other.continuationPoint_;
    dataEncoding_ = other.dataEncoding_ != null ? other.dataEncoding_.Clone() : null;
    indexRange_ = other.indexRange_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadValueId Clone() {
    return new HistoryReadValueId(this);
  }

  /// <summary>Field number for the "ContinuationPoint" field.</summary>
  public const int ContinuationPointFieldNumber = 1;
  private readonly static pb::ByteString ContinuationPointDefaultValue = pb::ByteString.Empty;

  private pb::ByteString continuationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ContinuationPoint {
    get { return continuationPoint_ ?? ContinuationPointDefaultValue; }
    set {
      continuationPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ContinuationPoint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContinuationPoint {
    get { return continuationPoint_ != null; }
  }
  /// <summary>Clears the value of the "ContinuationPoint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContinuationPoint() {
    continuationPoint_ = null;
  }

  /// <summary>Field number for the "DataEncoding" field.</summary>
  public const int DataEncodingFieldNumber = 2;
  private global::QualifiedName dataEncoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName DataEncoding {
    get { return dataEncoding_; }
    set {
      dataEncoding_ = value;
    }
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 3;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 4;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryReadValueId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryReadValueId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ContinuationPoint != other.ContinuationPoint) return false;
    if (!object.Equals(DataEncoding, other.DataEncoding)) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasContinuationPoint) hash ^= ContinuationPoint.GetHashCode();
    if (dataEncoding_ != null) hash ^= DataEncoding.GetHashCode();
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasContinuationPoint) {
      output.WriteRawTag(10);
      output.WriteBytes(ContinuationPoint);
    }
    if (dataEncoding_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataEncoding);
    }
    if (HasIndexRange) {
      output.WriteRawTag(26);
      output.WriteString(IndexRange);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NodeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasContinuationPoint) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationPoint);
    }
    if (dataEncoding_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataEncoding);
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryReadValueId other) {
    if (other == null) {
      return;
    }
    if (other.HasContinuationPoint) {
      ContinuationPoint = other.ContinuationPoint;
    }
    if (other.dataEncoding_ != null) {
      if (dataEncoding_ == null) {
        DataEncoding = new global::QualifiedName();
      }
      DataEncoding.MergeFrom(other.DataEncoding);
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContinuationPoint = input.ReadBytes();
          break;
        }
        case 18: {
          if (dataEncoding_ == null) {
            DataEncoding = new global::QualifiedName();
          }
          input.ReadMessage(DataEncoding);
          break;
        }
        case 26: {
          IndexRange = input.ReadString();
          break;
        }
        case 34: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
      }
    }
  }

}

public sealed partial class KeyValuePair : pb::IMessage<KeyValuePair> {
  private static readonly pb::MessageParser<KeyValuePair> _parser = new pb::MessageParser<KeyValuePair>(() => new KeyValuePair());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KeyValuePair> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[182]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeyValuePair() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeyValuePair(KeyValuePair other) : this() {
    key_ = other.key_ != null ? other.key_.Clone() : null;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeyValuePair Clone() {
    return new KeyValuePair(this);
  }

  /// <summary>Field number for the "Key" field.</summary>
  public const int KeyFieldNumber = 1;
  private global::QualifiedName key_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName Key {
    get { return key_; }
    set {
      key_ = value;
    }
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 2;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KeyValuePair);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KeyValuePair other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Key, other.Key)) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (key_ != null) hash ^= Key.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (key_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Key);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (key_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KeyValuePair other) {
    if (other == null) {
      return;
    }
    if (other.key_ != null) {
      if (key_ == null) {
        Key = new global::QualifiedName();
      }
      Key.MergeFrom(other.Key);
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (key_ == null) {
            Key = new global::QualifiedName();
          }
          input.ReadMessage(Key);
          break;
        }
        case 18: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfAddNodesResult : pb::IMessage<ListOfAddNodesResult> {
  private static readonly pb::MessageParser<ListOfAddNodesResult> _parser = new pb::MessageParser<ListOfAddNodesResult>(() => new ListOfAddNodesResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfAddNodesResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[183]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddNodesResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddNodesResult(ListOfAddNodesResult other) : this() {
    AddNodesResult_ = other.AddNodesResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddNodesResult Clone() {
    return new ListOfAddNodesResult(this);
  }

  /// <summary>Field number for the "_AddNodesResult" field.</summary>
  public const int AddNodesResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::AddNodesResult> _repeated_AddNodesResult_codec
      = pb::FieldCodec.ForMessage(10, global::AddNodesResult.Parser);
  private readonly pbc::RepeatedField<global::AddNodesResult> AddNodesResult_ = new pbc::RepeatedField<global::AddNodesResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AddNodesResult> AddNodesResult {
    get { return AddNodesResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfAddNodesResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfAddNodesResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!AddNodesResult_.Equals(other.AddNodesResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AddNodesResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    AddNodesResult_.WriteTo(output, _repeated_AddNodesResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += AddNodesResult_.CalculateSize(_repeated_AddNodesResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfAddNodesResult other) {
    if (other == null) {
      return;
    }
    AddNodesResult_.Add(other.AddNodesResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AddNodesResult_.AddEntriesFrom(input, _repeated_AddNodesResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfAddReferencesItem : pb::IMessage<ListOfAddReferencesItem> {
  private static readonly pb::MessageParser<ListOfAddReferencesItem> _parser = new pb::MessageParser<ListOfAddReferencesItem>(() => new ListOfAddReferencesItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfAddReferencesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[184]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddReferencesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddReferencesItem(ListOfAddReferencesItem other) : this() {
    AddReferencesItem_ = other.AddReferencesItem_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddReferencesItem Clone() {
    return new ListOfAddReferencesItem(this);
  }

  /// <summary>Field number for the "_AddReferencesItem" field.</summary>
  public const int AddReferencesItemFieldNumber = 1;
  private static readonly pb::FieldCodec<global::AddReferencesItem> _repeated_AddReferencesItem_codec
      = pb::FieldCodec.ForMessage(10, global::AddReferencesItem.Parser);
  private readonly pbc::RepeatedField<global::AddReferencesItem> AddReferencesItem_ = new pbc::RepeatedField<global::AddReferencesItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AddReferencesItem> AddReferencesItem {
    get { return AddReferencesItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfAddReferencesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfAddReferencesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!AddReferencesItem_.Equals(other.AddReferencesItem_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AddReferencesItem_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    AddReferencesItem_.WriteTo(output, _repeated_AddReferencesItem_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += AddReferencesItem_.CalculateSize(_repeated_AddReferencesItem_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfAddReferencesItem other) {
    if (other == null) {
      return;
    }
    AddReferencesItem_.Add(other.AddReferencesItem_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AddReferencesItem_.AddEntriesFrom(input, _repeated_AddReferencesItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfAliasNameDataType : pb::IMessage<ListOfAliasNameDataType> {
  private static readonly pb::MessageParser<ListOfAliasNameDataType> _parser = new pb::MessageParser<ListOfAliasNameDataType>(() => new ListOfAliasNameDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfAliasNameDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[185]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAliasNameDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAliasNameDataType(ListOfAliasNameDataType other) : this() {
    AliasNameDataType_ = other.AliasNameDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAliasNameDataType Clone() {
    return new ListOfAliasNameDataType(this);
  }

  /// <summary>Field number for the "_AliasNameDataType" field.</summary>
  public const int AliasNameDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::AliasNameDataType> _repeated_AliasNameDataType_codec
      = pb::FieldCodec.ForMessage(10, global::AliasNameDataType.Parser);
  private readonly pbc::RepeatedField<global::AliasNameDataType> AliasNameDataType_ = new pbc::RepeatedField<global::AliasNameDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AliasNameDataType> AliasNameDataType {
    get { return AliasNameDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfAliasNameDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfAliasNameDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!AliasNameDataType_.Equals(other.AliasNameDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AliasNameDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    AliasNameDataType_.WriteTo(output, _repeated_AliasNameDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += AliasNameDataType_.CalculateSize(_repeated_AliasNameDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfAliasNameDataType other) {
    if (other == null) {
      return;
    }
    AliasNameDataType_.Add(other.AliasNameDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AliasNameDataType_.AddEntriesFrom(input, _repeated_AliasNameDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfApplicationDescription : pb::IMessage<ListOfApplicationDescription> {
  private static readonly pb::MessageParser<ListOfApplicationDescription> _parser = new pb::MessageParser<ListOfApplicationDescription>(() => new ListOfApplicationDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfApplicationDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[186]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfApplicationDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfApplicationDescription(ListOfApplicationDescription other) : this() {
    ApplicationDescription_ = other.ApplicationDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfApplicationDescription Clone() {
    return new ListOfApplicationDescription(this);
  }

  /// <summary>Field number for the "_ApplicationDescription" field.</summary>
  public const int ApplicationDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ApplicationDescription> _repeated_ApplicationDescription_codec
      = pb::FieldCodec.ForMessage(10, global::ApplicationDescription.Parser);
  private readonly pbc::RepeatedField<global::ApplicationDescription> ApplicationDescription_ = new pbc::RepeatedField<global::ApplicationDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ApplicationDescription> ApplicationDescription {
    get { return ApplicationDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfApplicationDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfApplicationDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ApplicationDescription_.Equals(other.ApplicationDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ApplicationDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ApplicationDescription_.WriteTo(output, _repeated_ApplicationDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ApplicationDescription_.CalculateSize(_repeated_ApplicationDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfApplicationDescription other) {
    if (other == null) {
      return;
    }
    ApplicationDescription_.Add(other.ApplicationDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ApplicationDescription_.AddEntriesFrom(input, _repeated_ApplicationDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfArgument : pb::IMessage<ListOfArgument> {
  private static readonly pb::MessageParser<ListOfArgument> _parser = new pb::MessageParser<ListOfArgument>(() => new ListOfArgument());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfArgument> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[187]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfArgument() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfArgument(ListOfArgument other) : this() {
    Argument_ = other.Argument_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfArgument Clone() {
    return new ListOfArgument(this);
  }

  /// <summary>Field number for the "_Argument" field.</summary>
  public const int ArgumentFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Argument> _repeated_Argument_codec
      = pb::FieldCodec.ForMessage(10, global::Argument.Parser);
  private readonly pbc::RepeatedField<global::Argument> Argument_ = new pbc::RepeatedField<global::Argument>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Argument> Argument {
    get { return Argument_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfArgument);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfArgument other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Argument_.Equals(other.Argument_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Argument_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Argument_.WriteTo(output, _repeated_Argument_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Argument_.CalculateSize(_repeated_Argument_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfArgument other) {
    if (other == null) {
      return;
    }
    Argument_.Add(other.Argument_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Argument_.AddEntriesFrom(input, _repeated_Argument_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrowseDescription : pb::IMessage<ListOfBrowseDescription> {
  private static readonly pb::MessageParser<ListOfBrowseDescription> _parser = new pb::MessageParser<ListOfBrowseDescription>(() => new ListOfBrowseDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrowseDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[188]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowseDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowseDescription(ListOfBrowseDescription other) : this() {
    BrowseDescription_ = other.BrowseDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowseDescription Clone() {
    return new ListOfBrowseDescription(this);
  }

  /// <summary>Field number for the "_BrowseDescription" field.</summary>
  public const int BrowseDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrowseDescription> _repeated_BrowseDescription_codec
      = pb::FieldCodec.ForMessage(10, global::BrowseDescription.Parser);
  private readonly pbc::RepeatedField<global::BrowseDescription> BrowseDescription_ = new pbc::RepeatedField<global::BrowseDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrowseDescription> BrowseDescription {
    get { return BrowseDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrowseDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrowseDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrowseDescription_.Equals(other.BrowseDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrowseDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrowseDescription_.WriteTo(output, _repeated_BrowseDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrowseDescription_.CalculateSize(_repeated_BrowseDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrowseDescription other) {
    if (other == null) {
      return;
    }
    BrowseDescription_.Add(other.BrowseDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrowseDescription_.AddEntriesFrom(input, _repeated_BrowseDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrowsePathTarget : pb::IMessage<ListOfBrowsePathTarget> {
  private static readonly pb::MessageParser<ListOfBrowsePathTarget> _parser = new pb::MessageParser<ListOfBrowsePathTarget>(() => new ListOfBrowsePathTarget());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrowsePathTarget> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[189]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePathTarget() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePathTarget(ListOfBrowsePathTarget other) : this() {
    BrowsePathTarget_ = other.BrowsePathTarget_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePathTarget Clone() {
    return new ListOfBrowsePathTarget(this);
  }

  /// <summary>Field number for the "_BrowsePathTarget" field.</summary>
  public const int BrowsePathTargetFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrowsePathTarget> _repeated_BrowsePathTarget_codec
      = pb::FieldCodec.ForMessage(10, global::BrowsePathTarget.Parser);
  private readonly pbc::RepeatedField<global::BrowsePathTarget> BrowsePathTarget_ = new pbc::RepeatedField<global::BrowsePathTarget>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrowsePathTarget> BrowsePathTarget {
    get { return BrowsePathTarget_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrowsePathTarget);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrowsePathTarget other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrowsePathTarget_.Equals(other.BrowsePathTarget_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrowsePathTarget_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrowsePathTarget_.WriteTo(output, _repeated_BrowsePathTarget_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrowsePathTarget_.CalculateSize(_repeated_BrowsePathTarget_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrowsePathTarget other) {
    if (other == null) {
      return;
    }
    BrowsePathTarget_.Add(other.BrowsePathTarget_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrowsePathTarget_.AddEntriesFrom(input, _repeated_BrowsePathTarget_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfCurrencyUnitType : pb::IMessage<ListOfCurrencyUnitType> {
  private static readonly pb::MessageParser<ListOfCurrencyUnitType> _parser = new pb::MessageParser<ListOfCurrencyUnitType>(() => new ListOfCurrencyUnitType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfCurrencyUnitType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[190]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCurrencyUnitType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCurrencyUnitType(ListOfCurrencyUnitType other) : this() {
    CurrencyUnitType_ = other.CurrencyUnitType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCurrencyUnitType Clone() {
    return new ListOfCurrencyUnitType(this);
  }

  /// <summary>Field number for the "_CurrencyUnitType" field.</summary>
  public const int CurrencyUnitTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CurrencyUnitType> _repeated_CurrencyUnitType_codec
      = pb::FieldCodec.ForMessage(10, global::CurrencyUnitType.Parser);
  private readonly pbc::RepeatedField<global::CurrencyUnitType> CurrencyUnitType_ = new pbc::RepeatedField<global::CurrencyUnitType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CurrencyUnitType> CurrencyUnitType {
    get { return CurrencyUnitType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfCurrencyUnitType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfCurrencyUnitType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!CurrencyUnitType_.Equals(other.CurrencyUnitType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CurrencyUnitType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    CurrencyUnitType_.WriteTo(output, _repeated_CurrencyUnitType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += CurrencyUnitType_.CalculateSize(_repeated_CurrencyUnitType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfCurrencyUnitType other) {
    if (other == null) {
      return;
    }
    CurrencyUnitType_.Add(other.CurrencyUnitType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CurrencyUnitType_.AddEntriesFrom(input, _repeated_CurrencyUnitType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetReaderMessageDataType : pb::IMessage<ListOfDataSetReaderMessageDataType> {
  private static readonly pb::MessageParser<ListOfDataSetReaderMessageDataType> _parser = new pb::MessageParser<ListOfDataSetReaderMessageDataType>(() => new ListOfDataSetReaderMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetReaderMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[191]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderMessageDataType(ListOfDataSetReaderMessageDataType other) : this() {
    DataSetReaderMessageDataType_ = other.DataSetReaderMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderMessageDataType Clone() {
    return new ListOfDataSetReaderMessageDataType(this);
  }

  /// <summary>Field number for the "_DataSetReaderMessageDataType" field.</summary>
  public const int DataSetReaderMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataSetReaderMessageDataType> _repeated_DataSetReaderMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DataSetReaderMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::DataSetReaderMessageDataType> DataSetReaderMessageDataType_ = new pbc::RepeatedField<global::DataSetReaderMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataSetReaderMessageDataType> DataSetReaderMessageDataType {
    get { return DataSetReaderMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetReaderMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetReaderMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetReaderMessageDataType_.Equals(other.DataSetReaderMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetReaderMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetReaderMessageDataType_.WriteTo(output, _repeated_DataSetReaderMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetReaderMessageDataType_.CalculateSize(_repeated_DataSetReaderMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetReaderMessageDataType other) {
    if (other == null) {
      return;
    }
    DataSetReaderMessageDataType_.Add(other.DataSetReaderMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataSetReaderMessageDataType_.AddEntriesFrom(input, _repeated_DataSetReaderMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataValue : pb::IMessage<ListOfDataValue> {
  private static readonly pb::MessageParser<ListOfDataValue> _parser = new pb::MessageParser<ListOfDataValue>(() => new ListOfDataValue());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[192]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataValue(ListOfDataValue other) : this() {
    DataValue_ = other.DataValue_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataValue Clone() {
    return new ListOfDataValue(this);
  }

  /// <summary>Field number for the "_DataValue" field.</summary>
  public const int DataValueFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataValue> _repeated_DataValue_codec
      = pb::FieldCodec.ForMessage(10, global::DataValue.Parser);
  private readonly pbc::RepeatedField<global::DataValue> DataValue_ = new pbc::RepeatedField<global::DataValue>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataValue> DataValue {
    get { return DataValue_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataValue_.Equals(other.DataValue_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataValue_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataValue_.WriteTo(output, _repeated_DataValue_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataValue_.CalculateSize(_repeated_DataValue_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataValue other) {
    if (other == null) {
      return;
    }
    DataValue_.Add(other.DataValue_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataValue_.AddEntriesFrom(input, _repeated_DataValue_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDeleteNodesItem : pb::IMessage<ListOfDeleteNodesItem> {
  private static readonly pb::MessageParser<ListOfDeleteNodesItem> _parser = new pb::MessageParser<ListOfDeleteNodesItem>(() => new ListOfDeleteNodesItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDeleteNodesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[193]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDeleteNodesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDeleteNodesItem(ListOfDeleteNodesItem other) : this() {
    DeleteNodesItem_ = other.DeleteNodesItem_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDeleteNodesItem Clone() {
    return new ListOfDeleteNodesItem(this);
  }

  /// <summary>Field number for the "_DeleteNodesItem" field.</summary>
  public const int DeleteNodesItemFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DeleteNodesItem> _repeated_DeleteNodesItem_codec
      = pb::FieldCodec.ForMessage(10, global::DeleteNodesItem.Parser);
  private readonly pbc::RepeatedField<global::DeleteNodesItem> DeleteNodesItem_ = new pbc::RepeatedField<global::DeleteNodesItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DeleteNodesItem> DeleteNodesItem {
    get { return DeleteNodesItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDeleteNodesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDeleteNodesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DeleteNodesItem_.Equals(other.DeleteNodesItem_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DeleteNodesItem_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DeleteNodesItem_.WriteTo(output, _repeated_DeleteNodesItem_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DeleteNodesItem_.CalculateSize(_repeated_DeleteNodesItem_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDeleteNodesItem other) {
    if (other == null) {
      return;
    }
    DeleteNodesItem_.Add(other.DeleteNodesItem_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeleteNodesItem_.AddEntriesFrom(input, _repeated_DeleteNodesItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDeleteReferencesItem : pb::IMessage<ListOfDeleteReferencesItem> {
  private static readonly pb::MessageParser<ListOfDeleteReferencesItem> _parser = new pb::MessageParser<ListOfDeleteReferencesItem>(() => new ListOfDeleteReferencesItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDeleteReferencesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[194]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDeleteReferencesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDeleteReferencesItem(ListOfDeleteReferencesItem other) : this() {
    DeleteReferencesItem_ = other.DeleteReferencesItem_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDeleteReferencesItem Clone() {
    return new ListOfDeleteReferencesItem(this);
  }

  /// <summary>Field number for the "_DeleteReferencesItem" field.</summary>
  public const int DeleteReferencesItemFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DeleteReferencesItem> _repeated_DeleteReferencesItem_codec
      = pb::FieldCodec.ForMessage(10, global::DeleteReferencesItem.Parser);
  private readonly pbc::RepeatedField<global::DeleteReferencesItem> DeleteReferencesItem_ = new pbc::RepeatedField<global::DeleteReferencesItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DeleteReferencesItem> DeleteReferencesItem {
    get { return DeleteReferencesItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDeleteReferencesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDeleteReferencesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DeleteReferencesItem_.Equals(other.DeleteReferencesItem_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DeleteReferencesItem_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DeleteReferencesItem_.WriteTo(output, _repeated_DeleteReferencesItem_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DeleteReferencesItem_.CalculateSize(_repeated_DeleteReferencesItem_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDeleteReferencesItem other) {
    if (other == null) {
      return;
    }
    DeleteReferencesItem_.Add(other.DeleteReferencesItem_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeleteReferencesItem_.AddEntriesFrom(input, _repeated_DeleteReferencesItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDiagnosticInfo : pb::IMessage<ListOfDiagnosticInfo> {
  private static readonly pb::MessageParser<ListOfDiagnosticInfo> _parser = new pb::MessageParser<ListOfDiagnosticInfo>(() => new ListOfDiagnosticInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDiagnosticInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[195]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDiagnosticInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDiagnosticInfo(ListOfDiagnosticInfo other) : this() {
    DiagnosticInfo_ = other.DiagnosticInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDiagnosticInfo Clone() {
    return new ListOfDiagnosticInfo(this);
  }

  /// <summary>Field number for the "_DiagnosticInfo" field.</summary>
  public const int DiagnosticInfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DiagnosticInfo> _repeated_DiagnosticInfo_codec
      = pb::FieldCodec.ForMessage(10, global::DiagnosticInfo.Parser);
  private readonly pbc::RepeatedField<global::DiagnosticInfo> DiagnosticInfo_ = new pbc::RepeatedField<global::DiagnosticInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DiagnosticInfo> DiagnosticInfo {
    get { return DiagnosticInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDiagnosticInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDiagnosticInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DiagnosticInfo_.Equals(other.DiagnosticInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DiagnosticInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DiagnosticInfo_.WriteTo(output, _repeated_DiagnosticInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DiagnosticInfo_.CalculateSize(_repeated_DiagnosticInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDiagnosticInfo other) {
    if (other == null) {
      return;
    }
    DiagnosticInfo_.Add(other.DiagnosticInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DiagnosticInfo_.AddEntriesFrom(input, _repeated_DiagnosticInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEndpointUrlListDataType : pb::IMessage<ListOfEndpointUrlListDataType> {
  private static readonly pb::MessageParser<ListOfEndpointUrlListDataType> _parser = new pb::MessageParser<ListOfEndpointUrlListDataType>(() => new ListOfEndpointUrlListDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEndpointUrlListDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[196]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointUrlListDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointUrlListDataType(ListOfEndpointUrlListDataType other) : this() {
    EndpointUrlListDataType_ = other.EndpointUrlListDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointUrlListDataType Clone() {
    return new ListOfEndpointUrlListDataType(this);
  }

  /// <summary>Field number for the "_EndpointUrlListDataType" field.</summary>
  public const int EndpointUrlListDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EndpointUrlListDataType> _repeated_EndpointUrlListDataType_codec
      = pb::FieldCodec.ForMessage(10, global::EndpointUrlListDataType.Parser);
  private readonly pbc::RepeatedField<global::EndpointUrlListDataType> EndpointUrlListDataType_ = new pbc::RepeatedField<global::EndpointUrlListDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EndpointUrlListDataType> EndpointUrlListDataType {
    get { return EndpointUrlListDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEndpointUrlListDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEndpointUrlListDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EndpointUrlListDataType_.Equals(other.EndpointUrlListDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EndpointUrlListDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EndpointUrlListDataType_.WriteTo(output, _repeated_EndpointUrlListDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EndpointUrlListDataType_.CalculateSize(_repeated_EndpointUrlListDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEndpointUrlListDataType other) {
    if (other == null) {
      return;
    }
    EndpointUrlListDataType_.Add(other.EndpointUrlListDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointUrlListDataType_.AddEntriesFrom(input, _repeated_EndpointUrlListDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEnumField : pb::IMessage<ListOfEnumField> {
  private static readonly pb::MessageParser<ListOfEnumField> _parser = new pb::MessageParser<ListOfEnumField>(() => new ListOfEnumField());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEnumField> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[197]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumField() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumField(ListOfEnumField other) : this() {
    EnumField_ = other.EnumField_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumField Clone() {
    return new ListOfEnumField(this);
  }

  /// <summary>Field number for the "_EnumField" field.</summary>
  public const int EnumFieldFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EnumField> _repeated_EnumField_codec
      = pb::FieldCodec.ForMessage(10, global::EnumField.Parser);
  private readonly pbc::RepeatedField<global::EnumField> EnumField_ = new pbc::RepeatedField<global::EnumField>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnumField> EnumField {
    get { return EnumField_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEnumField);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEnumField other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EnumField_.Equals(other.EnumField_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EnumField_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EnumField_.WriteTo(output, _repeated_EnumField_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EnumField_.CalculateSize(_repeated_EnumField_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEnumField other) {
    if (other == null) {
      return;
    }
    EnumField_.Add(other.EnumField_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EnumField_.AddEntriesFrom(input, _repeated_EnumField_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEnumValueType : pb::IMessage<ListOfEnumValueType> {
  private static readonly pb::MessageParser<ListOfEnumValueType> _parser = new pb::MessageParser<ListOfEnumValueType>(() => new ListOfEnumValueType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEnumValueType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[198]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumValueType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumValueType(ListOfEnumValueType other) : this() {
    EnumValueType_ = other.EnumValueType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumValueType Clone() {
    return new ListOfEnumValueType(this);
  }

  /// <summary>Field number for the "_EnumValueType" field.</summary>
  public const int EnumValueTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EnumValueType> _repeated_EnumValueType_codec
      = pb::FieldCodec.ForMessage(10, global::EnumValueType.Parser);
  private readonly pbc::RepeatedField<global::EnumValueType> EnumValueType_ = new pbc::RepeatedField<global::EnumValueType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnumValueType> EnumValueType {
    get { return EnumValueType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEnumValueType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEnumValueType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EnumValueType_.Equals(other.EnumValueType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EnumValueType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EnumValueType_.WriteTo(output, _repeated_EnumValueType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EnumValueType_.CalculateSize(_repeated_EnumValueType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEnumValueType other) {
    if (other == null) {
      return;
    }
    EnumValueType_.Add(other.EnumValueType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EnumValueType_.AddEntriesFrom(input, _repeated_EnumValueType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfExtensionObject : pb::IMessage<ListOfExtensionObject> {
  private static readonly pb::MessageParser<ListOfExtensionObject> _parser = new pb::MessageParser<ListOfExtensionObject>(() => new ListOfExtensionObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfExtensionObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[199]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfExtensionObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfExtensionObject(ListOfExtensionObject other) : this() {
    ExtensionObject_ = other.ExtensionObject_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfExtensionObject Clone() {
    return new ListOfExtensionObject(this);
  }

  /// <summary>Field number for the "_ExtensionObject" field.</summary>
  public const int ExtensionObjectFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ExtensionObject> _repeated_ExtensionObject_codec
      = pb::FieldCodec.ForMessage(10, global::ExtensionObject.Parser);
  private readonly pbc::RepeatedField<global::ExtensionObject> ExtensionObject_ = new pbc::RepeatedField<global::ExtensionObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ExtensionObject> ExtensionObject {
    get { return ExtensionObject_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfExtensionObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfExtensionObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ExtensionObject_.Equals(other.ExtensionObject_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ExtensionObject_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ExtensionObject_.WriteTo(output, _repeated_ExtensionObject_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ExtensionObject_.CalculateSize(_repeated_ExtensionObject_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfExtensionObject other) {
    if (other == null) {
      return;
    }
    ExtensionObject_.Add(other.ExtensionObject_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ExtensionObject_.AddEntriesFrom(input, _repeated_ExtensionObject_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfFieldTargetDataType : pb::IMessage<ListOfFieldTargetDataType> {
  private static readonly pb::MessageParser<ListOfFieldTargetDataType> _parser = new pb::MessageParser<ListOfFieldTargetDataType>(() => new ListOfFieldTargetDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfFieldTargetDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[200]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFieldTargetDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFieldTargetDataType(ListOfFieldTargetDataType other) : this() {
    FieldTargetDataType_ = other.FieldTargetDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFieldTargetDataType Clone() {
    return new ListOfFieldTargetDataType(this);
  }

  /// <summary>Field number for the "_FieldTargetDataType" field.</summary>
  public const int FieldTargetDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FieldTargetDataType> _repeated_FieldTargetDataType_codec
      = pb::FieldCodec.ForMessage(10, global::FieldTargetDataType.Parser);
  private readonly pbc::RepeatedField<global::FieldTargetDataType> FieldTargetDataType_ = new pbc::RepeatedField<global::FieldTargetDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FieldTargetDataType> FieldTargetDataType {
    get { return FieldTargetDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfFieldTargetDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfFieldTargetDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!FieldTargetDataType_.Equals(other.FieldTargetDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= FieldTargetDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    FieldTargetDataType_.WriteTo(output, _repeated_FieldTargetDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += FieldTargetDataType_.CalculateSize(_repeated_FieldTargetDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfFieldTargetDataType other) {
    if (other == null) {
      return;
    }
    FieldTargetDataType_.Add(other.FieldTargetDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          FieldTargetDataType_.AddEntriesFrom(input, _repeated_FieldTargetDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfFrame : pb::IMessage<ListOfFrame> {
  private static readonly pb::MessageParser<ListOfFrame> _parser = new pb::MessageParser<ListOfFrame>(() => new ListOfFrame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfFrame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[201]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFrame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFrame(ListOfFrame other) : this() {
    Frame_ = other.Frame_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFrame Clone() {
    return new ListOfFrame(this);
  }

  /// <summary>Field number for the "_Frame" field.</summary>
  public const int FrameFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Frame> _repeated_Frame_codec
      = pb::FieldCodec.ForMessage(10, global::Frame.Parser);
  private readonly pbc::RepeatedField<global::Frame> Frame_ = new pbc::RepeatedField<global::Frame>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Frame> Frame {
    get { return Frame_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfFrame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfFrame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Frame_.Equals(other.Frame_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Frame_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Frame_.WriteTo(output, _repeated_Frame_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Frame_.CalculateSize(_repeated_Frame_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfFrame other) {
    if (other == null) {
      return;
    }
    Frame_.Add(other.Frame_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Frame_.AddEntriesFrom(input, _repeated_Frame_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfGenericAttributeValue : pb::IMessage<ListOfGenericAttributeValue> {
  private static readonly pb::MessageParser<ListOfGenericAttributeValue> _parser = new pb::MessageParser<ListOfGenericAttributeValue>(() => new ListOfGenericAttributeValue());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfGenericAttributeValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[202]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfGenericAttributeValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfGenericAttributeValue(ListOfGenericAttributeValue other) : this() {
    GenericAttributeValue_ = other.GenericAttributeValue_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfGenericAttributeValue Clone() {
    return new ListOfGenericAttributeValue(this);
  }

  /// <summary>Field number for the "_GenericAttributeValue" field.</summary>
  public const int GenericAttributeValueFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GenericAttributeValue> _repeated_GenericAttributeValue_codec
      = pb::FieldCodec.ForMessage(10, global::GenericAttributeValue.Parser);
  private readonly pbc::RepeatedField<global::GenericAttributeValue> GenericAttributeValue_ = new pbc::RepeatedField<global::GenericAttributeValue>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GenericAttributeValue> GenericAttributeValue {
    get { return GenericAttributeValue_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfGenericAttributeValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfGenericAttributeValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!GenericAttributeValue_.Equals(other.GenericAttributeValue_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= GenericAttributeValue_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    GenericAttributeValue_.WriteTo(output, _repeated_GenericAttributeValue_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += GenericAttributeValue_.CalculateSize(_repeated_GenericAttributeValue_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfGenericAttributeValue other) {
    if (other == null) {
      return;
    }
    GenericAttributeValue_.Add(other.GenericAttributeValue_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GenericAttributeValue_.AddEntriesFrom(input, _repeated_GenericAttributeValue_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfHistoryReadResult : pb::IMessage<ListOfHistoryReadResult> {
  private static readonly pb::MessageParser<ListOfHistoryReadResult> _parser = new pb::MessageParser<ListOfHistoryReadResult>(() => new ListOfHistoryReadResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfHistoryReadResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[203]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryReadResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryReadResult(ListOfHistoryReadResult other) : this() {
    HistoryReadResult_ = other.HistoryReadResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryReadResult Clone() {
    return new ListOfHistoryReadResult(this);
  }

  /// <summary>Field number for the "_HistoryReadResult" field.</summary>
  public const int HistoryReadResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HistoryReadResult> _repeated_HistoryReadResult_codec
      = pb::FieldCodec.ForMessage(10, global::HistoryReadResult.Parser);
  private readonly pbc::RepeatedField<global::HistoryReadResult> HistoryReadResult_ = new pbc::RepeatedField<global::HistoryReadResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HistoryReadResult> HistoryReadResult {
    get { return HistoryReadResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfHistoryReadResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfHistoryReadResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!HistoryReadResult_.Equals(other.HistoryReadResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= HistoryReadResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    HistoryReadResult_.WriteTo(output, _repeated_HistoryReadResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += HistoryReadResult_.CalculateSize(_repeated_HistoryReadResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfHistoryReadResult other) {
    if (other == null) {
      return;
    }
    HistoryReadResult_.Add(other.HistoryReadResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HistoryReadResult_.AddEntriesFrom(input, _repeated_HistoryReadResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfHistoryReadValueId : pb::IMessage<ListOfHistoryReadValueId> {
  private static readonly pb::MessageParser<ListOfHistoryReadValueId> _parser = new pb::MessageParser<ListOfHistoryReadValueId>(() => new ListOfHistoryReadValueId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfHistoryReadValueId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[204]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryReadValueId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryReadValueId(ListOfHistoryReadValueId other) : this() {
    HistoryReadValueId_ = other.HistoryReadValueId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryReadValueId Clone() {
    return new ListOfHistoryReadValueId(this);
  }

  /// <summary>Field number for the "_HistoryReadValueId" field.</summary>
  public const int HistoryReadValueIdFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HistoryReadValueId> _repeated_HistoryReadValueId_codec
      = pb::FieldCodec.ForMessage(10, global::HistoryReadValueId.Parser);
  private readonly pbc::RepeatedField<global::HistoryReadValueId> HistoryReadValueId_ = new pbc::RepeatedField<global::HistoryReadValueId>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HistoryReadValueId> HistoryReadValueId {
    get { return HistoryReadValueId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfHistoryReadValueId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfHistoryReadValueId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!HistoryReadValueId_.Equals(other.HistoryReadValueId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= HistoryReadValueId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    HistoryReadValueId_.WriteTo(output, _repeated_HistoryReadValueId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += HistoryReadValueId_.CalculateSize(_repeated_HistoryReadValueId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfHistoryReadValueId other) {
    if (other == null) {
      return;
    }
    HistoryReadValueId_.Add(other.HistoryReadValueId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HistoryReadValueId_.AddEntriesFrom(input, _repeated_HistoryReadValueId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfKeyValuePair : pb::IMessage<ListOfKeyValuePair> {
  private static readonly pb::MessageParser<ListOfKeyValuePair> _parser = new pb::MessageParser<ListOfKeyValuePair>(() => new ListOfKeyValuePair());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfKeyValuePair> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[205]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfKeyValuePair() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfKeyValuePair(ListOfKeyValuePair other) : this() {
    KeyValuePair_ = other.KeyValuePair_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfKeyValuePair Clone() {
    return new ListOfKeyValuePair(this);
  }

  /// <summary>Field number for the "_KeyValuePair" field.</summary>
  public const int KeyValuePairFieldNumber = 1;
  private static readonly pb::FieldCodec<global::KeyValuePair> _repeated_KeyValuePair_codec
      = pb::FieldCodec.ForMessage(10, global::KeyValuePair.Parser);
  private readonly pbc::RepeatedField<global::KeyValuePair> KeyValuePair_ = new pbc::RepeatedField<global::KeyValuePair>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::KeyValuePair> KeyValuePair {
    get { return KeyValuePair_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfKeyValuePair);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfKeyValuePair other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!KeyValuePair_.Equals(other.KeyValuePair_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= KeyValuePair_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    KeyValuePair_.WriteTo(output, _repeated_KeyValuePair_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += KeyValuePair_.CalculateSize(_repeated_KeyValuePair_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfKeyValuePair other) {
    if (other == null) {
      return;
    }
    KeyValuePair_.Add(other.KeyValuePair_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          KeyValuePair_.AddEntriesFrom(input, _repeated_KeyValuePair_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfLocalizedText : pb::IMessage<ListOfLocalizedText> {
  private static readonly pb::MessageParser<ListOfLocalizedText> _parser = new pb::MessageParser<ListOfLocalizedText>(() => new ListOfLocalizedText());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfLocalizedText> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[206]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfLocalizedText() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfLocalizedText(ListOfLocalizedText other) : this() {
    LocalizedText_ = other.LocalizedText_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfLocalizedText Clone() {
    return new ListOfLocalizedText(this);
  }

  /// <summary>Field number for the "_LocalizedText" field.</summary>
  public const int LocalizedTextFieldNumber = 1;
  private static readonly pb::FieldCodec<global::LocalizedText> _repeated_LocalizedText_codec
      = pb::FieldCodec.ForMessage(10, global::LocalizedText.Parser);
  private readonly pbc::RepeatedField<global::LocalizedText> LocalizedText_ = new pbc::RepeatedField<global::LocalizedText>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LocalizedText> LocalizedText {
    get { return LocalizedText_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfLocalizedText);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfLocalizedText other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!LocalizedText_.Equals(other.LocalizedText_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= LocalizedText_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    LocalizedText_.WriteTo(output, _repeated_LocalizedText_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += LocalizedText_.CalculateSize(_repeated_LocalizedText_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfLocalizedText other) {
    if (other == null) {
      return;
    }
    LocalizedText_.Add(other.LocalizedText_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          LocalizedText_.AddEntriesFrom(input, _repeated_LocalizedText_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfModificationInfo : pb::IMessage<ListOfModificationInfo> {
  private static readonly pb::MessageParser<ListOfModificationInfo> _parser = new pb::MessageParser<ListOfModificationInfo>(() => new ListOfModificationInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfModificationInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[207]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfModificationInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfModificationInfo(ListOfModificationInfo other) : this() {
    ModificationInfo_ = other.ModificationInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfModificationInfo Clone() {
    return new ListOfModificationInfo(this);
  }

  /// <summary>Field number for the "_ModificationInfo" field.</summary>
  public const int ModificationInfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ModificationInfo> _repeated_ModificationInfo_codec
      = pb::FieldCodec.ForMessage(10, global::ModificationInfo.Parser);
  private readonly pbc::RepeatedField<global::ModificationInfo> ModificationInfo_ = new pbc::RepeatedField<global::ModificationInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ModificationInfo> ModificationInfo {
    get { return ModificationInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfModificationInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfModificationInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ModificationInfo_.Equals(other.ModificationInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ModificationInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ModificationInfo_.WriteTo(output, _repeated_ModificationInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ModificationInfo_.CalculateSize(_repeated_ModificationInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfModificationInfo other) {
    if (other == null) {
      return;
    }
    ModificationInfo_.Add(other.ModificationInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ModificationInfo_.AddEntriesFrom(input, _repeated_ModificationInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfNetworkAddressDataType : pb::IMessage<ListOfNetworkAddressDataType> {
  private static readonly pb::MessageParser<ListOfNetworkAddressDataType> _parser = new pb::MessageParser<ListOfNetworkAddressDataType>(() => new ListOfNetworkAddressDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNetworkAddressDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[208]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkAddressDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkAddressDataType(ListOfNetworkAddressDataType other) : this() {
    NetworkAddressDataType_ = other.NetworkAddressDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkAddressDataType Clone() {
    return new ListOfNetworkAddressDataType(this);
  }

  /// <summary>Field number for the "_NetworkAddressDataType" field.</summary>
  public const int NetworkAddressDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NetworkAddressDataType> _repeated_NetworkAddressDataType_codec
      = pb::FieldCodec.ForMessage(10, global::NetworkAddressDataType.Parser);
  private readonly pbc::RepeatedField<global::NetworkAddressDataType> NetworkAddressDataType_ = new pbc::RepeatedField<global::NetworkAddressDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NetworkAddressDataType> NetworkAddressDataType {
    get { return NetworkAddressDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNetworkAddressDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNetworkAddressDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!NetworkAddressDataType_.Equals(other.NetworkAddressDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= NetworkAddressDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    NetworkAddressDataType_.WriteTo(output, _repeated_NetworkAddressDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += NetworkAddressDataType_.CalculateSize(_repeated_NetworkAddressDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNetworkAddressDataType other) {
    if (other == null) {
      return;
    }
    NetworkAddressDataType_.Add(other.NetworkAddressDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NetworkAddressDataType_.AddEntriesFrom(input, _repeated_NetworkAddressDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfNetworkAddressUrlDataType : pb::IMessage<ListOfNetworkAddressUrlDataType> {
  private static readonly pb::MessageParser<ListOfNetworkAddressUrlDataType> _parser = new pb::MessageParser<ListOfNetworkAddressUrlDataType>(() => new ListOfNetworkAddressUrlDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNetworkAddressUrlDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[209]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkAddressUrlDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkAddressUrlDataType(ListOfNetworkAddressUrlDataType other) : this() {
    NetworkAddressUrlDataType_ = other.NetworkAddressUrlDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkAddressUrlDataType Clone() {
    return new ListOfNetworkAddressUrlDataType(this);
  }

  /// <summary>Field number for the "_NetworkAddressUrlDataType" field.</summary>
  public const int NetworkAddressUrlDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NetworkAddressUrlDataType> _repeated_NetworkAddressUrlDataType_codec
      = pb::FieldCodec.ForMessage(10, global::NetworkAddressUrlDataType.Parser);
  private readonly pbc::RepeatedField<global::NetworkAddressUrlDataType> NetworkAddressUrlDataType_ = new pbc::RepeatedField<global::NetworkAddressUrlDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NetworkAddressUrlDataType> NetworkAddressUrlDataType {
    get { return NetworkAddressUrlDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNetworkAddressUrlDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNetworkAddressUrlDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!NetworkAddressUrlDataType_.Equals(other.NetworkAddressUrlDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= NetworkAddressUrlDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    NetworkAddressUrlDataType_.WriteTo(output, _repeated_NetworkAddressUrlDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += NetworkAddressUrlDataType_.CalculateSize(_repeated_NetworkAddressUrlDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNetworkAddressUrlDataType other) {
    if (other == null) {
      return;
    }
    NetworkAddressUrlDataType_.Add(other.NetworkAddressUrlDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NetworkAddressUrlDataType_.AddEntriesFrom(input, _repeated_NetworkAddressUrlDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfNodeId : pb::IMessage<ListOfNodeId> {
  private static readonly pb::MessageParser<ListOfNodeId> _parser = new pb::MessageParser<ListOfNodeId>(() => new ListOfNodeId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNodeId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[210]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeId(ListOfNodeId other) : this() {
    NodeId_ = other.NodeId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeId Clone() {
    return new ListOfNodeId(this);
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NodeId> _repeated_NodeId_codec
      = pb::FieldCodec.ForMessage(10, global::NodeId.Parser);
  private readonly pbc::RepeatedField<global::NodeId> NodeId_ = new pbc::RepeatedField<global::NodeId>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NodeId> NodeId {
    get { return NodeId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNodeId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNodeId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!NodeId_.Equals(other.NodeId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= NodeId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    NodeId_.WriteTo(output, _repeated_NodeId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += NodeId_.CalculateSize(_repeated_NodeId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNodeId other) {
    if (other == null) {
      return;
    }
    NodeId_.Add(other.NodeId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NodeId_.AddEntriesFrom(input, _repeated_NodeId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfOptionSet : pb::IMessage<ListOfOptionSet> {
  private static readonly pb::MessageParser<ListOfOptionSet> _parser = new pb::MessageParser<ListOfOptionSet>(() => new ListOfOptionSet());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfOptionSet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[211]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOptionSet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOptionSet(ListOfOptionSet other) : this() {
    OptionSet_ = other.OptionSet_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOptionSet Clone() {
    return new ListOfOptionSet(this);
  }

  /// <summary>Field number for the "_OptionSet" field.</summary>
  public const int OptionSetFieldNumber = 1;
  private static readonly pb::FieldCodec<global::OptionSet> _repeated_OptionSet_codec
      = pb::FieldCodec.ForMessage(10, global::OptionSet.Parser);
  private readonly pbc::RepeatedField<global::OptionSet> OptionSet_ = new pbc::RepeatedField<global::OptionSet>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OptionSet> OptionSet {
    get { return OptionSet_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfOptionSet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfOptionSet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!OptionSet_.Equals(other.OptionSet_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= OptionSet_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    OptionSet_.WriteTo(output, _repeated_OptionSet_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += OptionSet_.CalculateSize(_repeated_OptionSet_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfOptionSet other) {
    if (other == null) {
      return;
    }
    OptionSet_.Add(other.OptionSet_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          OptionSet_.AddEntriesFrom(input, _repeated_OptionSet_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfOrientation : pb::IMessage<ListOfOrientation> {
  private static readonly pb::MessageParser<ListOfOrientation> _parser = new pb::MessageParser<ListOfOrientation>(() => new ListOfOrientation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfOrientation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[212]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOrientation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOrientation(ListOfOrientation other) : this() {
    Orientation_ = other.Orientation_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfOrientation Clone() {
    return new ListOfOrientation(this);
  }

  /// <summary>Field number for the "_Orientation" field.</summary>
  public const int OrientationFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Orientation> _repeated_Orientation_codec
      = pb::FieldCodec.ForMessage(10, global::Orientation.Parser);
  private readonly pbc::RepeatedField<global::Orientation> Orientation_ = new pbc::RepeatedField<global::Orientation>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Orientation> Orientation {
    get { return Orientation_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfOrientation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfOrientation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Orientation_.Equals(other.Orientation_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Orientation_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Orientation_.WriteTo(output, _repeated_Orientation_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Orientation_.CalculateSize(_repeated_Orientation_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfOrientation other) {
    if (other == null) {
      return;
    }
    Orientation_.Add(other.Orientation_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Orientation_.AddEntriesFrom(input, _repeated_Orientation_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfQualifiedName : pb::IMessage<ListOfQualifiedName> {
  private static readonly pb::MessageParser<ListOfQualifiedName> _parser = new pb::MessageParser<ListOfQualifiedName>(() => new ListOfQualifiedName());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfQualifiedName> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[213]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQualifiedName() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQualifiedName(ListOfQualifiedName other) : this() {
    QualifiedName_ = other.QualifiedName_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQualifiedName Clone() {
    return new ListOfQualifiedName(this);
  }

  /// <summary>Field number for the "_QualifiedName" field.</summary>
  public const int QualifiedNameFieldNumber = 1;
  private static readonly pb::FieldCodec<global::QualifiedName> _repeated_QualifiedName_codec
      = pb::FieldCodec.ForMessage(10, global::QualifiedName.Parser);
  private readonly pbc::RepeatedField<global::QualifiedName> QualifiedName_ = new pbc::RepeatedField<global::QualifiedName>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::QualifiedName> QualifiedName {
    get { return QualifiedName_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfQualifiedName);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfQualifiedName other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!QualifiedName_.Equals(other.QualifiedName_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= QualifiedName_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    QualifiedName_.WriteTo(output, _repeated_QualifiedName_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += QualifiedName_.CalculateSize(_repeated_QualifiedName_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfQualifiedName other) {
    if (other == null) {
      return;
    }
    QualifiedName_.Add(other.QualifiedName_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          QualifiedName_.AddEntriesFrom(input, _repeated_QualifiedName_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfRationalNumber : pb::IMessage<ListOfRationalNumber> {
  private static readonly pb::MessageParser<ListOfRationalNumber> _parser = new pb::MessageParser<ListOfRationalNumber>(() => new ListOfRationalNumber());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfRationalNumber> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[214]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRationalNumber() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRationalNumber(ListOfRationalNumber other) : this() {
    RationalNumber_ = other.RationalNumber_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRationalNumber Clone() {
    return new ListOfRationalNumber(this);
  }

  /// <summary>Field number for the "_RationalNumber" field.</summary>
  public const int RationalNumberFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RationalNumber> _repeated_RationalNumber_codec
      = pb::FieldCodec.ForMessage(10, global::RationalNumber.Parser);
  private readonly pbc::RepeatedField<global::RationalNumber> RationalNumber_ = new pbc::RepeatedField<global::RationalNumber>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RationalNumber> RationalNumber {
    get { return RationalNumber_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfRationalNumber);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfRationalNumber other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!RationalNumber_.Equals(other.RationalNumber_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= RationalNumber_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    RationalNumber_.WriteTo(output, _repeated_RationalNumber_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += RationalNumber_.CalculateSize(_repeated_RationalNumber_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfRationalNumber other) {
    if (other == null) {
      return;
    }
    RationalNumber_.Add(other.RationalNumber_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RationalNumber_.AddEntriesFrom(input, _repeated_RationalNumber_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfReadValueId : pb::IMessage<ListOfReadValueId> {
  private static readonly pb::MessageParser<ListOfReadValueId> _parser = new pb::MessageParser<ListOfReadValueId>(() => new ListOfReadValueId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfReadValueId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[215]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReadValueId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReadValueId(ListOfReadValueId other) : this() {
    ReadValueId_ = other.ReadValueId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReadValueId Clone() {
    return new ListOfReadValueId(this);
  }

  /// <summary>Field number for the "_ReadValueId" field.</summary>
  public const int ReadValueIdFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ReadValueId> _repeated_ReadValueId_codec
      = pb::FieldCodec.ForMessage(10, global::ReadValueId.Parser);
  private readonly pbc::RepeatedField<global::ReadValueId> ReadValueId_ = new pbc::RepeatedField<global::ReadValueId>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ReadValueId> ReadValueId {
    get { return ReadValueId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfReadValueId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfReadValueId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ReadValueId_.Equals(other.ReadValueId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ReadValueId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ReadValueId_.WriteTo(output, _repeated_ReadValueId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ReadValueId_.CalculateSize(_repeated_ReadValueId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfReadValueId other) {
    if (other == null) {
      return;
    }
    ReadValueId_.Add(other.ReadValueId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ReadValueId_.AddEntriesFrom(input, _repeated_ReadValueId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfReaderGroupMessageDataType : pb::IMessage<ListOfReaderGroupMessageDataType> {
  private static readonly pb::MessageParser<ListOfReaderGroupMessageDataType> _parser = new pb::MessageParser<ListOfReaderGroupMessageDataType>(() => new ListOfReaderGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfReaderGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[216]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupMessageDataType(ListOfReaderGroupMessageDataType other) : this() {
    ReaderGroupMessageDataType_ = other.ReaderGroupMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupMessageDataType Clone() {
    return new ListOfReaderGroupMessageDataType(this);
  }

  /// <summary>Field number for the "_ReaderGroupMessageDataType" field.</summary>
  public const int ReaderGroupMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ReaderGroupMessageDataType> _repeated_ReaderGroupMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::ReaderGroupMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::ReaderGroupMessageDataType> ReaderGroupMessageDataType_ = new pbc::RepeatedField<global::ReaderGroupMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ReaderGroupMessageDataType> ReaderGroupMessageDataType {
    get { return ReaderGroupMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfReaderGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfReaderGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ReaderGroupMessageDataType_.Equals(other.ReaderGroupMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ReaderGroupMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ReaderGroupMessageDataType_.WriteTo(output, _repeated_ReaderGroupMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ReaderGroupMessageDataType_.CalculateSize(_repeated_ReaderGroupMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfReaderGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    ReaderGroupMessageDataType_.Add(other.ReaderGroupMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ReaderGroupMessageDataType_.AddEntriesFrom(input, _repeated_ReaderGroupMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfReaderGroupTransportDataType : pb::IMessage<ListOfReaderGroupTransportDataType> {
  private static readonly pb::MessageParser<ListOfReaderGroupTransportDataType> _parser = new pb::MessageParser<ListOfReaderGroupTransportDataType>(() => new ListOfReaderGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfReaderGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[217]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupTransportDataType(ListOfReaderGroupTransportDataType other) : this() {
    ReaderGroupTransportDataType_ = other.ReaderGroupTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupTransportDataType Clone() {
    return new ListOfReaderGroupTransportDataType(this);
  }

  /// <summary>Field number for the "_ReaderGroupTransportDataType" field.</summary>
  public const int ReaderGroupTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ReaderGroupTransportDataType> _repeated_ReaderGroupTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::ReaderGroupTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::ReaderGroupTransportDataType> ReaderGroupTransportDataType_ = new pbc::RepeatedField<global::ReaderGroupTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ReaderGroupTransportDataType> ReaderGroupTransportDataType {
    get { return ReaderGroupTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfReaderGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfReaderGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ReaderGroupTransportDataType_.Equals(other.ReaderGroupTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ReaderGroupTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ReaderGroupTransportDataType_.WriteTo(output, _repeated_ReaderGroupTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ReaderGroupTransportDataType_.CalculateSize(_repeated_ReaderGroupTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfReaderGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    ReaderGroupTransportDataType_.Add(other.ReaderGroupTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ReaderGroupTransportDataType_.AddEntriesFrom(input, _repeated_ReaderGroupTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfRedundantServerDataType : pb::IMessage<ListOfRedundantServerDataType> {
  private static readonly pb::MessageParser<ListOfRedundantServerDataType> _parser = new pb::MessageParser<ListOfRedundantServerDataType>(() => new ListOfRedundantServerDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfRedundantServerDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[218]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRedundantServerDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRedundantServerDataType(ListOfRedundantServerDataType other) : this() {
    RedundantServerDataType_ = other.RedundantServerDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRedundantServerDataType Clone() {
    return new ListOfRedundantServerDataType(this);
  }

  /// <summary>Field number for the "_RedundantServerDataType" field.</summary>
  public const int RedundantServerDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RedundantServerDataType> _repeated_RedundantServerDataType_codec
      = pb::FieldCodec.ForMessage(10, global::RedundantServerDataType.Parser);
  private readonly pbc::RepeatedField<global::RedundantServerDataType> RedundantServerDataType_ = new pbc::RepeatedField<global::RedundantServerDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RedundantServerDataType> RedundantServerDataType {
    get { return RedundantServerDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfRedundantServerDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfRedundantServerDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!RedundantServerDataType_.Equals(other.RedundantServerDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= RedundantServerDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    RedundantServerDataType_.WriteTo(output, _repeated_RedundantServerDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += RedundantServerDataType_.CalculateSize(_repeated_RedundantServerDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfRedundantServerDataType other) {
    if (other == null) {
      return;
    }
    RedundantServerDataType_.Add(other.RedundantServerDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RedundantServerDataType_.AddEntriesFrom(input, _repeated_RedundantServerDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfReferenceDescription : pb::IMessage<ListOfReferenceDescription> {
  private static readonly pb::MessageParser<ListOfReferenceDescription> _parser = new pb::MessageParser<ListOfReferenceDescription>(() => new ListOfReferenceDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfReferenceDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[219]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReferenceDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReferenceDescription(ListOfReferenceDescription other) : this() {
    ReferenceDescription_ = other.ReferenceDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReferenceDescription Clone() {
    return new ListOfReferenceDescription(this);
  }

  /// <summary>Field number for the "_ReferenceDescription" field.</summary>
  public const int ReferenceDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ReferenceDescription> _repeated_ReferenceDescription_codec
      = pb::FieldCodec.ForMessage(10, global::ReferenceDescription.Parser);
  private readonly pbc::RepeatedField<global::ReferenceDescription> ReferenceDescription_ = new pbc::RepeatedField<global::ReferenceDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ReferenceDescription> ReferenceDescription {
    get { return ReferenceDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfReferenceDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfReferenceDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ReferenceDescription_.Equals(other.ReferenceDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ReferenceDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ReferenceDescription_.WriteTo(output, _repeated_ReferenceDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ReferenceDescription_.CalculateSize(_repeated_ReferenceDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfReferenceDescription other) {
    if (other == null) {
      return;
    }
    ReferenceDescription_.Add(other.ReferenceDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ReferenceDescription_.AddEntriesFrom(input, _repeated_ReferenceDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfReferenceNode : pb::IMessage<ListOfReferenceNode> {
  private static readonly pb::MessageParser<ListOfReferenceNode> _parser = new pb::MessageParser<ListOfReferenceNode>(() => new ListOfReferenceNode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfReferenceNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[220]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReferenceNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReferenceNode(ListOfReferenceNode other) : this() {
    ReferenceNode_ = other.ReferenceNode_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReferenceNode Clone() {
    return new ListOfReferenceNode(this);
  }

  /// <summary>Field number for the "_ReferenceNode" field.</summary>
  public const int ReferenceNodeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ReferenceNode> _repeated_ReferenceNode_codec
      = pb::FieldCodec.ForMessage(10, global::ReferenceNode.Parser);
  private readonly pbc::RepeatedField<global::ReferenceNode> ReferenceNode_ = new pbc::RepeatedField<global::ReferenceNode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ReferenceNode> ReferenceNode {
    get { return ReferenceNode_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfReferenceNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfReferenceNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ReferenceNode_.Equals(other.ReferenceNode_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ReferenceNode_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ReferenceNode_.WriteTo(output, _repeated_ReferenceNode_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ReferenceNode_.CalculateSize(_repeated_ReferenceNode_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfReferenceNode other) {
    if (other == null) {
      return;
    }
    ReferenceNode_.Add(other.ReferenceNode_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ReferenceNode_.AddEntriesFrom(input, _repeated_ReferenceNode_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfRelativePathElement : pb::IMessage<ListOfRelativePathElement> {
  private static readonly pb::MessageParser<ListOfRelativePathElement> _parser = new pb::MessageParser<ListOfRelativePathElement>(() => new ListOfRelativePathElement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfRelativePathElement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[221]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRelativePathElement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRelativePathElement(ListOfRelativePathElement other) : this() {
    RelativePathElement_ = other.RelativePathElement_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRelativePathElement Clone() {
    return new ListOfRelativePathElement(this);
  }

  /// <summary>Field number for the "_RelativePathElement" field.</summary>
  public const int RelativePathElementFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RelativePathElement> _repeated_RelativePathElement_codec
      = pb::FieldCodec.ForMessage(10, global::RelativePathElement.Parser);
  private readonly pbc::RepeatedField<global::RelativePathElement> RelativePathElement_ = new pbc::RepeatedField<global::RelativePathElement>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RelativePathElement> RelativePathElement {
    get { return RelativePathElement_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfRelativePathElement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfRelativePathElement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!RelativePathElement_.Equals(other.RelativePathElement_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= RelativePathElement_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    RelativePathElement_.WriteTo(output, _repeated_RelativePathElement_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += RelativePathElement_.CalculateSize(_repeated_RelativePathElement_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfRelativePathElement other) {
    if (other == null) {
      return;
    }
    RelativePathElement_.Add(other.RelativePathElement_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RelativePathElement_.AddEntriesFrom(input, _repeated_RelativePathElement_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfRolePermissionType : pb::IMessage<ListOfRolePermissionType> {
  private static readonly pb::MessageParser<ListOfRolePermissionType> _parser = new pb::MessageParser<ListOfRolePermissionType>(() => new ListOfRolePermissionType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfRolePermissionType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[222]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRolePermissionType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRolePermissionType(ListOfRolePermissionType other) : this() {
    RolePermissionType_ = other.RolePermissionType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRolePermissionType Clone() {
    return new ListOfRolePermissionType(this);
  }

  /// <summary>Field number for the "_RolePermissionType" field.</summary>
  public const int RolePermissionTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RolePermissionType> _repeated_RolePermissionType_codec
      = pb::FieldCodec.ForMessage(10, global::RolePermissionType.Parser);
  private readonly pbc::RepeatedField<global::RolePermissionType> RolePermissionType_ = new pbc::RepeatedField<global::RolePermissionType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RolePermissionType> RolePermissionType {
    get { return RolePermissionType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfRolePermissionType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfRolePermissionType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!RolePermissionType_.Equals(other.RolePermissionType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= RolePermissionType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    RolePermissionType_.WriteTo(output, _repeated_RolePermissionType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += RolePermissionType_.CalculateSize(_repeated_RolePermissionType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfRolePermissionType other) {
    if (other == null) {
      return;
    }
    RolePermissionType_.Add(other.RolePermissionType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RolePermissionType_.AddEntriesFrom(input, _repeated_RolePermissionType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSamplingIntervalDiagnosticsDataType : pb::IMessage<ListOfSamplingIntervalDiagnosticsDataType> {
  private static readonly pb::MessageParser<ListOfSamplingIntervalDiagnosticsDataType> _parser = new pb::MessageParser<ListOfSamplingIntervalDiagnosticsDataType>(() => new ListOfSamplingIntervalDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSamplingIntervalDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[223]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSamplingIntervalDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSamplingIntervalDiagnosticsDataType(ListOfSamplingIntervalDiagnosticsDataType other) : this() {
    SamplingIntervalDiagnosticsDataType_ = other.SamplingIntervalDiagnosticsDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSamplingIntervalDiagnosticsDataType Clone() {
    return new ListOfSamplingIntervalDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "_SamplingIntervalDiagnosticsDataType" field.</summary>
  public const int SamplingIntervalDiagnosticsDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SamplingIntervalDiagnosticsDataType> _repeated_SamplingIntervalDiagnosticsDataType_codec
      = pb::FieldCodec.ForMessage(10, global::SamplingIntervalDiagnosticsDataType.Parser);
  private readonly pbc::RepeatedField<global::SamplingIntervalDiagnosticsDataType> SamplingIntervalDiagnosticsDataType_ = new pbc::RepeatedField<global::SamplingIntervalDiagnosticsDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SamplingIntervalDiagnosticsDataType> SamplingIntervalDiagnosticsDataType {
    get { return SamplingIntervalDiagnosticsDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSamplingIntervalDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSamplingIntervalDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SamplingIntervalDiagnosticsDataType_.Equals(other.SamplingIntervalDiagnosticsDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SamplingIntervalDiagnosticsDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SamplingIntervalDiagnosticsDataType_.WriteTo(output, _repeated_SamplingIntervalDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SamplingIntervalDiagnosticsDataType_.CalculateSize(_repeated_SamplingIntervalDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSamplingIntervalDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    SamplingIntervalDiagnosticsDataType_.Add(other.SamplingIntervalDiagnosticsDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SamplingIntervalDiagnosticsDataType_.AddEntriesFrom(input, _repeated_SamplingIntervalDiagnosticsDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSemanticChangeStructureDataType : pb::IMessage<ListOfSemanticChangeStructureDataType> {
  private static readonly pb::MessageParser<ListOfSemanticChangeStructureDataType> _parser = new pb::MessageParser<ListOfSemanticChangeStructureDataType>(() => new ListOfSemanticChangeStructureDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSemanticChangeStructureDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[224]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSemanticChangeStructureDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSemanticChangeStructureDataType(ListOfSemanticChangeStructureDataType other) : this() {
    SemanticChangeStructureDataType_ = other.SemanticChangeStructureDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSemanticChangeStructureDataType Clone() {
    return new ListOfSemanticChangeStructureDataType(this);
  }

  /// <summary>Field number for the "_SemanticChangeStructureDataType" field.</summary>
  public const int SemanticChangeStructureDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SemanticChangeStructureDataType> _repeated_SemanticChangeStructureDataType_codec
      = pb::FieldCodec.ForMessage(10, global::SemanticChangeStructureDataType.Parser);
  private readonly pbc::RepeatedField<global::SemanticChangeStructureDataType> SemanticChangeStructureDataType_ = new pbc::RepeatedField<global::SemanticChangeStructureDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SemanticChangeStructureDataType> SemanticChangeStructureDataType {
    get { return SemanticChangeStructureDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSemanticChangeStructureDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSemanticChangeStructureDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SemanticChangeStructureDataType_.Equals(other.SemanticChangeStructureDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SemanticChangeStructureDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SemanticChangeStructureDataType_.WriteTo(output, _repeated_SemanticChangeStructureDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SemanticChangeStructureDataType_.CalculateSize(_repeated_SemanticChangeStructureDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSemanticChangeStructureDataType other) {
    if (other == null) {
      return;
    }
    SemanticChangeStructureDataType_.Add(other.SemanticChangeStructureDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SemanticChangeStructureDataType_.AddEntriesFrom(input, _repeated_SemanticChangeStructureDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfServerOnNetwork : pb::IMessage<ListOfServerOnNetwork> {
  private static readonly pb::MessageParser<ListOfServerOnNetwork> _parser = new pb::MessageParser<ListOfServerOnNetwork>(() => new ListOfServerOnNetwork());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfServerOnNetwork> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[225]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfServerOnNetwork() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfServerOnNetwork(ListOfServerOnNetwork other) : this() {
    ServerOnNetwork_ = other.ServerOnNetwork_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfServerOnNetwork Clone() {
    return new ListOfServerOnNetwork(this);
  }

  /// <summary>Field number for the "_ServerOnNetwork" field.</summary>
  public const int ServerOnNetworkFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ServerOnNetwork> _repeated_ServerOnNetwork_codec
      = pb::FieldCodec.ForMessage(10, global::ServerOnNetwork.Parser);
  private readonly pbc::RepeatedField<global::ServerOnNetwork> ServerOnNetwork_ = new pbc::RepeatedField<global::ServerOnNetwork>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ServerOnNetwork> ServerOnNetwork {
    get { return ServerOnNetwork_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfServerOnNetwork);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfServerOnNetwork other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ServerOnNetwork_.Equals(other.ServerOnNetwork_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ServerOnNetwork_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ServerOnNetwork_.WriteTo(output, _repeated_ServerOnNetwork_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ServerOnNetwork_.CalculateSize(_repeated_ServerOnNetwork_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfServerOnNetwork other) {
    if (other == null) {
      return;
    }
    ServerOnNetwork_.Add(other.ServerOnNetwork_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ServerOnNetwork_.AddEntriesFrom(input, _repeated_ServerOnNetwork_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSessionSecurityDiagnosticsDataType : pb::IMessage<ListOfSessionSecurityDiagnosticsDataType> {
  private static readonly pb::MessageParser<ListOfSessionSecurityDiagnosticsDataType> _parser = new pb::MessageParser<ListOfSessionSecurityDiagnosticsDataType>(() => new ListOfSessionSecurityDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSessionSecurityDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[226]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSessionSecurityDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSessionSecurityDiagnosticsDataType(ListOfSessionSecurityDiagnosticsDataType other) : this() {
    SessionSecurityDiagnosticsDataType_ = other.SessionSecurityDiagnosticsDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSessionSecurityDiagnosticsDataType Clone() {
    return new ListOfSessionSecurityDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "_SessionSecurityDiagnosticsDataType" field.</summary>
  public const int SessionSecurityDiagnosticsDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SessionSecurityDiagnosticsDataType> _repeated_SessionSecurityDiagnosticsDataType_codec
      = pb::FieldCodec.ForMessage(10, global::SessionSecurityDiagnosticsDataType.Parser);
  private readonly pbc::RepeatedField<global::SessionSecurityDiagnosticsDataType> SessionSecurityDiagnosticsDataType_ = new pbc::RepeatedField<global::SessionSecurityDiagnosticsDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SessionSecurityDiagnosticsDataType> SessionSecurityDiagnosticsDataType {
    get { return SessionSecurityDiagnosticsDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSessionSecurityDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSessionSecurityDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SessionSecurityDiagnosticsDataType_.Equals(other.SessionSecurityDiagnosticsDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SessionSecurityDiagnosticsDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SessionSecurityDiagnosticsDataType_.WriteTo(output, _repeated_SessionSecurityDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SessionSecurityDiagnosticsDataType_.CalculateSize(_repeated_SessionSecurityDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSessionSecurityDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    SessionSecurityDiagnosticsDataType_.Add(other.SessionSecurityDiagnosticsDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionSecurityDiagnosticsDataType_.AddEntriesFrom(input, _repeated_SessionSecurityDiagnosticsDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSignedSoftwareCertificate : pb::IMessage<ListOfSignedSoftwareCertificate> {
  private static readonly pb::MessageParser<ListOfSignedSoftwareCertificate> _parser = new pb::MessageParser<ListOfSignedSoftwareCertificate>(() => new ListOfSignedSoftwareCertificate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSignedSoftwareCertificate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[227]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSignedSoftwareCertificate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSignedSoftwareCertificate(ListOfSignedSoftwareCertificate other) : this() {
    SignedSoftwareCertificate_ = other.SignedSoftwareCertificate_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSignedSoftwareCertificate Clone() {
    return new ListOfSignedSoftwareCertificate(this);
  }

  /// <summary>Field number for the "_SignedSoftwareCertificate" field.</summary>
  public const int SignedSoftwareCertificateFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SignedSoftwareCertificate> _repeated_SignedSoftwareCertificate_codec
      = pb::FieldCodec.ForMessage(10, global::SignedSoftwareCertificate.Parser);
  private readonly pbc::RepeatedField<global::SignedSoftwareCertificate> SignedSoftwareCertificate_ = new pbc::RepeatedField<global::SignedSoftwareCertificate>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SignedSoftwareCertificate> SignedSoftwareCertificate {
    get { return SignedSoftwareCertificate_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSignedSoftwareCertificate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSignedSoftwareCertificate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SignedSoftwareCertificate_.Equals(other.SignedSoftwareCertificate_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SignedSoftwareCertificate_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SignedSoftwareCertificate_.WriteTo(output, _repeated_SignedSoftwareCertificate_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SignedSoftwareCertificate_.CalculateSize(_repeated_SignedSoftwareCertificate_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSignedSoftwareCertificate other) {
    if (other == null) {
      return;
    }
    SignedSoftwareCertificate_.Add(other.SignedSoftwareCertificate_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SignedSoftwareCertificate_.AddEntriesFrom(input, _repeated_SignedSoftwareCertificate_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSimpleTypeDescription : pb::IMessage<ListOfSimpleTypeDescription> {
  private static readonly pb::MessageParser<ListOfSimpleTypeDescription> _parser = new pb::MessageParser<ListOfSimpleTypeDescription>(() => new ListOfSimpleTypeDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSimpleTypeDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[228]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSimpleTypeDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSimpleTypeDescription(ListOfSimpleTypeDescription other) : this() {
    SimpleTypeDescription_ = other.SimpleTypeDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSimpleTypeDescription Clone() {
    return new ListOfSimpleTypeDescription(this);
  }

  /// <summary>Field number for the "_SimpleTypeDescription" field.</summary>
  public const int SimpleTypeDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SimpleTypeDescription> _repeated_SimpleTypeDescription_codec
      = pb::FieldCodec.ForMessage(10, global::SimpleTypeDescription.Parser);
  private readonly pbc::RepeatedField<global::SimpleTypeDescription> SimpleTypeDescription_ = new pbc::RepeatedField<global::SimpleTypeDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SimpleTypeDescription> SimpleTypeDescription {
    get { return SimpleTypeDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSimpleTypeDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSimpleTypeDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SimpleTypeDescription_.Equals(other.SimpleTypeDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SimpleTypeDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SimpleTypeDescription_.WriteTo(output, _repeated_SimpleTypeDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SimpleTypeDescription_.CalculateSize(_repeated_SimpleTypeDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSimpleTypeDescription other) {
    if (other == null) {
      return;
    }
    SimpleTypeDescription_.Add(other.SimpleTypeDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SimpleTypeDescription_.AddEntriesFrom(input, _repeated_SimpleTypeDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfStatusCode : pb::IMessage<ListOfStatusCode> {
  private static readonly pb::MessageParser<ListOfStatusCode> _parser = new pb::MessageParser<ListOfStatusCode>(() => new ListOfStatusCode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfStatusCode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[229]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStatusCode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStatusCode(ListOfStatusCode other) : this() {
    StatusCode_ = other.StatusCode_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStatusCode Clone() {
    return new ListOfStatusCode(this);
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StatusCode> _repeated_StatusCode_codec
      = pb::FieldCodec.ForMessage(10, global::StatusCode.Parser);
  private readonly pbc::RepeatedField<global::StatusCode> StatusCode_ = new pbc::RepeatedField<global::StatusCode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StatusCode> StatusCode {
    get { return StatusCode_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfStatusCode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfStatusCode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!StatusCode_.Equals(other.StatusCode_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= StatusCode_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    StatusCode_.WriteTo(output, _repeated_StatusCode_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += StatusCode_.CalculateSize(_repeated_StatusCode_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfStatusCode other) {
    if (other == null) {
      return;
    }
    StatusCode_.Add(other.StatusCode_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StatusCode_.AddEntriesFrom(input, _repeated_StatusCode_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfStructureField : pb::IMessage<ListOfStructureField> {
  private static readonly pb::MessageParser<ListOfStructureField> _parser = new pb::MessageParser<ListOfStructureField>(() => new ListOfStructureField());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfStructureField> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[230]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureField() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureField(ListOfStructureField other) : this() {
    StructureField_ = other.StructureField_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureField Clone() {
    return new ListOfStructureField(this);
  }

  /// <summary>Field number for the "_StructureField" field.</summary>
  public const int StructureFieldFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StructureField> _repeated_StructureField_codec
      = pb::FieldCodec.ForMessage(10, global::StructureField.Parser);
  private readonly pbc::RepeatedField<global::StructureField> StructureField_ = new pbc::RepeatedField<global::StructureField>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StructureField> StructureField {
    get { return StructureField_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfStructureField);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfStructureField other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!StructureField_.Equals(other.StructureField_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= StructureField_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    StructureField_.WriteTo(output, _repeated_StructureField_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += StructureField_.CalculateSize(_repeated_StructureField_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfStructureField other) {
    if (other == null) {
      return;
    }
    StructureField_.Add(other.StructureField_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StructureField_.AddEntriesFrom(input, _repeated_StructureField_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSubscriptionAcknowledgement : pb::IMessage<ListOfSubscriptionAcknowledgement> {
  private static readonly pb::MessageParser<ListOfSubscriptionAcknowledgement> _parser = new pb::MessageParser<ListOfSubscriptionAcknowledgement>(() => new ListOfSubscriptionAcknowledgement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSubscriptionAcknowledgement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[231]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscriptionAcknowledgement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscriptionAcknowledgement(ListOfSubscriptionAcknowledgement other) : this() {
    SubscriptionAcknowledgement_ = other.SubscriptionAcknowledgement_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscriptionAcknowledgement Clone() {
    return new ListOfSubscriptionAcknowledgement(this);
  }

  /// <summary>Field number for the "_SubscriptionAcknowledgement" field.</summary>
  public const int SubscriptionAcknowledgementFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SubscriptionAcknowledgement> _repeated_SubscriptionAcknowledgement_codec
      = pb::FieldCodec.ForMessage(10, global::SubscriptionAcknowledgement.Parser);
  private readonly pbc::RepeatedField<global::SubscriptionAcknowledgement> SubscriptionAcknowledgement_ = new pbc::RepeatedField<global::SubscriptionAcknowledgement>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SubscriptionAcknowledgement> SubscriptionAcknowledgement {
    get { return SubscriptionAcknowledgement_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSubscriptionAcknowledgement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSubscriptionAcknowledgement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SubscriptionAcknowledgement_.Equals(other.SubscriptionAcknowledgement_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SubscriptionAcknowledgement_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SubscriptionAcknowledgement_.WriteTo(output, _repeated_SubscriptionAcknowledgement_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SubscriptionAcknowledgement_.CalculateSize(_repeated_SubscriptionAcknowledgement_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSubscriptionAcknowledgement other) {
    if (other == null) {
      return;
    }
    SubscriptionAcknowledgement_.Add(other.SubscriptionAcknowledgement_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SubscriptionAcknowledgement_.AddEntriesFrom(input, _repeated_SubscriptionAcknowledgement_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSubscriptionDiagnosticsDataType : pb::IMessage<ListOfSubscriptionDiagnosticsDataType> {
  private static readonly pb::MessageParser<ListOfSubscriptionDiagnosticsDataType> _parser = new pb::MessageParser<ListOfSubscriptionDiagnosticsDataType>(() => new ListOfSubscriptionDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSubscriptionDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[232]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscriptionDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscriptionDiagnosticsDataType(ListOfSubscriptionDiagnosticsDataType other) : this() {
    SubscriptionDiagnosticsDataType_ = other.SubscriptionDiagnosticsDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscriptionDiagnosticsDataType Clone() {
    return new ListOfSubscriptionDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "_SubscriptionDiagnosticsDataType" field.</summary>
  public const int SubscriptionDiagnosticsDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SubscriptionDiagnosticsDataType> _repeated_SubscriptionDiagnosticsDataType_codec
      = pb::FieldCodec.ForMessage(10, global::SubscriptionDiagnosticsDataType.Parser);
  private readonly pbc::RepeatedField<global::SubscriptionDiagnosticsDataType> SubscriptionDiagnosticsDataType_ = new pbc::RepeatedField<global::SubscriptionDiagnosticsDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SubscriptionDiagnosticsDataType> SubscriptionDiagnosticsDataType {
    get { return SubscriptionDiagnosticsDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSubscriptionDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSubscriptionDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SubscriptionDiagnosticsDataType_.Equals(other.SubscriptionDiagnosticsDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SubscriptionDiagnosticsDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SubscriptionDiagnosticsDataType_.WriteTo(output, _repeated_SubscriptionDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SubscriptionDiagnosticsDataType_.CalculateSize(_repeated_SubscriptionDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSubscriptionDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    SubscriptionDiagnosticsDataType_.Add(other.SubscriptionDiagnosticsDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SubscriptionDiagnosticsDataType_.AddEntriesFrom(input, _repeated_SubscriptionDiagnosticsDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfThreeDCartesianCoordinates : pb::IMessage<ListOfThreeDCartesianCoordinates> {
  private static readonly pb::MessageParser<ListOfThreeDCartesianCoordinates> _parser = new pb::MessageParser<ListOfThreeDCartesianCoordinates>(() => new ListOfThreeDCartesianCoordinates());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfThreeDCartesianCoordinates> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[233]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDCartesianCoordinates() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDCartesianCoordinates(ListOfThreeDCartesianCoordinates other) : this() {
    ThreeDCartesianCoordinates_ = other.ThreeDCartesianCoordinates_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDCartesianCoordinates Clone() {
    return new ListOfThreeDCartesianCoordinates(this);
  }

  /// <summary>Field number for the "_ThreeDCartesianCoordinates" field.</summary>
  public const int ThreeDCartesianCoordinatesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ThreeDCartesianCoordinates> _repeated_ThreeDCartesianCoordinates_codec
      = pb::FieldCodec.ForMessage(10, global::ThreeDCartesianCoordinates.Parser);
  private readonly pbc::RepeatedField<global::ThreeDCartesianCoordinates> ThreeDCartesianCoordinates_ = new pbc::RepeatedField<global::ThreeDCartesianCoordinates>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ThreeDCartesianCoordinates> ThreeDCartesianCoordinates {
    get { return ThreeDCartesianCoordinates_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfThreeDCartesianCoordinates);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfThreeDCartesianCoordinates other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ThreeDCartesianCoordinates_.Equals(other.ThreeDCartesianCoordinates_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ThreeDCartesianCoordinates_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ThreeDCartesianCoordinates_.WriteTo(output, _repeated_ThreeDCartesianCoordinates_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ThreeDCartesianCoordinates_.CalculateSize(_repeated_ThreeDCartesianCoordinates_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfThreeDCartesianCoordinates other) {
    if (other == null) {
      return;
    }
    ThreeDCartesianCoordinates_.Add(other.ThreeDCartesianCoordinates_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ThreeDCartesianCoordinates_.AddEntriesFrom(input, _repeated_ThreeDCartesianCoordinates_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfThreeDOrientation : pb::IMessage<ListOfThreeDOrientation> {
  private static readonly pb::MessageParser<ListOfThreeDOrientation> _parser = new pb::MessageParser<ListOfThreeDOrientation>(() => new ListOfThreeDOrientation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfThreeDOrientation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[234]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDOrientation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDOrientation(ListOfThreeDOrientation other) : this() {
    ThreeDOrientation_ = other.ThreeDOrientation_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDOrientation Clone() {
    return new ListOfThreeDOrientation(this);
  }

  /// <summary>Field number for the "_ThreeDOrientation" field.</summary>
  public const int ThreeDOrientationFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ThreeDOrientation> _repeated_ThreeDOrientation_codec
      = pb::FieldCodec.ForMessage(10, global::ThreeDOrientation.Parser);
  private readonly pbc::RepeatedField<global::ThreeDOrientation> ThreeDOrientation_ = new pbc::RepeatedField<global::ThreeDOrientation>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ThreeDOrientation> ThreeDOrientation {
    get { return ThreeDOrientation_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfThreeDOrientation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfThreeDOrientation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ThreeDOrientation_.Equals(other.ThreeDOrientation_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ThreeDOrientation_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ThreeDOrientation_.WriteTo(output, _repeated_ThreeDOrientation_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ThreeDOrientation_.CalculateSize(_repeated_ThreeDOrientation_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfThreeDOrientation other) {
    if (other == null) {
      return;
    }
    ThreeDOrientation_.Add(other.ThreeDOrientation_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ThreeDOrientation_.AddEntriesFrom(input, _repeated_ThreeDOrientation_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfThreeDVector : pb::IMessage<ListOfThreeDVector> {
  private static readonly pb::MessageParser<ListOfThreeDVector> _parser = new pb::MessageParser<ListOfThreeDVector>(() => new ListOfThreeDVector());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfThreeDVector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[235]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDVector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDVector(ListOfThreeDVector other) : this() {
    ThreeDVector_ = other.ThreeDVector_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDVector Clone() {
    return new ListOfThreeDVector(this);
  }

  /// <summary>Field number for the "_ThreeDVector" field.</summary>
  public const int ThreeDVectorFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ThreeDVector> _repeated_ThreeDVector_codec
      = pb::FieldCodec.ForMessage(10, global::ThreeDVector.Parser);
  private readonly pbc::RepeatedField<global::ThreeDVector> ThreeDVector_ = new pbc::RepeatedField<global::ThreeDVector>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ThreeDVector> ThreeDVector {
    get { return ThreeDVector_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfThreeDVector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfThreeDVector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ThreeDVector_.Equals(other.ThreeDVector_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ThreeDVector_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ThreeDVector_.WriteTo(output, _repeated_ThreeDVector_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ThreeDVector_.CalculateSize(_repeated_ThreeDVector_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfThreeDVector other) {
    if (other == null) {
      return;
    }
    ThreeDVector_.Add(other.ThreeDVector_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ThreeDVector_.AddEntriesFrom(input, _repeated_ThreeDVector_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfTimeZoneDataType : pb::IMessage<ListOfTimeZoneDataType> {
  private static readonly pb::MessageParser<ListOfTimeZoneDataType> _parser = new pb::MessageParser<ListOfTimeZoneDataType>(() => new ListOfTimeZoneDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTimeZoneDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[236]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTimeZoneDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTimeZoneDataType(ListOfTimeZoneDataType other) : this() {
    TimeZoneDataType_ = other.TimeZoneDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTimeZoneDataType Clone() {
    return new ListOfTimeZoneDataType(this);
  }

  /// <summary>Field number for the "_TimeZoneDataType" field.</summary>
  public const int TimeZoneDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TimeZoneDataType> _repeated_TimeZoneDataType_codec
      = pb::FieldCodec.ForMessage(10, global::TimeZoneDataType.Parser);
  private readonly pbc::RepeatedField<global::TimeZoneDataType> TimeZoneDataType_ = new pbc::RepeatedField<global::TimeZoneDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TimeZoneDataType> TimeZoneDataType {
    get { return TimeZoneDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTimeZoneDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTimeZoneDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TimeZoneDataType_.Equals(other.TimeZoneDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TimeZoneDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TimeZoneDataType_.WriteTo(output, _repeated_TimeZoneDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TimeZoneDataType_.CalculateSize(_repeated_TimeZoneDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTimeZoneDataType other) {
    if (other == null) {
      return;
    }
    TimeZoneDataType_.Add(other.TimeZoneDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TimeZoneDataType_.AddEntriesFrom(input, _repeated_TimeZoneDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfTransferResult : pb::IMessage<ListOfTransferResult> {
  private static readonly pb::MessageParser<ListOfTransferResult> _parser = new pb::MessageParser<ListOfTransferResult>(() => new ListOfTransferResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTransferResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[237]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTransferResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTransferResult(ListOfTransferResult other) : this() {
    TransferResult_ = other.TransferResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTransferResult Clone() {
    return new ListOfTransferResult(this);
  }

  /// <summary>Field number for the "_TransferResult" field.</summary>
  public const int TransferResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TransferResult> _repeated_TransferResult_codec
      = pb::FieldCodec.ForMessage(10, global::TransferResult.Parser);
  private readonly pbc::RepeatedField<global::TransferResult> TransferResult_ = new pbc::RepeatedField<global::TransferResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TransferResult> TransferResult {
    get { return TransferResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTransferResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTransferResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TransferResult_.Equals(other.TransferResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TransferResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TransferResult_.WriteTo(output, _repeated_TransferResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TransferResult_.CalculateSize(_repeated_TransferResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTransferResult other) {
    if (other == null) {
      return;
    }
    TransferResult_.Add(other.TransferResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TransferResult_.AddEntriesFrom(input, _repeated_TransferResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfTrustListDataType : pb::IMessage<ListOfTrustListDataType> {
  private static readonly pb::MessageParser<ListOfTrustListDataType> _parser = new pb::MessageParser<ListOfTrustListDataType>(() => new ListOfTrustListDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTrustListDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[238]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTrustListDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTrustListDataType(ListOfTrustListDataType other) : this() {
    TrustListDataType_ = other.TrustListDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTrustListDataType Clone() {
    return new ListOfTrustListDataType(this);
  }

  /// <summary>Field number for the "_TrustListDataType" field.</summary>
  public const int TrustListDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TrustListDataType> _repeated_TrustListDataType_codec
      = pb::FieldCodec.ForMessage(10, global::TrustListDataType.Parser);
  private readonly pbc::RepeatedField<global::TrustListDataType> TrustListDataType_ = new pbc::RepeatedField<global::TrustListDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TrustListDataType> TrustListDataType {
    get { return TrustListDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTrustListDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTrustListDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TrustListDataType_.Equals(other.TrustListDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TrustListDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TrustListDataType_.WriteTo(output, _repeated_TrustListDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TrustListDataType_.CalculateSize(_repeated_TrustListDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTrustListDataType other) {
    if (other == null) {
      return;
    }
    TrustListDataType_.Add(other.TrustListDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TrustListDataType_.AddEntriesFrom(input, _repeated_TrustListDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUadpDataSetReaderMessageDataType : pb::IMessage<ListOfUadpDataSetReaderMessageDataType> {
  private static readonly pb::MessageParser<ListOfUadpDataSetReaderMessageDataType> _parser = new pb::MessageParser<ListOfUadpDataSetReaderMessageDataType>(() => new ListOfUadpDataSetReaderMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUadpDataSetReaderMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[239]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetReaderMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetReaderMessageDataType(ListOfUadpDataSetReaderMessageDataType other) : this() {
    UadpDataSetReaderMessageDataType_ = other.UadpDataSetReaderMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetReaderMessageDataType Clone() {
    return new ListOfUadpDataSetReaderMessageDataType(this);
  }

  /// <summary>Field number for the "_UadpDataSetReaderMessageDataType" field.</summary>
  public const int UadpDataSetReaderMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UadpDataSetReaderMessageDataType> _repeated_UadpDataSetReaderMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::UadpDataSetReaderMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::UadpDataSetReaderMessageDataType> UadpDataSetReaderMessageDataType_ = new pbc::RepeatedField<global::UadpDataSetReaderMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UadpDataSetReaderMessageDataType> UadpDataSetReaderMessageDataType {
    get { return UadpDataSetReaderMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUadpDataSetReaderMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUadpDataSetReaderMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!UadpDataSetReaderMessageDataType_.Equals(other.UadpDataSetReaderMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= UadpDataSetReaderMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    UadpDataSetReaderMessageDataType_.WriteTo(output, _repeated_UadpDataSetReaderMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += UadpDataSetReaderMessageDataType_.CalculateSize(_repeated_UadpDataSetReaderMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUadpDataSetReaderMessageDataType other) {
    if (other == null) {
      return;
    }
    UadpDataSetReaderMessageDataType_.Add(other.UadpDataSetReaderMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UadpDataSetReaderMessageDataType_.AddEntriesFrom(input, _repeated_UadpDataSetReaderMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUadpDataSetWriterMessageDataType : pb::IMessage<ListOfUadpDataSetWriterMessageDataType> {
  private static readonly pb::MessageParser<ListOfUadpDataSetWriterMessageDataType> _parser = new pb::MessageParser<ListOfUadpDataSetWriterMessageDataType>(() => new ListOfUadpDataSetWriterMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUadpDataSetWriterMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[240]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetWriterMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetWriterMessageDataType(ListOfUadpDataSetWriterMessageDataType other) : this() {
    UadpDataSetWriterMessageDataType_ = other.UadpDataSetWriterMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpDataSetWriterMessageDataType Clone() {
    return new ListOfUadpDataSetWriterMessageDataType(this);
  }

  /// <summary>Field number for the "_UadpDataSetWriterMessageDataType" field.</summary>
  public const int UadpDataSetWriterMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UadpDataSetWriterMessageDataType> _repeated_UadpDataSetWriterMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::UadpDataSetWriterMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::UadpDataSetWriterMessageDataType> UadpDataSetWriterMessageDataType_ = new pbc::RepeatedField<global::UadpDataSetWriterMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UadpDataSetWriterMessageDataType> UadpDataSetWriterMessageDataType {
    get { return UadpDataSetWriterMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUadpDataSetWriterMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUadpDataSetWriterMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!UadpDataSetWriterMessageDataType_.Equals(other.UadpDataSetWriterMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= UadpDataSetWriterMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    UadpDataSetWriterMessageDataType_.WriteTo(output, _repeated_UadpDataSetWriterMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += UadpDataSetWriterMessageDataType_.CalculateSize(_repeated_UadpDataSetWriterMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUadpDataSetWriterMessageDataType other) {
    if (other == null) {
      return;
    }
    UadpDataSetWriterMessageDataType_.Add(other.UadpDataSetWriterMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UadpDataSetWriterMessageDataType_.AddEntriesFrom(input, _repeated_UadpDataSetWriterMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUadpWriterGroupMessageDataType : pb::IMessage<ListOfUadpWriterGroupMessageDataType> {
  private static readonly pb::MessageParser<ListOfUadpWriterGroupMessageDataType> _parser = new pb::MessageParser<ListOfUadpWriterGroupMessageDataType>(() => new ListOfUadpWriterGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUadpWriterGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[241]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpWriterGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpWriterGroupMessageDataType(ListOfUadpWriterGroupMessageDataType other) : this() {
    UadpWriterGroupMessageDataType_ = other.UadpWriterGroupMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUadpWriterGroupMessageDataType Clone() {
    return new ListOfUadpWriterGroupMessageDataType(this);
  }

  /// <summary>Field number for the "_UadpWriterGroupMessageDataType" field.</summary>
  public const int UadpWriterGroupMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UadpWriterGroupMessageDataType> _repeated_UadpWriterGroupMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::UadpWriterGroupMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::UadpWriterGroupMessageDataType> UadpWriterGroupMessageDataType_ = new pbc::RepeatedField<global::UadpWriterGroupMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UadpWriterGroupMessageDataType> UadpWriterGroupMessageDataType {
    get { return UadpWriterGroupMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUadpWriterGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUadpWriterGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!UadpWriterGroupMessageDataType_.Equals(other.UadpWriterGroupMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= UadpWriterGroupMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    UadpWriterGroupMessageDataType_.WriteTo(output, _repeated_UadpWriterGroupMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += UadpWriterGroupMessageDataType_.CalculateSize(_repeated_UadpWriterGroupMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUadpWriterGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    UadpWriterGroupMessageDataType_.Add(other.UadpWriterGroupMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UadpWriterGroupMessageDataType_.AddEntriesFrom(input, _repeated_UadpWriterGroupMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUnion : pb::IMessage<ListOfUnion> {
  private static readonly pb::MessageParser<ListOfUnion> _parser = new pb::MessageParser<ListOfUnion>(() => new ListOfUnion());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUnion> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[242]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUnion() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUnion(ListOfUnion other) : this() {
    Union_ = other.Union_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUnion Clone() {
    return new ListOfUnion(this);
  }

  /// <summary>Field number for the "_Union" field.</summary>
  public const int UnionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Union> _repeated_Union_codec
      = pb::FieldCodec.ForMessage(10, global::Union.Parser);
  private readonly pbc::RepeatedField<global::Union> Union_ = new pbc::RepeatedField<global::Union>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Union> Union {
    get { return Union_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUnion);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUnion other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Union_.Equals(other.Union_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Union_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Union_.WriteTo(output, _repeated_Union_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Union_.CalculateSize(_repeated_Union_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUnion other) {
    if (other == null) {
      return;
    }
    Union_.Add(other.Union_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Union_.AddEntriesFrom(input, _repeated_Union_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUnsignedRationalNumber : pb::IMessage<ListOfUnsignedRationalNumber> {
  private static readonly pb::MessageParser<ListOfUnsignedRationalNumber> _parser = new pb::MessageParser<ListOfUnsignedRationalNumber>(() => new ListOfUnsignedRationalNumber());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUnsignedRationalNumber> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[243]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUnsignedRationalNumber() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUnsignedRationalNumber(ListOfUnsignedRationalNumber other) : this() {
    UnsignedRationalNumber_ = other.UnsignedRationalNumber_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUnsignedRationalNumber Clone() {
    return new ListOfUnsignedRationalNumber(this);
  }

  /// <summary>Field number for the "_UnsignedRationalNumber" field.</summary>
  public const int UnsignedRationalNumberFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UnsignedRationalNumber> _repeated_UnsignedRationalNumber_codec
      = pb::FieldCodec.ForMessage(10, global::UnsignedRationalNumber.Parser);
  private readonly pbc::RepeatedField<global::UnsignedRationalNumber> UnsignedRationalNumber_ = new pbc::RepeatedField<global::UnsignedRationalNumber>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UnsignedRationalNumber> UnsignedRationalNumber {
    get { return UnsignedRationalNumber_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUnsignedRationalNumber);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUnsignedRationalNumber other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!UnsignedRationalNumber_.Equals(other.UnsignedRationalNumber_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= UnsignedRationalNumber_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    UnsignedRationalNumber_.WriteTo(output, _repeated_UnsignedRationalNumber_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += UnsignedRationalNumber_.CalculateSize(_repeated_UnsignedRationalNumber_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUnsignedRationalNumber other) {
    if (other == null) {
      return;
    }
    UnsignedRationalNumber_.Add(other.UnsignedRationalNumber_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UnsignedRationalNumber_.AddEntriesFrom(input, _repeated_UnsignedRationalNumber_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUserTokenPolicy : pb::IMessage<ListOfUserTokenPolicy> {
  private static readonly pb::MessageParser<ListOfUserTokenPolicy> _parser = new pb::MessageParser<ListOfUserTokenPolicy>(() => new ListOfUserTokenPolicy());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUserTokenPolicy> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[244]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUserTokenPolicy() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUserTokenPolicy(ListOfUserTokenPolicy other) : this() {
    UserTokenPolicy_ = other.UserTokenPolicy_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUserTokenPolicy Clone() {
    return new ListOfUserTokenPolicy(this);
  }

  /// <summary>Field number for the "_UserTokenPolicy" field.</summary>
  public const int UserTokenPolicyFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UserTokenPolicy> _repeated_UserTokenPolicy_codec
      = pb::FieldCodec.ForMessage(10, global::UserTokenPolicy.Parser);
  private readonly pbc::RepeatedField<global::UserTokenPolicy> UserTokenPolicy_ = new pbc::RepeatedField<global::UserTokenPolicy>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserTokenPolicy> UserTokenPolicy {
    get { return UserTokenPolicy_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUserTokenPolicy);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUserTokenPolicy other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!UserTokenPolicy_.Equals(other.UserTokenPolicy_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= UserTokenPolicy_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    UserTokenPolicy_.WriteTo(output, _repeated_UserTokenPolicy_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += UserTokenPolicy_.CalculateSize(_repeated_UserTokenPolicy_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUserTokenPolicy other) {
    if (other == null) {
      return;
    }
    UserTokenPolicy_.Add(other.UserTokenPolicy_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UserTokenPolicy_.AddEntriesFrom(input, _repeated_UserTokenPolicy_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfVariant : pb::IMessage<ListOfVariant> {
  private static readonly pb::MessageParser<ListOfVariant> _parser = new pb::MessageParser<ListOfVariant>(() => new ListOfVariant());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfVariant> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[245]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfVariant() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfVariant(ListOfVariant other) : this() {
    Variant_ = other.Variant_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfVariant Clone() {
    return new ListOfVariant(this);
  }

  /// <summary>Field number for the "_Variant" field.</summary>
  public const int VariantFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Variant> _repeated_Variant_codec
      = pb::FieldCodec.ForMessage(10, global::Variant.Parser);
  private readonly pbc::RepeatedField<global::Variant> Variant_ = new pbc::RepeatedField<global::Variant>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Variant> Variant {
    get { return Variant_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfVariant);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfVariant other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Variant_.Equals(other.Variant_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Variant_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Variant_.WriteTo(output, _repeated_Variant_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Variant_.CalculateSize(_repeated_Variant_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfVariant other) {
    if (other == null) {
      return;
    }
    Variant_.Add(other.Variant_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Variant_.AddEntriesFrom(input, _repeated_Variant_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfVector : pb::IMessage<ListOfVector> {
  private static readonly pb::MessageParser<ListOfVector> _parser = new pb::MessageParser<ListOfVector>(() => new ListOfVector());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfVector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[246]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfVector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfVector(ListOfVector other) : this() {
    Vector_ = other.Vector_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfVector Clone() {
    return new ListOfVector(this);
  }

  /// <summary>Field number for the "_Vector" field.</summary>
  public const int VectorFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Vector> _repeated_Vector_codec
      = pb::FieldCodec.ForMessage(10, global::Vector.Parser);
  private readonly pbc::RepeatedField<global::Vector> Vector_ = new pbc::RepeatedField<global::Vector>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Vector> Vector {
    get { return Vector_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfVector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfVector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Vector_.Equals(other.Vector_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Vector_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Vector_.WriteTo(output, _repeated_Vector_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Vector_.CalculateSize(_repeated_Vector_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfVector other) {
    if (other == null) {
      return;
    }
    Vector_.Add(other.Vector_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Vector_.AddEntriesFrom(input, _repeated_Vector_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfWriterGroupMessageDataType : pb::IMessage<ListOfWriterGroupMessageDataType> {
  private static readonly pb::MessageParser<ListOfWriterGroupMessageDataType> _parser = new pb::MessageParser<ListOfWriterGroupMessageDataType>(() => new ListOfWriterGroupMessageDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfWriterGroupMessageDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[247]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupMessageDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupMessageDataType(ListOfWriterGroupMessageDataType other) : this() {
    WriterGroupMessageDataType_ = other.WriterGroupMessageDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupMessageDataType Clone() {
    return new ListOfWriterGroupMessageDataType(this);
  }

  /// <summary>Field number for the "_WriterGroupMessageDataType" field.</summary>
  public const int WriterGroupMessageDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::WriterGroupMessageDataType> _repeated_WriterGroupMessageDataType_codec
      = pb::FieldCodec.ForMessage(10, global::WriterGroupMessageDataType.Parser);
  private readonly pbc::RepeatedField<global::WriterGroupMessageDataType> WriterGroupMessageDataType_ = new pbc::RepeatedField<global::WriterGroupMessageDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::WriterGroupMessageDataType> WriterGroupMessageDataType {
    get { return WriterGroupMessageDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfWriterGroupMessageDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfWriterGroupMessageDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!WriterGroupMessageDataType_.Equals(other.WriterGroupMessageDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= WriterGroupMessageDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    WriterGroupMessageDataType_.WriteTo(output, _repeated_WriterGroupMessageDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += WriterGroupMessageDataType_.CalculateSize(_repeated_WriterGroupMessageDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfWriterGroupMessageDataType other) {
    if (other == null) {
      return;
    }
    WriterGroupMessageDataType_.Add(other.WriterGroupMessageDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          WriterGroupMessageDataType_.AddEntriesFrom(input, _repeated_WriterGroupMessageDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfWriterGroupTransportDataType : pb::IMessage<ListOfWriterGroupTransportDataType> {
  private static readonly pb::MessageParser<ListOfWriterGroupTransportDataType> _parser = new pb::MessageParser<ListOfWriterGroupTransportDataType>(() => new ListOfWriterGroupTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfWriterGroupTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[248]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupTransportDataType(ListOfWriterGroupTransportDataType other) : this() {
    WriterGroupTransportDataType_ = other.WriterGroupTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupTransportDataType Clone() {
    return new ListOfWriterGroupTransportDataType(this);
  }

  /// <summary>Field number for the "_WriterGroupTransportDataType" field.</summary>
  public const int WriterGroupTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::WriterGroupTransportDataType> _repeated_WriterGroupTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::WriterGroupTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::WriterGroupTransportDataType> WriterGroupTransportDataType_ = new pbc::RepeatedField<global::WriterGroupTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::WriterGroupTransportDataType> WriterGroupTransportDataType {
    get { return WriterGroupTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfWriterGroupTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfWriterGroupTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!WriterGroupTransportDataType_.Equals(other.WriterGroupTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= WriterGroupTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    WriterGroupTransportDataType_.WriteTo(output, _repeated_WriterGroupTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += WriterGroupTransportDataType_.CalculateSize(_repeated_WriterGroupTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfWriterGroupTransportDataType other) {
    if (other == null) {
      return;
    }
    WriterGroupTransportDataType_.Add(other.WriterGroupTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          WriterGroupTransportDataType_.AddEntriesFrom(input, _repeated_WriterGroupTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfXmlElement : pb::IMessage<ListOfXmlElement> {
  private static readonly pb::MessageParser<ListOfXmlElement> _parser = new pb::MessageParser<ListOfXmlElement>(() => new ListOfXmlElement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfXmlElement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[249]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfXmlElement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfXmlElement(ListOfXmlElement other) : this() {
    xmlElement_ = other.xmlElement_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfXmlElement Clone() {
    return new ListOfXmlElement(this);
  }

  /// <summary>Field number for the "XmlElement" field.</summary>
  public const int XmlElementFieldNumber = 1;
  private static readonly pb::FieldCodec<global::XmlElementType> _repeated_xmlElement_codec
      = pb::FieldCodec.ForMessage(10, global::XmlElementType.Parser);
  private readonly pbc::RepeatedField<global::XmlElementType> xmlElement_ = new pbc::RepeatedField<global::XmlElementType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::XmlElementType> XmlElement {
    get { return xmlElement_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfXmlElement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfXmlElement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!xmlElement_.Equals(other.xmlElement_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= xmlElement_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    xmlElement_.WriteTo(output, _repeated_xmlElement_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += xmlElement_.CalculateSize(_repeated_xmlElement_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfXmlElement other) {
    if (other == null) {
      return;
    }
    xmlElement_.Add(other.xmlElement_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          xmlElement_.AddEntriesFrom(input, _repeated_xmlElement_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class LiteralOperand : pb::IMessage<LiteralOperand> {
  private static readonly pb::MessageParser<LiteralOperand> _parser = new pb::MessageParser<LiteralOperand>(() => new LiteralOperand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LiteralOperand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[250]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LiteralOperand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LiteralOperand(LiteralOperand other) : this() {
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LiteralOperand Clone() {
    return new LiteralOperand(this);
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 1;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LiteralOperand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LiteralOperand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (value_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LiteralOperand other) {
    if (other == null) {
      return;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class MethodNode : pb::IMessage<MethodNode> {
  private static readonly pb::MessageParser<MethodNode> _parser = new pb::MessageParser<MethodNode>(() => new MethodNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MethodNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[251]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MethodNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MethodNode(MethodNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    executable_ = other.executable_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userExecutable_ = other.userExecutable_;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MethodNode Clone() {
    return new MethodNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 2;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 4;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "Executable" field.</summary>
  public const int ExecutableFieldNumber = 5;
  private readonly static bool ExecutableDefaultValue = false;

  private bool executable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Executable {
    get { if ((_hasBits0 & 2) != 0) { return executable_; } else { return ExecutableDefaultValue; } }
    set {
      _hasBits0 |= 2;
      executable_ = value;
    }
  }
  /// <summary>Gets whether the "Executable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExecutable {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Executable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExecutable() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 6;
  private readonly static global::MethodNode.Types.NodeClass NodeClassDefaultValue = global::MethodNode.Types.NodeClass.DataType64;

  private global::MethodNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MethodNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 4) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 4;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 7;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 8;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 9;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserExecutable" field.</summary>
  public const int UserExecutableFieldNumber = 10;
  private readonly static bool UserExecutableDefaultValue = false;

  private bool userExecutable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UserExecutable {
    get { if ((_hasBits0 & 8) != 0) { return userExecutable_; } else { return UserExecutableDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userExecutable_ = value;
    }
  }
  /// <summary>Gets whether the "UserExecutable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserExecutable {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserExecutable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserExecutable() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 11;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 12;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 16) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 13;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 32) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 32;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MethodNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MethodNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (Executable != other.Executable) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (UserExecutable != other.UserExecutable) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasExecutable) hash ^= Executable.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (HasUserExecutable) hash ^= UserExecutable.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(BrowseName);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DisplayName);
    }
    if (HasExecutable) {
      output.WriteRawTag(40);
      output.WriteBool(Executable);
    }
    if (HasNodeClass) {
      output.WriteRawTag(48);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(RolePermissions);
    }
    if (HasUserExecutable) {
      output.WriteRawTag(80);
      output.WriteBool(UserExecutable);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(96);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(104);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasExecutable) {
      size += 1 + 1;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (HasUserExecutable) {
      size += 1 + 1;
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MethodNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasExecutable) {
      Executable = other.Executable;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.HasUserExecutable) {
      UserExecutable = other.UserExecutable;
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 34: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 40: {
          Executable = input.ReadBool();
          break;
        }
        case 48: {
          NodeClass = (global::MethodNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 58: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 66: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 74: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 80: {
          UserExecutable = input.ReadBool();
          break;
        }
        case 90: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 96: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 104: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the MethodNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class ModelChangeStructureDataType : pb::IMessage<ModelChangeStructureDataType> {
  private static readonly pb::MessageParser<ModelChangeStructureDataType> _parser = new pb::MessageParser<ModelChangeStructureDataType>(() => new ModelChangeStructureDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModelChangeStructureDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[252]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelChangeStructureDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelChangeStructureDataType(ModelChangeStructureDataType other) : this() {
    _hasBits0 = other._hasBits0;
    affected_ = other.affected_ != null ? other.affected_.Clone() : null;
    affectedType_ = other.affectedType_ != null ? other.affectedType_.Clone() : null;
    verb_ = other.verb_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelChangeStructureDataType Clone() {
    return new ModelChangeStructureDataType(this);
  }

  /// <summary>Field number for the "Affected" field.</summary>
  public const int AffectedFieldNumber = 1;
  private global::NodeId affected_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId Affected {
    get { return affected_; }
    set {
      affected_ = value;
    }
  }

  /// <summary>Field number for the "AffectedType" field.</summary>
  public const int AffectedTypeFieldNumber = 2;
  private global::NodeId affectedType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId AffectedType {
    get { return affectedType_; }
    set {
      affectedType_ = value;
    }
  }

  /// <summary>Field number for the "Verb" field.</summary>
  public const int VerbFieldNumber = 3;
  private readonly static uint VerbDefaultValue = 0;

  private uint verb_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Verb {
    get { if ((_hasBits0 & 1) != 0) { return verb_; } else { return VerbDefaultValue; } }
    set {
      _hasBits0 |= 1;
      verb_ = value;
    }
  }
  /// <summary>Gets whether the "Verb" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVerb {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Verb" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVerb() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModelChangeStructureDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModelChangeStructureDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Affected, other.Affected)) return false;
    if (!object.Equals(AffectedType, other.AffectedType)) return false;
    if (Verb != other.Verb) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (affected_ != null) hash ^= Affected.GetHashCode();
    if (affectedType_ != null) hash ^= AffectedType.GetHashCode();
    if (HasVerb) hash ^= Verb.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (affected_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Affected);
    }
    if (affectedType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AffectedType);
    }
    if (HasVerb) {
      output.WriteRawTag(24);
      output.WriteUInt32(Verb);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (affected_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Affected);
    }
    if (affectedType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AffectedType);
    }
    if (HasVerb) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Verb);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModelChangeStructureDataType other) {
    if (other == null) {
      return;
    }
    if (other.affected_ != null) {
      if (affected_ == null) {
        Affected = new global::NodeId();
      }
      Affected.MergeFrom(other.Affected);
    }
    if (other.affectedType_ != null) {
      if (affectedType_ == null) {
        AffectedType = new global::NodeId();
      }
      AffectedType.MergeFrom(other.AffectedType);
    }
    if (other.HasVerb) {
      Verb = other.Verb;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (affected_ == null) {
            Affected = new global::NodeId();
          }
          input.ReadMessage(Affected);
          break;
        }
        case 18: {
          if (affectedType_ == null) {
            AffectedType = new global::NodeId();
          }
          input.ReadMessage(AffectedType);
          break;
        }
        case 24: {
          Verb = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MonitoredItemCreateResult : pb::IMessage<MonitoredItemCreateResult> {
  private static readonly pb::MessageParser<MonitoredItemCreateResult> _parser = new pb::MessageParser<MonitoredItemCreateResult>(() => new MonitoredItemCreateResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoredItemCreateResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[253]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemCreateResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemCreateResult(MonitoredItemCreateResult other) : this() {
    _hasBits0 = other._hasBits0;
    filterResult_ = other.filterResult_ != null ? other.filterResult_.Clone() : null;
    monitoredItemId_ = other.monitoredItemId_;
    revisedQueueSize_ = other.revisedQueueSize_;
    revisedSamplingInterval_ = other.revisedSamplingInterval_;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemCreateResult Clone() {
    return new MonitoredItemCreateResult(this);
  }

  /// <summary>Field number for the "FilterResult" field.</summary>
  public const int FilterResultFieldNumber = 1;
  private global::ExtensionObject filterResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject FilterResult {
    get { return filterResult_; }
    set {
      filterResult_ = value;
    }
  }

  /// <summary>Field number for the "MonitoredItemId" field.</summary>
  public const int MonitoredItemIdFieldNumber = 2;
  private readonly static uint MonitoredItemIdDefaultValue = 0;

  private uint monitoredItemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MonitoredItemId {
    get { if ((_hasBits0 & 1) != 0) { return monitoredItemId_; } else { return MonitoredItemIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      monitoredItemId_ = value;
    }
  }
  /// <summary>Gets whether the "MonitoredItemId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMonitoredItemId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MonitoredItemId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMonitoredItemId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RevisedQueueSize" field.</summary>
  public const int RevisedQueueSizeFieldNumber = 3;
  private readonly static uint RevisedQueueSizeDefaultValue = 0;

  private uint revisedQueueSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RevisedQueueSize {
    get { if ((_hasBits0 & 2) != 0) { return revisedQueueSize_; } else { return RevisedQueueSizeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      revisedQueueSize_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedQueueSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedQueueSize {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RevisedQueueSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedQueueSize() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "RevisedSamplingInterval" field.</summary>
  public const int RevisedSamplingIntervalFieldNumber = 4;
  private readonly static double RevisedSamplingIntervalDefaultValue = 0D;

  private double revisedSamplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RevisedSamplingInterval {
    get { if ((_hasBits0 & 4) != 0) { return revisedSamplingInterval_; } else { return RevisedSamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 4;
      revisedSamplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedSamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedSamplingInterval {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "RevisedSamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedSamplingInterval() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 5;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoredItemCreateResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoredItemCreateResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FilterResult, other.FilterResult)) return false;
    if (MonitoredItemId != other.MonitoredItemId) return false;
    if (RevisedQueueSize != other.RevisedQueueSize) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevisedSamplingInterval, other.RevisedSamplingInterval)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (filterResult_ != null) hash ^= FilterResult.GetHashCode();
    if (HasMonitoredItemId) hash ^= MonitoredItemId.GetHashCode();
    if (HasRevisedQueueSize) hash ^= RevisedQueueSize.GetHashCode();
    if (HasRevisedSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevisedSamplingInterval);
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (filterResult_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FilterResult);
    }
    if (HasMonitoredItemId) {
      output.WriteRawTag(16);
      output.WriteUInt32(MonitoredItemId);
    }
    if (HasRevisedQueueSize) {
      output.WriteRawTag(24);
      output.WriteUInt32(RevisedQueueSize);
    }
    if (HasRevisedSamplingInterval) {
      output.WriteRawTag(33);
      output.WriteDouble(RevisedSamplingInterval);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (filterResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterResult);
    }
    if (HasMonitoredItemId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonitoredItemId);
    }
    if (HasRevisedQueueSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisedQueueSize);
    }
    if (HasRevisedSamplingInterval) {
      size += 1 + 8;
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoredItemCreateResult other) {
    if (other == null) {
      return;
    }
    if (other.filterResult_ != null) {
      if (filterResult_ == null) {
        FilterResult = new global::ExtensionObject();
      }
      FilterResult.MergeFrom(other.FilterResult);
    }
    if (other.HasMonitoredItemId) {
      MonitoredItemId = other.MonitoredItemId;
    }
    if (other.HasRevisedQueueSize) {
      RevisedQueueSize = other.RevisedQueueSize;
    }
    if (other.HasRevisedSamplingInterval) {
      RevisedSamplingInterval = other.RevisedSamplingInterval;
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (filterResult_ == null) {
            FilterResult = new global::ExtensionObject();
          }
          input.ReadMessage(FilterResult);
          break;
        }
        case 16: {
          MonitoredItemId = input.ReadUInt32();
          break;
        }
        case 24: {
          RevisedQueueSize = input.ReadUInt32();
          break;
        }
        case 33: {
          RevisedSamplingInterval = input.ReadDouble();
          break;
        }
        case 42: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class MonitoredItemModifyResult : pb::IMessage<MonitoredItemModifyResult> {
  private static readonly pb::MessageParser<MonitoredItemModifyResult> _parser = new pb::MessageParser<MonitoredItemModifyResult>(() => new MonitoredItemModifyResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoredItemModifyResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[254]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemModifyResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemModifyResult(MonitoredItemModifyResult other) : this() {
    _hasBits0 = other._hasBits0;
    filterResult_ = other.filterResult_ != null ? other.filterResult_.Clone() : null;
    revisedQueueSize_ = other.revisedQueueSize_;
    revisedSamplingInterval_ = other.revisedSamplingInterval_;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemModifyResult Clone() {
    return new MonitoredItemModifyResult(this);
  }

  /// <summary>Field number for the "FilterResult" field.</summary>
  public const int FilterResultFieldNumber = 1;
  private global::ExtensionObject filterResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject FilterResult {
    get { return filterResult_; }
    set {
      filterResult_ = value;
    }
  }

  /// <summary>Field number for the "RevisedQueueSize" field.</summary>
  public const int RevisedQueueSizeFieldNumber = 2;
  private readonly static uint RevisedQueueSizeDefaultValue = 0;

  private uint revisedQueueSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RevisedQueueSize {
    get { if ((_hasBits0 & 1) != 0) { return revisedQueueSize_; } else { return RevisedQueueSizeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      revisedQueueSize_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedQueueSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedQueueSize {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RevisedQueueSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedQueueSize() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RevisedSamplingInterval" field.</summary>
  public const int RevisedSamplingIntervalFieldNumber = 3;
  private readonly static double RevisedSamplingIntervalDefaultValue = 0D;

  private double revisedSamplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RevisedSamplingInterval {
    get { if ((_hasBits0 & 2) != 0) { return revisedSamplingInterval_; } else { return RevisedSamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 2;
      revisedSamplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedSamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedSamplingInterval {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RevisedSamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedSamplingInterval() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 4;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoredItemModifyResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoredItemModifyResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FilterResult, other.FilterResult)) return false;
    if (RevisedQueueSize != other.RevisedQueueSize) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevisedSamplingInterval, other.RevisedSamplingInterval)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (filterResult_ != null) hash ^= FilterResult.GetHashCode();
    if (HasRevisedQueueSize) hash ^= RevisedQueueSize.GetHashCode();
    if (HasRevisedSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevisedSamplingInterval);
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (filterResult_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FilterResult);
    }
    if (HasRevisedQueueSize) {
      output.WriteRawTag(16);
      output.WriteUInt32(RevisedQueueSize);
    }
    if (HasRevisedSamplingInterval) {
      output.WriteRawTag(25);
      output.WriteDouble(RevisedSamplingInterval);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (filterResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterResult);
    }
    if (HasRevisedQueueSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisedQueueSize);
    }
    if (HasRevisedSamplingInterval) {
      size += 1 + 8;
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoredItemModifyResult other) {
    if (other == null) {
      return;
    }
    if (other.filterResult_ != null) {
      if (filterResult_ == null) {
        FilterResult = new global::ExtensionObject();
      }
      FilterResult.MergeFrom(other.FilterResult);
    }
    if (other.HasRevisedQueueSize) {
      RevisedQueueSize = other.RevisedQueueSize;
    }
    if (other.HasRevisedSamplingInterval) {
      RevisedSamplingInterval = other.RevisedSamplingInterval;
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (filterResult_ == null) {
            FilterResult = new global::ExtensionObject();
          }
          input.ReadMessage(FilterResult);
          break;
        }
        case 16: {
          RevisedQueueSize = input.ReadUInt32();
          break;
        }
        case 25: {
          RevisedSamplingInterval = input.ReadDouble();
          break;
        }
        case 34: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class MonitoredItemNotification : pb::IMessage<MonitoredItemNotification> {
  private static readonly pb::MessageParser<MonitoredItemNotification> _parser = new pb::MessageParser<MonitoredItemNotification>(() => new MonitoredItemNotification());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoredItemNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[255]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemNotification(MonitoredItemNotification other) : this() {
    _hasBits0 = other._hasBits0;
    clientHandle_ = other.clientHandle_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemNotification Clone() {
    return new MonitoredItemNotification(this);
  }

  /// <summary>Field number for the "ClientHandle" field.</summary>
  public const int ClientHandleFieldNumber = 1;
  private readonly static uint ClientHandleDefaultValue = 0;

  private uint clientHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ClientHandle {
    get { if ((_hasBits0 & 1) != 0) { return clientHandle_; } else { return ClientHandleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientHandle_ = value;
    }
  }
  /// <summary>Gets whether the "ClientHandle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientHandle {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ClientHandle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientHandle() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 2;
  private global::DataValue value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataValue Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoredItemNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoredItemNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientHandle != other.ClientHandle) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientHandle) hash ^= ClientHandle.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasClientHandle) {
      output.WriteRawTag(8);
      output.WriteUInt32(ClientHandle);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientHandle) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientHandle);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoredItemNotification other) {
    if (other == null) {
      return;
    }
    if (other.HasClientHandle) {
      ClientHandle = other.ClientHandle;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::DataValue();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientHandle = input.ReadUInt32();
          break;
        }
        case 18: {
          if (value_ == null) {
            Value = new global::DataValue();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class MonitoringParameters : pb::IMessage<MonitoringParameters> {
  private static readonly pb::MessageParser<MonitoringParameters> _parser = new pb::MessageParser<MonitoringParameters>(() => new MonitoringParameters());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoringParameters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[256]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringParameters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringParameters(MonitoringParameters other) : this() {
    _hasBits0 = other._hasBits0;
    clientHandle_ = other.clientHandle_;
    discardOldest_ = other.discardOldest_;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    queueSize_ = other.queueSize_;
    samplingInterval_ = other.samplingInterval_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringParameters Clone() {
    return new MonitoringParameters(this);
  }

  /// <summary>Field number for the "ClientHandle" field.</summary>
  public const int ClientHandleFieldNumber = 1;
  private readonly static uint ClientHandleDefaultValue = 0;

  private uint clientHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ClientHandle {
    get { if ((_hasBits0 & 1) != 0) { return clientHandle_; } else { return ClientHandleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientHandle_ = value;
    }
  }
  /// <summary>Gets whether the "ClientHandle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientHandle {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ClientHandle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientHandle() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DiscardOldest" field.</summary>
  public const int DiscardOldestFieldNumber = 2;
  private readonly static bool DiscardOldestDefaultValue = false;

  private bool discardOldest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DiscardOldest {
    get { if ((_hasBits0 & 2) != 0) { return discardOldest_; } else { return DiscardOldestDefaultValue; } }
    set {
      _hasBits0 |= 2;
      discardOldest_ = value;
    }
  }
  /// <summary>Gets whether the "DiscardOldest" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDiscardOldest {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DiscardOldest" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDiscardOldest() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 3;
  private global::ExtensionObject filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "QueueSize" field.</summary>
  public const int QueueSizeFieldNumber = 4;
  private readonly static uint QueueSizeDefaultValue = 0;

  private uint queueSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint QueueSize {
    get { if ((_hasBits0 & 4) != 0) { return queueSize_; } else { return QueueSizeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      queueSize_ = value;
    }
  }
  /// <summary>Gets whether the "QueueSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasQueueSize {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "QueueSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQueueSize() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SamplingInterval" field.</summary>
  public const int SamplingIntervalFieldNumber = 5;
  private readonly static double SamplingIntervalDefaultValue = 0D;

  private double samplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double SamplingInterval {
    get { if ((_hasBits0 & 8) != 0) { return samplingInterval_; } else { return SamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 8;
      samplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "SamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSamplingInterval {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSamplingInterval() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoringParameters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoringParameters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientHandle != other.ClientHandle) return false;
    if (DiscardOldest != other.DiscardOldest) return false;
    if (!object.Equals(Filter, other.Filter)) return false;
    if (QueueSize != other.QueueSize) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SamplingInterval, other.SamplingInterval)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientHandle) hash ^= ClientHandle.GetHashCode();
    if (HasDiscardOldest) hash ^= DiscardOldest.GetHashCode();
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (HasQueueSize) hash ^= QueueSize.GetHashCode();
    if (HasSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SamplingInterval);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasClientHandle) {
      output.WriteRawTag(8);
      output.WriteUInt32(ClientHandle);
    }
    if (HasDiscardOldest) {
      output.WriteRawTag(16);
      output.WriteBool(DiscardOldest);
    }
    if (filter_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Filter);
    }
    if (HasQueueSize) {
      output.WriteRawTag(32);
      output.WriteUInt32(QueueSize);
    }
    if (HasSamplingInterval) {
      output.WriteRawTag(41);
      output.WriteDouble(SamplingInterval);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientHandle) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientHandle);
    }
    if (HasDiscardOldest) {
      size += 1 + 1;
    }
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (HasQueueSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueueSize);
    }
    if (HasSamplingInterval) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoringParameters other) {
    if (other == null) {
      return;
    }
    if (other.HasClientHandle) {
      ClientHandle = other.ClientHandle;
    }
    if (other.HasDiscardOldest) {
      DiscardOldest = other.DiscardOldest;
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::ExtensionObject();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.HasQueueSize) {
      QueueSize = other.QueueSize;
    }
    if (other.HasSamplingInterval) {
      SamplingInterval = other.SamplingInterval;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientHandle = input.ReadUInt32();
          break;
        }
        case 16: {
          DiscardOldest = input.ReadBool();
          break;
        }
        case 26: {
          if (filter_ == null) {
            Filter = new global::ExtensionObject();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 32: {
          QueueSize = input.ReadUInt32();
          break;
        }
        case 41: {
          SamplingInterval = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class NetworkGroupDataType : pb::IMessage<NetworkGroupDataType> {
  private static readonly pb::MessageParser<NetworkGroupDataType> _parser = new pb::MessageParser<NetworkGroupDataType>(() => new NetworkGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NetworkGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[257]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkGroupDataType(NetworkGroupDataType other) : this() {
    networkPaths_ = other.networkPaths_ != null ? other.networkPaths_.Clone() : null;
    serverUri_ = other.serverUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkGroupDataType Clone() {
    return new NetworkGroupDataType(this);
  }

  /// <summary>Field number for the "NetworkPaths" field.</summary>
  public const int NetworkPathsFieldNumber = 1;
  private global::ListOfEndpointUrlListDataType networkPaths_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEndpointUrlListDataType NetworkPaths {
    get { return networkPaths_; }
    set {
      networkPaths_ = value;
    }
  }

  /// <summary>Field number for the "ServerUri" field.</summary>
  public const int ServerUriFieldNumber = 2;
  private readonly static string ServerUriDefaultValue = "";

  private string serverUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerUri {
    get { return serverUri_ ?? ServerUriDefaultValue; }
    set {
      serverUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerUri {
    get { return serverUri_ != null; }
  }
  /// <summary>Clears the value of the "ServerUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerUri() {
    serverUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NetworkGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NetworkGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NetworkPaths, other.NetworkPaths)) return false;
    if (ServerUri != other.ServerUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (networkPaths_ != null) hash ^= NetworkPaths.GetHashCode();
    if (HasServerUri) hash ^= ServerUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (networkPaths_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NetworkPaths);
    }
    if (HasServerUri) {
      output.WriteRawTag(18);
      output.WriteString(ServerUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (networkPaths_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkPaths);
    }
    if (HasServerUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NetworkGroupDataType other) {
    if (other == null) {
      return;
    }
    if (other.networkPaths_ != null) {
      if (networkPaths_ == null) {
        NetworkPaths = new global::ListOfEndpointUrlListDataType();
      }
      NetworkPaths.MergeFrom(other.NetworkPaths);
    }
    if (other.HasServerUri) {
      ServerUri = other.ServerUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (networkPaths_ == null) {
            NetworkPaths = new global::ListOfEndpointUrlListDataType();
          }
          input.ReadMessage(NetworkPaths);
          break;
        }
        case 18: {
          ServerUri = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Node : pb::IMessage<Node> {
  private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Node> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[258]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Node() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Node(Node other) : this() {
    _hasBits0 = other._hasBits0;
    accessLevel_ = other.accessLevel_;
    accessLevelEx_ = other.accessLevelEx_;
    accessRestrictions_ = other.accessRestrictions_;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    containsNoLoops_ = other.containsNoLoops_;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    dataTypeDefinition_ = other.dataTypeDefinition_ != null ? other.dataTypeDefinition_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    eventNotifier_ = other.eventNotifier_;
    executable_ = other.executable_;
    historizing_ = other.historizing_;
    inverseName_ = other.inverseName_ != null ? other.inverseName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    minimumSamplingInterval_ = other.minimumSamplingInterval_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    symmetric_ = other.symmetric_;
    userAccessLevel_ = other.userAccessLevel_;
    userExecutable_ = other.userExecutable_;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Node Clone() {
    return new Node(this);
  }

  /// <summary>Field number for the "AccessLevel" field.</summary>
  public const int AccessLevelFieldNumber = 1;
  private readonly static uint AccessLevelDefaultValue = 0;

  private uint accessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevel {
    get { if ((_hasBits0 & 1) != 0) { return accessLevel_; } else { return AccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "AccessLevelEx" field.</summary>
  public const int AccessLevelExFieldNumber = 2;
  private readonly static uint AccessLevelExDefaultValue = 0;

  private uint accessLevelEx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevelEx {
    get { if ((_hasBits0 & 2) != 0) { return accessLevelEx_; } else { return AccessLevelExDefaultValue; } }
    set {
      _hasBits0 |= 2;
      accessLevelEx_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevelEx" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevelEx {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevelEx" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevelEx() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 3;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 4) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 4;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 5;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "ContainsNoLoops" field.</summary>
  public const int ContainsNoLoopsFieldNumber = 6;
  private readonly static bool ContainsNoLoopsDefaultValue = false;

  private bool containsNoLoops_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ContainsNoLoops {
    get { if ((_hasBits0 & 8) != 0) { return containsNoLoops_; } else { return ContainsNoLoopsDefaultValue; } }
    set {
      _hasBits0 |= 8;
      containsNoLoops_ = value;
    }
  }
  /// <summary>Gets whether the "ContainsNoLoops" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContainsNoLoops {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ContainsNoLoops" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContainsNoLoops() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 7;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "DataTypeDefinition" field.</summary>
  public const int DataTypeDefinitionFieldNumber = 8;
  private global::ExtensionObject dataTypeDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject DataTypeDefinition {
    get { return dataTypeDefinition_; }
    set {
      dataTypeDefinition_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 9;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 10;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 11;
  private readonly static uint EventNotifierDefaultValue = 0;

  private uint eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotifier {
    get { if ((_hasBits0 & 16) != 0) { return eventNotifier_; } else { return EventNotifierDefaultValue; } }
    set {
      _hasBits0 |= 16;
      eventNotifier_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotifier {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "EventNotifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotifier() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "Executable" field.</summary>
  public const int ExecutableFieldNumber = 12;
  private readonly static bool ExecutableDefaultValue = false;

  private bool executable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Executable {
    get { if ((_hasBits0 & 32) != 0) { return executable_; } else { return ExecutableDefaultValue; } }
    set {
      _hasBits0 |= 32;
      executable_ = value;
    }
  }
  /// <summary>Gets whether the "Executable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExecutable {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "Executable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExecutable() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "Historizing" field.</summary>
  public const int HistorizingFieldNumber = 13;
  private readonly static bool HistorizingDefaultValue = false;

  private bool historizing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Historizing {
    get { if ((_hasBits0 & 64) != 0) { return historizing_; } else { return HistorizingDefaultValue; } }
    set {
      _hasBits0 |= 64;
      historizing_ = value;
    }
  }
  /// <summary>Gets whether the "Historizing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHistorizing {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "Historizing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHistorizing() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "InverseName" field.</summary>
  public const int InverseNameFieldNumber = 14;
  private global::LocalizedText inverseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText InverseName {
    get { return inverseName_; }
    set {
      inverseName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 15;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 128) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 128;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "MinimumSamplingInterval" field.</summary>
  public const int MinimumSamplingIntervalFieldNumber = 16;
  private readonly static double MinimumSamplingIntervalDefaultValue = 0D;

  private double minimumSamplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinimumSamplingInterval {
    get { if ((_hasBits0 & 256) != 0) { return minimumSamplingInterval_; } else { return MinimumSamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 256;
      minimumSamplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "MinimumSamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMinimumSamplingInterval {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "MinimumSamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMinimumSamplingInterval() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 17;
  private readonly static global::Node.Types.NodeClass NodeClassDefaultValue = global::Node.Types.NodeClass.DataType64;

  private global::Node.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Node.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 512) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 512;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 18;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 19;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 20;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "Symmetric" field.</summary>
  public const int SymmetricFieldNumber = 21;
  private readonly static bool SymmetricDefaultValue = false;

  private bool symmetric_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Symmetric {
    get { if ((_hasBits0 & 1024) != 0) { return symmetric_; } else { return SymmetricDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      symmetric_ = value;
    }
  }
  /// <summary>Gets whether the "Symmetric" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymmetric {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "Symmetric" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymmetric() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "UserAccessLevel" field.</summary>
  public const int UserAccessLevelFieldNumber = 22;
  private readonly static uint UserAccessLevelDefaultValue = 0;

  private uint userAccessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserAccessLevel {
    get { if ((_hasBits0 & 2048) != 0) { return userAccessLevel_; } else { return UserAccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      userAccessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "UserAccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserAccessLevel {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "UserAccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserAccessLevel() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "UserExecutable" field.</summary>
  public const int UserExecutableFieldNumber = 23;
  private readonly static bool UserExecutableDefaultValue = false;

  private bool userExecutable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UserExecutable {
    get { if ((_hasBits0 & 4096) != 0) { return userExecutable_; } else { return UserExecutableDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      userExecutable_ = value;
    }
  }
  /// <summary>Gets whether the "UserExecutable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserExecutable {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "UserExecutable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserExecutable() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 24;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 25;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8192) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 26;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 27;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 16384) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 28;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 32768) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~32768;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Node);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Node other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessLevel != other.AccessLevel) return false;
    if (AccessLevelEx != other.AccessLevelEx) return false;
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (ContainsNoLoops != other.ContainsNoLoops) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(DataTypeDefinition, other.DataTypeDefinition)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (EventNotifier != other.EventNotifier) return false;
    if (Executable != other.Executable) return false;
    if (Historizing != other.Historizing) return false;
    if (!object.Equals(InverseName, other.InverseName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumSamplingInterval, other.MinimumSamplingInterval)) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (Symmetric != other.Symmetric) return false;
    if (UserAccessLevel != other.UserAccessLevel) return false;
    if (UserExecutable != other.UserExecutable) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessLevel) hash ^= AccessLevel.GetHashCode();
    if (HasAccessLevelEx) hash ^= AccessLevelEx.GetHashCode();
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (HasContainsNoLoops) hash ^= ContainsNoLoops.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (dataTypeDefinition_ != null) hash ^= DataTypeDefinition.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasEventNotifier) hash ^= EventNotifier.GetHashCode();
    if (HasExecutable) hash ^= Executable.GetHashCode();
    if (HasHistorizing) hash ^= Historizing.GetHashCode();
    if (inverseName_ != null) hash ^= InverseName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasMinimumSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumSamplingInterval);
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (HasSymmetric) hash ^= Symmetric.GetHashCode();
    if (HasUserAccessLevel) hash ^= UserAccessLevel.GetHashCode();
    if (HasUserExecutable) hash ^= UserExecutable.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessLevel) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessLevel);
    }
    if (HasAccessLevelEx) {
      output.WriteRawTag(16);
      output.WriteUInt32(AccessLevelEx);
    }
    if (HasAccessRestrictions) {
      output.WriteRawTag(24);
      output.WriteUInt32(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ArrayDimensions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(BrowseName);
    }
    if (HasContainsNoLoops) {
      output.WriteRawTag(48);
      output.WriteBool(ContainsNoLoops);
    }
    if (dataType_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DataType);
    }
    if (dataTypeDefinition_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(DataTypeDefinition);
    }
    if (description_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(DisplayName);
    }
    if (HasEventNotifier) {
      output.WriteRawTag(88);
      output.WriteUInt32(EventNotifier);
    }
    if (HasExecutable) {
      output.WriteRawTag(96);
      output.WriteBool(Executable);
    }
    if (HasHistorizing) {
      output.WriteRawTag(104);
      output.WriteBool(Historizing);
    }
    if (inverseName_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(InverseName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(120);
      output.WriteBool(IsAbstract);
    }
    if (HasMinimumSamplingInterval) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(MinimumSamplingInterval);
    }
    if (HasNodeClass) {
      output.WriteRawTag(136, 1);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(RolePermissions);
    }
    if (HasSymmetric) {
      output.WriteRawTag(168, 1);
      output.WriteBool(Symmetric);
    }
    if (HasUserAccessLevel) {
      output.WriteRawTag(176, 1);
      output.WriteUInt32(UserAccessLevel);
    }
    if (HasUserExecutable) {
      output.WriteRawTag(184, 1);
      output.WriteBool(UserExecutable);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(200, 1);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(210, 1);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(216, 1);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(224, 1);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevel);
    }
    if (HasAccessLevelEx) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevelEx);
    }
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (HasContainsNoLoops) {
      size += 1 + 1;
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (dataTypeDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTypeDefinition);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasEventNotifier) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotifier);
    }
    if (HasExecutable) {
      size += 1 + 1;
    }
    if (HasHistorizing) {
      size += 1 + 1;
    }
    if (inverseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InverseName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasMinimumSamplingInterval) {
      size += 2 + 8;
    }
    if (HasNodeClass) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (HasSymmetric) {
      size += 2 + 1;
    }
    if (HasUserAccessLevel) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserAccessLevel);
    }
    if (HasUserExecutable) {
      size += 2 + 1;
    }
    if (userRolePermissions_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Node other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessLevel) {
      AccessLevel = other.AccessLevel;
    }
    if (other.HasAccessLevelEx) {
      AccessLevelEx = other.AccessLevelEx;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.HasContainsNoLoops) {
      ContainsNoLoops = other.ContainsNoLoops;
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.dataTypeDefinition_ != null) {
      if (dataTypeDefinition_ == null) {
        DataTypeDefinition = new global::ExtensionObject();
      }
      DataTypeDefinition.MergeFrom(other.DataTypeDefinition);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasEventNotifier) {
      EventNotifier = other.EventNotifier;
    }
    if (other.HasExecutable) {
      Executable = other.Executable;
    }
    if (other.HasHistorizing) {
      Historizing = other.Historizing;
    }
    if (other.inverseName_ != null) {
      if (inverseName_ == null) {
        InverseName = new global::LocalizedText();
      }
      InverseName.MergeFrom(other.InverseName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasMinimumSamplingInterval) {
      MinimumSamplingInterval = other.MinimumSamplingInterval;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.HasSymmetric) {
      Symmetric = other.Symmetric;
    }
    if (other.HasUserAccessLevel) {
      UserAccessLevel = other.UserAccessLevel;
    }
    if (other.HasUserExecutable) {
      UserExecutable = other.UserExecutable;
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessLevel = input.ReadUInt32();
          break;
        }
        case 16: {
          AccessLevelEx = input.ReadUInt32();
          break;
        }
        case 24: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 34: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 42: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 48: {
          ContainsNoLoops = input.ReadBool();
          break;
        }
        case 58: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 66: {
          if (dataTypeDefinition_ == null) {
            DataTypeDefinition = new global::ExtensionObject();
          }
          input.ReadMessage(DataTypeDefinition);
          break;
        }
        case 74: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 82: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 88: {
          EventNotifier = input.ReadUInt32();
          break;
        }
        case 96: {
          Executable = input.ReadBool();
          break;
        }
        case 104: {
          Historizing = input.ReadBool();
          break;
        }
        case 114: {
          if (inverseName_ == null) {
            InverseName = new global::LocalizedText();
          }
          input.ReadMessage(InverseName);
          break;
        }
        case 120: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 129: {
          MinimumSamplingInterval = input.ReadDouble();
          break;
        }
        case 136: {
          NodeClass = (global::Node.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 146: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 154: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 162: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 168: {
          Symmetric = input.ReadBool();
          break;
        }
        case 176: {
          UserAccessLevel = input.ReadUInt32();
          break;
        }
        case 184: {
          UserExecutable = input.ReadBool();
          break;
        }
        case 194: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 200: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 210: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 216: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 224: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Node message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class NodeAttributes : pb::IMessage<NodeAttributes> {
  private static readonly pb::MessageParser<NodeAttributes> _parser = new pb::MessageParser<NodeAttributes>(() => new NodeAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NodeAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[259]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeAttributes(NodeAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    accessLevel_ = other.accessLevel_;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    attributeValues_ = other.attributeValues_ != null ? other.attributeValues_.Clone() : null;
    containsNoLoops_ = other.containsNoLoops_;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    eventNotifier_ = other.eventNotifier_;
    executable_ = other.executable_;
    historizing_ = other.historizing_;
    inverseName_ = other.inverseName_ != null ? other.inverseName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    minimumSamplingInterval_ = other.minimumSamplingInterval_;
    specifiedAttributes_ = other.specifiedAttributes_;
    symmetric_ = other.symmetric_;
    userAccessLevel_ = other.userAccessLevel_;
    userExecutable_ = other.userExecutable_;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeAttributes Clone() {
    return new NodeAttributes(this);
  }

  /// <summary>Field number for the "AccessLevel" field.</summary>
  public const int AccessLevelFieldNumber = 1;
  private readonly static uint AccessLevelDefaultValue = 0;

  private uint accessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevel {
    get { if ((_hasBits0 & 1) != 0) { return accessLevel_; } else { return AccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 2;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "AttributeValues" field.</summary>
  public const int AttributeValuesFieldNumber = 3;
  private global::ListOfGenericAttributeValue attributeValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfGenericAttributeValue AttributeValues {
    get { return attributeValues_; }
    set {
      attributeValues_ = value;
    }
  }

  /// <summary>Field number for the "ContainsNoLoops" field.</summary>
  public const int ContainsNoLoopsFieldNumber = 4;
  private readonly static bool ContainsNoLoopsDefaultValue = false;

  private bool containsNoLoops_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ContainsNoLoops {
    get { if ((_hasBits0 & 2) != 0) { return containsNoLoops_; } else { return ContainsNoLoopsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      containsNoLoops_ = value;
    }
  }
  /// <summary>Gets whether the "ContainsNoLoops" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContainsNoLoops {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ContainsNoLoops" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContainsNoLoops() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 5;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 6;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 7;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 8;
  private readonly static uint EventNotifierDefaultValue = 0;

  private uint eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotifier {
    get { if ((_hasBits0 & 4) != 0) { return eventNotifier_; } else { return EventNotifierDefaultValue; } }
    set {
      _hasBits0 |= 4;
      eventNotifier_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotifier {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "EventNotifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotifier() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "Executable" field.</summary>
  public const int ExecutableFieldNumber = 9;
  private readonly static bool ExecutableDefaultValue = false;

  private bool executable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Executable {
    get { if ((_hasBits0 & 8) != 0) { return executable_; } else { return ExecutableDefaultValue; } }
    set {
      _hasBits0 |= 8;
      executable_ = value;
    }
  }
  /// <summary>Gets whether the "Executable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExecutable {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Executable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExecutable() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "Historizing" field.</summary>
  public const int HistorizingFieldNumber = 10;
  private readonly static bool HistorizingDefaultValue = false;

  private bool historizing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Historizing {
    get { if ((_hasBits0 & 16) != 0) { return historizing_; } else { return HistorizingDefaultValue; } }
    set {
      _hasBits0 |= 16;
      historizing_ = value;
    }
  }
  /// <summary>Gets whether the "Historizing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHistorizing {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "Historizing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHistorizing() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "InverseName" field.</summary>
  public const int InverseNameFieldNumber = 11;
  private global::LocalizedText inverseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText InverseName {
    get { return inverseName_; }
    set {
      inverseName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 12;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 32) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "MinimumSamplingInterval" field.</summary>
  public const int MinimumSamplingIntervalFieldNumber = 13;
  private readonly static double MinimumSamplingIntervalDefaultValue = 0D;

  private double minimumSamplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinimumSamplingInterval {
    get { if ((_hasBits0 & 64) != 0) { return minimumSamplingInterval_; } else { return MinimumSamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 64;
      minimumSamplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "MinimumSamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMinimumSamplingInterval {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "MinimumSamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMinimumSamplingInterval() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 14;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 128) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 128;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "Symmetric" field.</summary>
  public const int SymmetricFieldNumber = 15;
  private readonly static bool SymmetricDefaultValue = false;

  private bool symmetric_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Symmetric {
    get { if ((_hasBits0 & 256) != 0) { return symmetric_; } else { return SymmetricDefaultValue; } }
    set {
      _hasBits0 |= 256;
      symmetric_ = value;
    }
  }
  /// <summary>Gets whether the "Symmetric" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymmetric {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "Symmetric" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymmetric() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "UserAccessLevel" field.</summary>
  public const int UserAccessLevelFieldNumber = 16;
  private readonly static uint UserAccessLevelDefaultValue = 0;

  private uint userAccessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserAccessLevel {
    get { if ((_hasBits0 & 512) != 0) { return userAccessLevel_; } else { return UserAccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 512;
      userAccessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "UserAccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserAccessLevel {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "UserAccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserAccessLevel() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "UserExecutable" field.</summary>
  public const int UserExecutableFieldNumber = 17;
  private readonly static bool UserExecutableDefaultValue = false;

  private bool userExecutable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UserExecutable {
    get { if ((_hasBits0 & 1024) != 0) { return userExecutable_; } else { return UserExecutableDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      userExecutable_ = value;
    }
  }
  /// <summary>Gets whether the "UserExecutable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserExecutable {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "UserExecutable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserExecutable() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 18;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 2048) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 19;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 20;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 4096) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 21;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 8192) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~8192;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NodeAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NodeAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessLevel != other.AccessLevel) return false;
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(AttributeValues, other.AttributeValues)) return false;
    if (ContainsNoLoops != other.ContainsNoLoops) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (EventNotifier != other.EventNotifier) return false;
    if (Executable != other.Executable) return false;
    if (Historizing != other.Historizing) return false;
    if (!object.Equals(InverseName, other.InverseName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumSamplingInterval, other.MinimumSamplingInterval)) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (Symmetric != other.Symmetric) return false;
    if (UserAccessLevel != other.UserAccessLevel) return false;
    if (UserExecutable != other.UserExecutable) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessLevel) hash ^= AccessLevel.GetHashCode();
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (attributeValues_ != null) hash ^= AttributeValues.GetHashCode();
    if (HasContainsNoLoops) hash ^= ContainsNoLoops.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasEventNotifier) hash ^= EventNotifier.GetHashCode();
    if (HasExecutable) hash ^= Executable.GetHashCode();
    if (HasHistorizing) hash ^= Historizing.GetHashCode();
    if (inverseName_ != null) hash ^= InverseName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasMinimumSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumSamplingInterval);
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasSymmetric) hash ^= Symmetric.GetHashCode();
    if (HasUserAccessLevel) hash ^= UserAccessLevel.GetHashCode();
    if (HasUserExecutable) hash ^= UserExecutable.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessLevel) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessLevel);
    }
    if (arrayDimensions_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ArrayDimensions);
    }
    if (attributeValues_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(AttributeValues);
    }
    if (HasContainsNoLoops) {
      output.WriteRawTag(32);
      output.WriteBool(ContainsNoLoops);
    }
    if (dataType_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DisplayName);
    }
    if (HasEventNotifier) {
      output.WriteRawTag(64);
      output.WriteUInt32(EventNotifier);
    }
    if (HasExecutable) {
      output.WriteRawTag(72);
      output.WriteBool(Executable);
    }
    if (HasHistorizing) {
      output.WriteRawTag(80);
      output.WriteBool(Historizing);
    }
    if (inverseName_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(InverseName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(96);
      output.WriteBool(IsAbstract);
    }
    if (HasMinimumSamplingInterval) {
      output.WriteRawTag(105);
      output.WriteDouble(MinimumSamplingInterval);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(112);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasSymmetric) {
      output.WriteRawTag(120);
      output.WriteBool(Symmetric);
    }
    if (HasUserAccessLevel) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(UserAccessLevel);
    }
    if (HasUserExecutable) {
      output.WriteRawTag(136, 1);
      output.WriteBool(UserExecutable);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevel);
    }
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (attributeValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttributeValues);
    }
    if (HasContainsNoLoops) {
      size += 1 + 1;
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasEventNotifier) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotifier);
    }
    if (HasExecutable) {
      size += 1 + 1;
    }
    if (HasHistorizing) {
      size += 1 + 1;
    }
    if (inverseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InverseName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasMinimumSamplingInterval) {
      size += 1 + 8;
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasSymmetric) {
      size += 1 + 1;
    }
    if (HasUserAccessLevel) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserAccessLevel);
    }
    if (HasUserExecutable) {
      size += 2 + 1;
    }
    if (HasUserWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NodeAttributes other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessLevel) {
      AccessLevel = other.AccessLevel;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.attributeValues_ != null) {
      if (attributeValues_ == null) {
        AttributeValues = new global::ListOfGenericAttributeValue();
      }
      AttributeValues.MergeFrom(other.AttributeValues);
    }
    if (other.HasContainsNoLoops) {
      ContainsNoLoops = other.ContainsNoLoops;
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasEventNotifier) {
      EventNotifier = other.EventNotifier;
    }
    if (other.HasExecutable) {
      Executable = other.Executable;
    }
    if (other.HasHistorizing) {
      Historizing = other.Historizing;
    }
    if (other.inverseName_ != null) {
      if (inverseName_ == null) {
        InverseName = new global::LocalizedText();
      }
      InverseName.MergeFrom(other.InverseName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasMinimumSamplingInterval) {
      MinimumSamplingInterval = other.MinimumSamplingInterval;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasSymmetric) {
      Symmetric = other.Symmetric;
    }
    if (other.HasUserAccessLevel) {
      UserAccessLevel = other.UserAccessLevel;
    }
    if (other.HasUserExecutable) {
      UserExecutable = other.UserExecutable;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessLevel = input.ReadUInt32();
          break;
        }
        case 18: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 26: {
          if (attributeValues_ == null) {
            AttributeValues = new global::ListOfGenericAttributeValue();
          }
          input.ReadMessage(AttributeValues);
          break;
        }
        case 32: {
          ContainsNoLoops = input.ReadBool();
          break;
        }
        case 42: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 50: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 58: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 64: {
          EventNotifier = input.ReadUInt32();
          break;
        }
        case 72: {
          Executable = input.ReadBool();
          break;
        }
        case 80: {
          Historizing = input.ReadBool();
          break;
        }
        case 90: {
          if (inverseName_ == null) {
            InverseName = new global::LocalizedText();
          }
          input.ReadMessage(InverseName);
          break;
        }
        case 96: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 105: {
          MinimumSamplingInterval = input.ReadDouble();
          break;
        }
        case 112: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 120: {
          Symmetric = input.ReadBool();
          break;
        }
        case 128: {
          UserAccessLevel = input.ReadUInt32();
          break;
        }
        case 136: {
          UserExecutable = input.ReadBool();
          break;
        }
        case 144: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 154: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 160: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 168: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class NodeReference : pb::IMessage<NodeReference> {
  private static readonly pb::MessageParser<NodeReference> _parser = new pb::MessageParser<NodeReference>(() => new NodeReference());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NodeReference> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[260]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeReference() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeReference(NodeReference other) : this() {
    _hasBits0 = other._hasBits0;
    isForward_ = other.isForward_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    referencedNodeIds_ = other.referencedNodeIds_ != null ? other.referencedNodeIds_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeReference Clone() {
    return new NodeReference(this);
  }

  /// <summary>Field number for the "IsForward" field.</summary>
  public const int IsForwardFieldNumber = 1;
  private readonly static bool IsForwardDefaultValue = false;

  private bool isForward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsForward {
    get { if ((_hasBits0 & 1) != 0) { return isForward_; } else { return IsForwardDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isForward_ = value;
    }
  }
  /// <summary>Gets whether the "IsForward" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsForward {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsForward" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsForward() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 2;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 3;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "ReferencedNodeIds" field.</summary>
  public const int ReferencedNodeIdsFieldNumber = 4;
  private global::ListOfNodeId referencedNodeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfNodeId ReferencedNodeIds {
    get { return referencedNodeIds_; }
    set {
      referencedNodeIds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NodeReference);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NodeReference other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsForward != other.IsForward) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (!object.Equals(ReferencedNodeIds, other.ReferencedNodeIds)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIsForward) hash ^= IsForward.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (referencedNodeIds_ != null) hash ^= ReferencedNodeIds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasIsForward) {
      output.WriteRawTag(8);
      output.WriteBool(IsForward);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NodeId);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ReferenceTypeId);
    }
    if (referencedNodeIds_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ReferencedNodeIds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasIsForward) {
      size += 1 + 1;
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (referencedNodeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencedNodeIds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NodeReference other) {
    if (other == null) {
      return;
    }
    if (other.HasIsForward) {
      IsForward = other.IsForward;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.referencedNodeIds_ != null) {
      if (referencedNodeIds_ == null) {
        ReferencedNodeIds = new global::ListOfNodeId();
      }
      ReferencedNodeIds.MergeFrom(other.ReferencedNodeIds);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsForward = input.ReadBool();
          break;
        }
        case 18: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 26: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 34: {
          if (referencedNodeIds_ == null) {
            ReferencedNodeIds = new global::ListOfNodeId();
          }
          input.ReadMessage(ReferencedNodeIds);
          break;
        }
      }
    }
  }

}

public sealed partial class NotificationMessage : pb::IMessage<NotificationMessage> {
  private static readonly pb::MessageParser<NotificationMessage> _parser = new pb::MessageParser<NotificationMessage>(() => new NotificationMessage());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotificationMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[261]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotificationMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotificationMessage(NotificationMessage other) : this() {
    _hasBits0 = other._hasBits0;
    notificationData_ = other.notificationData_ != null ? other.notificationData_.Clone() : null;
    publishTime_ = other.publishTime_;
    sequenceNumber_ = other.sequenceNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotificationMessage Clone() {
    return new NotificationMessage(this);
  }

  /// <summary>Field number for the "NotificationData" field.</summary>
  public const int NotificationDataFieldNumber = 1;
  private global::ListOfExtensionObject notificationData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfExtensionObject NotificationData {
    get { return notificationData_; }
    set {
      notificationData_ = value;
    }
  }

  /// <summary>Field number for the "PublishTime" field.</summary>
  public const int PublishTimeFieldNumber = 2;
  private readonly static long PublishTimeDefaultValue = 0L;

  private long publishTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PublishTime {
    get { if ((_hasBits0 & 1) != 0) { return publishTime_; } else { return PublishTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      publishTime_ = value;
    }
  }
  /// <summary>Gets whether the "PublishTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "PublishTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SequenceNumber" field.</summary>
  public const int SequenceNumberFieldNumber = 3;
  private readonly static uint SequenceNumberDefaultValue = 0;

  private uint sequenceNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SequenceNumber {
    get { if ((_hasBits0 & 2) != 0) { return sequenceNumber_; } else { return SequenceNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      sequenceNumber_ = value;
    }
  }
  /// <summary>Gets whether the "SequenceNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSequenceNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SequenceNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSequenceNumber() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotificationMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotificationMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NotificationData, other.NotificationData)) return false;
    if (PublishTime != other.PublishTime) return false;
    if (SequenceNumber != other.SequenceNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (notificationData_ != null) hash ^= NotificationData.GetHashCode();
    if (HasPublishTime) hash ^= PublishTime.GetHashCode();
    if (HasSequenceNumber) hash ^= SequenceNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (notificationData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NotificationData);
    }
    if (HasPublishTime) {
      output.WriteRawTag(16);
      output.WriteInt64(PublishTime);
    }
    if (HasSequenceNumber) {
      output.WriteRawTag(24);
      output.WriteUInt32(SequenceNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (notificationData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotificationData);
    }
    if (HasPublishTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublishTime);
    }
    if (HasSequenceNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotificationMessage other) {
    if (other == null) {
      return;
    }
    if (other.notificationData_ != null) {
      if (notificationData_ == null) {
        NotificationData = new global::ListOfExtensionObject();
      }
      NotificationData.MergeFrom(other.NotificationData);
    }
    if (other.HasPublishTime) {
      PublishTime = other.PublishTime;
    }
    if (other.HasSequenceNumber) {
      SequenceNumber = other.SequenceNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (notificationData_ == null) {
            NotificationData = new global::ListOfExtensionObject();
          }
          input.ReadMessage(NotificationData);
          break;
        }
        case 16: {
          PublishTime = input.ReadInt64();
          break;
        }
        case 24: {
          SequenceNumber = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ObjectNode : pb::IMessage<ObjectNode> {
  private static readonly pb::MessageParser<ObjectNode> _parser = new pb::MessageParser<ObjectNode>(() => new ObjectNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[262]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectNode(ObjectNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    eventNotifier_ = other.eventNotifier_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectNode Clone() {
    return new ObjectNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 2;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 4;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 5;
  private readonly static uint EventNotifierDefaultValue = 0;

  private uint eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotifier {
    get { if ((_hasBits0 & 2) != 0) { return eventNotifier_; } else { return EventNotifierDefaultValue; } }
    set {
      _hasBits0 |= 2;
      eventNotifier_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotifier {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "EventNotifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotifier() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 6;
  private readonly static global::ObjectNode.Types.NodeClass NodeClassDefaultValue = global::ObjectNode.Types.NodeClass.DataType64;

  private global::ObjectNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ObjectNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 4) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 4;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 7;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 8;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 9;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 10;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 11;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 12;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 16) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (EventNotifier != other.EventNotifier) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasEventNotifier) hash ^= EventNotifier.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(BrowseName);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DisplayName);
    }
    if (HasEventNotifier) {
      output.WriteRawTag(40);
      output.WriteUInt32(EventNotifier);
    }
    if (HasNodeClass) {
      output.WriteRawTag(48);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(88);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(96);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasEventNotifier) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotifier);
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasEventNotifier) {
      EventNotifier = other.EventNotifier;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 34: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 40: {
          EventNotifier = input.ReadUInt32();
          break;
        }
        case 48: {
          NodeClass = (global::ObjectNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 58: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 66: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 74: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 82: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 88: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 96: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ObjectNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class ObjectTypeNode : pb::IMessage<ObjectTypeNode> {
  private static readonly pb::MessageParser<ObjectTypeNode> _parser = new pb::MessageParser<ObjectTypeNode>(() => new ObjectTypeNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectTypeNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[263]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectTypeNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectTypeNode(ObjectTypeNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectTypeNode Clone() {
    return new ObjectTypeNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 2;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 4;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 5;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 2) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 6;
  private readonly static global::ObjectTypeNode.Types.NodeClass NodeClassDefaultValue = global::ObjectTypeNode.Types.NodeClass.DataType64;

  private global::ObjectTypeNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ObjectTypeNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 4) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 4;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 7;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 8;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 9;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 10;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 11;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 12;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 16) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectTypeNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectTypeNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(BrowseName);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DisplayName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(40);
      output.WriteBool(IsAbstract);
    }
    if (HasNodeClass) {
      output.WriteRawTag(48);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(88);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(96);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectTypeNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 34: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 40: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 48: {
          NodeClass = (global::ObjectTypeNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 58: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 66: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 74: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 82: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 88: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 96: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ObjectTypeNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class ParsingResult : pb::IMessage<ParsingResult> {
  private static readonly pb::MessageParser<ParsingResult> _parser = new pb::MessageParser<ParsingResult>(() => new ParsingResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ParsingResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[264]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParsingResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParsingResult(ParsingResult other) : this() {
    dataDiagnosticInfos_ = other.dataDiagnosticInfos_ != null ? other.dataDiagnosticInfos_.Clone() : null;
    dataStatusCodes_ = other.dataStatusCodes_ != null ? other.dataStatusCodes_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParsingResult Clone() {
    return new ParsingResult(this);
  }

  /// <summary>Field number for the "DataDiagnosticInfos" field.</summary>
  public const int DataDiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo dataDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DataDiagnosticInfos {
    get { return dataDiagnosticInfos_; }
    set {
      dataDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "DataStatusCodes" field.</summary>
  public const int DataStatusCodesFieldNumber = 2;
  private global::ListOfStatusCode dataStatusCodes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode DataStatusCodes {
    get { return dataStatusCodes_; }
    set {
      dataStatusCodes_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 3;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ParsingResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ParsingResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataDiagnosticInfos, other.DataDiagnosticInfos)) return false;
    if (!object.Equals(DataStatusCodes, other.DataStatusCodes)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataDiagnosticInfos_ != null) hash ^= DataDiagnosticInfos.GetHashCode();
    if (dataStatusCodes_ != null) hash ^= DataStatusCodes.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataDiagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataDiagnosticInfos);
    }
    if (dataStatusCodes_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataStatusCodes);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataDiagnosticInfos);
    }
    if (dataStatusCodes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataStatusCodes);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ParsingResult other) {
    if (other == null) {
      return;
    }
    if (other.dataDiagnosticInfos_ != null) {
      if (dataDiagnosticInfos_ == null) {
        DataDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DataDiagnosticInfos.MergeFrom(other.DataDiagnosticInfos);
    }
    if (other.dataStatusCodes_ != null) {
      if (dataStatusCodes_ == null) {
        DataStatusCodes = new global::ListOfStatusCode();
      }
      DataStatusCodes.MergeFrom(other.DataStatusCodes);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataDiagnosticInfos_ == null) {
            DataDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DataDiagnosticInfos);
          break;
        }
        case 18: {
          if (dataStatusCodes_ == null) {
            DataStatusCodes = new global::ListOfStatusCode();
          }
          input.ReadMessage(DataStatusCodes);
          break;
        }
        case 26: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class ProgramDiagnostic2DataType : pb::IMessage<ProgramDiagnostic2DataType> {
  private static readonly pb::MessageParser<ProgramDiagnostic2DataType> _parser = new pb::MessageParser<ProgramDiagnostic2DataType>(() => new ProgramDiagnostic2DataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProgramDiagnostic2DataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[265]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgramDiagnostic2DataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgramDiagnostic2DataType(ProgramDiagnostic2DataType other) : this() {
    _hasBits0 = other._hasBits0;
    createClientName_ = other.createClientName_;
    createSessionId_ = other.createSessionId_ != null ? other.createSessionId_.Clone() : null;
    invocationCreationTime_ = other.invocationCreationTime_;
    lastMethodCall_ = other.lastMethodCall_;
    lastMethodCallTime_ = other.lastMethodCallTime_;
    lastMethodInputArguments_ = other.lastMethodInputArguments_ != null ? other.lastMethodInputArguments_.Clone() : null;
    lastMethodInputValues_ = other.lastMethodInputValues_ != null ? other.lastMethodInputValues_.Clone() : null;
    lastMethodOutputArguments_ = other.lastMethodOutputArguments_ != null ? other.lastMethodOutputArguments_.Clone() : null;
    lastMethodOutputValues_ = other.lastMethodOutputValues_ != null ? other.lastMethodOutputValues_.Clone() : null;
    lastMethodReturnStatus_ = other.lastMethodReturnStatus_ != null ? other.lastMethodReturnStatus_.Clone() : null;
    lastMethodSessionId_ = other.lastMethodSessionId_ != null ? other.lastMethodSessionId_.Clone() : null;
    lastTransitionTime_ = other.lastTransitionTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgramDiagnostic2DataType Clone() {
    return new ProgramDiagnostic2DataType(this);
  }

  /// <summary>Field number for the "CreateClientName" field.</summary>
  public const int CreateClientNameFieldNumber = 1;
  private readonly static string CreateClientNameDefaultValue = "";

  private string createClientName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CreateClientName {
    get { return createClientName_ ?? CreateClientNameDefaultValue; }
    set {
      createClientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "CreateClientName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCreateClientName {
    get { return createClientName_ != null; }
  }
  /// <summary>Clears the value of the "CreateClientName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCreateClientName() {
    createClientName_ = null;
  }

  /// <summary>Field number for the "CreateSessionId" field.</summary>
  public const int CreateSessionIdFieldNumber = 2;
  private global::NodeId createSessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId CreateSessionId {
    get { return createSessionId_; }
    set {
      createSessionId_ = value;
    }
  }

  /// <summary>Field number for the "InvocationCreationTime" field.</summary>
  public const int InvocationCreationTimeFieldNumber = 3;
  private readonly static long InvocationCreationTimeDefaultValue = 0L;

  private long invocationCreationTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long InvocationCreationTime {
    get { if ((_hasBits0 & 1) != 0) { return invocationCreationTime_; } else { return InvocationCreationTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      invocationCreationTime_ = value;
    }
  }
  /// <summary>Gets whether the "InvocationCreationTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInvocationCreationTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "InvocationCreationTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInvocationCreationTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "LastMethodCall" field.</summary>
  public const int LastMethodCallFieldNumber = 4;
  private readonly static string LastMethodCallDefaultValue = "";

  private string lastMethodCall_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LastMethodCall {
    get { return lastMethodCall_ ?? LastMethodCallDefaultValue; }
    set {
      lastMethodCall_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "LastMethodCall" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastMethodCall {
    get { return lastMethodCall_ != null; }
  }
  /// <summary>Clears the value of the "LastMethodCall" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastMethodCall() {
    lastMethodCall_ = null;
  }

  /// <summary>Field number for the "LastMethodCallTime" field.</summary>
  public const int LastMethodCallTimeFieldNumber = 5;
  private readonly static long LastMethodCallTimeDefaultValue = 0L;

  private long lastMethodCallTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastMethodCallTime {
    get { if ((_hasBits0 & 2) != 0) { return lastMethodCallTime_; } else { return LastMethodCallTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      lastMethodCallTime_ = value;
    }
  }
  /// <summary>Gets whether the "LastMethodCallTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastMethodCallTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "LastMethodCallTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastMethodCallTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "LastMethodInputArguments" field.</summary>
  public const int LastMethodInputArgumentsFieldNumber = 6;
  private global::ListOfArgument lastMethodInputArguments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfArgument LastMethodInputArguments {
    get { return lastMethodInputArguments_; }
    set {
      lastMethodInputArguments_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodInputValues" field.</summary>
  public const int LastMethodInputValuesFieldNumber = 7;
  private global::ListOfVariant lastMethodInputValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfVariant LastMethodInputValues {
    get { return lastMethodInputValues_; }
    set {
      lastMethodInputValues_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodOutputArguments" field.</summary>
  public const int LastMethodOutputArgumentsFieldNumber = 8;
  private global::ListOfArgument lastMethodOutputArguments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfArgument LastMethodOutputArguments {
    get { return lastMethodOutputArguments_; }
    set {
      lastMethodOutputArguments_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodOutputValues" field.</summary>
  public const int LastMethodOutputValuesFieldNumber = 9;
  private global::ListOfVariant lastMethodOutputValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfVariant LastMethodOutputValues {
    get { return lastMethodOutputValues_; }
    set {
      lastMethodOutputValues_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodReturnStatus" field.</summary>
  public const int LastMethodReturnStatusFieldNumber = 10;
  private global::StatusCode lastMethodReturnStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode LastMethodReturnStatus {
    get { return lastMethodReturnStatus_; }
    set {
      lastMethodReturnStatus_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodSessionId" field.</summary>
  public const int LastMethodSessionIdFieldNumber = 11;
  private global::NodeId lastMethodSessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId LastMethodSessionId {
    get { return lastMethodSessionId_; }
    set {
      lastMethodSessionId_ = value;
    }
  }

  /// <summary>Field number for the "LastTransitionTime" field.</summary>
  public const int LastTransitionTimeFieldNumber = 12;
  private readonly static long LastTransitionTimeDefaultValue = 0L;

  private long lastTransitionTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastTransitionTime {
    get { if ((_hasBits0 & 4) != 0) { return lastTransitionTime_; } else { return LastTransitionTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      lastTransitionTime_ = value;
    }
  }
  /// <summary>Gets whether the "LastTransitionTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastTransitionTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "LastTransitionTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastTransitionTime() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProgramDiagnostic2DataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProgramDiagnostic2DataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CreateClientName != other.CreateClientName) return false;
    if (!object.Equals(CreateSessionId, other.CreateSessionId)) return false;
    if (InvocationCreationTime != other.InvocationCreationTime) return false;
    if (LastMethodCall != other.LastMethodCall) return false;
    if (LastMethodCallTime != other.LastMethodCallTime) return false;
    if (!object.Equals(LastMethodInputArguments, other.LastMethodInputArguments)) return false;
    if (!object.Equals(LastMethodInputValues, other.LastMethodInputValues)) return false;
    if (!object.Equals(LastMethodOutputArguments, other.LastMethodOutputArguments)) return false;
    if (!object.Equals(LastMethodOutputValues, other.LastMethodOutputValues)) return false;
    if (!object.Equals(LastMethodReturnStatus, other.LastMethodReturnStatus)) return false;
    if (!object.Equals(LastMethodSessionId, other.LastMethodSessionId)) return false;
    if (LastTransitionTime != other.LastTransitionTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCreateClientName) hash ^= CreateClientName.GetHashCode();
    if (createSessionId_ != null) hash ^= CreateSessionId.GetHashCode();
    if (HasInvocationCreationTime) hash ^= InvocationCreationTime.GetHashCode();
    if (HasLastMethodCall) hash ^= LastMethodCall.GetHashCode();
    if (HasLastMethodCallTime) hash ^= LastMethodCallTime.GetHashCode();
    if (lastMethodInputArguments_ != null) hash ^= LastMethodInputArguments.GetHashCode();
    if (lastMethodInputValues_ != null) hash ^= LastMethodInputValues.GetHashCode();
    if (lastMethodOutputArguments_ != null) hash ^= LastMethodOutputArguments.GetHashCode();
    if (lastMethodOutputValues_ != null) hash ^= LastMethodOutputValues.GetHashCode();
    if (lastMethodReturnStatus_ != null) hash ^= LastMethodReturnStatus.GetHashCode();
    if (lastMethodSessionId_ != null) hash ^= LastMethodSessionId.GetHashCode();
    if (HasLastTransitionTime) hash ^= LastTransitionTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCreateClientName) {
      output.WriteRawTag(10);
      output.WriteString(CreateClientName);
    }
    if (createSessionId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CreateSessionId);
    }
    if (HasInvocationCreationTime) {
      output.WriteRawTag(24);
      output.WriteInt64(InvocationCreationTime);
    }
    if (HasLastMethodCall) {
      output.WriteRawTag(34);
      output.WriteString(LastMethodCall);
    }
    if (HasLastMethodCallTime) {
      output.WriteRawTag(40);
      output.WriteInt64(LastMethodCallTime);
    }
    if (lastMethodInputArguments_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(LastMethodInputArguments);
    }
    if (lastMethodInputValues_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(LastMethodInputValues);
    }
    if (lastMethodOutputArguments_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(LastMethodOutputArguments);
    }
    if (lastMethodOutputValues_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(LastMethodOutputValues);
    }
    if (lastMethodReturnStatus_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(LastMethodReturnStatus);
    }
    if (lastMethodSessionId_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(LastMethodSessionId);
    }
    if (HasLastTransitionTime) {
      output.WriteRawTag(96);
      output.WriteInt64(LastTransitionTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCreateClientName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateClientName);
    }
    if (createSessionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateSessionId);
    }
    if (HasInvocationCreationTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(InvocationCreationTime);
    }
    if (HasLastMethodCall) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastMethodCall);
    }
    if (HasLastMethodCallTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastMethodCallTime);
    }
    if (lastMethodInputArguments_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodInputArguments);
    }
    if (lastMethodInputValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodInputValues);
    }
    if (lastMethodOutputArguments_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodOutputArguments);
    }
    if (lastMethodOutputValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodOutputValues);
    }
    if (lastMethodReturnStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodReturnStatus);
    }
    if (lastMethodSessionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodSessionId);
    }
    if (HasLastTransitionTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastTransitionTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProgramDiagnostic2DataType other) {
    if (other == null) {
      return;
    }
    if (other.HasCreateClientName) {
      CreateClientName = other.CreateClientName;
    }
    if (other.createSessionId_ != null) {
      if (createSessionId_ == null) {
        CreateSessionId = new global::NodeId();
      }
      CreateSessionId.MergeFrom(other.CreateSessionId);
    }
    if (other.HasInvocationCreationTime) {
      InvocationCreationTime = other.InvocationCreationTime;
    }
    if (other.HasLastMethodCall) {
      LastMethodCall = other.LastMethodCall;
    }
    if (other.HasLastMethodCallTime) {
      LastMethodCallTime = other.LastMethodCallTime;
    }
    if (other.lastMethodInputArguments_ != null) {
      if (lastMethodInputArguments_ == null) {
        LastMethodInputArguments = new global::ListOfArgument();
      }
      LastMethodInputArguments.MergeFrom(other.LastMethodInputArguments);
    }
    if (other.lastMethodInputValues_ != null) {
      if (lastMethodInputValues_ == null) {
        LastMethodInputValues = new global::ListOfVariant();
      }
      LastMethodInputValues.MergeFrom(other.LastMethodInputValues);
    }
    if (other.lastMethodOutputArguments_ != null) {
      if (lastMethodOutputArguments_ == null) {
        LastMethodOutputArguments = new global::ListOfArgument();
      }
      LastMethodOutputArguments.MergeFrom(other.LastMethodOutputArguments);
    }
    if (other.lastMethodOutputValues_ != null) {
      if (lastMethodOutputValues_ == null) {
        LastMethodOutputValues = new global::ListOfVariant();
      }
      LastMethodOutputValues.MergeFrom(other.LastMethodOutputValues);
    }
    if (other.lastMethodReturnStatus_ != null) {
      if (lastMethodReturnStatus_ == null) {
        LastMethodReturnStatus = new global::StatusCode();
      }
      LastMethodReturnStatus.MergeFrom(other.LastMethodReturnStatus);
    }
    if (other.lastMethodSessionId_ != null) {
      if (lastMethodSessionId_ == null) {
        LastMethodSessionId = new global::NodeId();
      }
      LastMethodSessionId.MergeFrom(other.LastMethodSessionId);
    }
    if (other.HasLastTransitionTime) {
      LastTransitionTime = other.LastTransitionTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CreateClientName = input.ReadString();
          break;
        }
        case 18: {
          if (createSessionId_ == null) {
            CreateSessionId = new global::NodeId();
          }
          input.ReadMessage(CreateSessionId);
          break;
        }
        case 24: {
          InvocationCreationTime = input.ReadInt64();
          break;
        }
        case 34: {
          LastMethodCall = input.ReadString();
          break;
        }
        case 40: {
          LastMethodCallTime = input.ReadInt64();
          break;
        }
        case 50: {
          if (lastMethodInputArguments_ == null) {
            LastMethodInputArguments = new global::ListOfArgument();
          }
          input.ReadMessage(LastMethodInputArguments);
          break;
        }
        case 58: {
          if (lastMethodInputValues_ == null) {
            LastMethodInputValues = new global::ListOfVariant();
          }
          input.ReadMessage(LastMethodInputValues);
          break;
        }
        case 66: {
          if (lastMethodOutputArguments_ == null) {
            LastMethodOutputArguments = new global::ListOfArgument();
          }
          input.ReadMessage(LastMethodOutputArguments);
          break;
        }
        case 74: {
          if (lastMethodOutputValues_ == null) {
            LastMethodOutputValues = new global::ListOfVariant();
          }
          input.ReadMessage(LastMethodOutputValues);
          break;
        }
        case 82: {
          if (lastMethodReturnStatus_ == null) {
            LastMethodReturnStatus = new global::StatusCode();
          }
          input.ReadMessage(LastMethodReturnStatus);
          break;
        }
        case 90: {
          if (lastMethodSessionId_ == null) {
            LastMethodSessionId = new global::NodeId();
          }
          input.ReadMessage(LastMethodSessionId);
          break;
        }
        case 96: {
          LastTransitionTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PublishedVariableDataType : pb::IMessage<PublishedVariableDataType> {
  private static readonly pb::MessageParser<PublishedVariableDataType> _parser = new pb::MessageParser<PublishedVariableDataType>(() => new PublishedVariableDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishedVariableDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[266]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedVariableDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedVariableDataType(PublishedVariableDataType other) : this() {
    _hasBits0 = other._hasBits0;
    attributeId_ = other.attributeId_;
    deadbandType_ = other.deadbandType_;
    deadbandValue_ = other.deadbandValue_;
    indexRange_ = other.indexRange_;
    metaDataProperties_ = other.metaDataProperties_ != null ? other.metaDataProperties_.Clone() : null;
    publishedVariable_ = other.publishedVariable_ != null ? other.publishedVariable_.Clone() : null;
    samplingIntervalHint_ = other.samplingIntervalHint_;
    substituteValue_ = other.substituteValue_ != null ? other.substituteValue_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedVariableDataType Clone() {
    return new PublishedVariableDataType(this);
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 1;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DeadbandType" field.</summary>
  public const int DeadbandTypeFieldNumber = 2;
  private readonly static uint DeadbandTypeDefaultValue = 0;

  private uint deadbandType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DeadbandType {
    get { if ((_hasBits0 & 2) != 0) { return deadbandType_; } else { return DeadbandTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deadbandType_ = value;
    }
  }
  /// <summary>Gets whether the "DeadbandType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeadbandType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DeadbandType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeadbandType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "DeadbandValue" field.</summary>
  public const int DeadbandValueFieldNumber = 3;
  private readonly static double DeadbandValueDefaultValue = 0D;

  private double deadbandValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double DeadbandValue {
    get { if ((_hasBits0 & 4) != 0) { return deadbandValue_; } else { return DeadbandValueDefaultValue; } }
    set {
      _hasBits0 |= 4;
      deadbandValue_ = value;
    }
  }
  /// <summary>Gets whether the "DeadbandValue" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeadbandValue {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "DeadbandValue" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeadbandValue() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 4;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "MetaDataProperties" field.</summary>
  public const int MetaDataPropertiesFieldNumber = 5;
  private global::ListOfQualifiedName metaDataProperties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfQualifiedName MetaDataProperties {
    get { return metaDataProperties_; }
    set {
      metaDataProperties_ = value;
    }
  }

  /// <summary>Field number for the "PublishedVariable" field.</summary>
  public const int PublishedVariableFieldNumber = 6;
  private global::NodeId publishedVariable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId PublishedVariable {
    get { return publishedVariable_; }
    set {
      publishedVariable_ = value;
    }
  }

  /// <summary>Field number for the "SamplingIntervalHint" field.</summary>
  public const int SamplingIntervalHintFieldNumber = 7;
  private readonly static double SamplingIntervalHintDefaultValue = 0D;

  private double samplingIntervalHint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double SamplingIntervalHint {
    get { if ((_hasBits0 & 8) != 0) { return samplingIntervalHint_; } else { return SamplingIntervalHintDefaultValue; } }
    set {
      _hasBits0 |= 8;
      samplingIntervalHint_ = value;
    }
  }
  /// <summary>Gets whether the "SamplingIntervalHint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSamplingIntervalHint {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SamplingIntervalHint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSamplingIntervalHint() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "SubstituteValue" field.</summary>
  public const int SubstituteValueFieldNumber = 8;
  private global::Variant substituteValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant SubstituteValue {
    get { return substituteValue_; }
    set {
      substituteValue_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishedVariableDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishedVariableDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttributeId != other.AttributeId) return false;
    if (DeadbandType != other.DeadbandType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeadbandValue, other.DeadbandValue)) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(MetaDataProperties, other.MetaDataProperties)) return false;
    if (!object.Equals(PublishedVariable, other.PublishedVariable)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SamplingIntervalHint, other.SamplingIntervalHint)) return false;
    if (!object.Equals(SubstituteValue, other.SubstituteValue)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (HasDeadbandType) hash ^= DeadbandType.GetHashCode();
    if (HasDeadbandValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeadbandValue);
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (metaDataProperties_ != null) hash ^= MetaDataProperties.GetHashCode();
    if (publishedVariable_ != null) hash ^= PublishedVariable.GetHashCode();
    if (HasSamplingIntervalHint) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SamplingIntervalHint);
    if (substituteValue_ != null) hash ^= SubstituteValue.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAttributeId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AttributeId);
    }
    if (HasDeadbandType) {
      output.WriteRawTag(16);
      output.WriteUInt32(DeadbandType);
    }
    if (HasDeadbandValue) {
      output.WriteRawTag(25);
      output.WriteDouble(DeadbandValue);
    }
    if (HasIndexRange) {
      output.WriteRawTag(34);
      output.WriteString(IndexRange);
    }
    if (metaDataProperties_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(MetaDataProperties);
    }
    if (publishedVariable_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(PublishedVariable);
    }
    if (HasSamplingIntervalHint) {
      output.WriteRawTag(57);
      output.WriteDouble(SamplingIntervalHint);
    }
    if (substituteValue_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SubstituteValue);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (HasDeadbandType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadbandType);
    }
    if (HasDeadbandValue) {
      size += 1 + 8;
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (metaDataProperties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaDataProperties);
    }
    if (publishedVariable_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishedVariable);
    }
    if (HasSamplingIntervalHint) {
      size += 1 + 8;
    }
    if (substituteValue_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubstituteValue);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishedVariableDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.HasDeadbandType) {
      DeadbandType = other.DeadbandType;
    }
    if (other.HasDeadbandValue) {
      DeadbandValue = other.DeadbandValue;
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.metaDataProperties_ != null) {
      if (metaDataProperties_ == null) {
        MetaDataProperties = new global::ListOfQualifiedName();
      }
      MetaDataProperties.MergeFrom(other.MetaDataProperties);
    }
    if (other.publishedVariable_ != null) {
      if (publishedVariable_ == null) {
        PublishedVariable = new global::NodeId();
      }
      PublishedVariable.MergeFrom(other.PublishedVariable);
    }
    if (other.HasSamplingIntervalHint) {
      SamplingIntervalHint = other.SamplingIntervalHint;
    }
    if (other.substituteValue_ != null) {
      if (substituteValue_ == null) {
        SubstituteValue = new global::Variant();
      }
      SubstituteValue.MergeFrom(other.SubstituteValue);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 16: {
          DeadbandType = input.ReadUInt32();
          break;
        }
        case 25: {
          DeadbandValue = input.ReadDouble();
          break;
        }
        case 34: {
          IndexRange = input.ReadString();
          break;
        }
        case 42: {
          if (metaDataProperties_ == null) {
            MetaDataProperties = new global::ListOfQualifiedName();
          }
          input.ReadMessage(MetaDataProperties);
          break;
        }
        case 50: {
          if (publishedVariable_ == null) {
            PublishedVariable = new global::NodeId();
          }
          input.ReadMessage(PublishedVariable);
          break;
        }
        case 57: {
          SamplingIntervalHint = input.ReadDouble();
          break;
        }
        case 66: {
          if (substituteValue_ == null) {
            SubstituteValue = new global::Variant();
          }
          input.ReadMessage(SubstituteValue);
          break;
        }
      }
    }
  }

}

public sealed partial class QueryDataSet : pb::IMessage<QueryDataSet> {
  private static readonly pb::MessageParser<QueryDataSet> _parser = new pb::MessageParser<QueryDataSet>(() => new QueryDataSet());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueryDataSet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[267]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryDataSet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryDataSet(QueryDataSet other) : this() {
    nodeId_ = other.nodeId_ != null ? other.nodeId_.Clone() : null;
    typeDefinitionNode_ = other.typeDefinitionNode_ != null ? other.typeDefinitionNode_.Clone() : null;
    values_ = other.values_ != null ? other.values_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryDataSet Clone() {
    return new QueryDataSet(this);
  }

  /// <summary>Field number for the "NodeId" field.</summary>
  public const int NodeIdFieldNumber = 1;
  private global::ExpandedNodeId nodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId NodeId {
    get { return nodeId_; }
    set {
      nodeId_ = value;
    }
  }

  /// <summary>Field number for the "TypeDefinitionNode" field.</summary>
  public const int TypeDefinitionNodeFieldNumber = 2;
  private global::ExpandedNodeId typeDefinitionNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TypeDefinitionNode {
    get { return typeDefinitionNode_; }
    set {
      typeDefinitionNode_ = value;
    }
  }

  /// <summary>Field number for the "Values" field.</summary>
  public const int ValuesFieldNumber = 3;
  private global::ListOfVariant values_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfVariant Values {
    get { return values_; }
    set {
      values_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueryDataSet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueryDataSet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(TypeDefinitionNode, other.TypeDefinitionNode)) return false;
    if (!object.Equals(Values, other.Values)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nodeId_ != null) hash ^= NodeId.GetHashCode();
    if (typeDefinitionNode_ != null) hash ^= TypeDefinitionNode.GetHashCode();
    if (values_ != null) hash ^= Values.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nodeId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodeId);
    }
    if (typeDefinitionNode_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TypeDefinitionNode);
    }
    if (values_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Values);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (typeDefinitionNode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeDefinitionNode);
    }
    if (values_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueryDataSet other) {
    if (other == null) {
      return;
    }
    if (other.nodeId_ != null) {
      if (nodeId_ == null) {
        NodeId = new global::ExpandedNodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.typeDefinitionNode_ != null) {
      if (typeDefinitionNode_ == null) {
        TypeDefinitionNode = new global::ExpandedNodeId();
      }
      TypeDefinitionNode.MergeFrom(other.TypeDefinitionNode);
    }
    if (other.values_ != null) {
      if (values_ == null) {
        Values = new global::ListOfVariant();
      }
      Values.MergeFrom(other.Values);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nodeId_ == null) {
            NodeId = new global::ExpandedNodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 18: {
          if (typeDefinitionNode_ == null) {
            TypeDefinitionNode = new global::ExpandedNodeId();
          }
          input.ReadMessage(TypeDefinitionNode);
          break;
        }
        case 26: {
          if (values_ == null) {
            Values = new global::ListOfVariant();
          }
          input.ReadMessage(Values);
          break;
        }
      }
    }
  }

}

public sealed partial class ReadProcessedDetails : pb::IMessage<ReadProcessedDetails> {
  private static readonly pb::MessageParser<ReadProcessedDetails> _parser = new pb::MessageParser<ReadProcessedDetails>(() => new ReadProcessedDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadProcessedDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[268]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadProcessedDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadProcessedDetails(ReadProcessedDetails other) : this() {
    _hasBits0 = other._hasBits0;
    AggregateConfiguration_ = other.AggregateConfiguration_ != null ? other.AggregateConfiguration_.Clone() : null;
    aggregateType_ = other.aggregateType_ != null ? other.aggregateType_.Clone() : null;
    endTime_ = other.endTime_;
    processingInterval_ = other.processingInterval_;
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadProcessedDetails Clone() {
    return new ReadProcessedDetails(this);
  }

  /// <summary>Field number for the "_AggregateConfiguration" field.</summary>
  public const int AggregateConfigurationFieldNumber = 1;
  private global::AggregateConfiguration AggregateConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AggregateConfiguration AggregateConfiguration {
    get { return AggregateConfiguration_; }
    set {
      AggregateConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "AggregateType" field.</summary>
  public const int AggregateTypeFieldNumber = 2;
  private global::ListOfNodeId aggregateType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfNodeId AggregateType {
    get { return aggregateType_; }
    set {
      aggregateType_ = value;
    }
  }

  /// <summary>Field number for the "EndTime" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private readonly static long EndTimeDefaultValue = 0L;

  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { if ((_hasBits0 & 1) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      endTime_ = value;
    }
  }
  /// <summary>Gets whether the "EndTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "EndTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ProcessingInterval" field.</summary>
  public const int ProcessingIntervalFieldNumber = 4;
  private readonly static double ProcessingIntervalDefaultValue = 0D;

  private double processingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ProcessingInterval {
    get { if ((_hasBits0 & 2) != 0) { return processingInterval_; } else { return ProcessingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 2;
      processingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "ProcessingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessingInterval {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ProcessingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessingInterval() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 5;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 4) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadProcessedDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadProcessedDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AggregateConfiguration, other.AggregateConfiguration)) return false;
    if (!object.Equals(AggregateType, other.AggregateType)) return false;
    if (EndTime != other.EndTime) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProcessingInterval, other.ProcessingInterval)) return false;
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AggregateConfiguration_ != null) hash ^= AggregateConfiguration.GetHashCode();
    if (aggregateType_ != null) hash ^= AggregateType.GetHashCode();
    if (HasEndTime) hash ^= EndTime.GetHashCode();
    if (HasProcessingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProcessingInterval);
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AggregateConfiguration_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AggregateType);
    }
    if (HasEndTime) {
      output.WriteRawTag(24);
      output.WriteInt64(EndTime);
    }
    if (HasProcessingInterval) {
      output.WriteRawTag(33);
      output.WriteDouble(ProcessingInterval);
    }
    if (HasStartTime) {
      output.WriteRawTag(40);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AggregateConfiguration_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateType);
    }
    if (HasEndTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (HasProcessingInterval) {
      size += 1 + 8;
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadProcessedDetails other) {
    if (other == null) {
      return;
    }
    if (other.AggregateConfiguration_ != null) {
      if (AggregateConfiguration_ == null) {
        AggregateConfiguration = new global::AggregateConfiguration();
      }
      AggregateConfiguration.MergeFrom(other.AggregateConfiguration);
    }
    if (other.aggregateType_ != null) {
      if (aggregateType_ == null) {
        AggregateType = new global::ListOfNodeId();
      }
      AggregateType.MergeFrom(other.AggregateType);
    }
    if (other.HasEndTime) {
      EndTime = other.EndTime;
    }
    if (other.HasProcessingInterval) {
      ProcessingInterval = other.ProcessingInterval;
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (AggregateConfiguration_ == null) {
            AggregateConfiguration = new global::AggregateConfiguration();
          }
          input.ReadMessage(AggregateConfiguration);
          break;
        }
        case 18: {
          if (aggregateType_ == null) {
            AggregateType = new global::ListOfNodeId();
          }
          input.ReadMessage(AggregateType);
          break;
        }
        case 24: {
          EndTime = input.ReadInt64();
          break;
        }
        case 33: {
          ProcessingInterval = input.ReadDouble();
          break;
        }
        case 40: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ReferenceTypeNode : pb::IMessage<ReferenceTypeNode> {
  private static readonly pb::MessageParser<ReferenceTypeNode> _parser = new pb::MessageParser<ReferenceTypeNode>(() => new ReferenceTypeNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReferenceTypeNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[269]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceTypeNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceTypeNode(ReferenceTypeNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    inverseName_ = other.inverseName_ != null ? other.inverseName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    symmetric_ = other.symmetric_;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReferenceTypeNode Clone() {
    return new ReferenceTypeNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 2;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 4;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "InverseName" field.</summary>
  public const int InverseNameFieldNumber = 5;
  private global::LocalizedText inverseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText InverseName {
    get { return inverseName_; }
    set {
      inverseName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 6;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 2) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 7;
  private readonly static global::ReferenceTypeNode.Types.NodeClass NodeClassDefaultValue = global::ReferenceTypeNode.Types.NodeClass.DataType64;

  private global::ReferenceTypeNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReferenceTypeNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 4) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 4;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 8;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 9;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 10;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "Symmetric" field.</summary>
  public const int SymmetricFieldNumber = 11;
  private readonly static bool SymmetricDefaultValue = false;

  private bool symmetric_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Symmetric {
    get { if ((_hasBits0 & 8) != 0) { return symmetric_; } else { return SymmetricDefaultValue; } }
    set {
      _hasBits0 |= 8;
      symmetric_ = value;
    }
  }
  /// <summary>Gets whether the "Symmetric" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymmetric {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Symmetric" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymmetric() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 12;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 13;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 16) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 14;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 32) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 32;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReferenceTypeNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReferenceTypeNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (!object.Equals(InverseName, other.InverseName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (Symmetric != other.Symmetric) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (inverseName_ != null) hash ^= InverseName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (HasSymmetric) hash ^= Symmetric.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(BrowseName);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DisplayName);
    }
    if (inverseName_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(InverseName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(48);
      output.WriteBool(IsAbstract);
    }
    if (HasNodeClass) {
      output.WriteRawTag(56);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(RolePermissions);
    }
    if (HasSymmetric) {
      output.WriteRawTag(88);
      output.WriteBool(Symmetric);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(104);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(112);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (inverseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InverseName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (HasSymmetric) {
      size += 1 + 1;
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReferenceTypeNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.inverseName_ != null) {
      if (inverseName_ == null) {
        InverseName = new global::LocalizedText();
      }
      InverseName.MergeFrom(other.InverseName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.HasSymmetric) {
      Symmetric = other.Symmetric;
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 34: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 42: {
          if (inverseName_ == null) {
            InverseName = new global::LocalizedText();
          }
          input.ReadMessage(InverseName);
          break;
        }
        case 48: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 56: {
          NodeClass = (global::ReferenceTypeNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 66: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 74: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 82: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 88: {
          Symmetric = input.ReadBool();
          break;
        }
        case 98: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 104: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 112: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ReferenceTypeNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class RegisteredServer : pb::IMessage<RegisteredServer> {
  private static readonly pb::MessageParser<RegisteredServer> _parser = new pb::MessageParser<RegisteredServer>(() => new RegisteredServer());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisteredServer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[270]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredServer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredServer(RegisteredServer other) : this() {
    _hasBits0 = other._hasBits0;
    discoveryUrls_ = other.discoveryUrls_ != null ? other.discoveryUrls_.Clone() : null;
    gatewayServerUri_ = other.gatewayServerUri_;
    isOnline_ = other.isOnline_;
    productUri_ = other.productUri_;
    semaphoreFilePath_ = other.semaphoreFilePath_;
    serverNames_ = other.serverNames_ != null ? other.serverNames_.Clone() : null;
    serverType_ = other.serverType_;
    serverUri_ = other.serverUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredServer Clone() {
    return new RegisteredServer(this);
  }

  /// <summary>Field number for the "DiscoveryUrls" field.</summary>
  public const int DiscoveryUrlsFieldNumber = 1;
  private global::ListOfString discoveryUrls_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString DiscoveryUrls {
    get { return discoveryUrls_; }
    set {
      discoveryUrls_ = value;
    }
  }

  /// <summary>Field number for the "GatewayServerUri" field.</summary>
  public const int GatewayServerUriFieldNumber = 2;
  private readonly static string GatewayServerUriDefaultValue = "";

  private string gatewayServerUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GatewayServerUri {
    get { return gatewayServerUri_ ?? GatewayServerUriDefaultValue; }
    set {
      gatewayServerUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "GatewayServerUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGatewayServerUri {
    get { return gatewayServerUri_ != null; }
  }
  /// <summary>Clears the value of the "GatewayServerUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGatewayServerUri() {
    gatewayServerUri_ = null;
  }

  /// <summary>Field number for the "IsOnline" field.</summary>
  public const int IsOnlineFieldNumber = 3;
  private readonly static bool IsOnlineDefaultValue = false;

  private bool isOnline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOnline {
    get { if ((_hasBits0 & 1) != 0) { return isOnline_; } else { return IsOnlineDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isOnline_ = value;
    }
  }
  /// <summary>Gets whether the "IsOnline" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsOnline {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsOnline" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsOnline() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ProductUri" field.</summary>
  public const int ProductUriFieldNumber = 4;
  private readonly static string ProductUriDefaultValue = "";

  private string productUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductUri {
    get { return productUri_ ?? ProductUriDefaultValue; }
    set {
      productUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ProductUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProductUri {
    get { return productUri_ != null; }
  }
  /// <summary>Clears the value of the "ProductUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProductUri() {
    productUri_ = null;
  }

  /// <summary>Field number for the "SemaphoreFilePath" field.</summary>
  public const int SemaphoreFilePathFieldNumber = 5;
  private readonly static string SemaphoreFilePathDefaultValue = "";

  private string semaphoreFilePath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SemaphoreFilePath {
    get { return semaphoreFilePath_ ?? SemaphoreFilePathDefaultValue; }
    set {
      semaphoreFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SemaphoreFilePath" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSemaphoreFilePath {
    get { return semaphoreFilePath_ != null; }
  }
  /// <summary>Clears the value of the "SemaphoreFilePath" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSemaphoreFilePath() {
    semaphoreFilePath_ = null;
  }

  /// <summary>Field number for the "ServerNames" field.</summary>
  public const int ServerNamesFieldNumber = 6;
  private global::ListOfLocalizedText serverNames_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfLocalizedText ServerNames {
    get { return serverNames_; }
    set {
      serverNames_ = value;
    }
  }

  /// <summary>Field number for the "ServerType" field.</summary>
  public const int ServerTypeFieldNumber = 7;
  private readonly static global::RegisteredServer.Types.ApplicationType ServerTypeDefaultValue = global::RegisteredServer.Types.ApplicationType.ClientAndServer2;

  private global::RegisteredServer.Types.ApplicationType serverType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RegisteredServer.Types.ApplicationType ServerType {
    get { if ((_hasBits0 & 2) != 0) { return serverType_; } else { return ServerTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      serverType_ = value;
    }
  }
  /// <summary>Gets whether the "ServerType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ServerType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ServerUri" field.</summary>
  public const int ServerUriFieldNumber = 8;
  private readonly static string ServerUriDefaultValue = "";

  private string serverUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerUri {
    get { return serverUri_ ?? ServerUriDefaultValue; }
    set {
      serverUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerUri {
    get { return serverUri_ != null; }
  }
  /// <summary>Clears the value of the "ServerUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerUri() {
    serverUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisteredServer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisteredServer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiscoveryUrls, other.DiscoveryUrls)) return false;
    if (GatewayServerUri != other.GatewayServerUri) return false;
    if (IsOnline != other.IsOnline) return false;
    if (ProductUri != other.ProductUri) return false;
    if (SemaphoreFilePath != other.SemaphoreFilePath) return false;
    if (!object.Equals(ServerNames, other.ServerNames)) return false;
    if (ServerType != other.ServerType) return false;
    if (ServerUri != other.ServerUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (discoveryUrls_ != null) hash ^= DiscoveryUrls.GetHashCode();
    if (HasGatewayServerUri) hash ^= GatewayServerUri.GetHashCode();
    if (HasIsOnline) hash ^= IsOnline.GetHashCode();
    if (HasProductUri) hash ^= ProductUri.GetHashCode();
    if (HasSemaphoreFilePath) hash ^= SemaphoreFilePath.GetHashCode();
    if (serverNames_ != null) hash ^= ServerNames.GetHashCode();
    if (HasServerType) hash ^= ServerType.GetHashCode();
    if (HasServerUri) hash ^= ServerUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (discoveryUrls_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiscoveryUrls);
    }
    if (HasGatewayServerUri) {
      output.WriteRawTag(18);
      output.WriteString(GatewayServerUri);
    }
    if (HasIsOnline) {
      output.WriteRawTag(24);
      output.WriteBool(IsOnline);
    }
    if (HasProductUri) {
      output.WriteRawTag(34);
      output.WriteString(ProductUri);
    }
    if (HasSemaphoreFilePath) {
      output.WriteRawTag(42);
      output.WriteString(SemaphoreFilePath);
    }
    if (serverNames_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(ServerNames);
    }
    if (HasServerType) {
      output.WriteRawTag(56);
      output.WriteEnum((int) ServerType);
    }
    if (HasServerUri) {
      output.WriteRawTag(66);
      output.WriteString(ServerUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (discoveryUrls_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscoveryUrls);
    }
    if (HasGatewayServerUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayServerUri);
    }
    if (HasIsOnline) {
      size += 1 + 1;
    }
    if (HasProductUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductUri);
    }
    if (HasSemaphoreFilePath) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SemaphoreFilePath);
    }
    if (serverNames_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerNames);
    }
    if (HasServerType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServerType);
    }
    if (HasServerUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisteredServer other) {
    if (other == null) {
      return;
    }
    if (other.discoveryUrls_ != null) {
      if (discoveryUrls_ == null) {
        DiscoveryUrls = new global::ListOfString();
      }
      DiscoveryUrls.MergeFrom(other.DiscoveryUrls);
    }
    if (other.HasGatewayServerUri) {
      GatewayServerUri = other.GatewayServerUri;
    }
    if (other.HasIsOnline) {
      IsOnline = other.IsOnline;
    }
    if (other.HasProductUri) {
      ProductUri = other.ProductUri;
    }
    if (other.HasSemaphoreFilePath) {
      SemaphoreFilePath = other.SemaphoreFilePath;
    }
    if (other.serverNames_ != null) {
      if (serverNames_ == null) {
        ServerNames = new global::ListOfLocalizedText();
      }
      ServerNames.MergeFrom(other.ServerNames);
    }
    if (other.HasServerType) {
      ServerType = other.ServerType;
    }
    if (other.HasServerUri) {
      ServerUri = other.ServerUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (discoveryUrls_ == null) {
            DiscoveryUrls = new global::ListOfString();
          }
          input.ReadMessage(DiscoveryUrls);
          break;
        }
        case 18: {
          GatewayServerUri = input.ReadString();
          break;
        }
        case 24: {
          IsOnline = input.ReadBool();
          break;
        }
        case 34: {
          ProductUri = input.ReadString();
          break;
        }
        case 42: {
          SemaphoreFilePath = input.ReadString();
          break;
        }
        case 50: {
          if (serverNames_ == null) {
            ServerNames = new global::ListOfLocalizedText();
          }
          input.ReadMessage(ServerNames);
          break;
        }
        case 56: {
          ServerType = (global::RegisteredServer.Types.ApplicationType) input.ReadEnum();
          break;
        }
        case 66: {
          ServerUri = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the RegisteredServer message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ApplicationType {
      [pbr::OriginalName("ApplicationType_ClientAndServer_2")] ClientAndServer2 = 1,
      [pbr::OriginalName("ApplicationType_Client_1")] Client1 = 2,
      [pbr::OriginalName("ApplicationType_DiscoveryServer_3")] DiscoveryServer3 = 3,
      [pbr::OriginalName("ApplicationType_Server_0")] Server0 = 4,
    }

  }
  #endregion

}

public sealed partial class RelativePath : pb::IMessage<RelativePath> {
  private static readonly pb::MessageParser<RelativePath> _parser = new pb::MessageParser<RelativePath>(() => new RelativePath());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RelativePath> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[271]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RelativePath() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RelativePath(RelativePath other) : this() {
    elements_ = other.elements_ != null ? other.elements_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RelativePath Clone() {
    return new RelativePath(this);
  }

  /// <summary>Field number for the "Elements" field.</summary>
  public const int ElementsFieldNumber = 1;
  private global::ListOfRelativePathElement elements_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRelativePathElement Elements {
    get { return elements_; }
    set {
      elements_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RelativePath);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RelativePath other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Elements, other.Elements)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (elements_ != null) hash ^= Elements.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (elements_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Elements);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (elements_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Elements);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RelativePath other) {
    if (other == null) {
      return;
    }
    if (other.elements_ != null) {
      if (elements_ == null) {
        Elements = new global::ListOfRelativePathElement();
      }
      Elements.MergeFrom(other.Elements);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (elements_ == null) {
            Elements = new global::ListOfRelativePathElement();
          }
          input.ReadMessage(Elements);
          break;
        }
      }
    }
  }

}

public sealed partial class RequestHeader : pb::IMessage<RequestHeader> {
  private static readonly pb::MessageParser<RequestHeader> _parser = new pb::MessageParser<RequestHeader>(() => new RequestHeader());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RequestHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[272]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestHeader(RequestHeader other) : this() {
    _hasBits0 = other._hasBits0;
    additionalHeader_ = other.additionalHeader_ != null ? other.additionalHeader_.Clone() : null;
    auditEntryId_ = other.auditEntryId_;
    authenticationToken_ = other.authenticationToken_ != null ? other.authenticationToken_.Clone() : null;
    requestHandle_ = other.requestHandle_;
    returnDiagnostics_ = other.returnDiagnostics_;
    timeoutHint_ = other.timeoutHint_;
    timestamp_ = other.timestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestHeader Clone() {
    return new RequestHeader(this);
  }

  /// <summary>Field number for the "AdditionalHeader" field.</summary>
  public const int AdditionalHeaderFieldNumber = 1;
  private global::ExtensionObject additionalHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject AdditionalHeader {
    get { return additionalHeader_; }
    set {
      additionalHeader_ = value;
    }
  }

  /// <summary>Field number for the "AuditEntryId" field.</summary>
  public const int AuditEntryIdFieldNumber = 2;
  private readonly static string AuditEntryIdDefaultValue = "";

  private string auditEntryId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuditEntryId {
    get { return auditEntryId_ ?? AuditEntryIdDefaultValue; }
    set {
      auditEntryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuditEntryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuditEntryId {
    get { return auditEntryId_ != null; }
  }
  /// <summary>Clears the value of the "AuditEntryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuditEntryId() {
    auditEntryId_ = null;
  }

  /// <summary>Field number for the "AuthenticationToken" field.</summary>
  public const int AuthenticationTokenFieldNumber = 3;
  private global::NodeId authenticationToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId AuthenticationToken {
    get { return authenticationToken_; }
    set {
      authenticationToken_ = value;
    }
  }

  /// <summary>Field number for the "RequestHandle" field.</summary>
  public const int RequestHandleFieldNumber = 4;
  private readonly static uint RequestHandleDefaultValue = 0;

  private uint requestHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestHandle {
    get { if ((_hasBits0 & 1) != 0) { return requestHandle_; } else { return RequestHandleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestHandle_ = value;
    }
  }
  /// <summary>Gets whether the "RequestHandle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestHandle {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RequestHandle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestHandle() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ReturnDiagnostics" field.</summary>
  public const int ReturnDiagnosticsFieldNumber = 5;
  private readonly static uint ReturnDiagnosticsDefaultValue = 0;

  private uint returnDiagnostics_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ReturnDiagnostics {
    get { if ((_hasBits0 & 2) != 0) { return returnDiagnostics_; } else { return ReturnDiagnosticsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      returnDiagnostics_ = value;
    }
  }
  /// <summary>Gets whether the "ReturnDiagnostics" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReturnDiagnostics {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ReturnDiagnostics" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReturnDiagnostics() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "TimeoutHint" field.</summary>
  public const int TimeoutHintFieldNumber = 6;
  private readonly static uint TimeoutHintDefaultValue = 0;

  private uint timeoutHint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeoutHint {
    get { if ((_hasBits0 & 4) != 0) { return timeoutHint_; } else { return TimeoutHintDefaultValue; } }
    set {
      _hasBits0 |= 4;
      timeoutHint_ = value;
    }
  }
  /// <summary>Gets whether the "TimeoutHint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimeoutHint {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "TimeoutHint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimeoutHint() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "Timestamp" field.</summary>
  public const int TimestampFieldNumber = 7;
  private readonly static long TimestampDefaultValue = 0L;

  private long timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Timestamp {
    get { if ((_hasBits0 & 8) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "Timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestamp() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RequestHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RequestHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AdditionalHeader, other.AdditionalHeader)) return false;
    if (AuditEntryId != other.AuditEntryId) return false;
    if (!object.Equals(AuthenticationToken, other.AuthenticationToken)) return false;
    if (RequestHandle != other.RequestHandle) return false;
    if (ReturnDiagnostics != other.ReturnDiagnostics) return false;
    if (TimeoutHint != other.TimeoutHint) return false;
    if (Timestamp != other.Timestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (additionalHeader_ != null) hash ^= AdditionalHeader.GetHashCode();
    if (HasAuditEntryId) hash ^= AuditEntryId.GetHashCode();
    if (authenticationToken_ != null) hash ^= AuthenticationToken.GetHashCode();
    if (HasRequestHandle) hash ^= RequestHandle.GetHashCode();
    if (HasReturnDiagnostics) hash ^= ReturnDiagnostics.GetHashCode();
    if (HasTimeoutHint) hash ^= TimeoutHint.GetHashCode();
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (additionalHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AdditionalHeader);
    }
    if (HasAuditEntryId) {
      output.WriteRawTag(18);
      output.WriteString(AuditEntryId);
    }
    if (authenticationToken_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(AuthenticationToken);
    }
    if (HasRequestHandle) {
      output.WriteRawTag(32);
      output.WriteUInt32(RequestHandle);
    }
    if (HasReturnDiagnostics) {
      output.WriteRawTag(40);
      output.WriteUInt32(ReturnDiagnostics);
    }
    if (HasTimeoutHint) {
      output.WriteRawTag(48);
      output.WriteUInt32(TimeoutHint);
    }
    if (HasTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(Timestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (additionalHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalHeader);
    }
    if (HasAuditEntryId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuditEntryId);
    }
    if (authenticationToken_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthenticationToken);
    }
    if (HasRequestHandle) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestHandle);
    }
    if (HasReturnDiagnostics) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReturnDiagnostics);
    }
    if (HasTimeoutHint) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutHint);
    }
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RequestHeader other) {
    if (other == null) {
      return;
    }
    if (other.additionalHeader_ != null) {
      if (additionalHeader_ == null) {
        AdditionalHeader = new global::ExtensionObject();
      }
      AdditionalHeader.MergeFrom(other.AdditionalHeader);
    }
    if (other.HasAuditEntryId) {
      AuditEntryId = other.AuditEntryId;
    }
    if (other.authenticationToken_ != null) {
      if (authenticationToken_ == null) {
        AuthenticationToken = new global::NodeId();
      }
      AuthenticationToken.MergeFrom(other.AuthenticationToken);
    }
    if (other.HasRequestHandle) {
      RequestHandle = other.RequestHandle;
    }
    if (other.HasReturnDiagnostics) {
      ReturnDiagnostics = other.ReturnDiagnostics;
    }
    if (other.HasTimeoutHint) {
      TimeoutHint = other.TimeoutHint;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (additionalHeader_ == null) {
            AdditionalHeader = new global::ExtensionObject();
          }
          input.ReadMessage(AdditionalHeader);
          break;
        }
        case 18: {
          AuditEntryId = input.ReadString();
          break;
        }
        case 26: {
          if (authenticationToken_ == null) {
            AuthenticationToken = new global::NodeId();
          }
          input.ReadMessage(AuthenticationToken);
          break;
        }
        case 32: {
          RequestHandle = input.ReadUInt32();
          break;
        }
        case 40: {
          ReturnDiagnostics = input.ReadUInt32();
          break;
        }
        case 48: {
          TimeoutHint = input.ReadUInt32();
          break;
        }
        case 56: {
          Timestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ResponseHeader : pb::IMessage<ResponseHeader> {
  private static readonly pb::MessageParser<ResponseHeader> _parser = new pb::MessageParser<ResponseHeader>(() => new ResponseHeader());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResponseHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[273]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResponseHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResponseHeader(ResponseHeader other) : this() {
    _hasBits0 = other._hasBits0;
    additionalHeader_ = other.additionalHeader_ != null ? other.additionalHeader_.Clone() : null;
    requestHandle_ = other.requestHandle_;
    serviceDiagnostics_ = other.serviceDiagnostics_ != null ? other.serviceDiagnostics_.Clone() : null;
    serviceResult_ = other.serviceResult_ != null ? other.serviceResult_.Clone() : null;
    stringTable_ = other.stringTable_ != null ? other.stringTable_.Clone() : null;
    timestamp_ = other.timestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResponseHeader Clone() {
    return new ResponseHeader(this);
  }

  /// <summary>Field number for the "AdditionalHeader" field.</summary>
  public const int AdditionalHeaderFieldNumber = 1;
  private global::ExtensionObject additionalHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject AdditionalHeader {
    get { return additionalHeader_; }
    set {
      additionalHeader_ = value;
    }
  }

  /// <summary>Field number for the "RequestHandle" field.</summary>
  public const int RequestHandleFieldNumber = 2;
  private readonly static uint RequestHandleDefaultValue = 0;

  private uint requestHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestHandle {
    get { if ((_hasBits0 & 1) != 0) { return requestHandle_; } else { return RequestHandleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestHandle_ = value;
    }
  }
  /// <summary>Gets whether the "RequestHandle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestHandle {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RequestHandle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestHandle() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ServiceDiagnostics" field.</summary>
  public const int ServiceDiagnosticsFieldNumber = 3;
  private global::DiagnosticInfo serviceDiagnostics_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiagnosticInfo ServiceDiagnostics {
    get { return serviceDiagnostics_; }
    set {
      serviceDiagnostics_ = value;
    }
  }

  /// <summary>Field number for the "ServiceResult" field.</summary>
  public const int ServiceResultFieldNumber = 4;
  private global::StatusCode serviceResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode ServiceResult {
    get { return serviceResult_; }
    set {
      serviceResult_ = value;
    }
  }

  /// <summary>Field number for the "StringTable" field.</summary>
  public const int StringTableFieldNumber = 5;
  private global::ListOfString stringTable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString StringTable {
    get { return stringTable_; }
    set {
      stringTable_ = value;
    }
  }

  /// <summary>Field number for the "Timestamp" field.</summary>
  public const int TimestampFieldNumber = 6;
  private readonly static long TimestampDefaultValue = 0L;

  private long timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Timestamp {
    get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "Timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestamp() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResponseHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResponseHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AdditionalHeader, other.AdditionalHeader)) return false;
    if (RequestHandle != other.RequestHandle) return false;
    if (!object.Equals(ServiceDiagnostics, other.ServiceDiagnostics)) return false;
    if (!object.Equals(ServiceResult, other.ServiceResult)) return false;
    if (!object.Equals(StringTable, other.StringTable)) return false;
    if (Timestamp != other.Timestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (additionalHeader_ != null) hash ^= AdditionalHeader.GetHashCode();
    if (HasRequestHandle) hash ^= RequestHandle.GetHashCode();
    if (serviceDiagnostics_ != null) hash ^= ServiceDiagnostics.GetHashCode();
    if (serviceResult_ != null) hash ^= ServiceResult.GetHashCode();
    if (stringTable_ != null) hash ^= StringTable.GetHashCode();
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (additionalHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AdditionalHeader);
    }
    if (HasRequestHandle) {
      output.WriteRawTag(16);
      output.WriteUInt32(RequestHandle);
    }
    if (serviceDiagnostics_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ServiceDiagnostics);
    }
    if (serviceResult_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ServiceResult);
    }
    if (stringTable_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(StringTable);
    }
    if (HasTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(Timestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (additionalHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalHeader);
    }
    if (HasRequestHandle) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestHandle);
    }
    if (serviceDiagnostics_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceDiagnostics);
    }
    if (serviceResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceResult);
    }
    if (stringTable_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringTable);
    }
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResponseHeader other) {
    if (other == null) {
      return;
    }
    if (other.additionalHeader_ != null) {
      if (additionalHeader_ == null) {
        AdditionalHeader = new global::ExtensionObject();
      }
      AdditionalHeader.MergeFrom(other.AdditionalHeader);
    }
    if (other.HasRequestHandle) {
      RequestHandle = other.RequestHandle;
    }
    if (other.serviceDiagnostics_ != null) {
      if (serviceDiagnostics_ == null) {
        ServiceDiagnostics = new global::DiagnosticInfo();
      }
      ServiceDiagnostics.MergeFrom(other.ServiceDiagnostics);
    }
    if (other.serviceResult_ != null) {
      if (serviceResult_ == null) {
        ServiceResult = new global::StatusCode();
      }
      ServiceResult.MergeFrom(other.ServiceResult);
    }
    if (other.stringTable_ != null) {
      if (stringTable_ == null) {
        StringTable = new global::ListOfString();
      }
      StringTable.MergeFrom(other.StringTable);
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (additionalHeader_ == null) {
            AdditionalHeader = new global::ExtensionObject();
          }
          input.ReadMessage(AdditionalHeader);
          break;
        }
        case 16: {
          RequestHandle = input.ReadUInt32();
          break;
        }
        case 26: {
          if (serviceDiagnostics_ == null) {
            ServiceDiagnostics = new global::DiagnosticInfo();
          }
          input.ReadMessage(ServiceDiagnostics);
          break;
        }
        case 34: {
          if (serviceResult_ == null) {
            ServiceResult = new global::StatusCode();
          }
          input.ReadMessage(ServiceResult);
          break;
        }
        case 42: {
          if (stringTable_ == null) {
            StringTable = new global::ListOfString();
          }
          input.ReadMessage(StringTable);
          break;
        }
        case 48: {
          Timestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ServiceFault : pb::IMessage<ServiceFault> {
  private static readonly pb::MessageParser<ServiceFault> _parser = new pb::MessageParser<ServiceFault>(() => new ServiceFault());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServiceFault> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[274]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceFault() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceFault(ServiceFault other) : this() {
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceFault Clone() {
    return new ServiceFault(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServiceFault);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServiceFault other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServiceFault other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class SessionDiagnosticsDataType : pb::IMessage<SessionDiagnosticsDataType> {
  private static readonly pb::MessageParser<SessionDiagnosticsDataType> _parser = new pb::MessageParser<SessionDiagnosticsDataType>(() => new SessionDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[275]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionDiagnosticsDataType(SessionDiagnosticsDataType other) : this() {
    _hasBits0 = other._hasBits0;
    actualSessionTimeout_ = other.actualSessionTimeout_;
    addNodesCount_ = other.addNodesCount_ != null ? other.addNodesCount_.Clone() : null;
    addReferencesCount_ = other.addReferencesCount_ != null ? other.addReferencesCount_.Clone() : null;
    browseCount_ = other.browseCount_ != null ? other.browseCount_.Clone() : null;
    browseNextCount_ = other.browseNextCount_ != null ? other.browseNextCount_.Clone() : null;
    callCount_ = other.callCount_ != null ? other.callCount_.Clone() : null;
    clientConnectionTime_ = other.clientConnectionTime_;
    clientDescription_ = other.clientDescription_ != null ? other.clientDescription_.Clone() : null;
    clientLastContactTime_ = other.clientLastContactTime_;
    createMonitoredItemsCount_ = other.createMonitoredItemsCount_ != null ? other.createMonitoredItemsCount_.Clone() : null;
    createSubscriptionCount_ = other.createSubscriptionCount_ != null ? other.createSubscriptionCount_.Clone() : null;
    currentMonitoredItemsCount_ = other.currentMonitoredItemsCount_;
    currentPublishRequestsInQueue_ = other.currentPublishRequestsInQueue_;
    currentSubscriptionsCount_ = other.currentSubscriptionsCount_;
    deleteMonitoredItemsCount_ = other.deleteMonitoredItemsCount_ != null ? other.deleteMonitoredItemsCount_.Clone() : null;
    deleteNodesCount_ = other.deleteNodesCount_ != null ? other.deleteNodesCount_.Clone() : null;
    deleteReferencesCount_ = other.deleteReferencesCount_ != null ? other.deleteReferencesCount_.Clone() : null;
    deleteSubscriptionsCount_ = other.deleteSubscriptionsCount_ != null ? other.deleteSubscriptionsCount_.Clone() : null;
    endpointUrl_ = other.endpointUrl_;
    historyReadCount_ = other.historyReadCount_ != null ? other.historyReadCount_.Clone() : null;
    historyUpdateCount_ = other.historyUpdateCount_ != null ? other.historyUpdateCount_.Clone() : null;
    localeIds_ = other.localeIds_ != null ? other.localeIds_.Clone() : null;
    maxResponseMessageSize_ = other.maxResponseMessageSize_;
    modifyMonitoredItemsCount_ = other.modifyMonitoredItemsCount_ != null ? other.modifyMonitoredItemsCount_.Clone() : null;
    modifySubscriptionCount_ = other.modifySubscriptionCount_ != null ? other.modifySubscriptionCount_.Clone() : null;
    publishCount_ = other.publishCount_ != null ? other.publishCount_.Clone() : null;
    queryFirstCount_ = other.queryFirstCount_ != null ? other.queryFirstCount_.Clone() : null;
    queryNextCount_ = other.queryNextCount_ != null ? other.queryNextCount_.Clone() : null;
    readCount_ = other.readCount_ != null ? other.readCount_.Clone() : null;
    registerNodesCount_ = other.registerNodesCount_ != null ? other.registerNodesCount_.Clone() : null;
    republishCount_ = other.republishCount_ != null ? other.republishCount_.Clone() : null;
    serverUri_ = other.serverUri_;
    sessionId_ = other.sessionId_ != null ? other.sessionId_.Clone() : null;
    sessionName_ = other.sessionName_;
    setMonitoringModeCount_ = other.setMonitoringModeCount_ != null ? other.setMonitoringModeCount_.Clone() : null;
    setPublishingModeCount_ = other.setPublishingModeCount_ != null ? other.setPublishingModeCount_.Clone() : null;
    setTriggeringCount_ = other.setTriggeringCount_ != null ? other.setTriggeringCount_.Clone() : null;
    totalRequestCount_ = other.totalRequestCount_ != null ? other.totalRequestCount_.Clone() : null;
    transferSubscriptionsCount_ = other.transferSubscriptionsCount_ != null ? other.transferSubscriptionsCount_.Clone() : null;
    translateBrowsePathsToNodeIdsCount_ = other.translateBrowsePathsToNodeIdsCount_ != null ? other.translateBrowsePathsToNodeIdsCount_.Clone() : null;
    unauthorizedRequestCount_ = other.unauthorizedRequestCount_;
    unregisterNodesCount_ = other.unregisterNodesCount_ != null ? other.unregisterNodesCount_.Clone() : null;
    writeCount_ = other.writeCount_ != null ? other.writeCount_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionDiagnosticsDataType Clone() {
    return new SessionDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "ActualSessionTimeout" field.</summary>
  public const int ActualSessionTimeoutFieldNumber = 1;
  private readonly static double ActualSessionTimeoutDefaultValue = 0D;

  private double actualSessionTimeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ActualSessionTimeout {
    get { if ((_hasBits0 & 1) != 0) { return actualSessionTimeout_; } else { return ActualSessionTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 1;
      actualSessionTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "ActualSessionTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasActualSessionTimeout {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ActualSessionTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearActualSessionTimeout() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "AddNodesCount" field.</summary>
  public const int AddNodesCountFieldNumber = 2;
  private global::ServiceCounterDataType addNodesCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType AddNodesCount {
    get { return addNodesCount_; }
    set {
      addNodesCount_ = value;
    }
  }

  /// <summary>Field number for the "AddReferencesCount" field.</summary>
  public const int AddReferencesCountFieldNumber = 3;
  private global::ServiceCounterDataType addReferencesCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType AddReferencesCount {
    get { return addReferencesCount_; }
    set {
      addReferencesCount_ = value;
    }
  }

  /// <summary>Field number for the "BrowseCount" field.</summary>
  public const int BrowseCountFieldNumber = 4;
  private global::ServiceCounterDataType browseCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType BrowseCount {
    get { return browseCount_; }
    set {
      browseCount_ = value;
    }
  }

  /// <summary>Field number for the "BrowseNextCount" field.</summary>
  public const int BrowseNextCountFieldNumber = 5;
  private global::ServiceCounterDataType browseNextCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType BrowseNextCount {
    get { return browseNextCount_; }
    set {
      browseNextCount_ = value;
    }
  }

  /// <summary>Field number for the "CallCount" field.</summary>
  public const int CallCountFieldNumber = 6;
  private global::ServiceCounterDataType callCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType CallCount {
    get { return callCount_; }
    set {
      callCount_ = value;
    }
  }

  /// <summary>Field number for the "ClientConnectionTime" field.</summary>
  public const int ClientConnectionTimeFieldNumber = 7;
  private readonly static long ClientConnectionTimeDefaultValue = 0L;

  private long clientConnectionTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ClientConnectionTime {
    get { if ((_hasBits0 & 2) != 0) { return clientConnectionTime_; } else { return ClientConnectionTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientConnectionTime_ = value;
    }
  }
  /// <summary>Gets whether the "ClientConnectionTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientConnectionTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ClientConnectionTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientConnectionTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ClientDescription" field.</summary>
  public const int ClientDescriptionFieldNumber = 8;
  private global::ApplicationDescription clientDescription_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ApplicationDescription ClientDescription {
    get { return clientDescription_; }
    set {
      clientDescription_ = value;
    }
  }

  /// <summary>Field number for the "ClientLastContactTime" field.</summary>
  public const int ClientLastContactTimeFieldNumber = 9;
  private readonly static long ClientLastContactTimeDefaultValue = 0L;

  private long clientLastContactTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ClientLastContactTime {
    get { if ((_hasBits0 & 4) != 0) { return clientLastContactTime_; } else { return ClientLastContactTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      clientLastContactTime_ = value;
    }
  }
  /// <summary>Gets whether the "ClientLastContactTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientLastContactTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ClientLastContactTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientLastContactTime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "CreateMonitoredItemsCount" field.</summary>
  public const int CreateMonitoredItemsCountFieldNumber = 10;
  private global::ServiceCounterDataType createMonitoredItemsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType CreateMonitoredItemsCount {
    get { return createMonitoredItemsCount_; }
    set {
      createMonitoredItemsCount_ = value;
    }
  }

  /// <summary>Field number for the "CreateSubscriptionCount" field.</summary>
  public const int CreateSubscriptionCountFieldNumber = 11;
  private global::ServiceCounterDataType createSubscriptionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType CreateSubscriptionCount {
    get { return createSubscriptionCount_; }
    set {
      createSubscriptionCount_ = value;
    }
  }

  /// <summary>Field number for the "CurrentMonitoredItemsCount" field.</summary>
  public const int CurrentMonitoredItemsCountFieldNumber = 12;
  private readonly static uint CurrentMonitoredItemsCountDefaultValue = 0;

  private uint currentMonitoredItemsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentMonitoredItemsCount {
    get { if ((_hasBits0 & 8) != 0) { return currentMonitoredItemsCount_; } else { return CurrentMonitoredItemsCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      currentMonitoredItemsCount_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentMonitoredItemsCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentMonitoredItemsCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "CurrentMonitoredItemsCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentMonitoredItemsCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "CurrentPublishRequestsInQueue" field.</summary>
  public const int CurrentPublishRequestsInQueueFieldNumber = 13;
  private readonly static uint CurrentPublishRequestsInQueueDefaultValue = 0;

  private uint currentPublishRequestsInQueue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentPublishRequestsInQueue {
    get { if ((_hasBits0 & 16) != 0) { return currentPublishRequestsInQueue_; } else { return CurrentPublishRequestsInQueueDefaultValue; } }
    set {
      _hasBits0 |= 16;
      currentPublishRequestsInQueue_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentPublishRequestsInQueue" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentPublishRequestsInQueue {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "CurrentPublishRequestsInQueue" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentPublishRequestsInQueue() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "CurrentSubscriptionsCount" field.</summary>
  public const int CurrentSubscriptionsCountFieldNumber = 14;
  private readonly static uint CurrentSubscriptionsCountDefaultValue = 0;

  private uint currentSubscriptionsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentSubscriptionsCount {
    get { if ((_hasBits0 & 32) != 0) { return currentSubscriptionsCount_; } else { return CurrentSubscriptionsCountDefaultValue; } }
    set {
      _hasBits0 |= 32;
      currentSubscriptionsCount_ = value;
    }
  }
  /// <summary>Gets whether the "CurrentSubscriptionsCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentSubscriptionsCount {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "CurrentSubscriptionsCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentSubscriptionsCount() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "DeleteMonitoredItemsCount" field.</summary>
  public const int DeleteMonitoredItemsCountFieldNumber = 15;
  private global::ServiceCounterDataType deleteMonitoredItemsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType DeleteMonitoredItemsCount {
    get { return deleteMonitoredItemsCount_; }
    set {
      deleteMonitoredItemsCount_ = value;
    }
  }

  /// <summary>Field number for the "DeleteNodesCount" field.</summary>
  public const int DeleteNodesCountFieldNumber = 16;
  private global::ServiceCounterDataType deleteNodesCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType DeleteNodesCount {
    get { return deleteNodesCount_; }
    set {
      deleteNodesCount_ = value;
    }
  }

  /// <summary>Field number for the "DeleteReferencesCount" field.</summary>
  public const int DeleteReferencesCountFieldNumber = 17;
  private global::ServiceCounterDataType deleteReferencesCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType DeleteReferencesCount {
    get { return deleteReferencesCount_; }
    set {
      deleteReferencesCount_ = value;
    }
  }

  /// <summary>Field number for the "DeleteSubscriptionsCount" field.</summary>
  public const int DeleteSubscriptionsCountFieldNumber = 18;
  private global::ServiceCounterDataType deleteSubscriptionsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType DeleteSubscriptionsCount {
    get { return deleteSubscriptionsCount_; }
    set {
      deleteSubscriptionsCount_ = value;
    }
  }

  /// <summary>Field number for the "EndpointUrl" field.</summary>
  public const int EndpointUrlFieldNumber = 19;
  private readonly static string EndpointUrlDefaultValue = "";

  private string endpointUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EndpointUrl {
    get { return endpointUrl_ ?? EndpointUrlDefaultValue; }
    set {
      endpointUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EndpointUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndpointUrl {
    get { return endpointUrl_ != null; }
  }
  /// <summary>Clears the value of the "EndpointUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndpointUrl() {
    endpointUrl_ = null;
  }

  /// <summary>Field number for the "HistoryReadCount" field.</summary>
  public const int HistoryReadCountFieldNumber = 20;
  private global::ServiceCounterDataType historyReadCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType HistoryReadCount {
    get { return historyReadCount_; }
    set {
      historyReadCount_ = value;
    }
  }

  /// <summary>Field number for the "HistoryUpdateCount" field.</summary>
  public const int HistoryUpdateCountFieldNumber = 21;
  private global::ServiceCounterDataType historyUpdateCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType HistoryUpdateCount {
    get { return historyUpdateCount_; }
    set {
      historyUpdateCount_ = value;
    }
  }

  /// <summary>Field number for the "LocaleIds" field.</summary>
  public const int LocaleIdsFieldNumber = 22;
  private global::ListOfString localeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString LocaleIds {
    get { return localeIds_; }
    set {
      localeIds_ = value;
    }
  }

  /// <summary>Field number for the "MaxResponseMessageSize" field.</summary>
  public const int MaxResponseMessageSizeFieldNumber = 23;
  private readonly static uint MaxResponseMessageSizeDefaultValue = 0;

  private uint maxResponseMessageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxResponseMessageSize {
    get { if ((_hasBits0 & 64) != 0) { return maxResponseMessageSize_; } else { return MaxResponseMessageSizeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      maxResponseMessageSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxResponseMessageSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxResponseMessageSize {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "MaxResponseMessageSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxResponseMessageSize() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "ModifyMonitoredItemsCount" field.</summary>
  public const int ModifyMonitoredItemsCountFieldNumber = 24;
  private global::ServiceCounterDataType modifyMonitoredItemsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType ModifyMonitoredItemsCount {
    get { return modifyMonitoredItemsCount_; }
    set {
      modifyMonitoredItemsCount_ = value;
    }
  }

  /// <summary>Field number for the "ModifySubscriptionCount" field.</summary>
  public const int ModifySubscriptionCountFieldNumber = 25;
  private global::ServiceCounterDataType modifySubscriptionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType ModifySubscriptionCount {
    get { return modifySubscriptionCount_; }
    set {
      modifySubscriptionCount_ = value;
    }
  }

  /// <summary>Field number for the "PublishCount" field.</summary>
  public const int PublishCountFieldNumber = 26;
  private global::ServiceCounterDataType publishCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType PublishCount {
    get { return publishCount_; }
    set {
      publishCount_ = value;
    }
  }

  /// <summary>Field number for the "QueryFirstCount" field.</summary>
  public const int QueryFirstCountFieldNumber = 27;
  private global::ServiceCounterDataType queryFirstCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType QueryFirstCount {
    get { return queryFirstCount_; }
    set {
      queryFirstCount_ = value;
    }
  }

  /// <summary>Field number for the "QueryNextCount" field.</summary>
  public const int QueryNextCountFieldNumber = 28;
  private global::ServiceCounterDataType queryNextCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType QueryNextCount {
    get { return queryNextCount_; }
    set {
      queryNextCount_ = value;
    }
  }

  /// <summary>Field number for the "ReadCount" field.</summary>
  public const int ReadCountFieldNumber = 29;
  private global::ServiceCounterDataType readCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType ReadCount {
    get { return readCount_; }
    set {
      readCount_ = value;
    }
  }

  /// <summary>Field number for the "RegisterNodesCount" field.</summary>
  public const int RegisterNodesCountFieldNumber = 30;
  private global::ServiceCounterDataType registerNodesCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType RegisterNodesCount {
    get { return registerNodesCount_; }
    set {
      registerNodesCount_ = value;
    }
  }

  /// <summary>Field number for the "RepublishCount" field.</summary>
  public const int RepublishCountFieldNumber = 31;
  private global::ServiceCounterDataType republishCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType RepublishCount {
    get { return republishCount_; }
    set {
      republishCount_ = value;
    }
  }

  /// <summary>Field number for the "ServerUri" field.</summary>
  public const int ServerUriFieldNumber = 32;
  private readonly static string ServerUriDefaultValue = "";

  private string serverUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerUri {
    get { return serverUri_ ?? ServerUriDefaultValue; }
    set {
      serverUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerUri {
    get { return serverUri_ != null; }
  }
  /// <summary>Clears the value of the "ServerUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerUri() {
    serverUri_ = null;
  }

  /// <summary>Field number for the "SessionId" field.</summary>
  public const int SessionIdFieldNumber = 33;
  private global::NodeId sessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = value;
    }
  }

  /// <summary>Field number for the "SessionName" field.</summary>
  public const int SessionNameFieldNumber = 34;
  private readonly static string SessionNameDefaultValue = "";

  private string sessionName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionName {
    get { return sessionName_ ?? SessionNameDefaultValue; }
    set {
      sessionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SessionName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSessionName {
    get { return sessionName_ != null; }
  }
  /// <summary>Clears the value of the "SessionName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSessionName() {
    sessionName_ = null;
  }

  /// <summary>Field number for the "SetMonitoringModeCount" field.</summary>
  public const int SetMonitoringModeCountFieldNumber = 35;
  private global::ServiceCounterDataType setMonitoringModeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType SetMonitoringModeCount {
    get { return setMonitoringModeCount_; }
    set {
      setMonitoringModeCount_ = value;
    }
  }

  /// <summary>Field number for the "SetPublishingModeCount" field.</summary>
  public const int SetPublishingModeCountFieldNumber = 36;
  private global::ServiceCounterDataType setPublishingModeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType SetPublishingModeCount {
    get { return setPublishingModeCount_; }
    set {
      setPublishingModeCount_ = value;
    }
  }

  /// <summary>Field number for the "SetTriggeringCount" field.</summary>
  public const int SetTriggeringCountFieldNumber = 37;
  private global::ServiceCounterDataType setTriggeringCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType SetTriggeringCount {
    get { return setTriggeringCount_; }
    set {
      setTriggeringCount_ = value;
    }
  }

  /// <summary>Field number for the "TotalRequestCount" field.</summary>
  public const int TotalRequestCountFieldNumber = 38;
  private global::ServiceCounterDataType totalRequestCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType TotalRequestCount {
    get { return totalRequestCount_; }
    set {
      totalRequestCount_ = value;
    }
  }

  /// <summary>Field number for the "TransferSubscriptionsCount" field.</summary>
  public const int TransferSubscriptionsCountFieldNumber = 39;
  private global::ServiceCounterDataType transferSubscriptionsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType TransferSubscriptionsCount {
    get { return transferSubscriptionsCount_; }
    set {
      transferSubscriptionsCount_ = value;
    }
  }

  /// <summary>Field number for the "TranslateBrowsePathsToNodeIdsCount" field.</summary>
  public const int TranslateBrowsePathsToNodeIdsCountFieldNumber = 40;
  private global::ServiceCounterDataType translateBrowsePathsToNodeIdsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType TranslateBrowsePathsToNodeIdsCount {
    get { return translateBrowsePathsToNodeIdsCount_; }
    set {
      translateBrowsePathsToNodeIdsCount_ = value;
    }
  }

  /// <summary>Field number for the "UnauthorizedRequestCount" field.</summary>
  public const int UnauthorizedRequestCountFieldNumber = 41;
  private readonly static uint UnauthorizedRequestCountDefaultValue = 0;

  private uint unauthorizedRequestCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnauthorizedRequestCount {
    get { if ((_hasBits0 & 128) != 0) { return unauthorizedRequestCount_; } else { return UnauthorizedRequestCountDefaultValue; } }
    set {
      _hasBits0 |= 128;
      unauthorizedRequestCount_ = value;
    }
  }
  /// <summary>Gets whether the "UnauthorizedRequestCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUnauthorizedRequestCount {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "UnauthorizedRequestCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUnauthorizedRequestCount() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "UnregisterNodesCount" field.</summary>
  public const int UnregisterNodesCountFieldNumber = 42;
  private global::ServiceCounterDataType unregisterNodesCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType UnregisterNodesCount {
    get { return unregisterNodesCount_; }
    set {
      unregisterNodesCount_ = value;
    }
  }

  /// <summary>Field number for the "WriteCount" field.</summary>
  public const int WriteCountFieldNumber = 43;
  private global::ServiceCounterDataType writeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServiceCounterDataType WriteCount {
    get { return writeCount_; }
    set {
      writeCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ActualSessionTimeout, other.ActualSessionTimeout)) return false;
    if (!object.Equals(AddNodesCount, other.AddNodesCount)) return false;
    if (!object.Equals(AddReferencesCount, other.AddReferencesCount)) return false;
    if (!object.Equals(BrowseCount, other.BrowseCount)) return false;
    if (!object.Equals(BrowseNextCount, other.BrowseNextCount)) return false;
    if (!object.Equals(CallCount, other.CallCount)) return false;
    if (ClientConnectionTime != other.ClientConnectionTime) return false;
    if (!object.Equals(ClientDescription, other.ClientDescription)) return false;
    if (ClientLastContactTime != other.ClientLastContactTime) return false;
    if (!object.Equals(CreateMonitoredItemsCount, other.CreateMonitoredItemsCount)) return false;
    if (!object.Equals(CreateSubscriptionCount, other.CreateSubscriptionCount)) return false;
    if (CurrentMonitoredItemsCount != other.CurrentMonitoredItemsCount) return false;
    if (CurrentPublishRequestsInQueue != other.CurrentPublishRequestsInQueue) return false;
    if (CurrentSubscriptionsCount != other.CurrentSubscriptionsCount) return false;
    if (!object.Equals(DeleteMonitoredItemsCount, other.DeleteMonitoredItemsCount)) return false;
    if (!object.Equals(DeleteNodesCount, other.DeleteNodesCount)) return false;
    if (!object.Equals(DeleteReferencesCount, other.DeleteReferencesCount)) return false;
    if (!object.Equals(DeleteSubscriptionsCount, other.DeleteSubscriptionsCount)) return false;
    if (EndpointUrl != other.EndpointUrl) return false;
    if (!object.Equals(HistoryReadCount, other.HistoryReadCount)) return false;
    if (!object.Equals(HistoryUpdateCount, other.HistoryUpdateCount)) return false;
    if (!object.Equals(LocaleIds, other.LocaleIds)) return false;
    if (MaxResponseMessageSize != other.MaxResponseMessageSize) return false;
    if (!object.Equals(ModifyMonitoredItemsCount, other.ModifyMonitoredItemsCount)) return false;
    if (!object.Equals(ModifySubscriptionCount, other.ModifySubscriptionCount)) return false;
    if (!object.Equals(PublishCount, other.PublishCount)) return false;
    if (!object.Equals(QueryFirstCount, other.QueryFirstCount)) return false;
    if (!object.Equals(QueryNextCount, other.QueryNextCount)) return false;
    if (!object.Equals(ReadCount, other.ReadCount)) return false;
    if (!object.Equals(RegisterNodesCount, other.RegisterNodesCount)) return false;
    if (!object.Equals(RepublishCount, other.RepublishCount)) return false;
    if (ServerUri != other.ServerUri) return false;
    if (!object.Equals(SessionId, other.SessionId)) return false;
    if (SessionName != other.SessionName) return false;
    if (!object.Equals(SetMonitoringModeCount, other.SetMonitoringModeCount)) return false;
    if (!object.Equals(SetPublishingModeCount, other.SetPublishingModeCount)) return false;
    if (!object.Equals(SetTriggeringCount, other.SetTriggeringCount)) return false;
    if (!object.Equals(TotalRequestCount, other.TotalRequestCount)) return false;
    if (!object.Equals(TransferSubscriptionsCount, other.TransferSubscriptionsCount)) return false;
    if (!object.Equals(TranslateBrowsePathsToNodeIdsCount, other.TranslateBrowsePathsToNodeIdsCount)) return false;
    if (UnauthorizedRequestCount != other.UnauthorizedRequestCount) return false;
    if (!object.Equals(UnregisterNodesCount, other.UnregisterNodesCount)) return false;
    if (!object.Equals(WriteCount, other.WriteCount)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasActualSessionTimeout) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ActualSessionTimeout);
    if (addNodesCount_ != null) hash ^= AddNodesCount.GetHashCode();
    if (addReferencesCount_ != null) hash ^= AddReferencesCount.GetHashCode();
    if (browseCount_ != null) hash ^= BrowseCount.GetHashCode();
    if (browseNextCount_ != null) hash ^= BrowseNextCount.GetHashCode();
    if (callCount_ != null) hash ^= CallCount.GetHashCode();
    if (HasClientConnectionTime) hash ^= ClientConnectionTime.GetHashCode();
    if (clientDescription_ != null) hash ^= ClientDescription.GetHashCode();
    if (HasClientLastContactTime) hash ^= ClientLastContactTime.GetHashCode();
    if (createMonitoredItemsCount_ != null) hash ^= CreateMonitoredItemsCount.GetHashCode();
    if (createSubscriptionCount_ != null) hash ^= CreateSubscriptionCount.GetHashCode();
    if (HasCurrentMonitoredItemsCount) hash ^= CurrentMonitoredItemsCount.GetHashCode();
    if (HasCurrentPublishRequestsInQueue) hash ^= CurrentPublishRequestsInQueue.GetHashCode();
    if (HasCurrentSubscriptionsCount) hash ^= CurrentSubscriptionsCount.GetHashCode();
    if (deleteMonitoredItemsCount_ != null) hash ^= DeleteMonitoredItemsCount.GetHashCode();
    if (deleteNodesCount_ != null) hash ^= DeleteNodesCount.GetHashCode();
    if (deleteReferencesCount_ != null) hash ^= DeleteReferencesCount.GetHashCode();
    if (deleteSubscriptionsCount_ != null) hash ^= DeleteSubscriptionsCount.GetHashCode();
    if (HasEndpointUrl) hash ^= EndpointUrl.GetHashCode();
    if (historyReadCount_ != null) hash ^= HistoryReadCount.GetHashCode();
    if (historyUpdateCount_ != null) hash ^= HistoryUpdateCount.GetHashCode();
    if (localeIds_ != null) hash ^= LocaleIds.GetHashCode();
    if (HasMaxResponseMessageSize) hash ^= MaxResponseMessageSize.GetHashCode();
    if (modifyMonitoredItemsCount_ != null) hash ^= ModifyMonitoredItemsCount.GetHashCode();
    if (modifySubscriptionCount_ != null) hash ^= ModifySubscriptionCount.GetHashCode();
    if (publishCount_ != null) hash ^= PublishCount.GetHashCode();
    if (queryFirstCount_ != null) hash ^= QueryFirstCount.GetHashCode();
    if (queryNextCount_ != null) hash ^= QueryNextCount.GetHashCode();
    if (readCount_ != null) hash ^= ReadCount.GetHashCode();
    if (registerNodesCount_ != null) hash ^= RegisterNodesCount.GetHashCode();
    if (republishCount_ != null) hash ^= RepublishCount.GetHashCode();
    if (HasServerUri) hash ^= ServerUri.GetHashCode();
    if (sessionId_ != null) hash ^= SessionId.GetHashCode();
    if (HasSessionName) hash ^= SessionName.GetHashCode();
    if (setMonitoringModeCount_ != null) hash ^= SetMonitoringModeCount.GetHashCode();
    if (setPublishingModeCount_ != null) hash ^= SetPublishingModeCount.GetHashCode();
    if (setTriggeringCount_ != null) hash ^= SetTriggeringCount.GetHashCode();
    if (totalRequestCount_ != null) hash ^= TotalRequestCount.GetHashCode();
    if (transferSubscriptionsCount_ != null) hash ^= TransferSubscriptionsCount.GetHashCode();
    if (translateBrowsePathsToNodeIdsCount_ != null) hash ^= TranslateBrowsePathsToNodeIdsCount.GetHashCode();
    if (HasUnauthorizedRequestCount) hash ^= UnauthorizedRequestCount.GetHashCode();
    if (unregisterNodesCount_ != null) hash ^= UnregisterNodesCount.GetHashCode();
    if (writeCount_ != null) hash ^= WriteCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasActualSessionTimeout) {
      output.WriteRawTag(9);
      output.WriteDouble(ActualSessionTimeout);
    }
    if (addNodesCount_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AddNodesCount);
    }
    if (addReferencesCount_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(AddReferencesCount);
    }
    if (browseCount_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(BrowseCount);
    }
    if (browseNextCount_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(BrowseNextCount);
    }
    if (callCount_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(CallCount);
    }
    if (HasClientConnectionTime) {
      output.WriteRawTag(56);
      output.WriteInt64(ClientConnectionTime);
    }
    if (clientDescription_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(ClientDescription);
    }
    if (HasClientLastContactTime) {
      output.WriteRawTag(72);
      output.WriteInt64(ClientLastContactTime);
    }
    if (createMonitoredItemsCount_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(CreateMonitoredItemsCount);
    }
    if (createSubscriptionCount_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(CreateSubscriptionCount);
    }
    if (HasCurrentMonitoredItemsCount) {
      output.WriteRawTag(96);
      output.WriteUInt32(CurrentMonitoredItemsCount);
    }
    if (HasCurrentPublishRequestsInQueue) {
      output.WriteRawTag(104);
      output.WriteUInt32(CurrentPublishRequestsInQueue);
    }
    if (HasCurrentSubscriptionsCount) {
      output.WriteRawTag(112);
      output.WriteUInt32(CurrentSubscriptionsCount);
    }
    if (deleteMonitoredItemsCount_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(DeleteMonitoredItemsCount);
    }
    if (deleteNodesCount_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(DeleteNodesCount);
    }
    if (deleteReferencesCount_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(DeleteReferencesCount);
    }
    if (deleteSubscriptionsCount_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(DeleteSubscriptionsCount);
    }
    if (HasEndpointUrl) {
      output.WriteRawTag(154, 1);
      output.WriteString(EndpointUrl);
    }
    if (historyReadCount_ != null) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(HistoryReadCount);
    }
    if (historyUpdateCount_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(HistoryUpdateCount);
    }
    if (localeIds_ != null) {
      output.WriteRawTag(178, 1);
      output.WriteMessage(LocaleIds);
    }
    if (HasMaxResponseMessageSize) {
      output.WriteRawTag(184, 1);
      output.WriteUInt32(MaxResponseMessageSize);
    }
    if (modifyMonitoredItemsCount_ != null) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(ModifyMonitoredItemsCount);
    }
    if (modifySubscriptionCount_ != null) {
      output.WriteRawTag(202, 1);
      output.WriteMessage(ModifySubscriptionCount);
    }
    if (publishCount_ != null) {
      output.WriteRawTag(210, 1);
      output.WriteMessage(PublishCount);
    }
    if (queryFirstCount_ != null) {
      output.WriteRawTag(218, 1);
      output.WriteMessage(QueryFirstCount);
    }
    if (queryNextCount_ != null) {
      output.WriteRawTag(226, 1);
      output.WriteMessage(QueryNextCount);
    }
    if (readCount_ != null) {
      output.WriteRawTag(234, 1);
      output.WriteMessage(ReadCount);
    }
    if (registerNodesCount_ != null) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(RegisterNodesCount);
    }
    if (republishCount_ != null) {
      output.WriteRawTag(250, 1);
      output.WriteMessage(RepublishCount);
    }
    if (HasServerUri) {
      output.WriteRawTag(130, 2);
      output.WriteString(ServerUri);
    }
    if (sessionId_ != null) {
      output.WriteRawTag(138, 2);
      output.WriteMessage(SessionId);
    }
    if (HasSessionName) {
      output.WriteRawTag(146, 2);
      output.WriteString(SessionName);
    }
    if (setMonitoringModeCount_ != null) {
      output.WriteRawTag(154, 2);
      output.WriteMessage(SetMonitoringModeCount);
    }
    if (setPublishingModeCount_ != null) {
      output.WriteRawTag(162, 2);
      output.WriteMessage(SetPublishingModeCount);
    }
    if (setTriggeringCount_ != null) {
      output.WriteRawTag(170, 2);
      output.WriteMessage(SetTriggeringCount);
    }
    if (totalRequestCount_ != null) {
      output.WriteRawTag(178, 2);
      output.WriteMessage(TotalRequestCount);
    }
    if (transferSubscriptionsCount_ != null) {
      output.WriteRawTag(186, 2);
      output.WriteMessage(TransferSubscriptionsCount);
    }
    if (translateBrowsePathsToNodeIdsCount_ != null) {
      output.WriteRawTag(194, 2);
      output.WriteMessage(TranslateBrowsePathsToNodeIdsCount);
    }
    if (HasUnauthorizedRequestCount) {
      output.WriteRawTag(200, 2);
      output.WriteUInt32(UnauthorizedRequestCount);
    }
    if (unregisterNodesCount_ != null) {
      output.WriteRawTag(210, 2);
      output.WriteMessage(UnregisterNodesCount);
    }
    if (writeCount_ != null) {
      output.WriteRawTag(218, 2);
      output.WriteMessage(WriteCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasActualSessionTimeout) {
      size += 1 + 8;
    }
    if (addNodesCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddNodesCount);
    }
    if (addReferencesCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddReferencesCount);
    }
    if (browseCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseCount);
    }
    if (browseNextCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseNextCount);
    }
    if (callCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallCount);
    }
    if (HasClientConnectionTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientConnectionTime);
    }
    if (clientDescription_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientDescription);
    }
    if (HasClientLastContactTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientLastContactTime);
    }
    if (createMonitoredItemsCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateMonitoredItemsCount);
    }
    if (createSubscriptionCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateSubscriptionCount);
    }
    if (HasCurrentMonitoredItemsCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentMonitoredItemsCount);
    }
    if (HasCurrentPublishRequestsInQueue) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPublishRequestsInQueue);
    }
    if (HasCurrentSubscriptionsCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentSubscriptionsCount);
    }
    if (deleteMonitoredItemsCount_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteMonitoredItemsCount);
    }
    if (deleteNodesCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeleteNodesCount);
    }
    if (deleteReferencesCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeleteReferencesCount);
    }
    if (deleteSubscriptionsCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeleteSubscriptionsCount);
    }
    if (HasEndpointUrl) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(EndpointUrl);
    }
    if (historyReadCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HistoryReadCount);
    }
    if (historyUpdateCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HistoryUpdateCount);
    }
    if (localeIds_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocaleIds);
    }
    if (HasMaxResponseMessageSize) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxResponseMessageSize);
    }
    if (modifyMonitoredItemsCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModifyMonitoredItemsCount);
    }
    if (modifySubscriptionCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModifySubscriptionCount);
    }
    if (publishCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PublishCount);
    }
    if (queryFirstCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(QueryFirstCount);
    }
    if (queryNextCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(QueryNextCount);
    }
    if (readCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReadCount);
    }
    if (registerNodesCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegisterNodesCount);
    }
    if (republishCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RepublishCount);
    }
    if (HasServerUri) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ServerUri);
    }
    if (sessionId_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SessionId);
    }
    if (HasSessionName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SessionName);
    }
    if (setMonitoringModeCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetMonitoringModeCount);
    }
    if (setPublishingModeCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetPublishingModeCount);
    }
    if (setTriggeringCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetTriggeringCount);
    }
    if (totalRequestCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TotalRequestCount);
    }
    if (transferSubscriptionsCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransferSubscriptionsCount);
    }
    if (translateBrowsePathsToNodeIdsCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranslateBrowsePathsToNodeIdsCount);
    }
    if (HasUnauthorizedRequestCount) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnauthorizedRequestCount);
    }
    if (unregisterNodesCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnregisterNodesCount);
    }
    if (writeCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(WriteCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasActualSessionTimeout) {
      ActualSessionTimeout = other.ActualSessionTimeout;
    }
    if (other.addNodesCount_ != null) {
      if (addNodesCount_ == null) {
        AddNodesCount = new global::ServiceCounterDataType();
      }
      AddNodesCount.MergeFrom(other.AddNodesCount);
    }
    if (other.addReferencesCount_ != null) {
      if (addReferencesCount_ == null) {
        AddReferencesCount = new global::ServiceCounterDataType();
      }
      AddReferencesCount.MergeFrom(other.AddReferencesCount);
    }
    if (other.browseCount_ != null) {
      if (browseCount_ == null) {
        BrowseCount = new global::ServiceCounterDataType();
      }
      BrowseCount.MergeFrom(other.BrowseCount);
    }
    if (other.browseNextCount_ != null) {
      if (browseNextCount_ == null) {
        BrowseNextCount = new global::ServiceCounterDataType();
      }
      BrowseNextCount.MergeFrom(other.BrowseNextCount);
    }
    if (other.callCount_ != null) {
      if (callCount_ == null) {
        CallCount = new global::ServiceCounterDataType();
      }
      CallCount.MergeFrom(other.CallCount);
    }
    if (other.HasClientConnectionTime) {
      ClientConnectionTime = other.ClientConnectionTime;
    }
    if (other.clientDescription_ != null) {
      if (clientDescription_ == null) {
        ClientDescription = new global::ApplicationDescription();
      }
      ClientDescription.MergeFrom(other.ClientDescription);
    }
    if (other.HasClientLastContactTime) {
      ClientLastContactTime = other.ClientLastContactTime;
    }
    if (other.createMonitoredItemsCount_ != null) {
      if (createMonitoredItemsCount_ == null) {
        CreateMonitoredItemsCount = new global::ServiceCounterDataType();
      }
      CreateMonitoredItemsCount.MergeFrom(other.CreateMonitoredItemsCount);
    }
    if (other.createSubscriptionCount_ != null) {
      if (createSubscriptionCount_ == null) {
        CreateSubscriptionCount = new global::ServiceCounterDataType();
      }
      CreateSubscriptionCount.MergeFrom(other.CreateSubscriptionCount);
    }
    if (other.HasCurrentMonitoredItemsCount) {
      CurrentMonitoredItemsCount = other.CurrentMonitoredItemsCount;
    }
    if (other.HasCurrentPublishRequestsInQueue) {
      CurrentPublishRequestsInQueue = other.CurrentPublishRequestsInQueue;
    }
    if (other.HasCurrentSubscriptionsCount) {
      CurrentSubscriptionsCount = other.CurrentSubscriptionsCount;
    }
    if (other.deleteMonitoredItemsCount_ != null) {
      if (deleteMonitoredItemsCount_ == null) {
        DeleteMonitoredItemsCount = new global::ServiceCounterDataType();
      }
      DeleteMonitoredItemsCount.MergeFrom(other.DeleteMonitoredItemsCount);
    }
    if (other.deleteNodesCount_ != null) {
      if (deleteNodesCount_ == null) {
        DeleteNodesCount = new global::ServiceCounterDataType();
      }
      DeleteNodesCount.MergeFrom(other.DeleteNodesCount);
    }
    if (other.deleteReferencesCount_ != null) {
      if (deleteReferencesCount_ == null) {
        DeleteReferencesCount = new global::ServiceCounterDataType();
      }
      DeleteReferencesCount.MergeFrom(other.DeleteReferencesCount);
    }
    if (other.deleteSubscriptionsCount_ != null) {
      if (deleteSubscriptionsCount_ == null) {
        DeleteSubscriptionsCount = new global::ServiceCounterDataType();
      }
      DeleteSubscriptionsCount.MergeFrom(other.DeleteSubscriptionsCount);
    }
    if (other.HasEndpointUrl) {
      EndpointUrl = other.EndpointUrl;
    }
    if (other.historyReadCount_ != null) {
      if (historyReadCount_ == null) {
        HistoryReadCount = new global::ServiceCounterDataType();
      }
      HistoryReadCount.MergeFrom(other.HistoryReadCount);
    }
    if (other.historyUpdateCount_ != null) {
      if (historyUpdateCount_ == null) {
        HistoryUpdateCount = new global::ServiceCounterDataType();
      }
      HistoryUpdateCount.MergeFrom(other.HistoryUpdateCount);
    }
    if (other.localeIds_ != null) {
      if (localeIds_ == null) {
        LocaleIds = new global::ListOfString();
      }
      LocaleIds.MergeFrom(other.LocaleIds);
    }
    if (other.HasMaxResponseMessageSize) {
      MaxResponseMessageSize = other.MaxResponseMessageSize;
    }
    if (other.modifyMonitoredItemsCount_ != null) {
      if (modifyMonitoredItemsCount_ == null) {
        ModifyMonitoredItemsCount = new global::ServiceCounterDataType();
      }
      ModifyMonitoredItemsCount.MergeFrom(other.ModifyMonitoredItemsCount);
    }
    if (other.modifySubscriptionCount_ != null) {
      if (modifySubscriptionCount_ == null) {
        ModifySubscriptionCount = new global::ServiceCounterDataType();
      }
      ModifySubscriptionCount.MergeFrom(other.ModifySubscriptionCount);
    }
    if (other.publishCount_ != null) {
      if (publishCount_ == null) {
        PublishCount = new global::ServiceCounterDataType();
      }
      PublishCount.MergeFrom(other.PublishCount);
    }
    if (other.queryFirstCount_ != null) {
      if (queryFirstCount_ == null) {
        QueryFirstCount = new global::ServiceCounterDataType();
      }
      QueryFirstCount.MergeFrom(other.QueryFirstCount);
    }
    if (other.queryNextCount_ != null) {
      if (queryNextCount_ == null) {
        QueryNextCount = new global::ServiceCounterDataType();
      }
      QueryNextCount.MergeFrom(other.QueryNextCount);
    }
    if (other.readCount_ != null) {
      if (readCount_ == null) {
        ReadCount = new global::ServiceCounterDataType();
      }
      ReadCount.MergeFrom(other.ReadCount);
    }
    if (other.registerNodesCount_ != null) {
      if (registerNodesCount_ == null) {
        RegisterNodesCount = new global::ServiceCounterDataType();
      }
      RegisterNodesCount.MergeFrom(other.RegisterNodesCount);
    }
    if (other.republishCount_ != null) {
      if (republishCount_ == null) {
        RepublishCount = new global::ServiceCounterDataType();
      }
      RepublishCount.MergeFrom(other.RepublishCount);
    }
    if (other.HasServerUri) {
      ServerUri = other.ServerUri;
    }
    if (other.sessionId_ != null) {
      if (sessionId_ == null) {
        SessionId = new global::NodeId();
      }
      SessionId.MergeFrom(other.SessionId);
    }
    if (other.HasSessionName) {
      SessionName = other.SessionName;
    }
    if (other.setMonitoringModeCount_ != null) {
      if (setMonitoringModeCount_ == null) {
        SetMonitoringModeCount = new global::ServiceCounterDataType();
      }
      SetMonitoringModeCount.MergeFrom(other.SetMonitoringModeCount);
    }
    if (other.setPublishingModeCount_ != null) {
      if (setPublishingModeCount_ == null) {
        SetPublishingModeCount = new global::ServiceCounterDataType();
      }
      SetPublishingModeCount.MergeFrom(other.SetPublishingModeCount);
    }
    if (other.setTriggeringCount_ != null) {
      if (setTriggeringCount_ == null) {
        SetTriggeringCount = new global::ServiceCounterDataType();
      }
      SetTriggeringCount.MergeFrom(other.SetTriggeringCount);
    }
    if (other.totalRequestCount_ != null) {
      if (totalRequestCount_ == null) {
        TotalRequestCount = new global::ServiceCounterDataType();
      }
      TotalRequestCount.MergeFrom(other.TotalRequestCount);
    }
    if (other.transferSubscriptionsCount_ != null) {
      if (transferSubscriptionsCount_ == null) {
        TransferSubscriptionsCount = new global::ServiceCounterDataType();
      }
      TransferSubscriptionsCount.MergeFrom(other.TransferSubscriptionsCount);
    }
    if (other.translateBrowsePathsToNodeIdsCount_ != null) {
      if (translateBrowsePathsToNodeIdsCount_ == null) {
        TranslateBrowsePathsToNodeIdsCount = new global::ServiceCounterDataType();
      }
      TranslateBrowsePathsToNodeIdsCount.MergeFrom(other.TranslateBrowsePathsToNodeIdsCount);
    }
    if (other.HasUnauthorizedRequestCount) {
      UnauthorizedRequestCount = other.UnauthorizedRequestCount;
    }
    if (other.unregisterNodesCount_ != null) {
      if (unregisterNodesCount_ == null) {
        UnregisterNodesCount = new global::ServiceCounterDataType();
      }
      UnregisterNodesCount.MergeFrom(other.UnregisterNodesCount);
    }
    if (other.writeCount_ != null) {
      if (writeCount_ == null) {
        WriteCount = new global::ServiceCounterDataType();
      }
      WriteCount.MergeFrom(other.WriteCount);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          ActualSessionTimeout = input.ReadDouble();
          break;
        }
        case 18: {
          if (addNodesCount_ == null) {
            AddNodesCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(AddNodesCount);
          break;
        }
        case 26: {
          if (addReferencesCount_ == null) {
            AddReferencesCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(AddReferencesCount);
          break;
        }
        case 34: {
          if (browseCount_ == null) {
            BrowseCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(BrowseCount);
          break;
        }
        case 42: {
          if (browseNextCount_ == null) {
            BrowseNextCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(BrowseNextCount);
          break;
        }
        case 50: {
          if (callCount_ == null) {
            CallCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(CallCount);
          break;
        }
        case 56: {
          ClientConnectionTime = input.ReadInt64();
          break;
        }
        case 66: {
          if (clientDescription_ == null) {
            ClientDescription = new global::ApplicationDescription();
          }
          input.ReadMessage(ClientDescription);
          break;
        }
        case 72: {
          ClientLastContactTime = input.ReadInt64();
          break;
        }
        case 82: {
          if (createMonitoredItemsCount_ == null) {
            CreateMonitoredItemsCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(CreateMonitoredItemsCount);
          break;
        }
        case 90: {
          if (createSubscriptionCount_ == null) {
            CreateSubscriptionCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(CreateSubscriptionCount);
          break;
        }
        case 96: {
          CurrentMonitoredItemsCount = input.ReadUInt32();
          break;
        }
        case 104: {
          CurrentPublishRequestsInQueue = input.ReadUInt32();
          break;
        }
        case 112: {
          CurrentSubscriptionsCount = input.ReadUInt32();
          break;
        }
        case 122: {
          if (deleteMonitoredItemsCount_ == null) {
            DeleteMonitoredItemsCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(DeleteMonitoredItemsCount);
          break;
        }
        case 130: {
          if (deleteNodesCount_ == null) {
            DeleteNodesCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(DeleteNodesCount);
          break;
        }
        case 138: {
          if (deleteReferencesCount_ == null) {
            DeleteReferencesCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(DeleteReferencesCount);
          break;
        }
        case 146: {
          if (deleteSubscriptionsCount_ == null) {
            DeleteSubscriptionsCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(DeleteSubscriptionsCount);
          break;
        }
        case 154: {
          EndpointUrl = input.ReadString();
          break;
        }
        case 162: {
          if (historyReadCount_ == null) {
            HistoryReadCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(HistoryReadCount);
          break;
        }
        case 170: {
          if (historyUpdateCount_ == null) {
            HistoryUpdateCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(HistoryUpdateCount);
          break;
        }
        case 178: {
          if (localeIds_ == null) {
            LocaleIds = new global::ListOfString();
          }
          input.ReadMessage(LocaleIds);
          break;
        }
        case 184: {
          MaxResponseMessageSize = input.ReadUInt32();
          break;
        }
        case 194: {
          if (modifyMonitoredItemsCount_ == null) {
            ModifyMonitoredItemsCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(ModifyMonitoredItemsCount);
          break;
        }
        case 202: {
          if (modifySubscriptionCount_ == null) {
            ModifySubscriptionCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(ModifySubscriptionCount);
          break;
        }
        case 210: {
          if (publishCount_ == null) {
            PublishCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(PublishCount);
          break;
        }
        case 218: {
          if (queryFirstCount_ == null) {
            QueryFirstCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(QueryFirstCount);
          break;
        }
        case 226: {
          if (queryNextCount_ == null) {
            QueryNextCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(QueryNextCount);
          break;
        }
        case 234: {
          if (readCount_ == null) {
            ReadCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(ReadCount);
          break;
        }
        case 242: {
          if (registerNodesCount_ == null) {
            RegisterNodesCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(RegisterNodesCount);
          break;
        }
        case 250: {
          if (republishCount_ == null) {
            RepublishCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(RepublishCount);
          break;
        }
        case 258: {
          ServerUri = input.ReadString();
          break;
        }
        case 266: {
          if (sessionId_ == null) {
            SessionId = new global::NodeId();
          }
          input.ReadMessage(SessionId);
          break;
        }
        case 274: {
          SessionName = input.ReadString();
          break;
        }
        case 282: {
          if (setMonitoringModeCount_ == null) {
            SetMonitoringModeCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(SetMonitoringModeCount);
          break;
        }
        case 290: {
          if (setPublishingModeCount_ == null) {
            SetPublishingModeCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(SetPublishingModeCount);
          break;
        }
        case 298: {
          if (setTriggeringCount_ == null) {
            SetTriggeringCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(SetTriggeringCount);
          break;
        }
        case 306: {
          if (totalRequestCount_ == null) {
            TotalRequestCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(TotalRequestCount);
          break;
        }
        case 314: {
          if (transferSubscriptionsCount_ == null) {
            TransferSubscriptionsCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(TransferSubscriptionsCount);
          break;
        }
        case 322: {
          if (translateBrowsePathsToNodeIdsCount_ == null) {
            TranslateBrowsePathsToNodeIdsCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(TranslateBrowsePathsToNodeIdsCount);
          break;
        }
        case 328: {
          UnauthorizedRequestCount = input.ReadUInt32();
          break;
        }
        case 338: {
          if (unregisterNodesCount_ == null) {
            UnregisterNodesCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(UnregisterNodesCount);
          break;
        }
        case 346: {
          if (writeCount_ == null) {
            WriteCount = new global::ServiceCounterDataType();
          }
          input.ReadMessage(WriteCount);
          break;
        }
      }
    }
  }

}

public sealed partial class SetMonitoringModeRequest : pb::IMessage<SetMonitoringModeRequest> {
  private static readonly pb::MessageParser<SetMonitoringModeRequest> _parser = new pb::MessageParser<SetMonitoringModeRequest>(() => new SetMonitoringModeRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetMonitoringModeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[276]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetMonitoringModeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetMonitoringModeRequest(SetMonitoringModeRequest other) : this() {
    _hasBits0 = other._hasBits0;
    monitoredItemIds_ = other.monitoredItemIds_ != null ? other.monitoredItemIds_.Clone() : null;
    MonitoringMode_ = other.MonitoringMode_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionId_ = other.subscriptionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetMonitoringModeRequest Clone() {
    return new SetMonitoringModeRequest(this);
  }

  /// <summary>Field number for the "MonitoredItemIds" field.</summary>
  public const int MonitoredItemIdsFieldNumber = 1;
  private global::ListOfUInt32 monitoredItemIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 MonitoredItemIds {
    get { return monitoredItemIds_; }
    set {
      monitoredItemIds_ = value;
    }
  }

  /// <summary>Field number for the "_MonitoringMode" field.</summary>
  public const int MonitoringModeFieldNumber = 2;
  private readonly static global::SetMonitoringModeRequest.Types.MonitoringMode MonitoringModeDefaultValue = global::SetMonitoringModeRequest.Types.MonitoringMode.Disabled0;

  private global::SetMonitoringModeRequest.Types.MonitoringMode MonitoringMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SetMonitoringModeRequest.Types.MonitoringMode MonitoringMode {
    get { if ((_hasBits0 & 1) != 0) { return MonitoringMode_; } else { return MonitoringModeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      MonitoringMode_ = value;
    }
  }
  /// <summary>Gets whether the "_MonitoringMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMonitoringMode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_MonitoringMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMonitoringMode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 4;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 2) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetMonitoringModeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetMonitoringModeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MonitoredItemIds, other.MonitoredItemIds)) return false;
    if (MonitoringMode != other.MonitoringMode) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (monitoredItemIds_ != null) hash ^= MonitoredItemIds.GetHashCode();
    if (HasMonitoringMode) hash ^= MonitoringMode.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (monitoredItemIds_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MonitoredItemIds);
    }
    if (HasMonitoringMode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MonitoringMode);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(32);
      output.WriteUInt32(SubscriptionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (monitoredItemIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonitoredItemIds);
    }
    if (HasMonitoringMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MonitoringMode);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetMonitoringModeRequest other) {
    if (other == null) {
      return;
    }
    if (other.monitoredItemIds_ != null) {
      if (monitoredItemIds_ == null) {
        MonitoredItemIds = new global::ListOfUInt32();
      }
      MonitoredItemIds.MergeFrom(other.MonitoredItemIds);
    }
    if (other.HasMonitoringMode) {
      MonitoringMode = other.MonitoringMode;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (monitoredItemIds_ == null) {
            MonitoredItemIds = new global::ListOfUInt32();
          }
          input.ReadMessage(MonitoredItemIds);
          break;
        }
        case 16: {
          MonitoringMode = (global::SetMonitoringModeRequest.Types.MonitoringMode) input.ReadEnum();
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 32: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the SetMonitoringModeRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MonitoringMode {
      [pbr::OriginalName("MonitoringMode_Disabled_0")] Disabled0 = 1,
      [pbr::OriginalName("MonitoringMode_Reporting_2")] Reporting2 = 2,
      [pbr::OriginalName("MonitoringMode_Sampling_1")] Sampling1 = 3,
    }

  }
  #endregion

}

public sealed partial class SetMonitoringModeResponse : pb::IMessage<SetMonitoringModeResponse> {
  private static readonly pb::MessageParser<SetMonitoringModeResponse> _parser = new pb::MessageParser<SetMonitoringModeResponse>(() => new SetMonitoringModeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetMonitoringModeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[277]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetMonitoringModeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetMonitoringModeResponse(SetMonitoringModeResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetMonitoringModeResponse Clone() {
    return new SetMonitoringModeResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetMonitoringModeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetMonitoringModeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetMonitoringModeResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class SetPublishingModeRequest : pb::IMessage<SetPublishingModeRequest> {
  private static readonly pb::MessageParser<SetPublishingModeRequest> _parser = new pb::MessageParser<SetPublishingModeRequest>(() => new SetPublishingModeRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetPublishingModeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[278]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetPublishingModeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetPublishingModeRequest(SetPublishingModeRequest other) : this() {
    _hasBits0 = other._hasBits0;
    publishingEnabled_ = other.publishingEnabled_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionIds_ = other.subscriptionIds_ != null ? other.subscriptionIds_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetPublishingModeRequest Clone() {
    return new SetPublishingModeRequest(this);
  }

  /// <summary>Field number for the "PublishingEnabled" field.</summary>
  public const int PublishingEnabledFieldNumber = 1;
  private readonly static bool PublishingEnabledDefaultValue = false;

  private bool publishingEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PublishingEnabled {
    get { if ((_hasBits0 & 1) != 0) { return publishingEnabled_; } else { return PublishingEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      publishingEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingEnabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "PublishingEnabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionIds" field.</summary>
  public const int SubscriptionIdsFieldNumber = 3;
  private global::ListOfUInt32 subscriptionIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 SubscriptionIds {
    get { return subscriptionIds_; }
    set {
      subscriptionIds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetPublishingModeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetPublishingModeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PublishingEnabled != other.PublishingEnabled) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(SubscriptionIds, other.SubscriptionIds)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPublishingEnabled) hash ^= PublishingEnabled.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (subscriptionIds_ != null) hash ^= SubscriptionIds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPublishingEnabled) {
      output.WriteRawTag(8);
      output.WriteBool(PublishingEnabled);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (subscriptionIds_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SubscriptionIds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPublishingEnabled) {
      size += 1 + 1;
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (subscriptionIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscriptionIds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetPublishingModeRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasPublishingEnabled) {
      PublishingEnabled = other.PublishingEnabled;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.subscriptionIds_ != null) {
      if (subscriptionIds_ == null) {
        SubscriptionIds = new global::ListOfUInt32();
      }
      SubscriptionIds.MergeFrom(other.SubscriptionIds);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PublishingEnabled = input.ReadBool();
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 26: {
          if (subscriptionIds_ == null) {
            SubscriptionIds = new global::ListOfUInt32();
          }
          input.ReadMessage(SubscriptionIds);
          break;
        }
      }
    }
  }

}

public sealed partial class SetPublishingModeResponse : pb::IMessage<SetPublishingModeResponse> {
  private static readonly pb::MessageParser<SetPublishingModeResponse> _parser = new pb::MessageParser<SetPublishingModeResponse>(() => new SetPublishingModeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetPublishingModeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[279]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetPublishingModeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetPublishingModeResponse(SetPublishingModeResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetPublishingModeResponse Clone() {
    return new SetPublishingModeResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetPublishingModeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetPublishingModeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetPublishingModeResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class SetTriggeringRequest : pb::IMessage<SetTriggeringRequest> {
  private static readonly pb::MessageParser<SetTriggeringRequest> _parser = new pb::MessageParser<SetTriggeringRequest>(() => new SetTriggeringRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetTriggeringRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[280]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetTriggeringRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetTriggeringRequest(SetTriggeringRequest other) : this() {
    _hasBits0 = other._hasBits0;
    linksToAdd_ = other.linksToAdd_ != null ? other.linksToAdd_.Clone() : null;
    linksToRemove_ = other.linksToRemove_ != null ? other.linksToRemove_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionId_ = other.subscriptionId_;
    triggeringItemId_ = other.triggeringItemId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetTriggeringRequest Clone() {
    return new SetTriggeringRequest(this);
  }

  /// <summary>Field number for the "LinksToAdd" field.</summary>
  public const int LinksToAddFieldNumber = 1;
  private global::ListOfUInt32 linksToAdd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 LinksToAdd {
    get { return linksToAdd_; }
    set {
      linksToAdd_ = value;
    }
  }

  /// <summary>Field number for the "LinksToRemove" field.</summary>
  public const int LinksToRemoveFieldNumber = 2;
  private global::ListOfUInt32 linksToRemove_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 LinksToRemove {
    get { return linksToRemove_; }
    set {
      linksToRemove_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 4;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 1) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "TriggeringItemId" field.</summary>
  public const int TriggeringItemIdFieldNumber = 5;
  private readonly static uint TriggeringItemIdDefaultValue = 0;

  private uint triggeringItemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TriggeringItemId {
    get { if ((_hasBits0 & 2) != 0) { return triggeringItemId_; } else { return TriggeringItemIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      triggeringItemId_ = value;
    }
  }
  /// <summary>Gets whether the "TriggeringItemId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTriggeringItemId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "TriggeringItemId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTriggeringItemId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetTriggeringRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetTriggeringRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LinksToAdd, other.LinksToAdd)) return false;
    if (!object.Equals(LinksToRemove, other.LinksToRemove)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    if (TriggeringItemId != other.TriggeringItemId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (linksToAdd_ != null) hash ^= LinksToAdd.GetHashCode();
    if (linksToRemove_ != null) hash ^= LinksToRemove.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (HasTriggeringItemId) hash ^= TriggeringItemId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (linksToAdd_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(LinksToAdd);
    }
    if (linksToRemove_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(LinksToRemove);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(32);
      output.WriteUInt32(SubscriptionId);
    }
    if (HasTriggeringItemId) {
      output.WriteRawTag(40);
      output.WriteUInt32(TriggeringItemId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (linksToAdd_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinksToAdd);
    }
    if (linksToRemove_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinksToRemove);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (HasTriggeringItemId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TriggeringItemId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetTriggeringRequest other) {
    if (other == null) {
      return;
    }
    if (other.linksToAdd_ != null) {
      if (linksToAdd_ == null) {
        LinksToAdd = new global::ListOfUInt32();
      }
      LinksToAdd.MergeFrom(other.LinksToAdd);
    }
    if (other.linksToRemove_ != null) {
      if (linksToRemove_ == null) {
        LinksToRemove = new global::ListOfUInt32();
      }
      LinksToRemove.MergeFrom(other.LinksToRemove);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    if (other.HasTriggeringItemId) {
      TriggeringItemId = other.TriggeringItemId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (linksToAdd_ == null) {
            LinksToAdd = new global::ListOfUInt32();
          }
          input.ReadMessage(LinksToAdd);
          break;
        }
        case 18: {
          if (linksToRemove_ == null) {
            LinksToRemove = new global::ListOfUInt32();
          }
          input.ReadMessage(LinksToRemove);
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 32: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
        case 40: {
          TriggeringItemId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SetTriggeringResponse : pb::IMessage<SetTriggeringResponse> {
  private static readonly pb::MessageParser<SetTriggeringResponse> _parser = new pb::MessageParser<SetTriggeringResponse>(() => new SetTriggeringResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetTriggeringResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[281]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetTriggeringResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetTriggeringResponse(SetTriggeringResponse other) : this() {
    addDiagnosticInfos_ = other.addDiagnosticInfos_ != null ? other.addDiagnosticInfos_.Clone() : null;
    addResults_ = other.addResults_ != null ? other.addResults_.Clone() : null;
    removeDiagnosticInfos_ = other.removeDiagnosticInfos_ != null ? other.removeDiagnosticInfos_.Clone() : null;
    removeResults_ = other.removeResults_ != null ? other.removeResults_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetTriggeringResponse Clone() {
    return new SetTriggeringResponse(this);
  }

  /// <summary>Field number for the "AddDiagnosticInfos" field.</summary>
  public const int AddDiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo addDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo AddDiagnosticInfos {
    get { return addDiagnosticInfos_; }
    set {
      addDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "AddResults" field.</summary>
  public const int AddResultsFieldNumber = 2;
  private global::ListOfStatusCode addResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode AddResults {
    get { return addResults_; }
    set {
      addResults_ = value;
    }
  }

  /// <summary>Field number for the "RemoveDiagnosticInfos" field.</summary>
  public const int RemoveDiagnosticInfosFieldNumber = 3;
  private global::ListOfDiagnosticInfo removeDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo RemoveDiagnosticInfos {
    get { return removeDiagnosticInfos_; }
    set {
      removeDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "RemoveResults" field.</summary>
  public const int RemoveResultsFieldNumber = 4;
  private global::ListOfStatusCode removeResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode RemoveResults {
    get { return removeResults_; }
    set {
      removeResults_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 5;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetTriggeringResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetTriggeringResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AddDiagnosticInfos, other.AddDiagnosticInfos)) return false;
    if (!object.Equals(AddResults, other.AddResults)) return false;
    if (!object.Equals(RemoveDiagnosticInfos, other.RemoveDiagnosticInfos)) return false;
    if (!object.Equals(RemoveResults, other.RemoveResults)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (addDiagnosticInfos_ != null) hash ^= AddDiagnosticInfos.GetHashCode();
    if (addResults_ != null) hash ^= AddResults.GetHashCode();
    if (removeDiagnosticInfos_ != null) hash ^= RemoveDiagnosticInfos.GetHashCode();
    if (removeResults_ != null) hash ^= RemoveResults.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (addDiagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AddDiagnosticInfos);
    }
    if (addResults_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AddResults);
    }
    if (removeDiagnosticInfos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RemoveDiagnosticInfos);
    }
    if (removeResults_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(RemoveResults);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (addDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddDiagnosticInfos);
    }
    if (addResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddResults);
    }
    if (removeDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveDiagnosticInfos);
    }
    if (removeResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveResults);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetTriggeringResponse other) {
    if (other == null) {
      return;
    }
    if (other.addDiagnosticInfos_ != null) {
      if (addDiagnosticInfos_ == null) {
        AddDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      AddDiagnosticInfos.MergeFrom(other.AddDiagnosticInfos);
    }
    if (other.addResults_ != null) {
      if (addResults_ == null) {
        AddResults = new global::ListOfStatusCode();
      }
      AddResults.MergeFrom(other.AddResults);
    }
    if (other.removeDiagnosticInfos_ != null) {
      if (removeDiagnosticInfos_ == null) {
        RemoveDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      RemoveDiagnosticInfos.MergeFrom(other.RemoveDiagnosticInfos);
    }
    if (other.removeResults_ != null) {
      if (removeResults_ == null) {
        RemoveResults = new global::ListOfStatusCode();
      }
      RemoveResults.MergeFrom(other.RemoveResults);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (addDiagnosticInfos_ == null) {
            AddDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(AddDiagnosticInfos);
          break;
        }
        case 18: {
          if (addResults_ == null) {
            AddResults = new global::ListOfStatusCode();
          }
          input.ReadMessage(AddResults);
          break;
        }
        case 26: {
          if (removeDiagnosticInfos_ == null) {
            RemoveDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(RemoveDiagnosticInfos);
          break;
        }
        case 34: {
          if (removeResults_ == null) {
            RemoveResults = new global::ListOfStatusCode();
          }
          input.ReadMessage(RemoveResults);
          break;
        }
        case 42: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class SimpleAttributeOperand : pb::IMessage<SimpleAttributeOperand> {
  private static readonly pb::MessageParser<SimpleAttributeOperand> _parser = new pb::MessageParser<SimpleAttributeOperand>(() => new SimpleAttributeOperand());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SimpleAttributeOperand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[282]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SimpleAttributeOperand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SimpleAttributeOperand(SimpleAttributeOperand other) : this() {
    _hasBits0 = other._hasBits0;
    attributeId_ = other.attributeId_;
    browsePath_ = other.browsePath_ != null ? other.browsePath_.Clone() : null;
    indexRange_ = other.indexRange_;
    typeDefinitionId_ = other.typeDefinitionId_ != null ? other.typeDefinitionId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SimpleAttributeOperand Clone() {
    return new SimpleAttributeOperand(this);
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 1;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowsePath" field.</summary>
  public const int BrowsePathFieldNumber = 2;
  private global::ListOfQualifiedName browsePath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfQualifiedName BrowsePath {
    get { return browsePath_; }
    set {
      browsePath_ = value;
    }
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 3;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "TypeDefinitionId" field.</summary>
  public const int TypeDefinitionIdFieldNumber = 4;
  private global::NodeId typeDefinitionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId TypeDefinitionId {
    get { return typeDefinitionId_; }
    set {
      typeDefinitionId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SimpleAttributeOperand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SimpleAttributeOperand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttributeId != other.AttributeId) return false;
    if (!object.Equals(BrowsePath, other.BrowsePath)) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(TypeDefinitionId, other.TypeDefinitionId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (browsePath_ != null) hash ^= BrowsePath.GetHashCode();
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (typeDefinitionId_ != null) hash ^= TypeDefinitionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAttributeId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AttributeId);
    }
    if (browsePath_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(BrowsePath);
    }
    if (HasIndexRange) {
      output.WriteRawTag(26);
      output.WriteString(IndexRange);
    }
    if (typeDefinitionId_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(TypeDefinitionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (browsePath_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowsePath);
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (typeDefinitionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeDefinitionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SimpleAttributeOperand other) {
    if (other == null) {
      return;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.browsePath_ != null) {
      if (browsePath_ == null) {
        BrowsePath = new global::ListOfQualifiedName();
      }
      BrowsePath.MergeFrom(other.BrowsePath);
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.typeDefinitionId_ != null) {
      if (typeDefinitionId_ == null) {
        TypeDefinitionId = new global::NodeId();
      }
      TypeDefinitionId.MergeFrom(other.TypeDefinitionId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (browsePath_ == null) {
            BrowsePath = new global::ListOfQualifiedName();
          }
          input.ReadMessage(BrowsePath);
          break;
        }
        case 26: {
          IndexRange = input.ReadString();
          break;
        }
        case 34: {
          if (typeDefinitionId_ == null) {
            TypeDefinitionId = new global::NodeId();
          }
          input.ReadMessage(TypeDefinitionId);
          break;
        }
      }
    }
  }

}

public sealed partial class StatusChangeNotification : pb::IMessage<StatusChangeNotification> {
  private static readonly pb::MessageParser<StatusChangeNotification> _parser = new pb::MessageParser<StatusChangeNotification>(() => new StatusChangeNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StatusChangeNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[283]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusChangeNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusChangeNotification(StatusChangeNotification other) : this() {
    DiagnosticInfo_ = other.DiagnosticInfo_ != null ? other.DiagnosticInfo_.Clone() : null;
    status_ = other.status_ != null ? other.status_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusChangeNotification Clone() {
    return new StatusChangeNotification(this);
  }

  /// <summary>Field number for the "_DiagnosticInfo" field.</summary>
  public const int DiagnosticInfoFieldNumber = 1;
  private global::DiagnosticInfo DiagnosticInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiagnosticInfo DiagnosticInfo {
    get { return DiagnosticInfo_; }
    set {
      DiagnosticInfo_ = value;
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 2;
  private global::StatusCode status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StatusChangeNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StatusChangeNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfo, other.DiagnosticInfo)) return false;
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DiagnosticInfo_ != null) hash ^= DiagnosticInfo.GetHashCode();
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DiagnosticInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfo);
    }
    if (status_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DiagnosticInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfo);
    }
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StatusChangeNotification other) {
    if (other == null) {
      return;
    }
    if (other.DiagnosticInfo_ != null) {
      if (DiagnosticInfo_ == null) {
        DiagnosticInfo = new global::DiagnosticInfo();
      }
      DiagnosticInfo.MergeFrom(other.DiagnosticInfo);
    }
    if (other.status_ != null) {
      if (status_ == null) {
        Status = new global::StatusCode();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (DiagnosticInfo_ == null) {
            DiagnosticInfo = new global::DiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfo);
          break;
        }
        case 18: {
          if (status_ == null) {
            Status = new global::StatusCode();
          }
          input.ReadMessage(Status);
          break;
        }
      }
    }
  }

}

public sealed partial class StatusResult : pb::IMessage<StatusResult> {
  private static readonly pb::MessageParser<StatusResult> _parser = new pb::MessageParser<StatusResult>(() => new StatusResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StatusResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[284]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusResult(StatusResult other) : this() {
    DiagnosticInfo_ = other.DiagnosticInfo_ != null ? other.DiagnosticInfo_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusResult Clone() {
    return new StatusResult(this);
  }

  /// <summary>Field number for the "_DiagnosticInfo" field.</summary>
  public const int DiagnosticInfoFieldNumber = 1;
  private global::DiagnosticInfo DiagnosticInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiagnosticInfo DiagnosticInfo {
    get { return DiagnosticInfo_; }
    set {
      DiagnosticInfo_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 2;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StatusResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StatusResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfo, other.DiagnosticInfo)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DiagnosticInfo_ != null) hash ^= DiagnosticInfo.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DiagnosticInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfo);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DiagnosticInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfo);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StatusResult other) {
    if (other == null) {
      return;
    }
    if (other.DiagnosticInfo_ != null) {
      if (DiagnosticInfo_ == null) {
        DiagnosticInfo = new global::DiagnosticInfo();
      }
      DiagnosticInfo.MergeFrom(other.DiagnosticInfo);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (DiagnosticInfo_ == null) {
            DiagnosticInfo = new global::DiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfo);
          break;
        }
        case 18: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class StructureDefinition : pb::IMessage<StructureDefinition> {
  private static readonly pb::MessageParser<StructureDefinition> _parser = new pb::MessageParser<StructureDefinition>(() => new StructureDefinition());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StructureDefinition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[285]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureDefinition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureDefinition(StructureDefinition other) : this() {
    _hasBits0 = other._hasBits0;
    baseDataType_ = other.baseDataType_ != null ? other.baseDataType_.Clone() : null;
    defaultEncodingId_ = other.defaultEncodingId_ != null ? other.defaultEncodingId_.Clone() : null;
    fields_ = other.fields_ != null ? other.fields_.Clone() : null;
    StructureType_ = other.StructureType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureDefinition Clone() {
    return new StructureDefinition(this);
  }

  /// <summary>Field number for the "BaseDataType" field.</summary>
  public const int BaseDataTypeFieldNumber = 1;
  private global::NodeId baseDataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId BaseDataType {
    get { return baseDataType_; }
    set {
      baseDataType_ = value;
    }
  }

  /// <summary>Field number for the "DefaultEncodingId" field.</summary>
  public const int DefaultEncodingIdFieldNumber = 2;
  private global::NodeId defaultEncodingId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DefaultEncodingId {
    get { return defaultEncodingId_; }
    set {
      defaultEncodingId_ = value;
    }
  }

  /// <summary>Field number for the "Fields" field.</summary>
  public const int FieldsFieldNumber = 3;
  private global::ListOfStructureField fields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStructureField Fields {
    get { return fields_; }
    set {
      fields_ = value;
    }
  }

  /// <summary>Field number for the "_StructureType" field.</summary>
  public const int StructureTypeFieldNumber = 4;
  private readonly static global::StructureDefinition.Types.StructureType StructureTypeDefaultValue = global::StructureDefinition.Types.StructureType.StructureWithOptionalFields1;

  private global::StructureDefinition.Types.StructureType StructureType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StructureDefinition.Types.StructureType StructureType {
    get { if ((_hasBits0 & 1) != 0) { return StructureType_; } else { return StructureTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      StructureType_ = value;
    }
  }
  /// <summary>Gets whether the "_StructureType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStructureType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_StructureType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStructureType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StructureDefinition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StructureDefinition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseDataType, other.BaseDataType)) return false;
    if (!object.Equals(DefaultEncodingId, other.DefaultEncodingId)) return false;
    if (!object.Equals(Fields, other.Fields)) return false;
    if (StructureType != other.StructureType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseDataType_ != null) hash ^= BaseDataType.GetHashCode();
    if (defaultEncodingId_ != null) hash ^= DefaultEncodingId.GetHashCode();
    if (fields_ != null) hash ^= Fields.GetHashCode();
    if (HasStructureType) hash ^= StructureType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseDataType_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseDataType);
    }
    if (defaultEncodingId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DefaultEncodingId);
    }
    if (fields_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Fields);
    }
    if (HasStructureType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) StructureType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseDataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseDataType);
    }
    if (defaultEncodingId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultEncodingId);
    }
    if (fields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fields);
    }
    if (HasStructureType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StructureType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StructureDefinition other) {
    if (other == null) {
      return;
    }
    if (other.baseDataType_ != null) {
      if (baseDataType_ == null) {
        BaseDataType = new global::NodeId();
      }
      BaseDataType.MergeFrom(other.BaseDataType);
    }
    if (other.defaultEncodingId_ != null) {
      if (defaultEncodingId_ == null) {
        DefaultEncodingId = new global::NodeId();
      }
      DefaultEncodingId.MergeFrom(other.DefaultEncodingId);
    }
    if (other.fields_ != null) {
      if (fields_ == null) {
        Fields = new global::ListOfStructureField();
      }
      Fields.MergeFrom(other.Fields);
    }
    if (other.HasStructureType) {
      StructureType = other.StructureType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (baseDataType_ == null) {
            BaseDataType = new global::NodeId();
          }
          input.ReadMessage(BaseDataType);
          break;
        }
        case 18: {
          if (defaultEncodingId_ == null) {
            DefaultEncodingId = new global::NodeId();
          }
          input.ReadMessage(DefaultEncodingId);
          break;
        }
        case 26: {
          if (fields_ == null) {
            Fields = new global::ListOfStructureField();
          }
          input.ReadMessage(Fields);
          break;
        }
        case 32: {
          StructureType = (global::StructureDefinition.Types.StructureType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the StructureDefinition message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum StructureType {
      [pbr::OriginalName("StructureType_StructureWithOptionalFields_1")] StructureWithOptionalFields1 = 1,
      [pbr::OriginalName("StructureType_StructureWithSubtypedValues_3")] StructureWithSubtypedValues3 = 2,
      [pbr::OriginalName("StructureType_Structure_0")] Structure0 = 3,
      [pbr::OriginalName("StructureType_UnionWithSubtypedValues_4")] UnionWithSubtypedValues4 = 4,
      [pbr::OriginalName("StructureType_Union_2")] Union2 = 5,
    }

  }
  #endregion

}

public sealed partial class StructureDescription : pb::IMessage<StructureDescription> {
  private static readonly pb::MessageParser<StructureDescription> _parser = new pb::MessageParser<StructureDescription>(() => new StructureDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StructureDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[286]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureDescription(StructureDescription other) : this() {
    dataTypeId_ = other.dataTypeId_ != null ? other.dataTypeId_.Clone() : null;
    name_ = other.name_ != null ? other.name_.Clone() : null;
    StructureDefinition_ = other.StructureDefinition_ != null ? other.StructureDefinition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StructureDescription Clone() {
    return new StructureDescription(this);
  }

  /// <summary>Field number for the "DataTypeId" field.</summary>
  public const int DataTypeIdFieldNumber = 1;
  private global::NodeId dataTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataTypeId {
    get { return dataTypeId_; }
    set {
      dataTypeId_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 2;
  private global::QualifiedName name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName Name {
    get { return name_; }
    set {
      name_ = value;
    }
  }

  /// <summary>Field number for the "_StructureDefinition" field.</summary>
  public const int StructureDefinitionFieldNumber = 3;
  private global::StructureDefinition StructureDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StructureDefinition StructureDefinition {
    get { return StructureDefinition_; }
    set {
      StructureDefinition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StructureDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StructureDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataTypeId, other.DataTypeId)) return false;
    if (!object.Equals(Name, other.Name)) return false;
    if (!object.Equals(StructureDefinition, other.StructureDefinition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataTypeId_ != null) hash ^= DataTypeId.GetHashCode();
    if (name_ != null) hash ^= Name.GetHashCode();
    if (StructureDefinition_ != null) hash ^= StructureDefinition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataTypeId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataTypeId);
    }
    if (name_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Name);
    }
    if (StructureDefinition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(StructureDefinition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTypeId);
    }
    if (name_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
    }
    if (StructureDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructureDefinition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StructureDescription other) {
    if (other == null) {
      return;
    }
    if (other.dataTypeId_ != null) {
      if (dataTypeId_ == null) {
        DataTypeId = new global::NodeId();
      }
      DataTypeId.MergeFrom(other.DataTypeId);
    }
    if (other.name_ != null) {
      if (name_ == null) {
        Name = new global::QualifiedName();
      }
      Name.MergeFrom(other.Name);
    }
    if (other.StructureDefinition_ != null) {
      if (StructureDefinition_ == null) {
        StructureDefinition = new global::StructureDefinition();
      }
      StructureDefinition.MergeFrom(other.StructureDefinition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataTypeId_ == null) {
            DataTypeId = new global::NodeId();
          }
          input.ReadMessage(DataTypeId);
          break;
        }
        case 18: {
          if (name_ == null) {
            Name = new global::QualifiedName();
          }
          input.ReadMessage(Name);
          break;
        }
        case 26: {
          if (StructureDefinition_ == null) {
            StructureDefinition = new global::StructureDefinition();
          }
          input.ReadMessage(StructureDefinition);
          break;
        }
      }
    }
  }

}

public sealed partial class SubscribedDataSetDataType : pb::IMessage<SubscribedDataSetDataType> {
  private static readonly pb::MessageParser<SubscribedDataSetDataType> _parser = new pb::MessageParser<SubscribedDataSetDataType>(() => new SubscribedDataSetDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SubscribedDataSetDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[287]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscribedDataSetDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscribedDataSetDataType(SubscribedDataSetDataType other) : this() {
    parentNodeName_ = other.parentNodeName_;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    targetVariables_ = other.targetVariables_ != null ? other.targetVariables_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscribedDataSetDataType Clone() {
    return new SubscribedDataSetDataType(this);
  }

  /// <summary>Field number for the "ParentNodeName" field.</summary>
  public const int ParentNodeNameFieldNumber = 1;
  private readonly static string ParentNodeNameDefaultValue = "";

  private string parentNodeName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ParentNodeName {
    get { return parentNodeName_ ?? ParentNodeNameDefaultValue; }
    set {
      parentNodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ParentNodeName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasParentNodeName {
    get { return parentNodeName_ != null; }
  }
  /// <summary>Clears the value of the "ParentNodeName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearParentNodeName() {
    parentNodeName_ = null;
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 2;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "TargetVariables" field.</summary>
  public const int TargetVariablesFieldNumber = 3;
  private global::ListOfFieldTargetDataType targetVariables_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfFieldTargetDataType TargetVariables {
    get { return targetVariables_; }
    set {
      targetVariables_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SubscribedDataSetDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SubscribedDataSetDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ParentNodeName != other.ParentNodeName) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (!object.Equals(TargetVariables, other.TargetVariables)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasParentNodeName) hash ^= ParentNodeName.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (targetVariables_ != null) hash ^= TargetVariables.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasParentNodeName) {
      output.WriteRawTag(10);
      output.WriteString(ParentNodeName);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RolePermissions);
    }
    if (targetVariables_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TargetVariables);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasParentNodeName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentNodeName);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (targetVariables_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetVariables);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SubscribedDataSetDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasParentNodeName) {
      ParentNodeName = other.ParentNodeName;
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.targetVariables_ != null) {
      if (targetVariables_ == null) {
        TargetVariables = new global::ListOfFieldTargetDataType();
      }
      TargetVariables.MergeFrom(other.TargetVariables);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ParentNodeName = input.ReadString();
          break;
        }
        case 18: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 26: {
          if (targetVariables_ == null) {
            TargetVariables = new global::ListOfFieldTargetDataType();
          }
          input.ReadMessage(TargetVariables);
          break;
        }
      }
    }
  }

}

public sealed partial class SubscribedDataSetMirrorDataType : pb::IMessage<SubscribedDataSetMirrorDataType> {
  private static readonly pb::MessageParser<SubscribedDataSetMirrorDataType> _parser = new pb::MessageParser<SubscribedDataSetMirrorDataType>(() => new SubscribedDataSetMirrorDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SubscribedDataSetMirrorDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[288]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscribedDataSetMirrorDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscribedDataSetMirrorDataType(SubscribedDataSetMirrorDataType other) : this() {
    parentNodeName_ = other.parentNodeName_;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubscribedDataSetMirrorDataType Clone() {
    return new SubscribedDataSetMirrorDataType(this);
  }

  /// <summary>Field number for the "ParentNodeName" field.</summary>
  public const int ParentNodeNameFieldNumber = 1;
  private readonly static string ParentNodeNameDefaultValue = "";

  private string parentNodeName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ParentNodeName {
    get { return parentNodeName_ ?? ParentNodeNameDefaultValue; }
    set {
      parentNodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ParentNodeName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasParentNodeName {
    get { return parentNodeName_ != null; }
  }
  /// <summary>Clears the value of the "ParentNodeName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearParentNodeName() {
    parentNodeName_ = null;
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 2;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SubscribedDataSetMirrorDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SubscribedDataSetMirrorDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ParentNodeName != other.ParentNodeName) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasParentNodeName) hash ^= ParentNodeName.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasParentNodeName) {
      output.WriteRawTag(10);
      output.WriteString(ParentNodeName);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RolePermissions);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasParentNodeName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentNodeName);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SubscribedDataSetMirrorDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasParentNodeName) {
      ParentNodeName = other.ParentNodeName;
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ParentNodeName = input.ReadString();
          break;
        }
        case 18: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
      }
    }
  }

}

public sealed partial class TargetVariablesDataType : pb::IMessage<TargetVariablesDataType> {
  private static readonly pb::MessageParser<TargetVariablesDataType> _parser = new pb::MessageParser<TargetVariablesDataType>(() => new TargetVariablesDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TargetVariablesDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[289]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TargetVariablesDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TargetVariablesDataType(TargetVariablesDataType other) : this() {
    targetVariables_ = other.targetVariables_ != null ? other.targetVariables_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TargetVariablesDataType Clone() {
    return new TargetVariablesDataType(this);
  }

  /// <summary>Field number for the "TargetVariables" field.</summary>
  public const int TargetVariablesFieldNumber = 1;
  private global::ListOfFieldTargetDataType targetVariables_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfFieldTargetDataType TargetVariables {
    get { return targetVariables_; }
    set {
      targetVariables_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TargetVariablesDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TargetVariablesDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(TargetVariables, other.TargetVariables)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (targetVariables_ != null) hash ^= TargetVariables.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (targetVariables_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(TargetVariables);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (targetVariables_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetVariables);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TargetVariablesDataType other) {
    if (other == null) {
      return;
    }
    if (other.targetVariables_ != null) {
      if (targetVariables_ == null) {
        TargetVariables = new global::ListOfFieldTargetDataType();
      }
      TargetVariables.MergeFrom(other.TargetVariables);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (targetVariables_ == null) {
            TargetVariables = new global::ListOfFieldTargetDataType();
          }
          input.ReadMessage(TargetVariables);
          break;
        }
      }
    }
  }

}

public sealed partial class ThreeDFrame : pb::IMessage<ThreeDFrame> {
  private static readonly pb::MessageParser<ThreeDFrame> _parser = new pb::MessageParser<ThreeDFrame>(() => new ThreeDFrame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ThreeDFrame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[290]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDFrame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDFrame(ThreeDFrame other) : this() {
    cartesianCoordinates_ = other.cartesianCoordinates_ != null ? other.cartesianCoordinates_.Clone() : null;
    orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ThreeDFrame Clone() {
    return new ThreeDFrame(this);
  }

  /// <summary>Field number for the "CartesianCoordinates" field.</summary>
  public const int CartesianCoordinatesFieldNumber = 1;
  private global::ThreeDCartesianCoordinates cartesianCoordinates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ThreeDCartesianCoordinates CartesianCoordinates {
    get { return cartesianCoordinates_; }
    set {
      cartesianCoordinates_ = value;
    }
  }

  /// <summary>Field number for the "Orientation" field.</summary>
  public const int OrientationFieldNumber = 2;
  private global::ThreeDOrientation orientation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ThreeDOrientation Orientation {
    get { return orientation_; }
    set {
      orientation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ThreeDFrame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ThreeDFrame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CartesianCoordinates, other.CartesianCoordinates)) return false;
    if (!object.Equals(Orientation, other.Orientation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cartesianCoordinates_ != null) hash ^= CartesianCoordinates.GetHashCode();
    if (orientation_ != null) hash ^= Orientation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cartesianCoordinates_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CartesianCoordinates);
    }
    if (orientation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Orientation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cartesianCoordinates_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CartesianCoordinates);
    }
    if (orientation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ThreeDFrame other) {
    if (other == null) {
      return;
    }
    if (other.cartesianCoordinates_ != null) {
      if (cartesianCoordinates_ == null) {
        CartesianCoordinates = new global::ThreeDCartesianCoordinates();
      }
      CartesianCoordinates.MergeFrom(other.CartesianCoordinates);
    }
    if (other.orientation_ != null) {
      if (orientation_ == null) {
        Orientation = new global::ThreeDOrientation();
      }
      Orientation.MergeFrom(other.Orientation);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (cartesianCoordinates_ == null) {
            CartesianCoordinates = new global::ThreeDCartesianCoordinates();
          }
          input.ReadMessage(CartesianCoordinates);
          break;
        }
        case 18: {
          if (orientation_ == null) {
            Orientation = new global::ThreeDOrientation();
          }
          input.ReadMessage(Orientation);
          break;
        }
      }
    }
  }

}

public sealed partial class TransferSubscriptionsRequest : pb::IMessage<TransferSubscriptionsRequest> {
  private static readonly pb::MessageParser<TransferSubscriptionsRequest> _parser = new pb::MessageParser<TransferSubscriptionsRequest>(() => new TransferSubscriptionsRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TransferSubscriptionsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[291]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferSubscriptionsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferSubscriptionsRequest(TransferSubscriptionsRequest other) : this() {
    _hasBits0 = other._hasBits0;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    sendInitialValues_ = other.sendInitialValues_;
    subscriptionIds_ = other.subscriptionIds_ != null ? other.subscriptionIds_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferSubscriptionsRequest Clone() {
    return new TransferSubscriptionsRequest(this);
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SendInitialValues" field.</summary>
  public const int SendInitialValuesFieldNumber = 2;
  private readonly static bool SendInitialValuesDefaultValue = false;

  private bool sendInitialValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SendInitialValues {
    get { if ((_hasBits0 & 1) != 0) { return sendInitialValues_; } else { return SendInitialValuesDefaultValue; } }
    set {
      _hasBits0 |= 1;
      sendInitialValues_ = value;
    }
  }
  /// <summary>Gets whether the "SendInitialValues" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSendInitialValues {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SendInitialValues" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSendInitialValues() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SubscriptionIds" field.</summary>
  public const int SubscriptionIdsFieldNumber = 3;
  private global::ListOfUInt32 subscriptionIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 SubscriptionIds {
    get { return subscriptionIds_; }
    set {
      subscriptionIds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TransferSubscriptionsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TransferSubscriptionsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (SendInitialValues != other.SendInitialValues) return false;
    if (!object.Equals(SubscriptionIds, other.SubscriptionIds)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasSendInitialValues) hash ^= SendInitialValues.GetHashCode();
    if (subscriptionIds_ != null) hash ^= SubscriptionIds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (HasSendInitialValues) {
      output.WriteRawTag(16);
      output.WriteBool(SendInitialValues);
    }
    if (subscriptionIds_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SubscriptionIds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasSendInitialValues) {
      size += 1 + 1;
    }
    if (subscriptionIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscriptionIds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TransferSubscriptionsRequest other) {
    if (other == null) {
      return;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasSendInitialValues) {
      SendInitialValues = other.SendInitialValues;
    }
    if (other.subscriptionIds_ != null) {
      if (subscriptionIds_ == null) {
        SubscriptionIds = new global::ListOfUInt32();
      }
      SubscriptionIds.MergeFrom(other.SubscriptionIds);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 16: {
          SendInitialValues = input.ReadBool();
          break;
        }
        case 26: {
          if (subscriptionIds_ == null) {
            SubscriptionIds = new global::ListOfUInt32();
          }
          input.ReadMessage(SubscriptionIds);
          break;
        }
      }
    }
  }

}

public sealed partial class TransferSubscriptionsResponse : pb::IMessage<TransferSubscriptionsResponse> {
  private static readonly pb::MessageParser<TransferSubscriptionsResponse> _parser = new pb::MessageParser<TransferSubscriptionsResponse>(() => new TransferSubscriptionsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TransferSubscriptionsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[292]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferSubscriptionsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferSubscriptionsResponse(TransferSubscriptionsResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransferSubscriptionsResponse Clone() {
    return new TransferSubscriptionsResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfTransferResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfTransferResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TransferSubscriptionsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TransferSubscriptionsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TransferSubscriptionsResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfTransferResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfTransferResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class TypeNode : pb::IMessage<TypeNode> {
  private static readonly pb::MessageParser<TypeNode> _parser = new pb::MessageParser<TypeNode>(() => new TypeNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TypeNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[293]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TypeNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TypeNode(TypeNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    dataTypeDefinition_ = other.dataTypeDefinition_ != null ? other.dataTypeDefinition_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    inverseName_ = other.inverseName_ != null ? other.inverseName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    symmetric_ = other.symmetric_;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TypeNode Clone() {
    return new TypeNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 2;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 3;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 4;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "DataTypeDefinition" field.</summary>
  public const int DataTypeDefinitionFieldNumber = 5;
  private global::ExtensionObject dataTypeDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject DataTypeDefinition {
    get { return dataTypeDefinition_; }
    set {
      dataTypeDefinition_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 6;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 7;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "InverseName" field.</summary>
  public const int InverseNameFieldNumber = 8;
  private global::LocalizedText inverseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText InverseName {
    get { return inverseName_; }
    set {
      inverseName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 9;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 2) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 10;
  private readonly static global::TypeNode.Types.NodeClass NodeClassDefaultValue = global::TypeNode.Types.NodeClass.DataType64;

  private global::TypeNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 4) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 4;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 11;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 12;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 13;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "Symmetric" field.</summary>
  public const int SymmetricFieldNumber = 14;
  private readonly static bool SymmetricDefaultValue = false;

  private bool symmetric_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Symmetric {
    get { if ((_hasBits0 & 8) != 0) { return symmetric_; } else { return SymmetricDefaultValue; } }
    set {
      _hasBits0 |= 8;
      symmetric_ = value;
    }
  }
  /// <summary>Gets whether the "Symmetric" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymmetric {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Symmetric" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymmetric() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 15;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 16;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 16) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 17;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 18;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 32) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 32;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 19;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 64) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 64;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TypeNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TypeNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(DataTypeDefinition, other.DataTypeDefinition)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (!object.Equals(InverseName, other.InverseName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (Symmetric != other.Symmetric) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (dataTypeDefinition_ != null) hash ^= DataTypeDefinition.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (inverseName_ != null) hash ^= InverseName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (HasSymmetric) hash ^= Symmetric.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ArrayDimensions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(BrowseName);
    }
    if (dataType_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DataType);
    }
    if (dataTypeDefinition_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DataTypeDefinition);
    }
    if (description_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DisplayName);
    }
    if (inverseName_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(InverseName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(72);
      output.WriteBool(IsAbstract);
    }
    if (HasNodeClass) {
      output.WriteRawTag(80);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(RolePermissions);
    }
    if (HasSymmetric) {
      output.WriteRawTag(112);
      output.WriteBool(Symmetric);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (dataTypeDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTypeDefinition);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (inverseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InverseName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (HasSymmetric) {
      size += 1 + 1;
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TypeNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.dataTypeDefinition_ != null) {
      if (dataTypeDefinition_ == null) {
        DataTypeDefinition = new global::ExtensionObject();
      }
      DataTypeDefinition.MergeFrom(other.DataTypeDefinition);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.inverseName_ != null) {
      if (inverseName_ == null) {
        InverseName = new global::LocalizedText();
      }
      InverseName.MergeFrom(other.InverseName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.HasSymmetric) {
      Symmetric = other.Symmetric;
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 26: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 34: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 42: {
          if (dataTypeDefinition_ == null) {
            DataTypeDefinition = new global::ExtensionObject();
          }
          input.ReadMessage(DataTypeDefinition);
          break;
        }
        case 50: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 58: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 66: {
          if (inverseName_ == null) {
            InverseName = new global::LocalizedText();
          }
          input.ReadMessage(InverseName);
          break;
        }
        case 72: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 80: {
          NodeClass = (global::TypeNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 90: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 98: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 106: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 112: {
          Symmetric = input.ReadBool();
          break;
        }
        case 122: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 128: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 138: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 144: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 152: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the TypeNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class UnregisterNodesRequest : pb::IMessage<UnregisterNodesRequest> {
  private static readonly pb::MessageParser<UnregisterNodesRequest> _parser = new pb::MessageParser<UnregisterNodesRequest>(() => new UnregisterNodesRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnregisterNodesRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[294]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnregisterNodesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnregisterNodesRequest(UnregisterNodesRequest other) : this() {
    nodesToUnregister_ = other.nodesToUnregister_ != null ? other.nodesToUnregister_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnregisterNodesRequest Clone() {
    return new UnregisterNodesRequest(this);
  }

  /// <summary>Field number for the "NodesToUnregister" field.</summary>
  public const int NodesToUnregisterFieldNumber = 1;
  private global::ListOfNodeId nodesToUnregister_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfNodeId NodesToUnregister {
    get { return nodesToUnregister_; }
    set {
      nodesToUnregister_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnregisterNodesRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnregisterNodesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodesToUnregister, other.NodesToUnregister)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nodesToUnregister_ != null) hash ^= NodesToUnregister.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nodesToUnregister_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodesToUnregister);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nodesToUnregister_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToUnregister);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnregisterNodesRequest other) {
    if (other == null) {
      return;
    }
    if (other.nodesToUnregister_ != null) {
      if (nodesToUnregister_ == null) {
        NodesToUnregister = new global::ListOfNodeId();
      }
      NodesToUnregister.MergeFrom(other.NodesToUnregister);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nodesToUnregister_ == null) {
            NodesToUnregister = new global::ListOfNodeId();
          }
          input.ReadMessage(NodesToUnregister);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class UnregisterNodesResponse : pb::IMessage<UnregisterNodesResponse> {
  private static readonly pb::MessageParser<UnregisterNodesResponse> _parser = new pb::MessageParser<UnregisterNodesResponse>(() => new UnregisterNodesResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnregisterNodesResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[295]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnregisterNodesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnregisterNodesResponse(UnregisterNodesResponse other) : this() {
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnregisterNodesResponse Clone() {
    return new UnregisterNodesResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnregisterNodesResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnregisterNodesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnregisterNodesResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateDataDetails : pb::IMessage<UpdateDataDetails> {
  private static readonly pb::MessageParser<UpdateDataDetails> _parser = new pb::MessageParser<UpdateDataDetails>(() => new UpdateDataDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateDataDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[296]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDataDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDataDetails(UpdateDataDetails other) : this() {
    _hasBits0 = other._hasBits0;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    performInsertReplace_ = other.performInsertReplace_;
    updateValues_ = other.updateValues_ != null ? other.updateValues_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDataDetails Clone() {
    return new UpdateDataDetails(this);
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 1;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "PerformInsertReplace" field.</summary>
  public const int PerformInsertReplaceFieldNumber = 2;
  private readonly static global::UpdateDataDetails.Types.PerformUpdateType PerformInsertReplaceDefaultValue = global::UpdateDataDetails.Types.PerformUpdateType.Insert1;

  private global::UpdateDataDetails.Types.PerformUpdateType performInsertReplace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateDataDetails.Types.PerformUpdateType PerformInsertReplace {
    get { if ((_hasBits0 & 1) != 0) { return performInsertReplace_; } else { return PerformInsertReplaceDefaultValue; } }
    set {
      _hasBits0 |= 1;
      performInsertReplace_ = value;
    }
  }
  /// <summary>Gets whether the "PerformInsertReplace" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPerformInsertReplace {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "PerformInsertReplace" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPerformInsertReplace() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "UpdateValues" field.</summary>
  public const int UpdateValuesFieldNumber = 3;
  private global::ListOfDataValue updateValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataValue UpdateValues {
    get { return updateValues_; }
    set {
      updateValues_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateDataDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateDataDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (PerformInsertReplace != other.PerformInsertReplace) return false;
    if (!object.Equals(UpdateValues, other.UpdateValues)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (HasPerformInsertReplace) hash ^= PerformInsertReplace.GetHashCode();
    if (updateValues_ != null) hash ^= UpdateValues.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NodeId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodeId);
    }
    if (HasPerformInsertReplace) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PerformInsertReplace);
    }
    if (updateValues_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UpdateValues);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (HasPerformInsertReplace) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerformInsertReplace);
    }
    if (updateValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateValues);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateDataDetails other) {
    if (other == null) {
      return;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.HasPerformInsertReplace) {
      PerformInsertReplace = other.PerformInsertReplace;
    }
    if (other.updateValues_ != null) {
      if (updateValues_ == null) {
        UpdateValues = new global::ListOfDataValue();
      }
      UpdateValues.MergeFrom(other.UpdateValues);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 16: {
          PerformInsertReplace = (global::UpdateDataDetails.Types.PerformUpdateType) input.ReadEnum();
          break;
        }
        case 26: {
          if (updateValues_ == null) {
            UpdateValues = new global::ListOfDataValue();
          }
          input.ReadMessage(UpdateValues);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the UpdateDataDetails message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PerformUpdateType {
      [pbr::OriginalName("PerformUpdateType_Insert_1")] Insert1 = 1,
      [pbr::OriginalName("PerformUpdateType_Remove_4")] Remove4 = 2,
      [pbr::OriginalName("PerformUpdateType_Replace_2")] Replace2 = 3,
      [pbr::OriginalName("PerformUpdateType_Update_3")] Update3 = 4,
    }

  }
  #endregion

}

public sealed partial class UpdateStructureDataDetails : pb::IMessage<UpdateStructureDataDetails> {
  private static readonly pb::MessageParser<UpdateStructureDataDetails> _parser = new pb::MessageParser<UpdateStructureDataDetails>(() => new UpdateStructureDataDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateStructureDataDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[297]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateStructureDataDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateStructureDataDetails(UpdateStructureDataDetails other) : this() {
    _hasBits0 = other._hasBits0;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    performInsertReplace_ = other.performInsertReplace_;
    updateValues_ = other.updateValues_ != null ? other.updateValues_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateStructureDataDetails Clone() {
    return new UpdateStructureDataDetails(this);
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 1;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "PerformInsertReplace" field.</summary>
  public const int PerformInsertReplaceFieldNumber = 2;
  private readonly static global::UpdateStructureDataDetails.Types.PerformUpdateType PerformInsertReplaceDefaultValue = global::UpdateStructureDataDetails.Types.PerformUpdateType.Insert1;

  private global::UpdateStructureDataDetails.Types.PerformUpdateType performInsertReplace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateStructureDataDetails.Types.PerformUpdateType PerformInsertReplace {
    get { if ((_hasBits0 & 1) != 0) { return performInsertReplace_; } else { return PerformInsertReplaceDefaultValue; } }
    set {
      _hasBits0 |= 1;
      performInsertReplace_ = value;
    }
  }
  /// <summary>Gets whether the "PerformInsertReplace" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPerformInsertReplace {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "PerformInsertReplace" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPerformInsertReplace() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "UpdateValues" field.</summary>
  public const int UpdateValuesFieldNumber = 3;
  private global::ListOfDataValue updateValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataValue UpdateValues {
    get { return updateValues_; }
    set {
      updateValues_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateStructureDataDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateStructureDataDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (PerformInsertReplace != other.PerformInsertReplace) return false;
    if (!object.Equals(UpdateValues, other.UpdateValues)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (HasPerformInsertReplace) hash ^= PerformInsertReplace.GetHashCode();
    if (updateValues_ != null) hash ^= UpdateValues.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NodeId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodeId);
    }
    if (HasPerformInsertReplace) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PerformInsertReplace);
    }
    if (updateValues_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UpdateValues);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (HasPerformInsertReplace) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerformInsertReplace);
    }
    if (updateValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateValues);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateStructureDataDetails other) {
    if (other == null) {
      return;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.HasPerformInsertReplace) {
      PerformInsertReplace = other.PerformInsertReplace;
    }
    if (other.updateValues_ != null) {
      if (updateValues_ == null) {
        UpdateValues = new global::ListOfDataValue();
      }
      UpdateValues.MergeFrom(other.UpdateValues);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 16: {
          PerformInsertReplace = (global::UpdateStructureDataDetails.Types.PerformUpdateType) input.ReadEnum();
          break;
        }
        case 26: {
          if (updateValues_ == null) {
            UpdateValues = new global::ListOfDataValue();
          }
          input.ReadMessage(UpdateValues);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the UpdateStructureDataDetails message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PerformUpdateType {
      [pbr::OriginalName("PerformUpdateType_Insert_1")] Insert1 = 1,
      [pbr::OriginalName("PerformUpdateType_Remove_4")] Remove4 = 2,
      [pbr::OriginalName("PerformUpdateType_Replace_2")] Replace2 = 3,
      [pbr::OriginalName("PerformUpdateType_Update_3")] Update3 = 4,
    }

  }
  #endregion

}

public sealed partial class VariableAttributes : pb::IMessage<VariableAttributes> {
  private static readonly pb::MessageParser<VariableAttributes> _parser = new pb::MessageParser<VariableAttributes>(() => new VariableAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VariableAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[298]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableAttributes(VariableAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    accessLevel_ = other.accessLevel_;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    historizing_ = other.historizing_;
    minimumSamplingInterval_ = other.minimumSamplingInterval_;
    specifiedAttributes_ = other.specifiedAttributes_;
    userAccessLevel_ = other.userAccessLevel_;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableAttributes Clone() {
    return new VariableAttributes(this);
  }

  /// <summary>Field number for the "AccessLevel" field.</summary>
  public const int AccessLevelFieldNumber = 1;
  private readonly static uint AccessLevelDefaultValue = 0;

  private uint accessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevel {
    get { if ((_hasBits0 & 1) != 0) { return accessLevel_; } else { return AccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 2;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 3;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 5;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "Historizing" field.</summary>
  public const int HistorizingFieldNumber = 6;
  private readonly static bool HistorizingDefaultValue = false;

  private bool historizing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Historizing {
    get { if ((_hasBits0 & 2) != 0) { return historizing_; } else { return HistorizingDefaultValue; } }
    set {
      _hasBits0 |= 2;
      historizing_ = value;
    }
  }
  /// <summary>Gets whether the "Historizing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHistorizing {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Historizing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHistorizing() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "MinimumSamplingInterval" field.</summary>
  public const int MinimumSamplingIntervalFieldNumber = 7;
  private readonly static double MinimumSamplingIntervalDefaultValue = 0D;

  private double minimumSamplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinimumSamplingInterval {
    get { if ((_hasBits0 & 4) != 0) { return minimumSamplingInterval_; } else { return MinimumSamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 4;
      minimumSamplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "MinimumSamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMinimumSamplingInterval {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "MinimumSamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMinimumSamplingInterval() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 8;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 8) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 8;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "UserAccessLevel" field.</summary>
  public const int UserAccessLevelFieldNumber = 9;
  private readonly static uint UserAccessLevelDefaultValue = 0;

  private uint userAccessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserAccessLevel {
    get { if ((_hasBits0 & 16) != 0) { return userAccessLevel_; } else { return UserAccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 16;
      userAccessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "UserAccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserAccessLevel {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "UserAccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserAccessLevel() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 10;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 32) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 32;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 11;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 12;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 64) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 64;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 13;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 128) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 128;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VariableAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VariableAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessLevel != other.AccessLevel) return false;
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (Historizing != other.Historizing) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumSamplingInterval, other.MinimumSamplingInterval)) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserAccessLevel != other.UserAccessLevel) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessLevel) hash ^= AccessLevel.GetHashCode();
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasHistorizing) hash ^= Historizing.GetHashCode();
    if (HasMinimumSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumSamplingInterval);
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserAccessLevel) hash ^= UserAccessLevel.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessLevel) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessLevel);
    }
    if (arrayDimensions_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ArrayDimensions);
    }
    if (dataType_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DisplayName);
    }
    if (HasHistorizing) {
      output.WriteRawTag(48);
      output.WriteBool(Historizing);
    }
    if (HasMinimumSamplingInterval) {
      output.WriteRawTag(57);
      output.WriteDouble(MinimumSamplingInterval);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(64);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserAccessLevel) {
      output.WriteRawTag(72);
      output.WriteUInt32(UserAccessLevel);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(80);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(96);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(104);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevel);
    }
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasHistorizing) {
      size += 1 + 1;
    }
    if (HasMinimumSamplingInterval) {
      size += 1 + 8;
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserAccessLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserAccessLevel);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VariableAttributes other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessLevel) {
      AccessLevel = other.AccessLevel;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasHistorizing) {
      Historizing = other.Historizing;
    }
    if (other.HasMinimumSamplingInterval) {
      MinimumSamplingInterval = other.MinimumSamplingInterval;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserAccessLevel) {
      UserAccessLevel = other.UserAccessLevel;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessLevel = input.ReadUInt32();
          break;
        }
        case 18: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 26: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 34: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 42: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 48: {
          Historizing = input.ReadBool();
          break;
        }
        case 57: {
          MinimumSamplingInterval = input.ReadDouble();
          break;
        }
        case 64: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 72: {
          UserAccessLevel = input.ReadUInt32();
          break;
        }
        case 80: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 90: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 96: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 104: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VariableNode : pb::IMessage<VariableNode> {
  private static readonly pb::MessageParser<VariableNode> _parser = new pb::MessageParser<VariableNode>(() => new VariableNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VariableNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[299]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableNode(VariableNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessLevel_ = other.accessLevel_;
    accessLevelEx_ = other.accessLevelEx_;
    accessRestrictions_ = other.accessRestrictions_;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    historizing_ = other.historizing_;
    minimumSamplingInterval_ = other.minimumSamplingInterval_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userAccessLevel_ = other.userAccessLevel_;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableNode Clone() {
    return new VariableNode(this);
  }

  /// <summary>Field number for the "AccessLevel" field.</summary>
  public const int AccessLevelFieldNumber = 1;
  private readonly static uint AccessLevelDefaultValue = 0;

  private uint accessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevel {
    get { if ((_hasBits0 & 1) != 0) { return accessLevel_; } else { return AccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "AccessLevelEx" field.</summary>
  public const int AccessLevelExFieldNumber = 2;
  private readonly static uint AccessLevelExDefaultValue = 0;

  private uint accessLevelEx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevelEx {
    get { if ((_hasBits0 & 2) != 0) { return accessLevelEx_; } else { return AccessLevelExDefaultValue; } }
    set {
      _hasBits0 |= 2;
      accessLevelEx_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevelEx" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevelEx {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevelEx" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevelEx() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 3;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 4) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 4;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 5;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 6;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 7;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 8;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "Historizing" field.</summary>
  public const int HistorizingFieldNumber = 9;
  private readonly static bool HistorizingDefaultValue = false;

  private bool historizing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Historizing {
    get { if ((_hasBits0 & 8) != 0) { return historizing_; } else { return HistorizingDefaultValue; } }
    set {
      _hasBits0 |= 8;
      historizing_ = value;
    }
  }
  /// <summary>Gets whether the "Historizing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHistorizing {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Historizing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHistorizing() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "MinimumSamplingInterval" field.</summary>
  public const int MinimumSamplingIntervalFieldNumber = 10;
  private readonly static double MinimumSamplingIntervalDefaultValue = 0D;

  private double minimumSamplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinimumSamplingInterval {
    get { if ((_hasBits0 & 16) != 0) { return minimumSamplingInterval_; } else { return MinimumSamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 16;
      minimumSamplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "MinimumSamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMinimumSamplingInterval {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "MinimumSamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMinimumSamplingInterval() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 11;
  private readonly static global::VariableNode.Types.NodeClass NodeClassDefaultValue = global::VariableNode.Types.NodeClass.DataType64;

  private global::VariableNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VariableNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 32) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 32;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 12;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 13;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 14;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserAccessLevel" field.</summary>
  public const int UserAccessLevelFieldNumber = 15;
  private readonly static uint UserAccessLevelDefaultValue = 0;

  private uint userAccessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserAccessLevel {
    get { if ((_hasBits0 & 64) != 0) { return userAccessLevel_; } else { return UserAccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 64;
      userAccessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "UserAccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserAccessLevel {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "UserAccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserAccessLevel() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 16;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 17;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 128) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 128;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 18;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 19;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 256) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 256;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 20;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 512) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 512;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VariableNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VariableNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessLevel != other.AccessLevel) return false;
    if (AccessLevelEx != other.AccessLevelEx) return false;
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (Historizing != other.Historizing) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumSamplingInterval, other.MinimumSamplingInterval)) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (UserAccessLevel != other.UserAccessLevel) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessLevel) hash ^= AccessLevel.GetHashCode();
    if (HasAccessLevelEx) hash ^= AccessLevelEx.GetHashCode();
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasHistorizing) hash ^= Historizing.GetHashCode();
    if (HasMinimumSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumSamplingInterval);
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (HasUserAccessLevel) hash ^= UserAccessLevel.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessLevel) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessLevel);
    }
    if (HasAccessLevelEx) {
      output.WriteRawTag(16);
      output.WriteUInt32(AccessLevelEx);
    }
    if (HasAccessRestrictions) {
      output.WriteRawTag(24);
      output.WriteUInt32(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ArrayDimensions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(BrowseName);
    }
    if (dataType_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(DisplayName);
    }
    if (HasHistorizing) {
      output.WriteRawTag(72);
      output.WriteBool(Historizing);
    }
    if (HasMinimumSamplingInterval) {
      output.WriteRawTag(81);
      output.WriteDouble(MinimumSamplingInterval);
    }
    if (HasNodeClass) {
      output.WriteRawTag(88);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(RolePermissions);
    }
    if (HasUserAccessLevel) {
      output.WriteRawTag(120);
      output.WriteUInt32(UserAccessLevel);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevel);
    }
    if (HasAccessLevelEx) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevelEx);
    }
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasHistorizing) {
      size += 1 + 1;
    }
    if (HasMinimumSamplingInterval) {
      size += 1 + 8;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (HasUserAccessLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserAccessLevel);
    }
    if (userRolePermissions_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VariableNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessLevel) {
      AccessLevel = other.AccessLevel;
    }
    if (other.HasAccessLevelEx) {
      AccessLevelEx = other.AccessLevelEx;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasHistorizing) {
      Historizing = other.Historizing;
    }
    if (other.HasMinimumSamplingInterval) {
      MinimumSamplingInterval = other.MinimumSamplingInterval;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.HasUserAccessLevel) {
      UserAccessLevel = other.UserAccessLevel;
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessLevel = input.ReadUInt32();
          break;
        }
        case 16: {
          AccessLevelEx = input.ReadUInt32();
          break;
        }
        case 24: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 34: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 42: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 50: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 58: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 66: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 72: {
          Historizing = input.ReadBool();
          break;
        }
        case 81: {
          MinimumSamplingInterval = input.ReadDouble();
          break;
        }
        case 88: {
          NodeClass = (global::VariableNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 98: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 106: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 114: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 120: {
          UserAccessLevel = input.ReadUInt32();
          break;
        }
        case 130: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 136: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 146: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 152: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 160: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the VariableNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class VariableTypeAttributes : pb::IMessage<VariableTypeAttributes> {
  private static readonly pb::MessageParser<VariableTypeAttributes> _parser = new pb::MessageParser<VariableTypeAttributes>(() => new VariableTypeAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VariableTypeAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[300]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableTypeAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableTypeAttributes(VariableTypeAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    specifiedAttributes_ = other.specifiedAttributes_;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableTypeAttributes Clone() {
    return new VariableTypeAttributes(this);
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 1;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 2;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 4;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 5;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 1) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 6;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 2) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 7;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 4) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 8;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 9;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 8) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 8;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 10;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 16) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VariableTypeAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VariableTypeAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (arrayDimensions_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ArrayDimensions);
    }
    if (dataType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DisplayName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(40);
      output.WriteBool(IsAbstract);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(48);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(56);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(72);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(80);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VariableTypeAttributes other) {
    if (other == null) {
      return;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 18: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 34: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 40: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 48: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 56: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 66: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 72: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 80: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VariableTypeNode : pb::IMessage<VariableTypeNode> {
  private static readonly pb::MessageParser<VariableTypeNode> _parser = new pb::MessageParser<VariableTypeNode>(() => new VariableTypeNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VariableTypeNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[301]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableTypeNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableTypeNode(VariableTypeNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VariableTypeNode Clone() {
    return new VariableTypeNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 2;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 3;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 4;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 5;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 6;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 7;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 2) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 8;
  private readonly static global::VariableTypeNode.Types.NodeClass NodeClassDefaultValue = global::VariableTypeNode.Types.NodeClass.DataType64;

  private global::VariableTypeNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VariableTypeNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 4) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 4;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 9;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 10;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 11;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 12;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 13;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 14;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 15;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 16) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 16;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 16;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 32) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 32;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VariableTypeNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VariableTypeNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ArrayDimensions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(BrowseName);
    }
    if (dataType_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(DisplayName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(56);
      output.WriteBool(IsAbstract);
    }
    if (HasNodeClass) {
      output.WriteRawTag(64);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(104);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(120);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VariableTypeNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 26: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 34: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 42: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 50: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 56: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 64: {
          NodeClass = (global::VariableTypeNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 74: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 82: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 90: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 98: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 104: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 114: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 120: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 128: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the VariableTypeNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class ViewNode : pb::IMessage<ViewNode> {
  private static readonly pb::MessageParser<ViewNode> _parser = new pb::MessageParser<ViewNode>(() => new ViewNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ViewNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[302]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewNode(ViewNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    containsNoLoops_ = other.containsNoLoops_;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    eventNotifier_ = other.eventNotifier_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ViewNode Clone() {
    return new ViewNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 2;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "ContainsNoLoops" field.</summary>
  public const int ContainsNoLoopsFieldNumber = 3;
  private readonly static bool ContainsNoLoopsDefaultValue = false;

  private bool containsNoLoops_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ContainsNoLoops {
    get { if ((_hasBits0 & 2) != 0) { return containsNoLoops_; } else { return ContainsNoLoopsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      containsNoLoops_ = value;
    }
  }
  /// <summary>Gets whether the "ContainsNoLoops" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContainsNoLoops {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ContainsNoLoops" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContainsNoLoops() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 5;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 6;
  private readonly static uint EventNotifierDefaultValue = 0;

  private uint eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotifier {
    get { if ((_hasBits0 & 4) != 0) { return eventNotifier_; } else { return EventNotifierDefaultValue; } }
    set {
      _hasBits0 |= 4;
      eventNotifier_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotifier {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "EventNotifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotifier() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 7;
  private readonly static global::ViewNode.Types.NodeClass NodeClassDefaultValue = global::ViewNode.Types.NodeClass.DataType64;

  private global::ViewNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ViewNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 8) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 8;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 8;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 9;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 10;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 11;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 12;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 16) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 13;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 32) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 32;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ViewNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ViewNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (ContainsNoLoops != other.ContainsNoLoops) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (EventNotifier != other.EventNotifier) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (HasContainsNoLoops) hash ^= ContainsNoLoops.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasEventNotifier) hash ^= EventNotifier.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(BrowseName);
    }
    if (HasContainsNoLoops) {
      output.WriteRawTag(24);
      output.WriteBool(ContainsNoLoops);
    }
    if (description_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DisplayName);
    }
    if (HasEventNotifier) {
      output.WriteRawTag(48);
      output.WriteUInt32(EventNotifier);
    }
    if (HasNodeClass) {
      output.WriteRawTag(56);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(96);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(104);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (HasContainsNoLoops) {
      size += 1 + 1;
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasEventNotifier) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotifier);
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ViewNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.HasContainsNoLoops) {
      ContainsNoLoops = other.ContainsNoLoops;
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasEventNotifier) {
      EventNotifier = other.EventNotifier;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 24: {
          ContainsNoLoops = input.ReadBool();
          break;
        }
        case 34: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 42: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 48: {
          EventNotifier = input.ReadUInt32();
          break;
        }
        case 56: {
          NodeClass = (global::ViewNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 66: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 74: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 82: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 90: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 96: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 104: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ViewNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class WriteResponse : pb::IMessage<WriteResponse> {
  private static readonly pb::MessageParser<WriteResponse> _parser = new pb::MessageParser<WriteResponse>(() => new WriteResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WriteResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[303]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteResponse(WriteResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteResponse Clone() {
    return new WriteResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WriteResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WriteResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WriteResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class WriteValue : pb::IMessage<WriteValue> {
  private static readonly pb::MessageParser<WriteValue> _parser = new pb::MessageParser<WriteValue>(() => new WriteValue());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WriteValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[304]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteValue(WriteValue other) : this() {
    _hasBits0 = other._hasBits0;
    attributeId_ = other.attributeId_;
    indexRange_ = other.indexRange_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteValue Clone() {
    return new WriteValue(this);
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 1;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 2;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 3;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 4;
  private global::DataValue value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataValue Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WriteValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WriteValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttributeId != other.AttributeId) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAttributeId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AttributeId);
    }
    if (HasIndexRange) {
      output.WriteRawTag(18);
      output.WriteString(IndexRange);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(NodeId);
    }
    if (value_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WriteValue other) {
    if (other == null) {
      return;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::DataValue();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 18: {
          IndexRange = input.ReadString();
          break;
        }
        case 26: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 34: {
          if (value_ == null) {
            Value = new global::DataValue();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class ActivateSessionRequest : pb::IMessage<ActivateSessionRequest> {
  private static readonly pb::MessageParser<ActivateSessionRequest> _parser = new pb::MessageParser<ActivateSessionRequest>(() => new ActivateSessionRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ActivateSessionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[305]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivateSessionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivateSessionRequest(ActivateSessionRequest other) : this() {
    clientSignature_ = other.clientSignature_ != null ? other.clientSignature_.Clone() : null;
    clientSoftwareCertificates_ = other.clientSoftwareCertificates_ != null ? other.clientSoftwareCertificates_.Clone() : null;
    localeIds_ = other.localeIds_ != null ? other.localeIds_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    userIdentityToken_ = other.userIdentityToken_ != null ? other.userIdentityToken_.Clone() : null;
    userTokenSignature_ = other.userTokenSignature_ != null ? other.userTokenSignature_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivateSessionRequest Clone() {
    return new ActivateSessionRequest(this);
  }

  /// <summary>Field number for the "ClientSignature" field.</summary>
  public const int ClientSignatureFieldNumber = 1;
  private global::SignatureData clientSignature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SignatureData ClientSignature {
    get { return clientSignature_; }
    set {
      clientSignature_ = value;
    }
  }

  /// <summary>Field number for the "ClientSoftwareCertificates" field.</summary>
  public const int ClientSoftwareCertificatesFieldNumber = 2;
  private global::ListOfSignedSoftwareCertificate clientSoftwareCertificates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSignedSoftwareCertificate ClientSoftwareCertificates {
    get { return clientSoftwareCertificates_; }
    set {
      clientSoftwareCertificates_ = value;
    }
  }

  /// <summary>Field number for the "LocaleIds" field.</summary>
  public const int LocaleIdsFieldNumber = 3;
  private global::ListOfString localeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString LocaleIds {
    get { return localeIds_; }
    set {
      localeIds_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 4;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "UserIdentityToken" field.</summary>
  public const int UserIdentityTokenFieldNumber = 5;
  private global::ExtensionObject userIdentityToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject UserIdentityToken {
    get { return userIdentityToken_; }
    set {
      userIdentityToken_ = value;
    }
  }

  /// <summary>Field number for the "UserTokenSignature" field.</summary>
  public const int UserTokenSignatureFieldNumber = 6;
  private global::SignatureData userTokenSignature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SignatureData UserTokenSignature {
    get { return userTokenSignature_; }
    set {
      userTokenSignature_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ActivateSessionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ActivateSessionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ClientSignature, other.ClientSignature)) return false;
    if (!object.Equals(ClientSoftwareCertificates, other.ClientSoftwareCertificates)) return false;
    if (!object.Equals(LocaleIds, other.LocaleIds)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(UserIdentityToken, other.UserIdentityToken)) return false;
    if (!object.Equals(UserTokenSignature, other.UserTokenSignature)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (clientSignature_ != null) hash ^= ClientSignature.GetHashCode();
    if (clientSoftwareCertificates_ != null) hash ^= ClientSoftwareCertificates.GetHashCode();
    if (localeIds_ != null) hash ^= LocaleIds.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (userIdentityToken_ != null) hash ^= UserIdentityToken.GetHashCode();
    if (userTokenSignature_ != null) hash ^= UserTokenSignature.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (clientSignature_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ClientSignature);
    }
    if (clientSoftwareCertificates_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ClientSoftwareCertificates);
    }
    if (localeIds_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LocaleIds);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(RequestHeader);
    }
    if (userIdentityToken_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(UserIdentityToken);
    }
    if (userTokenSignature_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(UserTokenSignature);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (clientSignature_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientSignature);
    }
    if (clientSoftwareCertificates_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientSoftwareCertificates);
    }
    if (localeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocaleIds);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (userIdentityToken_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserIdentityToken);
    }
    if (userTokenSignature_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserTokenSignature);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ActivateSessionRequest other) {
    if (other == null) {
      return;
    }
    if (other.clientSignature_ != null) {
      if (clientSignature_ == null) {
        ClientSignature = new global::SignatureData();
      }
      ClientSignature.MergeFrom(other.ClientSignature);
    }
    if (other.clientSoftwareCertificates_ != null) {
      if (clientSoftwareCertificates_ == null) {
        ClientSoftwareCertificates = new global::ListOfSignedSoftwareCertificate();
      }
      ClientSoftwareCertificates.MergeFrom(other.ClientSoftwareCertificates);
    }
    if (other.localeIds_ != null) {
      if (localeIds_ == null) {
        LocaleIds = new global::ListOfString();
      }
      LocaleIds.MergeFrom(other.LocaleIds);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.userIdentityToken_ != null) {
      if (userIdentityToken_ == null) {
        UserIdentityToken = new global::ExtensionObject();
      }
      UserIdentityToken.MergeFrom(other.UserIdentityToken);
    }
    if (other.userTokenSignature_ != null) {
      if (userTokenSignature_ == null) {
        UserTokenSignature = new global::SignatureData();
      }
      UserTokenSignature.MergeFrom(other.UserTokenSignature);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (clientSignature_ == null) {
            ClientSignature = new global::SignatureData();
          }
          input.ReadMessage(ClientSignature);
          break;
        }
        case 18: {
          if (clientSoftwareCertificates_ == null) {
            ClientSoftwareCertificates = new global::ListOfSignedSoftwareCertificate();
          }
          input.ReadMessage(ClientSoftwareCertificates);
          break;
        }
        case 26: {
          if (localeIds_ == null) {
            LocaleIds = new global::ListOfString();
          }
          input.ReadMessage(LocaleIds);
          break;
        }
        case 34: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 42: {
          if (userIdentityToken_ == null) {
            UserIdentityToken = new global::ExtensionObject();
          }
          input.ReadMessage(UserIdentityToken);
          break;
        }
        case 50: {
          if (userTokenSignature_ == null) {
            UserTokenSignature = new global::SignatureData();
          }
          input.ReadMessage(UserTokenSignature);
          break;
        }
      }
    }
  }

}

public sealed partial class ActivateSessionResponse : pb::IMessage<ActivateSessionResponse> {
  private static readonly pb::MessageParser<ActivateSessionResponse> _parser = new pb::MessageParser<ActivateSessionResponse>(() => new ActivateSessionResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ActivateSessionResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[306]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivateSessionResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivateSessionResponse(ActivateSessionResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    serverNonce_ = other.serverNonce_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivateSessionResponse Clone() {
    return new ActivateSessionResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  /// <summary>Field number for the "ServerNonce" field.</summary>
  public const int ServerNonceFieldNumber = 4;
  private readonly static pb::ByteString ServerNonceDefaultValue = pb::ByteString.Empty;

  private pb::ByteString serverNonce_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ServerNonce {
    get { return serverNonce_ ?? ServerNonceDefaultValue; }
    set {
      serverNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerNonce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerNonce {
    get { return serverNonce_ != null; }
  }
  /// <summary>Clears the value of the "ServerNonce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerNonce() {
    serverNonce_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ActivateSessionResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ActivateSessionResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    if (ServerNonce != other.ServerNonce) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (HasServerNonce) hash ^= ServerNonce.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (HasServerNonce) {
      output.WriteRawTag(34);
      output.WriteBytes(ServerNonce);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (HasServerNonce) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerNonce);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ActivateSessionResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    if (other.HasServerNonce) {
      ServerNonce = other.ServerNonce;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
        case 34: {
          ServerNonce = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class AddNodesItem : pb::IMessage<AddNodesItem> {
  private static readonly pb::MessageParser<AddNodesItem> _parser = new pb::MessageParser<AddNodesItem>(() => new AddNodesItem());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddNodesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[307]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesItem(AddNodesItem other) : this() {
    _hasBits0 = other._hasBits0;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    nodeAttributes_ = other.nodeAttributes_ != null ? other.nodeAttributes_.Clone() : null;
    NodeClass_ = other.NodeClass_;
    parentNodeId_ = other.parentNodeId_ != null ? other.parentNodeId_.Clone() : null;
    referenceTypeId_ = other.referenceTypeId_ != null ? other.referenceTypeId_.Clone() : null;
    requestedNewNodeId_ = other.requestedNewNodeId_ != null ? other.requestedNewNodeId_.Clone() : null;
    typeDefinition_ = other.typeDefinition_ != null ? other.typeDefinition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesItem Clone() {
    return new AddNodesItem(this);
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 1;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "NodeAttributes" field.</summary>
  public const int NodeAttributesFieldNumber = 2;
  private global::ExtensionObject nodeAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject NodeAttributes {
    get { return nodeAttributes_; }
    set {
      nodeAttributes_ = value;
    }
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 3;
  private readonly static global::AddNodesItem.Types.NodeClass NodeClassDefaultValue = global::AddNodesItem.Types.NodeClass.DataType64;

  private global::AddNodesItem.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AddNodesItem.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 1) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 1;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ParentNodeId" field.</summary>
  public const int ParentNodeIdFieldNumber = 4;
  private global::ExpandedNodeId parentNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId ParentNodeId {
    get { return parentNodeId_; }
    set {
      parentNodeId_ = value;
    }
  }

  /// <summary>Field number for the "ReferenceTypeId" field.</summary>
  public const int ReferenceTypeIdFieldNumber = 5;
  private global::NodeId referenceTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ReferenceTypeId {
    get { return referenceTypeId_; }
    set {
      referenceTypeId_ = value;
    }
  }

  /// <summary>Field number for the "RequestedNewNodeId" field.</summary>
  public const int RequestedNewNodeIdFieldNumber = 6;
  private global::ExpandedNodeId requestedNewNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId RequestedNewNodeId {
    get { return requestedNewNodeId_; }
    set {
      requestedNewNodeId_ = value;
    }
  }

  /// <summary>Field number for the "TypeDefinition" field.</summary>
  public const int TypeDefinitionFieldNumber = 7;
  private global::ExpandedNodeId typeDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TypeDefinition {
    get { return typeDefinition_; }
    set {
      typeDefinition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddNodesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddNodesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(NodeAttributes, other.NodeAttributes)) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(ParentNodeId, other.ParentNodeId)) return false;
    if (!object.Equals(ReferenceTypeId, other.ReferenceTypeId)) return false;
    if (!object.Equals(RequestedNewNodeId, other.RequestedNewNodeId)) return false;
    if (!object.Equals(TypeDefinition, other.TypeDefinition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (nodeAttributes_ != null) hash ^= NodeAttributes.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (parentNodeId_ != null) hash ^= ParentNodeId.GetHashCode();
    if (referenceTypeId_ != null) hash ^= ReferenceTypeId.GetHashCode();
    if (requestedNewNodeId_ != null) hash ^= RequestedNewNodeId.GetHashCode();
    if (typeDefinition_ != null) hash ^= TypeDefinition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (browseName_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BrowseName);
    }
    if (nodeAttributes_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NodeAttributes);
    }
    if (HasNodeClass) {
      output.WriteRawTag(24);
      output.WriteEnum((int) NodeClass);
    }
    if (parentNodeId_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ParentNodeId);
    }
    if (referenceTypeId_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ReferenceTypeId);
    }
    if (requestedNewNodeId_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(RequestedNewNodeId);
    }
    if (typeDefinition_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(TypeDefinition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (nodeAttributes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeAttributes);
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (parentNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentNodeId);
    }
    if (referenceTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTypeId);
    }
    if (requestedNewNodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedNewNodeId);
    }
    if (typeDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeDefinition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddNodesItem other) {
    if (other == null) {
      return;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.nodeAttributes_ != null) {
      if (nodeAttributes_ == null) {
        NodeAttributes = new global::ExtensionObject();
      }
      NodeAttributes.MergeFrom(other.NodeAttributes);
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.parentNodeId_ != null) {
      if (parentNodeId_ == null) {
        ParentNodeId = new global::ExpandedNodeId();
      }
      ParentNodeId.MergeFrom(other.ParentNodeId);
    }
    if (other.referenceTypeId_ != null) {
      if (referenceTypeId_ == null) {
        ReferenceTypeId = new global::NodeId();
      }
      ReferenceTypeId.MergeFrom(other.ReferenceTypeId);
    }
    if (other.requestedNewNodeId_ != null) {
      if (requestedNewNodeId_ == null) {
        RequestedNewNodeId = new global::ExpandedNodeId();
      }
      RequestedNewNodeId.MergeFrom(other.RequestedNewNodeId);
    }
    if (other.typeDefinition_ != null) {
      if (typeDefinition_ == null) {
        TypeDefinition = new global::ExpandedNodeId();
      }
      TypeDefinition.MergeFrom(other.TypeDefinition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 18: {
          if (nodeAttributes_ == null) {
            NodeAttributes = new global::ExtensionObject();
          }
          input.ReadMessage(NodeAttributes);
          break;
        }
        case 24: {
          NodeClass = (global::AddNodesItem.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 34: {
          if (parentNodeId_ == null) {
            ParentNodeId = new global::ExpandedNodeId();
          }
          input.ReadMessage(ParentNodeId);
          break;
        }
        case 42: {
          if (referenceTypeId_ == null) {
            ReferenceTypeId = new global::NodeId();
          }
          input.ReadMessage(ReferenceTypeId);
          break;
        }
        case 50: {
          if (requestedNewNodeId_ == null) {
            RequestedNewNodeId = new global::ExpandedNodeId();
          }
          input.ReadMessage(RequestedNewNodeId);
          break;
        }
        case 58: {
          if (typeDefinition_ == null) {
            TypeDefinition = new global::ExpandedNodeId();
          }
          input.ReadMessage(TypeDefinition);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the AddNodesItem message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class AddNodesResponse : pb::IMessage<AddNodesResponse> {
  private static readonly pb::MessageParser<AddNodesResponse> _parser = new pb::MessageParser<AddNodesResponse>(() => new AddNodesResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddNodesResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[308]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesResponse(AddNodesResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesResponse Clone() {
    return new AddNodesResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfAddNodesResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfAddNodesResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddNodesResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddNodesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddNodesResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfAddNodesResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfAddNodesResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class AddReferencesRequest : pb::IMessage<AddReferencesRequest> {
  private static readonly pb::MessageParser<AddReferencesRequest> _parser = new pb::MessageParser<AddReferencesRequest>(() => new AddReferencesRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddReferencesRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[309]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesRequest(AddReferencesRequest other) : this() {
    referencesToAdd_ = other.referencesToAdd_ != null ? other.referencesToAdd_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesRequest Clone() {
    return new AddReferencesRequest(this);
  }

  /// <summary>Field number for the "ReferencesToAdd" field.</summary>
  public const int ReferencesToAddFieldNumber = 1;
  private global::ListOfAddReferencesItem referencesToAdd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfAddReferencesItem ReferencesToAdd {
    get { return referencesToAdd_; }
    set {
      referencesToAdd_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddReferencesRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddReferencesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ReferencesToAdd, other.ReferencesToAdd)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (referencesToAdd_ != null) hash ^= ReferencesToAdd.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (referencesToAdd_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ReferencesToAdd);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (referencesToAdd_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencesToAdd);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddReferencesRequest other) {
    if (other == null) {
      return;
    }
    if (other.referencesToAdd_ != null) {
      if (referencesToAdd_ == null) {
        ReferencesToAdd = new global::ListOfAddReferencesItem();
      }
      ReferencesToAdd.MergeFrom(other.ReferencesToAdd);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (referencesToAdd_ == null) {
            ReferencesToAdd = new global::ListOfAddReferencesItem();
          }
          input.ReadMessage(ReferencesToAdd);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class AddReferencesResponse : pb::IMessage<AddReferencesResponse> {
  private static readonly pb::MessageParser<AddReferencesResponse> _parser = new pb::MessageParser<AddReferencesResponse>(() => new AddReferencesResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddReferencesResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[310]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesResponse(AddReferencesResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddReferencesResponse Clone() {
    return new AddReferencesResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddReferencesResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddReferencesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddReferencesResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class AdditionalParametersType : pb::IMessage<AdditionalParametersType> {
  private static readonly pb::MessageParser<AdditionalParametersType> _parser = new pb::MessageParser<AdditionalParametersType>(() => new AdditionalParametersType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdditionalParametersType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[311]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdditionalParametersType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdditionalParametersType(AdditionalParametersType other) : this() {
    parameters_ = other.parameters_ != null ? other.parameters_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdditionalParametersType Clone() {
    return new AdditionalParametersType(this);
  }

  /// <summary>Field number for the "Parameters" field.</summary>
  public const int ParametersFieldNumber = 1;
  private global::ListOfKeyValuePair parameters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair Parameters {
    get { return parameters_; }
    set {
      parameters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdditionalParametersType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdditionalParametersType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Parameters, other.Parameters)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (parameters_ != null) hash ^= Parameters.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (parameters_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Parameters);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (parameters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameters);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdditionalParametersType other) {
    if (other == null) {
      return;
    }
    if (other.parameters_ != null) {
      if (parameters_ == null) {
        Parameters = new global::ListOfKeyValuePair();
      }
      Parameters.MergeFrom(other.Parameters);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (parameters_ == null) {
            Parameters = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(Parameters);
          break;
        }
      }
    }
  }

}

public sealed partial class AttributeOperand : pb::IMessage<AttributeOperand> {
  private static readonly pb::MessageParser<AttributeOperand> _parser = new pb::MessageParser<AttributeOperand>(() => new AttributeOperand());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AttributeOperand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[312]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AttributeOperand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AttributeOperand(AttributeOperand other) : this() {
    _hasBits0 = other._hasBits0;
    alias_ = other.alias_;
    attributeId_ = other.attributeId_;
    browsePath_ = other.browsePath_ != null ? other.browsePath_.Clone() : null;
    indexRange_ = other.indexRange_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AttributeOperand Clone() {
    return new AttributeOperand(this);
  }

  /// <summary>Field number for the "Alias" field.</summary>
  public const int AliasFieldNumber = 1;
  private readonly static string AliasDefaultValue = "";

  private string alias_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Alias {
    get { return alias_ ?? AliasDefaultValue; }
    set {
      alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Alias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAlias {
    get { return alias_ != null; }
  }
  /// <summary>Clears the value of the "Alias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAlias() {
    alias_ = null;
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 2;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowsePath" field.</summary>
  public const int BrowsePathFieldNumber = 3;
  private global::RelativePath browsePath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RelativePath BrowsePath {
    get { return browsePath_; }
    set {
      browsePath_ = value;
    }
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 4;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 5;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AttributeOperand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AttributeOperand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Alias != other.Alias) return false;
    if (AttributeId != other.AttributeId) return false;
    if (!object.Equals(BrowsePath, other.BrowsePath)) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAlias) hash ^= Alias.GetHashCode();
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (browsePath_ != null) hash ^= BrowsePath.GetHashCode();
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAlias) {
      output.WriteRawTag(10);
      output.WriteString(Alias);
    }
    if (HasAttributeId) {
      output.WriteRawTag(16);
      output.WriteUInt32(AttributeId);
    }
    if (browsePath_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(BrowsePath);
    }
    if (HasIndexRange) {
      output.WriteRawTag(34);
      output.WriteString(IndexRange);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(NodeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAlias) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
    }
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (browsePath_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowsePath);
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AttributeOperand other) {
    if (other == null) {
      return;
    }
    if (other.HasAlias) {
      Alias = other.Alias;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.browsePath_ != null) {
      if (browsePath_ == null) {
        BrowsePath = new global::RelativePath();
      }
      BrowsePath.MergeFrom(other.BrowsePath);
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Alias = input.ReadString();
          break;
        }
        case 16: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (browsePath_ == null) {
            BrowsePath = new global::RelativePath();
          }
          input.ReadMessage(BrowsePath);
          break;
        }
        case 34: {
          IndexRange = input.ReadString();
          break;
        }
        case 42: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
      }
    }
  }

}

public sealed partial class AxisInformation : pb::IMessage<AxisInformation> {
  private static readonly pb::MessageParser<AxisInformation> _parser = new pb::MessageParser<AxisInformation>(() => new AxisInformation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AxisInformation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[313]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AxisInformation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AxisInformation(AxisInformation other) : this() {
    _hasBits0 = other._hasBits0;
    axisScaleType_ = other.axisScaleType_;
    axisSteps_ = other.axisSteps_ != null ? other.axisSteps_.Clone() : null;
    eURange_ = other.eURange_ != null ? other.eURange_.Clone() : null;
    engineeringUnits_ = other.engineeringUnits_ != null ? other.engineeringUnits_.Clone() : null;
    title_ = other.title_ != null ? other.title_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AxisInformation Clone() {
    return new AxisInformation(this);
  }

  /// <summary>Field number for the "AxisScaleType" field.</summary>
  public const int AxisScaleTypeFieldNumber = 1;
  private readonly static global::AxisInformation.Types.AxisScaleEnumeration AxisScaleTypeDefaultValue = global::AxisInformation.Types.AxisScaleEnumeration.Linear0;

  private global::AxisInformation.Types.AxisScaleEnumeration axisScaleType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AxisInformation.Types.AxisScaleEnumeration AxisScaleType {
    get { if ((_hasBits0 & 1) != 0) { return axisScaleType_; } else { return AxisScaleTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      axisScaleType_ = value;
    }
  }
  /// <summary>Gets whether the "AxisScaleType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAxisScaleType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AxisScaleType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAxisScaleType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "AxisSteps" field.</summary>
  public const int AxisStepsFieldNumber = 2;
  private global::ListOfDouble axisSteps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDouble AxisSteps {
    get { return axisSteps_; }
    set {
      axisSteps_ = value;
    }
  }

  /// <summary>Field number for the "EURange" field.</summary>
  public const int EURangeFieldNumber = 3;
  private global::Range eURange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Range EURange {
    get { return eURange_; }
    set {
      eURange_ = value;
    }
  }

  /// <summary>Field number for the "EngineeringUnits" field.</summary>
  public const int EngineeringUnitsFieldNumber = 4;
  private global::EUInformation engineeringUnits_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EUInformation EngineeringUnits {
    get { return engineeringUnits_; }
    set {
      engineeringUnits_ = value;
    }
  }

  /// <summary>Field number for the "Title" field.</summary>
  public const int TitleFieldNumber = 5;
  private global::LocalizedText title_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Title {
    get { return title_; }
    set {
      title_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AxisInformation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AxisInformation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AxisScaleType != other.AxisScaleType) return false;
    if (!object.Equals(AxisSteps, other.AxisSteps)) return false;
    if (!object.Equals(EURange, other.EURange)) return false;
    if (!object.Equals(EngineeringUnits, other.EngineeringUnits)) return false;
    if (!object.Equals(Title, other.Title)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAxisScaleType) hash ^= AxisScaleType.GetHashCode();
    if (axisSteps_ != null) hash ^= AxisSteps.GetHashCode();
    if (eURange_ != null) hash ^= EURange.GetHashCode();
    if (engineeringUnits_ != null) hash ^= EngineeringUnits.GetHashCode();
    if (title_ != null) hash ^= Title.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAxisScaleType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) AxisScaleType);
    }
    if (axisSteps_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AxisSteps);
    }
    if (eURange_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(EURange);
    }
    if (engineeringUnits_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(EngineeringUnits);
    }
    if (title_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAxisScaleType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AxisScaleType);
    }
    if (axisSteps_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AxisSteps);
    }
    if (eURange_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EURange);
    }
    if (engineeringUnits_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EngineeringUnits);
    }
    if (title_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Title);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AxisInformation other) {
    if (other == null) {
      return;
    }
    if (other.HasAxisScaleType) {
      AxisScaleType = other.AxisScaleType;
    }
    if (other.axisSteps_ != null) {
      if (axisSteps_ == null) {
        AxisSteps = new global::ListOfDouble();
      }
      AxisSteps.MergeFrom(other.AxisSteps);
    }
    if (other.eURange_ != null) {
      if (eURange_ == null) {
        EURange = new global::Range();
      }
      EURange.MergeFrom(other.EURange);
    }
    if (other.engineeringUnits_ != null) {
      if (engineeringUnits_ == null) {
        EngineeringUnits = new global::EUInformation();
      }
      EngineeringUnits.MergeFrom(other.EngineeringUnits);
    }
    if (other.title_ != null) {
      if (title_ == null) {
        Title = new global::LocalizedText();
      }
      Title.MergeFrom(other.Title);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AxisScaleType = (global::AxisInformation.Types.AxisScaleEnumeration) input.ReadEnum();
          break;
        }
        case 18: {
          if (axisSteps_ == null) {
            AxisSteps = new global::ListOfDouble();
          }
          input.ReadMessage(AxisSteps);
          break;
        }
        case 26: {
          if (eURange_ == null) {
            EURange = new global::Range();
          }
          input.ReadMessage(EURange);
          break;
        }
        case 34: {
          if (engineeringUnits_ == null) {
            EngineeringUnits = new global::EUInformation();
          }
          input.ReadMessage(EngineeringUnits);
          break;
        }
        case 42: {
          if (title_ == null) {
            Title = new global::LocalizedText();
          }
          input.ReadMessage(Title);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the AxisInformation message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum AxisScaleEnumeration {
      [pbr::OriginalName("AxisScaleEnumeration_Linear_0")] Linear0 = 1,
      [pbr::OriginalName("AxisScaleEnumeration_Ln_2")] Ln2 = 2,
      [pbr::OriginalName("AxisScaleEnumeration_Log_1")] Log1 = 3,
    }

  }
  #endregion

}

public sealed partial class BrowseNextRequest : pb::IMessage<BrowseNextRequest> {
  private static readonly pb::MessageParser<BrowseNextRequest> _parser = new pb::MessageParser<BrowseNextRequest>(() => new BrowseNextRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowseNextRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[314]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseNextRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseNextRequest(BrowseNextRequest other) : this() {
    _hasBits0 = other._hasBits0;
    continuationPoints_ = other.continuationPoints_ != null ? other.continuationPoints_.Clone() : null;
    releaseContinuationPoints_ = other.releaseContinuationPoints_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseNextRequest Clone() {
    return new BrowseNextRequest(this);
  }

  /// <summary>Field number for the "ContinuationPoints" field.</summary>
  public const int ContinuationPointsFieldNumber = 1;
  private global::ListOfByteString continuationPoints_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfByteString ContinuationPoints {
    get { return continuationPoints_; }
    set {
      continuationPoints_ = value;
    }
  }

  /// <summary>Field number for the "ReleaseContinuationPoints" field.</summary>
  public const int ReleaseContinuationPointsFieldNumber = 2;
  private readonly static bool ReleaseContinuationPointsDefaultValue = false;

  private bool releaseContinuationPoints_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReleaseContinuationPoints {
    get { if ((_hasBits0 & 1) != 0) { return releaseContinuationPoints_; } else { return ReleaseContinuationPointsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      releaseContinuationPoints_ = value;
    }
  }
  /// <summary>Gets whether the "ReleaseContinuationPoints" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReleaseContinuationPoints {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ReleaseContinuationPoints" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReleaseContinuationPoints() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowseNextRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowseNextRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ContinuationPoints, other.ContinuationPoints)) return false;
    if (ReleaseContinuationPoints != other.ReleaseContinuationPoints) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (continuationPoints_ != null) hash ^= ContinuationPoints.GetHashCode();
    if (HasReleaseContinuationPoints) hash ^= ReleaseContinuationPoints.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (continuationPoints_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ContinuationPoints);
    }
    if (HasReleaseContinuationPoints) {
      output.WriteRawTag(16);
      output.WriteBool(ReleaseContinuationPoints);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (continuationPoints_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationPoints);
    }
    if (HasReleaseContinuationPoints) {
      size += 1 + 1;
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowseNextRequest other) {
    if (other == null) {
      return;
    }
    if (other.continuationPoints_ != null) {
      if (continuationPoints_ == null) {
        ContinuationPoints = new global::ListOfByteString();
      }
      ContinuationPoints.MergeFrom(other.ContinuationPoints);
    }
    if (other.HasReleaseContinuationPoints) {
      ReleaseContinuationPoints = other.ReleaseContinuationPoints;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (continuationPoints_ == null) {
            ContinuationPoints = new global::ListOfByteString();
          }
          input.ReadMessage(ContinuationPoints);
          break;
        }
        case 16: {
          ReleaseContinuationPoints = input.ReadBool();
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class BrowsePath : pb::IMessage<BrowsePath> {
  private static readonly pb::MessageParser<BrowsePath> _parser = new pb::MessageParser<BrowsePath>(() => new BrowsePath());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowsePath> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[315]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePath() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePath(BrowsePath other) : this() {
    RelativePath_ = other.RelativePath_ != null ? other.RelativePath_.Clone() : null;
    startingNode_ = other.startingNode_ != null ? other.startingNode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePath Clone() {
    return new BrowsePath(this);
  }

  /// <summary>Field number for the "_RelativePath" field.</summary>
  public const int RelativePathFieldNumber = 1;
  private global::RelativePath RelativePath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RelativePath RelativePath {
    get { return RelativePath_; }
    set {
      RelativePath_ = value;
    }
  }

  /// <summary>Field number for the "StartingNode" field.</summary>
  public const int StartingNodeFieldNumber = 2;
  private global::NodeId startingNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId StartingNode {
    get { return startingNode_; }
    set {
      startingNode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowsePath);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowsePath other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RelativePath, other.RelativePath)) return false;
    if (!object.Equals(StartingNode, other.StartingNode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RelativePath_ != null) hash ^= RelativePath.GetHashCode();
    if (startingNode_ != null) hash ^= StartingNode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RelativePath_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RelativePath);
    }
    if (startingNode_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(StartingNode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RelativePath_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelativePath);
    }
    if (startingNode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartingNode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowsePath other) {
    if (other == null) {
      return;
    }
    if (other.RelativePath_ != null) {
      if (RelativePath_ == null) {
        RelativePath = new global::RelativePath();
      }
      RelativePath.MergeFrom(other.RelativePath);
    }
    if (other.startingNode_ != null) {
      if (startingNode_ == null) {
        StartingNode = new global::NodeId();
      }
      StartingNode.MergeFrom(other.StartingNode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (RelativePath_ == null) {
            RelativePath = new global::RelativePath();
          }
          input.ReadMessage(RelativePath);
          break;
        }
        case 18: {
          if (startingNode_ == null) {
            StartingNode = new global::NodeId();
          }
          input.ReadMessage(StartingNode);
          break;
        }
      }
    }
  }

}

public sealed partial class BrowsePathResult : pb::IMessage<BrowsePathResult> {
  private static readonly pb::MessageParser<BrowsePathResult> _parser = new pb::MessageParser<BrowsePathResult>(() => new BrowsePathResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowsePathResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[316]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePathResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePathResult(BrowsePathResult other) : this() {
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    targets_ = other.targets_ != null ? other.targets_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowsePathResult Clone() {
    return new BrowsePathResult(this);
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  /// <summary>Field number for the "Targets" field.</summary>
  public const int TargetsFieldNumber = 2;
  private global::ListOfBrowsePathTarget targets_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfBrowsePathTarget Targets {
    get { return targets_; }
    set {
      targets_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowsePathResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowsePathResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    if (!object.Equals(Targets, other.Targets)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (targets_ != null) hash ^= Targets.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatusCode_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(StatusCode);
    }
    if (targets_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Targets);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (targets_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targets);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowsePathResult other) {
    if (other == null) {
      return;
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    if (other.targets_ != null) {
      if (targets_ == null) {
        Targets = new global::ListOfBrowsePathTarget();
      }
      Targets.MergeFrom(other.Targets);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
        case 18: {
          if (targets_ == null) {
            Targets = new global::ListOfBrowsePathTarget();
          }
          input.ReadMessage(Targets);
          break;
        }
      }
    }
  }

}

public sealed partial class BrowseRequest : pb::IMessage<BrowseRequest> {
  private static readonly pb::MessageParser<BrowseRequest> _parser = new pb::MessageParser<BrowseRequest>(() => new BrowseRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowseRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[317]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseRequest(BrowseRequest other) : this() {
    _hasBits0 = other._hasBits0;
    nodesToBrowse_ = other.nodesToBrowse_ != null ? other.nodesToBrowse_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    requestedMaxReferencesPerNode_ = other.requestedMaxReferencesPerNode_;
    view_ = other.view_ != null ? other.view_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseRequest Clone() {
    return new BrowseRequest(this);
  }

  /// <summary>Field number for the "NodesToBrowse" field.</summary>
  public const int NodesToBrowseFieldNumber = 1;
  private global::ListOfBrowseDescription nodesToBrowse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfBrowseDescription NodesToBrowse {
    get { return nodesToBrowse_; }
    set {
      nodesToBrowse_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "RequestedMaxReferencesPerNode" field.</summary>
  public const int RequestedMaxReferencesPerNodeFieldNumber = 3;
  private readonly static uint RequestedMaxReferencesPerNodeDefaultValue = 0;

  private uint requestedMaxReferencesPerNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestedMaxReferencesPerNode {
    get { if ((_hasBits0 & 1) != 0) { return requestedMaxReferencesPerNode_; } else { return RequestedMaxReferencesPerNodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestedMaxReferencesPerNode_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedMaxReferencesPerNode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedMaxReferencesPerNode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RequestedMaxReferencesPerNode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedMaxReferencesPerNode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "View" field.</summary>
  public const int ViewFieldNumber = 4;
  private global::ViewDescription view_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ViewDescription View {
    get { return view_; }
    set {
      view_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowseRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowseRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodesToBrowse, other.NodesToBrowse)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (RequestedMaxReferencesPerNode != other.RequestedMaxReferencesPerNode) return false;
    if (!object.Equals(View, other.View)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nodesToBrowse_ != null) hash ^= NodesToBrowse.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasRequestedMaxReferencesPerNode) hash ^= RequestedMaxReferencesPerNode.GetHashCode();
    if (view_ != null) hash ^= View.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nodesToBrowse_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodesToBrowse);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (HasRequestedMaxReferencesPerNode) {
      output.WriteRawTag(24);
      output.WriteUInt32(RequestedMaxReferencesPerNode);
    }
    if (view_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(View);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nodesToBrowse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToBrowse);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasRequestedMaxReferencesPerNode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestedMaxReferencesPerNode);
    }
    if (view_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(View);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowseRequest other) {
    if (other == null) {
      return;
    }
    if (other.nodesToBrowse_ != null) {
      if (nodesToBrowse_ == null) {
        NodesToBrowse = new global::ListOfBrowseDescription();
      }
      NodesToBrowse.MergeFrom(other.NodesToBrowse);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasRequestedMaxReferencesPerNode) {
      RequestedMaxReferencesPerNode = other.RequestedMaxReferencesPerNode;
    }
    if (other.view_ != null) {
      if (view_ == null) {
        View = new global::ViewDescription();
      }
      View.MergeFrom(other.View);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nodesToBrowse_ == null) {
            NodesToBrowse = new global::ListOfBrowseDescription();
          }
          input.ReadMessage(NodesToBrowse);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 24: {
          RequestedMaxReferencesPerNode = input.ReadUInt32();
          break;
        }
        case 34: {
          if (view_ == null) {
            View = new global::ViewDescription();
          }
          input.ReadMessage(View);
          break;
        }
      }
    }
  }

}

public sealed partial class BrowseResult : pb::IMessage<BrowseResult> {
  private static readonly pb::MessageParser<BrowseResult> _parser = new pb::MessageParser<BrowseResult>(() => new BrowseResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowseResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[318]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseResult(BrowseResult other) : this() {
    continuationPoint_ = other.continuationPoint_;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseResult Clone() {
    return new BrowseResult(this);
  }

  /// <summary>Field number for the "ContinuationPoint" field.</summary>
  public const int ContinuationPointFieldNumber = 1;
  private readonly static pb::ByteString ContinuationPointDefaultValue = pb::ByteString.Empty;

  private pb::ByteString continuationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ContinuationPoint {
    get { return continuationPoint_ ?? ContinuationPointDefaultValue; }
    set {
      continuationPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ContinuationPoint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContinuationPoint {
    get { return continuationPoint_ != null; }
  }
  /// <summary>Clears the value of the "ContinuationPoint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContinuationPoint() {
    continuationPoint_ = null;
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 2;
  private global::ListOfReferenceDescription references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceDescription References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 3;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowseResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowseResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ContinuationPoint != other.ContinuationPoint) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasContinuationPoint) hash ^= ContinuationPoint.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasContinuationPoint) {
      output.WriteRawTag(10);
      output.WriteBytes(ContinuationPoint);
    }
    if (references_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(References);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasContinuationPoint) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationPoint);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowseResult other) {
    if (other == null) {
      return;
    }
    if (other.HasContinuationPoint) {
      ContinuationPoint = other.ContinuationPoint;
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceDescription();
      }
      References.MergeFrom(other.References);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContinuationPoint = input.ReadBytes();
          break;
        }
        case 18: {
          if (references_ == null) {
            References = new global::ListOfReferenceDescription();
          }
          input.ReadMessage(References);
          break;
        }
        case 26: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class CallMethodRequest : pb::IMessage<CallMethodRequest> {
  private static readonly pb::MessageParser<CallMethodRequest> _parser = new pb::MessageParser<CallMethodRequest>(() => new CallMethodRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CallMethodRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[319]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallMethodRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallMethodRequest(CallMethodRequest other) : this() {
    inputArguments_ = other.inputArguments_ != null ? other.inputArguments_.Clone() : null;
    methodId_ = other.methodId_ != null ? other.methodId_.Clone() : null;
    objectId_ = other.objectId_ != null ? other.objectId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallMethodRequest Clone() {
    return new CallMethodRequest(this);
  }

  /// <summary>Field number for the "InputArguments" field.</summary>
  public const int InputArgumentsFieldNumber = 1;
  private global::ListOfVariant inputArguments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfVariant InputArguments {
    get { return inputArguments_; }
    set {
      inputArguments_ = value;
    }
  }

  /// <summary>Field number for the "MethodId" field.</summary>
  public const int MethodIdFieldNumber = 2;
  private global::NodeId methodId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId MethodId {
    get { return methodId_; }
    set {
      methodId_ = value;
    }
  }

  /// <summary>Field number for the "ObjectId" field.</summary>
  public const int ObjectIdFieldNumber = 3;
  private global::NodeId objectId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId ObjectId {
    get { return objectId_; }
    set {
      objectId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CallMethodRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CallMethodRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(InputArguments, other.InputArguments)) return false;
    if (!object.Equals(MethodId, other.MethodId)) return false;
    if (!object.Equals(ObjectId, other.ObjectId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (inputArguments_ != null) hash ^= InputArguments.GetHashCode();
    if (methodId_ != null) hash ^= MethodId.GetHashCode();
    if (objectId_ != null) hash ^= ObjectId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (inputArguments_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(InputArguments);
    }
    if (methodId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MethodId);
    }
    if (objectId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ObjectId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (inputArguments_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputArguments);
    }
    if (methodId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MethodId);
    }
    if (objectId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CallMethodRequest other) {
    if (other == null) {
      return;
    }
    if (other.inputArguments_ != null) {
      if (inputArguments_ == null) {
        InputArguments = new global::ListOfVariant();
      }
      InputArguments.MergeFrom(other.InputArguments);
    }
    if (other.methodId_ != null) {
      if (methodId_ == null) {
        MethodId = new global::NodeId();
      }
      MethodId.MergeFrom(other.MethodId);
    }
    if (other.objectId_ != null) {
      if (objectId_ == null) {
        ObjectId = new global::NodeId();
      }
      ObjectId.MergeFrom(other.ObjectId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (inputArguments_ == null) {
            InputArguments = new global::ListOfVariant();
          }
          input.ReadMessage(InputArguments);
          break;
        }
        case 18: {
          if (methodId_ == null) {
            MethodId = new global::NodeId();
          }
          input.ReadMessage(MethodId);
          break;
        }
        case 26: {
          if (objectId_ == null) {
            ObjectId = new global::NodeId();
          }
          input.ReadMessage(ObjectId);
          break;
        }
      }
    }
  }

}

public sealed partial class CallMethodResult : pb::IMessage<CallMethodResult> {
  private static readonly pb::MessageParser<CallMethodResult> _parser = new pb::MessageParser<CallMethodResult>(() => new CallMethodResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CallMethodResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[320]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallMethodResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallMethodResult(CallMethodResult other) : this() {
    inputArgumentDiagnosticInfos_ = other.inputArgumentDiagnosticInfos_ != null ? other.inputArgumentDiagnosticInfos_.Clone() : null;
    inputArgumentResults_ = other.inputArgumentResults_ != null ? other.inputArgumentResults_.Clone() : null;
    outputArguments_ = other.outputArguments_ != null ? other.outputArguments_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallMethodResult Clone() {
    return new CallMethodResult(this);
  }

  /// <summary>Field number for the "InputArgumentDiagnosticInfos" field.</summary>
  public const int InputArgumentDiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo inputArgumentDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo InputArgumentDiagnosticInfos {
    get { return inputArgumentDiagnosticInfos_; }
    set {
      inputArgumentDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "InputArgumentResults" field.</summary>
  public const int InputArgumentResultsFieldNumber = 2;
  private global::ListOfStatusCode inputArgumentResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode InputArgumentResults {
    get { return inputArgumentResults_; }
    set {
      inputArgumentResults_ = value;
    }
  }

  /// <summary>Field number for the "OutputArguments" field.</summary>
  public const int OutputArgumentsFieldNumber = 3;
  private global::ListOfVariant outputArguments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfVariant OutputArguments {
    get { return outputArguments_; }
    set {
      outputArguments_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 4;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CallMethodResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CallMethodResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(InputArgumentDiagnosticInfos, other.InputArgumentDiagnosticInfos)) return false;
    if (!object.Equals(InputArgumentResults, other.InputArgumentResults)) return false;
    if (!object.Equals(OutputArguments, other.OutputArguments)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (inputArgumentDiagnosticInfos_ != null) hash ^= InputArgumentDiagnosticInfos.GetHashCode();
    if (inputArgumentResults_ != null) hash ^= InputArgumentResults.GetHashCode();
    if (outputArguments_ != null) hash ^= OutputArguments.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (inputArgumentDiagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(InputArgumentDiagnosticInfos);
    }
    if (inputArgumentResults_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(InputArgumentResults);
    }
    if (outputArguments_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(OutputArguments);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (inputArgumentDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputArgumentDiagnosticInfos);
    }
    if (inputArgumentResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputArgumentResults);
    }
    if (outputArguments_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputArguments);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CallMethodResult other) {
    if (other == null) {
      return;
    }
    if (other.inputArgumentDiagnosticInfos_ != null) {
      if (inputArgumentDiagnosticInfos_ == null) {
        InputArgumentDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      InputArgumentDiagnosticInfos.MergeFrom(other.InputArgumentDiagnosticInfos);
    }
    if (other.inputArgumentResults_ != null) {
      if (inputArgumentResults_ == null) {
        InputArgumentResults = new global::ListOfStatusCode();
      }
      InputArgumentResults.MergeFrom(other.InputArgumentResults);
    }
    if (other.outputArguments_ != null) {
      if (outputArguments_ == null) {
        OutputArguments = new global::ListOfVariant();
      }
      OutputArguments.MergeFrom(other.OutputArguments);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (inputArgumentDiagnosticInfos_ == null) {
            InputArgumentDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(InputArgumentDiagnosticInfos);
          break;
        }
        case 18: {
          if (inputArgumentResults_ == null) {
            InputArgumentResults = new global::ListOfStatusCode();
          }
          input.ReadMessage(InputArgumentResults);
          break;
        }
        case 26: {
          if (outputArguments_ == null) {
            OutputArguments = new global::ListOfVariant();
          }
          input.ReadMessage(OutputArguments);
          break;
        }
        case 34: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class CancelRequest : pb::IMessage<CancelRequest> {
  private static readonly pb::MessageParser<CancelRequest> _parser = new pb::MessageParser<CancelRequest>(() => new CancelRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CancelRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[321]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelRequest(CancelRequest other) : this() {
    _hasBits0 = other._hasBits0;
    requestHandle_ = other.requestHandle_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelRequest Clone() {
    return new CancelRequest(this);
  }

  /// <summary>Field number for the "RequestHandle" field.</summary>
  public const int RequestHandleFieldNumber = 1;
  private readonly static uint RequestHandleDefaultValue = 0;

  private uint requestHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestHandle {
    get { if ((_hasBits0 & 1) != 0) { return requestHandle_; } else { return RequestHandleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestHandle_ = value;
    }
  }
  /// <summary>Gets whether the "RequestHandle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestHandle {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RequestHandle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestHandle() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CancelRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CancelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestHandle != other.RequestHandle) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRequestHandle) hash ^= RequestHandle.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasRequestHandle) {
      output.WriteRawTag(8);
      output.WriteUInt32(RequestHandle);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRequestHandle) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestHandle);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CancelRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasRequestHandle) {
      RequestHandle = other.RequestHandle;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestHandle = input.ReadUInt32();
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class CancelResponse : pb::IMessage<CancelResponse> {
  private static readonly pb::MessageParser<CancelResponse> _parser = new pb::MessageParser<CancelResponse>(() => new CancelResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CancelResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[322]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelResponse(CancelResponse other) : this() {
    _hasBits0 = other._hasBits0;
    cancelCount_ = other.cancelCount_;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelResponse Clone() {
    return new CancelResponse(this);
  }

  /// <summary>Field number for the "CancelCount" field.</summary>
  public const int CancelCountFieldNumber = 1;
  private readonly static uint CancelCountDefaultValue = 0;

  private uint cancelCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CancelCount {
    get { if ((_hasBits0 & 1) != 0) { return cancelCount_; } else { return CancelCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      cancelCount_ = value;
    }
  }
  /// <summary>Gets whether the "CancelCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCancelCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "CancelCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCancelCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CancelResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CancelResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CancelCount != other.CancelCount) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCancelCount) hash ^= CancelCount.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCancelCount) {
      output.WriteRawTag(8);
      output.WriteUInt32(CancelCount);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCancelCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CancelCount);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CancelResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasCancelCount) {
      CancelCount = other.CancelCount;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CancelCount = input.ReadUInt32();
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class CloseSecureChannelRequest : pb::IMessage<CloseSecureChannelRequest> {
  private static readonly pb::MessageParser<CloseSecureChannelRequest> _parser = new pb::MessageParser<CloseSecureChannelRequest>(() => new CloseSecureChannelRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloseSecureChannelRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[323]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSecureChannelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSecureChannelRequest(CloseSecureChannelRequest other) : this() {
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSecureChannelRequest Clone() {
    return new CloseSecureChannelRequest(this);
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloseSecureChannelRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloseSecureChannelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloseSecureChannelRequest other) {
    if (other == null) {
      return;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class CloseSecureChannelResponse : pb::IMessage<CloseSecureChannelResponse> {
  private static readonly pb::MessageParser<CloseSecureChannelResponse> _parser = new pb::MessageParser<CloseSecureChannelResponse>(() => new CloseSecureChannelResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloseSecureChannelResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[324]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSecureChannelResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSecureChannelResponse(CloseSecureChannelResponse other) : this() {
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSecureChannelResponse Clone() {
    return new CloseSecureChannelResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloseSecureChannelResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloseSecureChannelResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloseSecureChannelResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class CloseSessionRequest : pb::IMessage<CloseSessionRequest> {
  private static readonly pb::MessageParser<CloseSessionRequest> _parser = new pb::MessageParser<CloseSessionRequest>(() => new CloseSessionRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloseSessionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[325]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSessionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSessionRequest(CloseSessionRequest other) : this() {
    _hasBits0 = other._hasBits0;
    deleteSubscriptions_ = other.deleteSubscriptions_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSessionRequest Clone() {
    return new CloseSessionRequest(this);
  }

  /// <summary>Field number for the "DeleteSubscriptions" field.</summary>
  public const int DeleteSubscriptionsFieldNumber = 1;
  private readonly static bool DeleteSubscriptionsDefaultValue = false;

  private bool deleteSubscriptions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DeleteSubscriptions {
    get { if ((_hasBits0 & 1) != 0) { return deleteSubscriptions_; } else { return DeleteSubscriptionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deleteSubscriptions_ = value;
    }
  }
  /// <summary>Gets whether the "DeleteSubscriptions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeleteSubscriptions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DeleteSubscriptions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeleteSubscriptions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloseSessionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloseSessionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeleteSubscriptions != other.DeleteSubscriptions) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeleteSubscriptions) hash ^= DeleteSubscriptions.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDeleteSubscriptions) {
      output.WriteRawTag(8);
      output.WriteBool(DeleteSubscriptions);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeleteSubscriptions) {
      size += 1 + 1;
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloseSessionRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasDeleteSubscriptions) {
      DeleteSubscriptions = other.DeleteSubscriptions;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DeleteSubscriptions = input.ReadBool();
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class CloseSessionResponse : pb::IMessage<CloseSessionResponse> {
  private static readonly pb::MessageParser<CloseSessionResponse> _parser = new pb::MessageParser<CloseSessionResponse>(() => new CloseSessionResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloseSessionResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[326]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSessionResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSessionResponse(CloseSessionResponse other) : this() {
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseSessionResponse Clone() {
    return new CloseSessionResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloseSessionResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloseSessionResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloseSessionResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class ConnectionTransportDataType : pb::IMessage<ConnectionTransportDataType> {
  private static readonly pb::MessageParser<ConnectionTransportDataType> _parser = new pb::MessageParser<ConnectionTransportDataType>(() => new ConnectionTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ConnectionTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[327]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectionTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectionTransportDataType(ConnectionTransportDataType other) : this() {
    authenticationProfileUri_ = other.authenticationProfileUri_;
    discoveryAddress_ = other.discoveryAddress_ != null ? other.discoveryAddress_.Clone() : null;
    resourceUri_ = other.resourceUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectionTransportDataType Clone() {
    return new ConnectionTransportDataType(this);
  }

  /// <summary>Field number for the "AuthenticationProfileUri" field.</summary>
  public const int AuthenticationProfileUriFieldNumber = 1;
  private readonly static string AuthenticationProfileUriDefaultValue = "";

  private string authenticationProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthenticationProfileUri {
    get { return authenticationProfileUri_ ?? AuthenticationProfileUriDefaultValue; }
    set {
      authenticationProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "AuthenticationProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthenticationProfileUri {
    get { return authenticationProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "AuthenticationProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthenticationProfileUri() {
    authenticationProfileUri_ = null;
  }

  /// <summary>Field number for the "DiscoveryAddress" field.</summary>
  public const int DiscoveryAddressFieldNumber = 2;
  private global::ExtensionObject discoveryAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject DiscoveryAddress {
    get { return discoveryAddress_; }
    set {
      discoveryAddress_ = value;
    }
  }

  /// <summary>Field number for the "ResourceUri" field.</summary>
  public const int ResourceUriFieldNumber = 3;
  private readonly static string ResourceUriDefaultValue = "";

  private string resourceUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResourceUri {
    get { return resourceUri_ ?? ResourceUriDefaultValue; }
    set {
      resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ResourceUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResourceUri {
    get { return resourceUri_ != null; }
  }
  /// <summary>Clears the value of the "ResourceUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResourceUri() {
    resourceUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ConnectionTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ConnectionTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthenticationProfileUri != other.AuthenticationProfileUri) return false;
    if (!object.Equals(DiscoveryAddress, other.DiscoveryAddress)) return false;
    if (ResourceUri != other.ResourceUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthenticationProfileUri) hash ^= AuthenticationProfileUri.GetHashCode();
    if (discoveryAddress_ != null) hash ^= DiscoveryAddress.GetHashCode();
    if (HasResourceUri) hash ^= ResourceUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthenticationProfileUri) {
      output.WriteRawTag(10);
      output.WriteString(AuthenticationProfileUri);
    }
    if (discoveryAddress_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DiscoveryAddress);
    }
    if (HasResourceUri) {
      output.WriteRawTag(26);
      output.WriteString(ResourceUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthenticationProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationProfileUri);
    }
    if (discoveryAddress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscoveryAddress);
    }
    if (HasResourceUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ConnectionTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthenticationProfileUri) {
      AuthenticationProfileUri = other.AuthenticationProfileUri;
    }
    if (other.discoveryAddress_ != null) {
      if (discoveryAddress_ == null) {
        DiscoveryAddress = new global::ExtensionObject();
      }
      DiscoveryAddress.MergeFrom(other.DiscoveryAddress);
    }
    if (other.HasResourceUri) {
      ResourceUri = other.ResourceUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthenticationProfileUri = input.ReadString();
          break;
        }
        case 18: {
          if (discoveryAddress_ == null) {
            DiscoveryAddress = new global::ExtensionObject();
          }
          input.ReadMessage(DiscoveryAddress);
          break;
        }
        case 26: {
          ResourceUri = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ContentFilterElement : pb::IMessage<ContentFilterElement> {
  private static readonly pb::MessageParser<ContentFilterElement> _parser = new pb::MessageParser<ContentFilterElement>(() => new ContentFilterElement());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ContentFilterElement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[328]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterElement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterElement(ContentFilterElement other) : this() {
    _hasBits0 = other._hasBits0;
    filterOperands_ = other.filterOperands_ != null ? other.filterOperands_.Clone() : null;
    FilterOperator_ = other.FilterOperator_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterElement Clone() {
    return new ContentFilterElement(this);
  }

  /// <summary>Field number for the "FilterOperands" field.</summary>
  public const int FilterOperandsFieldNumber = 1;
  private global::ListOfExtensionObject filterOperands_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfExtensionObject FilterOperands {
    get { return filterOperands_; }
    set {
      filterOperands_ = value;
    }
  }

  /// <summary>Field number for the "_FilterOperator" field.</summary>
  public const int FilterOperatorFieldNumber = 2;
  private readonly static global::ContentFilterElement.Types.FilterOperator FilterOperatorDefaultValue = global::ContentFilterElement.Types.FilterOperator.And10;

  private global::ContentFilterElement.Types.FilterOperator FilterOperator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilterElement.Types.FilterOperator FilterOperator {
    get { if ((_hasBits0 & 1) != 0) { return FilterOperator_; } else { return FilterOperatorDefaultValue; } }
    set {
      _hasBits0 |= 1;
      FilterOperator_ = value;
    }
  }
  /// <summary>Gets whether the "_FilterOperator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFilterOperator {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_FilterOperator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFilterOperator() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ContentFilterElement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ContentFilterElement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FilterOperands, other.FilterOperands)) return false;
    if (FilterOperator != other.FilterOperator) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (filterOperands_ != null) hash ^= FilterOperands.GetHashCode();
    if (HasFilterOperator) hash ^= FilterOperator.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (filterOperands_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FilterOperands);
    }
    if (HasFilterOperator) {
      output.WriteRawTag(16);
      output.WriteEnum((int) FilterOperator);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (filterOperands_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterOperands);
    }
    if (HasFilterOperator) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilterOperator);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ContentFilterElement other) {
    if (other == null) {
      return;
    }
    if (other.filterOperands_ != null) {
      if (filterOperands_ == null) {
        FilterOperands = new global::ListOfExtensionObject();
      }
      FilterOperands.MergeFrom(other.FilterOperands);
    }
    if (other.HasFilterOperator) {
      FilterOperator = other.FilterOperator;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (filterOperands_ == null) {
            FilterOperands = new global::ListOfExtensionObject();
          }
          input.ReadMessage(FilterOperands);
          break;
        }
        case 16: {
          FilterOperator = (global::ContentFilterElement.Types.FilterOperator) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ContentFilterElement message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum FilterOperator {
      [pbr::OriginalName("FilterOperator_And_10")] And10 = 1,
      [pbr::OriginalName("FilterOperator_Between_8")] Between8 = 2,
      [pbr::OriginalName("FilterOperator_BitwiseAnd_16")] BitwiseAnd16 = 3,
      [pbr::OriginalName("FilterOperator_BitwiseOr_17")] BitwiseOr17 = 4,
      [pbr::OriginalName("FilterOperator_Cast_12")] Cast12 = 5,
      [pbr::OriginalName("FilterOperator_Equals_0")] Equals0 = 6,
      [pbr::OriginalName("FilterOperator_GreaterThanOrEqual_4")] GreaterThanOrEqual4 = 7,
      [pbr::OriginalName("FilterOperator_GreaterThan_2")] GreaterThan2 = 8,
      [pbr::OriginalName("FilterOperator_InList_9")] InList9 = 9,
      [pbr::OriginalName("FilterOperator_InView_13")] InView13 = 10,
      [pbr::OriginalName("FilterOperator_IsNull_1")] IsNull1 = 11,
      [pbr::OriginalName("FilterOperator_LessThanOrEqual_5")] LessThanOrEqual5 = 12,
      [pbr::OriginalName("FilterOperator_LessThan_3")] LessThan3 = 13,
      [pbr::OriginalName("FilterOperator_Like_6")] Like6 = 14,
      [pbr::OriginalName("FilterOperator_Not_7")] Not7 = 15,
      [pbr::OriginalName("FilterOperator_OfType_14")] OfType14 = 16,
      [pbr::OriginalName("FilterOperator_Or_11")] Or11 = 17,
      [pbr::OriginalName("FilterOperator_RelatedTo_15")] RelatedTo15 = 18,
    }

  }
  #endregion

}

public sealed partial class ContentFilterElementResult : pb::IMessage<ContentFilterElementResult> {
  private static readonly pb::MessageParser<ContentFilterElementResult> _parser = new pb::MessageParser<ContentFilterElementResult>(() => new ContentFilterElementResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ContentFilterElementResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[329]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterElementResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterElementResult(ContentFilterElementResult other) : this() {
    operandDiagnosticInfos_ = other.operandDiagnosticInfos_ != null ? other.operandDiagnosticInfos_.Clone() : null;
    operandStatusCodes_ = other.operandStatusCodes_ != null ? other.operandStatusCodes_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterElementResult Clone() {
    return new ContentFilterElementResult(this);
  }

  /// <summary>Field number for the "OperandDiagnosticInfos" field.</summary>
  public const int OperandDiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo operandDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo OperandDiagnosticInfos {
    get { return operandDiagnosticInfos_; }
    set {
      operandDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "OperandStatusCodes" field.</summary>
  public const int OperandStatusCodesFieldNumber = 2;
  private global::ListOfStatusCode operandStatusCodes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode OperandStatusCodes {
    get { return operandStatusCodes_; }
    set {
      operandStatusCodes_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 3;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ContentFilterElementResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ContentFilterElementResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(OperandDiagnosticInfos, other.OperandDiagnosticInfos)) return false;
    if (!object.Equals(OperandStatusCodes, other.OperandStatusCodes)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (operandDiagnosticInfos_ != null) hash ^= OperandDiagnosticInfos.GetHashCode();
    if (operandStatusCodes_ != null) hash ^= OperandStatusCodes.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (operandDiagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(OperandDiagnosticInfos);
    }
    if (operandStatusCodes_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(OperandStatusCodes);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (operandDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperandDiagnosticInfos);
    }
    if (operandStatusCodes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperandStatusCodes);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ContentFilterElementResult other) {
    if (other == null) {
      return;
    }
    if (other.operandDiagnosticInfos_ != null) {
      if (operandDiagnosticInfos_ == null) {
        OperandDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      OperandDiagnosticInfos.MergeFrom(other.OperandDiagnosticInfos);
    }
    if (other.operandStatusCodes_ != null) {
      if (operandStatusCodes_ == null) {
        OperandStatusCodes = new global::ListOfStatusCode();
      }
      OperandStatusCodes.MergeFrom(other.OperandStatusCodes);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (operandDiagnosticInfos_ == null) {
            OperandDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(OperandDiagnosticInfos);
          break;
        }
        case 18: {
          if (operandStatusCodes_ == null) {
            OperandStatusCodes = new global::ListOfStatusCode();
          }
          input.ReadMessage(OperandStatusCodes);
          break;
        }
        case 26: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class CreateSessionRequest : pb::IMessage<CreateSessionRequest> {
  private static readonly pb::MessageParser<CreateSessionRequest> _parser = new pb::MessageParser<CreateSessionRequest>(() => new CreateSessionRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateSessionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[330]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSessionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSessionRequest(CreateSessionRequest other) : this() {
    _hasBits0 = other._hasBits0;
    clientCertificate_ = other.clientCertificate_;
    clientDescription_ = other.clientDescription_ != null ? other.clientDescription_.Clone() : null;
    clientNonce_ = other.clientNonce_;
    endpointUrl_ = other.endpointUrl_;
    maxResponseMessageSize_ = other.maxResponseMessageSize_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    requestedSessionTimeout_ = other.requestedSessionTimeout_;
    serverUri_ = other.serverUri_;
    sessionName_ = other.sessionName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSessionRequest Clone() {
    return new CreateSessionRequest(this);
  }

  /// <summary>Field number for the "ClientCertificate" field.</summary>
  public const int ClientCertificateFieldNumber = 1;
  private readonly static pb::ByteString ClientCertificateDefaultValue = pb::ByteString.Empty;

  private pb::ByteString clientCertificate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ClientCertificate {
    get { return clientCertificate_ ?? ClientCertificateDefaultValue; }
    set {
      clientCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ClientCertificate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientCertificate {
    get { return clientCertificate_ != null; }
  }
  /// <summary>Clears the value of the "ClientCertificate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientCertificate() {
    clientCertificate_ = null;
  }

  /// <summary>Field number for the "ClientDescription" field.</summary>
  public const int ClientDescriptionFieldNumber = 2;
  private global::ApplicationDescription clientDescription_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ApplicationDescription ClientDescription {
    get { return clientDescription_; }
    set {
      clientDescription_ = value;
    }
  }

  /// <summary>Field number for the "ClientNonce" field.</summary>
  public const int ClientNonceFieldNumber = 3;
  private readonly static pb::ByteString ClientNonceDefaultValue = pb::ByteString.Empty;

  private pb::ByteString clientNonce_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ClientNonce {
    get { return clientNonce_ ?? ClientNonceDefaultValue; }
    set {
      clientNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ClientNonce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientNonce {
    get { return clientNonce_ != null; }
  }
  /// <summary>Clears the value of the "ClientNonce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientNonce() {
    clientNonce_ = null;
  }

  /// <summary>Field number for the "EndpointUrl" field.</summary>
  public const int EndpointUrlFieldNumber = 4;
  private readonly static string EndpointUrlDefaultValue = "";

  private string endpointUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EndpointUrl {
    get { return endpointUrl_ ?? EndpointUrlDefaultValue; }
    set {
      endpointUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EndpointUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndpointUrl {
    get { return endpointUrl_ != null; }
  }
  /// <summary>Clears the value of the "EndpointUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndpointUrl() {
    endpointUrl_ = null;
  }

  /// <summary>Field number for the "MaxResponseMessageSize" field.</summary>
  public const int MaxResponseMessageSizeFieldNumber = 5;
  private readonly static uint MaxResponseMessageSizeDefaultValue = 0;

  private uint maxResponseMessageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxResponseMessageSize {
    get { if ((_hasBits0 & 1) != 0) { return maxResponseMessageSize_; } else { return MaxResponseMessageSizeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      maxResponseMessageSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxResponseMessageSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxResponseMessageSize {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MaxResponseMessageSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxResponseMessageSize() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 6;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "RequestedSessionTimeout" field.</summary>
  public const int RequestedSessionTimeoutFieldNumber = 7;
  private readonly static double RequestedSessionTimeoutDefaultValue = 0D;

  private double requestedSessionTimeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RequestedSessionTimeout {
    get { if ((_hasBits0 & 2) != 0) { return requestedSessionTimeout_; } else { return RequestedSessionTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 2;
      requestedSessionTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedSessionTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedSessionTimeout {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RequestedSessionTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedSessionTimeout() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ServerUri" field.</summary>
  public const int ServerUriFieldNumber = 8;
  private readonly static string ServerUriDefaultValue = "";

  private string serverUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerUri {
    get { return serverUri_ ?? ServerUriDefaultValue; }
    set {
      serverUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerUri {
    get { return serverUri_ != null; }
  }
  /// <summary>Clears the value of the "ServerUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerUri() {
    serverUri_ = null;
  }

  /// <summary>Field number for the "SessionName" field.</summary>
  public const int SessionNameFieldNumber = 9;
  private readonly static string SessionNameDefaultValue = "";

  private string sessionName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionName {
    get { return sessionName_ ?? SessionNameDefaultValue; }
    set {
      sessionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SessionName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSessionName {
    get { return sessionName_ != null; }
  }
  /// <summary>Clears the value of the "SessionName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSessionName() {
    sessionName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateSessionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateSessionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientCertificate != other.ClientCertificate) return false;
    if (!object.Equals(ClientDescription, other.ClientDescription)) return false;
    if (ClientNonce != other.ClientNonce) return false;
    if (EndpointUrl != other.EndpointUrl) return false;
    if (MaxResponseMessageSize != other.MaxResponseMessageSize) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RequestedSessionTimeout, other.RequestedSessionTimeout)) return false;
    if (ServerUri != other.ServerUri) return false;
    if (SessionName != other.SessionName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientCertificate) hash ^= ClientCertificate.GetHashCode();
    if (clientDescription_ != null) hash ^= ClientDescription.GetHashCode();
    if (HasClientNonce) hash ^= ClientNonce.GetHashCode();
    if (HasEndpointUrl) hash ^= EndpointUrl.GetHashCode();
    if (HasMaxResponseMessageSize) hash ^= MaxResponseMessageSize.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasRequestedSessionTimeout) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RequestedSessionTimeout);
    if (HasServerUri) hash ^= ServerUri.GetHashCode();
    if (HasSessionName) hash ^= SessionName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasClientCertificate) {
      output.WriteRawTag(10);
      output.WriteBytes(ClientCertificate);
    }
    if (clientDescription_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ClientDescription);
    }
    if (HasClientNonce) {
      output.WriteRawTag(26);
      output.WriteBytes(ClientNonce);
    }
    if (HasEndpointUrl) {
      output.WriteRawTag(34);
      output.WriteString(EndpointUrl);
    }
    if (HasMaxResponseMessageSize) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxResponseMessageSize);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(RequestHeader);
    }
    if (HasRequestedSessionTimeout) {
      output.WriteRawTag(57);
      output.WriteDouble(RequestedSessionTimeout);
    }
    if (HasServerUri) {
      output.WriteRawTag(66);
      output.WriteString(ServerUri);
    }
    if (HasSessionName) {
      output.WriteRawTag(74);
      output.WriteString(SessionName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientCertificate) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientCertificate);
    }
    if (clientDescription_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientDescription);
    }
    if (HasClientNonce) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientNonce);
    }
    if (HasEndpointUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EndpointUrl);
    }
    if (HasMaxResponseMessageSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxResponseMessageSize);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasRequestedSessionTimeout) {
      size += 1 + 8;
    }
    if (HasServerUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUri);
    }
    if (HasSessionName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateSessionRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasClientCertificate) {
      ClientCertificate = other.ClientCertificate;
    }
    if (other.clientDescription_ != null) {
      if (clientDescription_ == null) {
        ClientDescription = new global::ApplicationDescription();
      }
      ClientDescription.MergeFrom(other.ClientDescription);
    }
    if (other.HasClientNonce) {
      ClientNonce = other.ClientNonce;
    }
    if (other.HasEndpointUrl) {
      EndpointUrl = other.EndpointUrl;
    }
    if (other.HasMaxResponseMessageSize) {
      MaxResponseMessageSize = other.MaxResponseMessageSize;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasRequestedSessionTimeout) {
      RequestedSessionTimeout = other.RequestedSessionTimeout;
    }
    if (other.HasServerUri) {
      ServerUri = other.ServerUri;
    }
    if (other.HasSessionName) {
      SessionName = other.SessionName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ClientCertificate = input.ReadBytes();
          break;
        }
        case 18: {
          if (clientDescription_ == null) {
            ClientDescription = new global::ApplicationDescription();
          }
          input.ReadMessage(ClientDescription);
          break;
        }
        case 26: {
          ClientNonce = input.ReadBytes();
          break;
        }
        case 34: {
          EndpointUrl = input.ReadString();
          break;
        }
        case 40: {
          MaxResponseMessageSize = input.ReadUInt32();
          break;
        }
        case 50: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 57: {
          RequestedSessionTimeout = input.ReadDouble();
          break;
        }
        case 66: {
          ServerUri = input.ReadString();
          break;
        }
        case 74: {
          SessionName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CreateSubscriptionRequest : pb::IMessage<CreateSubscriptionRequest> {
  private static readonly pb::MessageParser<CreateSubscriptionRequest> _parser = new pb::MessageParser<CreateSubscriptionRequest>(() => new CreateSubscriptionRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateSubscriptionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[331]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSubscriptionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSubscriptionRequest(CreateSubscriptionRequest other) : this() {
    _hasBits0 = other._hasBits0;
    maxNotificationsPerPublish_ = other.maxNotificationsPerPublish_;
    priority_ = other.priority_;
    publishingEnabled_ = other.publishingEnabled_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    requestedLifetimeCount_ = other.requestedLifetimeCount_;
    requestedMaxKeepAliveCount_ = other.requestedMaxKeepAliveCount_;
    requestedPublishingInterval_ = other.requestedPublishingInterval_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSubscriptionRequest Clone() {
    return new CreateSubscriptionRequest(this);
  }

  /// <summary>Field number for the "MaxNotificationsPerPublish" field.</summary>
  public const int MaxNotificationsPerPublishFieldNumber = 1;
  private readonly static uint MaxNotificationsPerPublishDefaultValue = 0;

  private uint maxNotificationsPerPublish_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxNotificationsPerPublish {
    get { if ((_hasBits0 & 1) != 0) { return maxNotificationsPerPublish_; } else { return MaxNotificationsPerPublishDefaultValue; } }
    set {
      _hasBits0 |= 1;
      maxNotificationsPerPublish_ = value;
    }
  }
  /// <summary>Gets whether the "MaxNotificationsPerPublish" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxNotificationsPerPublish {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MaxNotificationsPerPublish" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxNotificationsPerPublish() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Priority" field.</summary>
  public const int PriorityFieldNumber = 2;
  private readonly static uint PriorityDefaultValue = 0;

  private uint priority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Priority {
    get { if ((_hasBits0 & 2) != 0) { return priority_; } else { return PriorityDefaultValue; } }
    set {
      _hasBits0 |= 2;
      priority_ = value;
    }
  }
  /// <summary>Gets whether the "Priority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPriority {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Priority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPriority() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "PublishingEnabled" field.</summary>
  public const int PublishingEnabledFieldNumber = 3;
  private readonly static bool PublishingEnabledDefaultValue = false;

  private bool publishingEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PublishingEnabled {
    get { if ((_hasBits0 & 4) != 0) { return publishingEnabled_; } else { return PublishingEnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      publishingEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingEnabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "PublishingEnabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 4;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "RequestedLifetimeCount" field.</summary>
  public const int RequestedLifetimeCountFieldNumber = 5;
  private readonly static uint RequestedLifetimeCountDefaultValue = 0;

  private uint requestedLifetimeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestedLifetimeCount {
    get { if ((_hasBits0 & 8) != 0) { return requestedLifetimeCount_; } else { return RequestedLifetimeCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      requestedLifetimeCount_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedLifetimeCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedLifetimeCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "RequestedLifetimeCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedLifetimeCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "RequestedMaxKeepAliveCount" field.</summary>
  public const int RequestedMaxKeepAliveCountFieldNumber = 6;
  private readonly static uint RequestedMaxKeepAliveCountDefaultValue = 0;

  private uint requestedMaxKeepAliveCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestedMaxKeepAliveCount {
    get { if ((_hasBits0 & 16) != 0) { return requestedMaxKeepAliveCount_; } else { return RequestedMaxKeepAliveCountDefaultValue; } }
    set {
      _hasBits0 |= 16;
      requestedMaxKeepAliveCount_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedMaxKeepAliveCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedMaxKeepAliveCount {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "RequestedMaxKeepAliveCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedMaxKeepAliveCount() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "RequestedPublishingInterval" field.</summary>
  public const int RequestedPublishingIntervalFieldNumber = 7;
  private readonly static double RequestedPublishingIntervalDefaultValue = 0D;

  private double requestedPublishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RequestedPublishingInterval {
    get { if ((_hasBits0 & 32) != 0) { return requestedPublishingInterval_; } else { return RequestedPublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 32;
      requestedPublishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedPublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedPublishingInterval {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "RequestedPublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedPublishingInterval() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateSubscriptionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateSubscriptionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MaxNotificationsPerPublish != other.MaxNotificationsPerPublish) return false;
    if (Priority != other.Priority) return false;
    if (PublishingEnabled != other.PublishingEnabled) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (RequestedLifetimeCount != other.RequestedLifetimeCount) return false;
    if (RequestedMaxKeepAliveCount != other.RequestedMaxKeepAliveCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RequestedPublishingInterval, other.RequestedPublishingInterval)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMaxNotificationsPerPublish) hash ^= MaxNotificationsPerPublish.GetHashCode();
    if (HasPriority) hash ^= Priority.GetHashCode();
    if (HasPublishingEnabled) hash ^= PublishingEnabled.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasRequestedLifetimeCount) hash ^= RequestedLifetimeCount.GetHashCode();
    if (HasRequestedMaxKeepAliveCount) hash ^= RequestedMaxKeepAliveCount.GetHashCode();
    if (HasRequestedPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RequestedPublishingInterval);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMaxNotificationsPerPublish) {
      output.WriteRawTag(8);
      output.WriteUInt32(MaxNotificationsPerPublish);
    }
    if (HasPriority) {
      output.WriteRawTag(16);
      output.WriteUInt32(Priority);
    }
    if (HasPublishingEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(PublishingEnabled);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(RequestHeader);
    }
    if (HasRequestedLifetimeCount) {
      output.WriteRawTag(40);
      output.WriteUInt32(RequestedLifetimeCount);
    }
    if (HasRequestedMaxKeepAliveCount) {
      output.WriteRawTag(48);
      output.WriteUInt32(RequestedMaxKeepAliveCount);
    }
    if (HasRequestedPublishingInterval) {
      output.WriteRawTag(57);
      output.WriteDouble(RequestedPublishingInterval);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMaxNotificationsPerPublish) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNotificationsPerPublish);
    }
    if (HasPriority) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
    }
    if (HasPublishingEnabled) {
      size += 1 + 1;
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasRequestedLifetimeCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestedLifetimeCount);
    }
    if (HasRequestedMaxKeepAliveCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestedMaxKeepAliveCount);
    }
    if (HasRequestedPublishingInterval) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateSubscriptionRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasMaxNotificationsPerPublish) {
      MaxNotificationsPerPublish = other.MaxNotificationsPerPublish;
    }
    if (other.HasPriority) {
      Priority = other.Priority;
    }
    if (other.HasPublishingEnabled) {
      PublishingEnabled = other.PublishingEnabled;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasRequestedLifetimeCount) {
      RequestedLifetimeCount = other.RequestedLifetimeCount;
    }
    if (other.HasRequestedMaxKeepAliveCount) {
      RequestedMaxKeepAliveCount = other.RequestedMaxKeepAliveCount;
    }
    if (other.HasRequestedPublishingInterval) {
      RequestedPublishingInterval = other.RequestedPublishingInterval;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MaxNotificationsPerPublish = input.ReadUInt32();
          break;
        }
        case 16: {
          Priority = input.ReadUInt32();
          break;
        }
        case 24: {
          PublishingEnabled = input.ReadBool();
          break;
        }
        case 34: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 40: {
          RequestedLifetimeCount = input.ReadUInt32();
          break;
        }
        case 48: {
          RequestedMaxKeepAliveCount = input.ReadUInt32();
          break;
        }
        case 57: {
          RequestedPublishingInterval = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class CreateSubscriptionResponse : pb::IMessage<CreateSubscriptionResponse> {
  private static readonly pb::MessageParser<CreateSubscriptionResponse> _parser = new pb::MessageParser<CreateSubscriptionResponse>(() => new CreateSubscriptionResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateSubscriptionResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[332]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSubscriptionResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSubscriptionResponse(CreateSubscriptionResponse other) : this() {
    _hasBits0 = other._hasBits0;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    revisedLifetimeCount_ = other.revisedLifetimeCount_;
    revisedMaxKeepAliveCount_ = other.revisedMaxKeepAliveCount_;
    revisedPublishingInterval_ = other.revisedPublishingInterval_;
    subscriptionId_ = other.subscriptionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSubscriptionResponse Clone() {
    return new CreateSubscriptionResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "RevisedLifetimeCount" field.</summary>
  public const int RevisedLifetimeCountFieldNumber = 2;
  private readonly static uint RevisedLifetimeCountDefaultValue = 0;

  private uint revisedLifetimeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RevisedLifetimeCount {
    get { if ((_hasBits0 & 1) != 0) { return revisedLifetimeCount_; } else { return RevisedLifetimeCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      revisedLifetimeCount_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedLifetimeCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedLifetimeCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RevisedLifetimeCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedLifetimeCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RevisedMaxKeepAliveCount" field.</summary>
  public const int RevisedMaxKeepAliveCountFieldNumber = 3;
  private readonly static uint RevisedMaxKeepAliveCountDefaultValue = 0;

  private uint revisedMaxKeepAliveCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RevisedMaxKeepAliveCount {
    get { if ((_hasBits0 & 2) != 0) { return revisedMaxKeepAliveCount_; } else { return RevisedMaxKeepAliveCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      revisedMaxKeepAliveCount_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedMaxKeepAliveCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedMaxKeepAliveCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RevisedMaxKeepAliveCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedMaxKeepAliveCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "RevisedPublishingInterval" field.</summary>
  public const int RevisedPublishingIntervalFieldNumber = 4;
  private readonly static double RevisedPublishingIntervalDefaultValue = 0D;

  private double revisedPublishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RevisedPublishingInterval {
    get { if ((_hasBits0 & 4) != 0) { return revisedPublishingInterval_; } else { return RevisedPublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 4;
      revisedPublishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedPublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedPublishingInterval {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "RevisedPublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedPublishingInterval() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 5;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 8) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateSubscriptionResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateSubscriptionResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (RevisedLifetimeCount != other.RevisedLifetimeCount) return false;
    if (RevisedMaxKeepAliveCount != other.RevisedMaxKeepAliveCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevisedPublishingInterval, other.RevisedPublishingInterval)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (HasRevisedLifetimeCount) hash ^= RevisedLifetimeCount.GetHashCode();
    if (HasRevisedMaxKeepAliveCount) hash ^= RevisedMaxKeepAliveCount.GetHashCode();
    if (HasRevisedPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevisedPublishingInterval);
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (HasRevisedLifetimeCount) {
      output.WriteRawTag(16);
      output.WriteUInt32(RevisedLifetimeCount);
    }
    if (HasRevisedMaxKeepAliveCount) {
      output.WriteRawTag(24);
      output.WriteUInt32(RevisedMaxKeepAliveCount);
    }
    if (HasRevisedPublishingInterval) {
      output.WriteRawTag(33);
      output.WriteDouble(RevisedPublishingInterval);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(40);
      output.WriteUInt32(SubscriptionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (HasRevisedLifetimeCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisedLifetimeCount);
    }
    if (HasRevisedMaxKeepAliveCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisedMaxKeepAliveCount);
    }
    if (HasRevisedPublishingInterval) {
      size += 1 + 8;
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateSubscriptionResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.HasRevisedLifetimeCount) {
      RevisedLifetimeCount = other.RevisedLifetimeCount;
    }
    if (other.HasRevisedMaxKeepAliveCount) {
      RevisedMaxKeepAliveCount = other.RevisedMaxKeepAliveCount;
    }
    if (other.HasRevisedPublishingInterval) {
      RevisedPublishingInterval = other.RevisedPublishingInterval;
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 16: {
          RevisedLifetimeCount = input.ReadUInt32();
          break;
        }
        case 24: {
          RevisedMaxKeepAliveCount = input.ReadUInt32();
          break;
        }
        case 33: {
          RevisedPublishingInterval = input.ReadDouble();
          break;
        }
        case 40: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DataSetWriterDataType : pb::IMessage<DataSetWriterDataType> {
  private static readonly pb::MessageParser<DataSetWriterDataType> _parser = new pb::MessageParser<DataSetWriterDataType>(() => new DataSetWriterDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSetWriterDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[333]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterDataType(DataSetWriterDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetFieldContentMask_ = other.dataSetFieldContentMask_;
    dataSetName_ = other.dataSetName_;
    dataSetWriterId_ = other.dataSetWriterId_;
    dataSetWriterProperties_ = other.dataSetWriterProperties_ != null ? other.dataSetWriterProperties_.Clone() : null;
    enabled_ = other.enabled_;
    keyFrameCount_ = other.keyFrameCount_;
    messageSettings_ = other.messageSettings_ != null ? other.messageSettings_.Clone() : null;
    name_ = other.name_;
    transportSettings_ = other.transportSettings_ != null ? other.transportSettings_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetWriterDataType Clone() {
    return new DataSetWriterDataType(this);
  }

  /// <summary>Field number for the "DataSetFieldContentMask" field.</summary>
  public const int DataSetFieldContentMaskFieldNumber = 1;
  private readonly static uint DataSetFieldContentMaskDefaultValue = 0;

  private uint dataSetFieldContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetFieldContentMask {
    get { if ((_hasBits0 & 1) != 0) { return dataSetFieldContentMask_; } else { return DataSetFieldContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetFieldContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetFieldContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetFieldContentMask {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetFieldContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetFieldContentMask() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetName" field.</summary>
  public const int DataSetNameFieldNumber = 2;
  private readonly static string DataSetNameDefaultValue = "";

  private string dataSetName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataSetName {
    get { return dataSetName_ ?? DataSetNameDefaultValue; }
    set {
      dataSetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "DataSetName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetName {
    get { return dataSetName_ != null; }
  }
  /// <summary>Clears the value of the "DataSetName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetName() {
    dataSetName_ = null;
  }

  /// <summary>Field number for the "DataSetWriterId" field.</summary>
  public const int DataSetWriterIdFieldNumber = 3;
  private readonly static uint DataSetWriterIdDefaultValue = 0;

  private uint dataSetWriterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetWriterId {
    get { if ((_hasBits0 & 2) != 0) { return dataSetWriterId_; } else { return DataSetWriterIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      dataSetWriterId_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetWriterId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetWriterId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DataSetWriterId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetWriterId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "DataSetWriterProperties" field.</summary>
  public const int DataSetWriterPropertiesFieldNumber = 4;
  private global::ListOfKeyValuePair dataSetWriterProperties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair DataSetWriterProperties {
    get { return dataSetWriterProperties_; }
    set {
      dataSetWriterProperties_ = value;
    }
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 5;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { if ((_hasBits0 & 4) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "Enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "KeyFrameCount" field.</summary>
  public const int KeyFrameCountFieldNumber = 6;
  private readonly static uint KeyFrameCountDefaultValue = 0;

  private uint keyFrameCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KeyFrameCount {
    get { if ((_hasBits0 & 8) != 0) { return keyFrameCount_; } else { return KeyFrameCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      keyFrameCount_ = value;
    }
  }
  /// <summary>Gets whether the "KeyFrameCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasKeyFrameCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "KeyFrameCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearKeyFrameCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "MessageSettings" field.</summary>
  public const int MessageSettingsFieldNumber = 7;
  private global::ExtensionObject messageSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject MessageSettings {
    get { return messageSettings_; }
    set {
      messageSettings_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 8;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "TransportSettings" field.</summary>
  public const int TransportSettingsFieldNumber = 9;
  private global::ExtensionObject transportSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject TransportSettings {
    get { return transportSettings_; }
    set {
      transportSettings_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSetWriterDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSetWriterDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataSetFieldContentMask != other.DataSetFieldContentMask) return false;
    if (DataSetName != other.DataSetName) return false;
    if (DataSetWriterId != other.DataSetWriterId) return false;
    if (!object.Equals(DataSetWriterProperties, other.DataSetWriterProperties)) return false;
    if (Enabled != other.Enabled) return false;
    if (KeyFrameCount != other.KeyFrameCount) return false;
    if (!object.Equals(MessageSettings, other.MessageSettings)) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(TransportSettings, other.TransportSettings)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDataSetFieldContentMask) hash ^= DataSetFieldContentMask.GetHashCode();
    if (HasDataSetName) hash ^= DataSetName.GetHashCode();
    if (HasDataSetWriterId) hash ^= DataSetWriterId.GetHashCode();
    if (dataSetWriterProperties_ != null) hash ^= DataSetWriterProperties.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasKeyFrameCount) hash ^= KeyFrameCount.GetHashCode();
    if (messageSettings_ != null) hash ^= MessageSettings.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (transportSettings_ != null) hash ^= TransportSettings.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDataSetFieldContentMask) {
      output.WriteRawTag(8);
      output.WriteUInt32(DataSetFieldContentMask);
    }
    if (HasDataSetName) {
      output.WriteRawTag(18);
      output.WriteString(DataSetName);
    }
    if (HasDataSetWriterId) {
      output.WriteRawTag(24);
      output.WriteUInt32(DataSetWriterId);
    }
    if (dataSetWriterProperties_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DataSetWriterProperties);
    }
    if (HasEnabled) {
      output.WriteRawTag(40);
      output.WriteBool(Enabled);
    }
    if (HasKeyFrameCount) {
      output.WriteRawTag(48);
      output.WriteUInt32(KeyFrameCount);
    }
    if (messageSettings_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(MessageSettings);
    }
    if (HasName) {
      output.WriteRawTag(66);
      output.WriteString(Name);
    }
    if (transportSettings_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(TransportSettings);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDataSetFieldContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetFieldContentMask);
    }
    if (HasDataSetName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataSetName);
    }
    if (HasDataSetWriterId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetWriterId);
    }
    if (dataSetWriterProperties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetWriterProperties);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasKeyFrameCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyFrameCount);
    }
    if (messageSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageSettings);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (transportSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportSettings);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSetWriterDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDataSetFieldContentMask) {
      DataSetFieldContentMask = other.DataSetFieldContentMask;
    }
    if (other.HasDataSetName) {
      DataSetName = other.DataSetName;
    }
    if (other.HasDataSetWriterId) {
      DataSetWriterId = other.DataSetWriterId;
    }
    if (other.dataSetWriterProperties_ != null) {
      if (dataSetWriterProperties_ == null) {
        DataSetWriterProperties = new global::ListOfKeyValuePair();
      }
      DataSetWriterProperties.MergeFrom(other.DataSetWriterProperties);
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasKeyFrameCount) {
      KeyFrameCount = other.KeyFrameCount;
    }
    if (other.messageSettings_ != null) {
      if (messageSettings_ == null) {
        MessageSettings = new global::ExtensionObject();
      }
      MessageSettings.MergeFrom(other.MessageSettings);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.transportSettings_ != null) {
      if (transportSettings_ == null) {
        TransportSettings = new global::ExtensionObject();
      }
      TransportSettings.MergeFrom(other.TransportSettings);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DataSetFieldContentMask = input.ReadUInt32();
          break;
        }
        case 18: {
          DataSetName = input.ReadString();
          break;
        }
        case 24: {
          DataSetWriterId = input.ReadUInt32();
          break;
        }
        case 34: {
          if (dataSetWriterProperties_ == null) {
            DataSetWriterProperties = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(DataSetWriterProperties);
          break;
        }
        case 40: {
          Enabled = input.ReadBool();
          break;
        }
        case 48: {
          KeyFrameCount = input.ReadUInt32();
          break;
        }
        case 58: {
          if (messageSettings_ == null) {
            MessageSettings = new global::ExtensionObject();
          }
          input.ReadMessage(MessageSettings);
          break;
        }
        case 66: {
          Name = input.ReadString();
          break;
        }
        case 74: {
          if (transportSettings_ == null) {
            TransportSettings = new global::ExtensionObject();
          }
          input.ReadMessage(TransportSettings);
          break;
        }
      }
    }
  }

}

public sealed partial class DataTypeDefinition : pb::IMessage<DataTypeDefinition> {
  private static readonly pb::MessageParser<DataTypeDefinition> _parser = new pb::MessageParser<DataTypeDefinition>(() => new DataTypeDefinition());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataTypeDefinition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[334]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeDefinition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeDefinition(DataTypeDefinition other) : this() {
    _hasBits0 = other._hasBits0;
    baseDataType_ = other.baseDataType_ != null ? other.baseDataType_.Clone() : null;
    defaultEncodingId_ = other.defaultEncodingId_ != null ? other.defaultEncodingId_.Clone() : null;
    fields_ = other.fields_ != null ? other.fields_.Clone() : null;
    StructureType_ = other.StructureType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeDefinition Clone() {
    return new DataTypeDefinition(this);
  }

  /// <summary>Field number for the "BaseDataType" field.</summary>
  public const int BaseDataTypeFieldNumber = 1;
  private global::NodeId baseDataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId BaseDataType {
    get { return baseDataType_; }
    set {
      baseDataType_ = value;
    }
  }

  /// <summary>Field number for the "DefaultEncodingId" field.</summary>
  public const int DefaultEncodingIdFieldNumber = 2;
  private global::NodeId defaultEncodingId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DefaultEncodingId {
    get { return defaultEncodingId_; }
    set {
      defaultEncodingId_ = value;
    }
  }

  /// <summary>Field number for the "Fields" field.</summary>
  public const int FieldsFieldNumber = 3;
  private global::ListOfStructureField fields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStructureField Fields {
    get { return fields_; }
    set {
      fields_ = value;
    }
  }

  /// <summary>Field number for the "_StructureType" field.</summary>
  public const int StructureTypeFieldNumber = 4;
  private readonly static global::DataTypeDefinition.Types.StructureType StructureTypeDefaultValue = global::DataTypeDefinition.Types.StructureType.StructureWithOptionalFields1;

  private global::DataTypeDefinition.Types.StructureType StructureType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataTypeDefinition.Types.StructureType StructureType {
    get { if ((_hasBits0 & 1) != 0) { return StructureType_; } else { return StructureTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      StructureType_ = value;
    }
  }
  /// <summary>Gets whether the "_StructureType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStructureType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_StructureType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStructureType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataTypeDefinition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataTypeDefinition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseDataType, other.BaseDataType)) return false;
    if (!object.Equals(DefaultEncodingId, other.DefaultEncodingId)) return false;
    if (!object.Equals(Fields, other.Fields)) return false;
    if (StructureType != other.StructureType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseDataType_ != null) hash ^= BaseDataType.GetHashCode();
    if (defaultEncodingId_ != null) hash ^= DefaultEncodingId.GetHashCode();
    if (fields_ != null) hash ^= Fields.GetHashCode();
    if (HasStructureType) hash ^= StructureType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseDataType_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseDataType);
    }
    if (defaultEncodingId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DefaultEncodingId);
    }
    if (fields_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Fields);
    }
    if (HasStructureType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) StructureType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseDataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseDataType);
    }
    if (defaultEncodingId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultEncodingId);
    }
    if (fields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fields);
    }
    if (HasStructureType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StructureType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataTypeDefinition other) {
    if (other == null) {
      return;
    }
    if (other.baseDataType_ != null) {
      if (baseDataType_ == null) {
        BaseDataType = new global::NodeId();
      }
      BaseDataType.MergeFrom(other.BaseDataType);
    }
    if (other.defaultEncodingId_ != null) {
      if (defaultEncodingId_ == null) {
        DefaultEncodingId = new global::NodeId();
      }
      DefaultEncodingId.MergeFrom(other.DefaultEncodingId);
    }
    if (other.fields_ != null) {
      if (fields_ == null) {
        Fields = new global::ListOfStructureField();
      }
      Fields.MergeFrom(other.Fields);
    }
    if (other.HasStructureType) {
      StructureType = other.StructureType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (baseDataType_ == null) {
            BaseDataType = new global::NodeId();
          }
          input.ReadMessage(BaseDataType);
          break;
        }
        case 18: {
          if (defaultEncodingId_ == null) {
            DefaultEncodingId = new global::NodeId();
          }
          input.ReadMessage(DefaultEncodingId);
          break;
        }
        case 26: {
          if (fields_ == null) {
            Fields = new global::ListOfStructureField();
          }
          input.ReadMessage(Fields);
          break;
        }
        case 32: {
          StructureType = (global::DataTypeDefinition.Types.StructureType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DataTypeDefinition message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum StructureType {
      [pbr::OriginalName("StructureType_StructureWithOptionalFields_1")] StructureWithOptionalFields1 = 1,
      [pbr::OriginalName("StructureType_StructureWithSubtypedValues_3")] StructureWithSubtypedValues3 = 2,
      [pbr::OriginalName("StructureType_Structure_0")] Structure0 = 3,
      [pbr::OriginalName("StructureType_UnionWithSubtypedValues_4")] UnionWithSubtypedValues4 = 4,
      [pbr::OriginalName("StructureType_Union_2")] Union2 = 5,
    }

  }
  #endregion

}

public sealed partial class DataTypeNode : pb::IMessage<DataTypeNode> {
  private static readonly pb::MessageParser<DataTypeNode> _parser = new pb::MessageParser<DataTypeNode>(() => new DataTypeNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataTypeNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[335]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeNode(DataTypeNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessRestrictions_ = other.accessRestrictions_;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    dataTypeDefinition_ = other.dataTypeDefinition_ != null ? other.dataTypeDefinition_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    isAbstract_ = other.isAbstract_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeNode Clone() {
    return new DataTypeNode(this);
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 1;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 1) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 2;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "DataTypeDefinition" field.</summary>
  public const int DataTypeDefinitionFieldNumber = 3;
  private global::ExtensionObject dataTypeDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject DataTypeDefinition {
    get { return dataTypeDefinition_; }
    set {
      dataTypeDefinition_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 5;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "IsAbstract" field.</summary>
  public const int IsAbstractFieldNumber = 6;
  private readonly static bool IsAbstractDefaultValue = false;

  private bool isAbstract_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbstract {
    get { if ((_hasBits0 & 2) != 0) { return isAbstract_; } else { return IsAbstractDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isAbstract_ = value;
    }
  }
  /// <summary>Gets whether the "IsAbstract" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsAbstract {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsAbstract" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsAbstract() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 7;
  private readonly static global::DataTypeNode.Types.NodeClass NodeClassDefaultValue = global::DataTypeNode.Types.NodeClass.DataType64;

  private global::DataTypeNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataTypeNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 4) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 4;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 8;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 9;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 10;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 11;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 12;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 8) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 13;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 16) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataTypeNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataTypeNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (!object.Equals(DataTypeDefinition, other.DataTypeDefinition)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (IsAbstract != other.IsAbstract) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (dataTypeDefinition_ != null) hash ^= DataTypeDefinition.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasIsAbstract) hash ^= IsAbstract.GetHashCode();
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessRestrictions) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessRestrictions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(BrowseName);
    }
    if (dataTypeDefinition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataTypeDefinition);
    }
    if (description_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DisplayName);
    }
    if (HasIsAbstract) {
      output.WriteRawTag(48);
      output.WriteBool(IsAbstract);
    }
    if (HasNodeClass) {
      output.WriteRawTag(56);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(96);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(104);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (dataTypeDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTypeDefinition);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasIsAbstract) {
      size += 1 + 1;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (userRolePermissions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataTypeNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.dataTypeDefinition_ != null) {
      if (dataTypeDefinition_ == null) {
        DataTypeDefinition = new global::ExtensionObject();
      }
      DataTypeDefinition.MergeFrom(other.DataTypeDefinition);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasIsAbstract) {
      IsAbstract = other.IsAbstract;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 18: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 26: {
          if (dataTypeDefinition_ == null) {
            DataTypeDefinition = new global::ExtensionObject();
          }
          input.ReadMessage(DataTypeDefinition);
          break;
        }
        case 34: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 42: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 48: {
          IsAbstract = input.ReadBool();
          break;
        }
        case 56: {
          NodeClass = (global::DataTypeNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 66: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 74: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 82: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 90: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 96: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 104: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DataTypeNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class DatagramConnectionTransportDataType : pb::IMessage<DatagramConnectionTransportDataType> {
  private static readonly pb::MessageParser<DatagramConnectionTransportDataType> _parser = new pb::MessageParser<DatagramConnectionTransportDataType>(() => new DatagramConnectionTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DatagramConnectionTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[336]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatagramConnectionTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatagramConnectionTransportDataType(DatagramConnectionTransportDataType other) : this() {
    discoveryAddress_ = other.discoveryAddress_ != null ? other.discoveryAddress_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatagramConnectionTransportDataType Clone() {
    return new DatagramConnectionTransportDataType(this);
  }

  /// <summary>Field number for the "DiscoveryAddress" field.</summary>
  public const int DiscoveryAddressFieldNumber = 1;
  private global::ExtensionObject discoveryAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject DiscoveryAddress {
    get { return discoveryAddress_; }
    set {
      discoveryAddress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DatagramConnectionTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DatagramConnectionTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiscoveryAddress, other.DiscoveryAddress)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (discoveryAddress_ != null) hash ^= DiscoveryAddress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (discoveryAddress_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiscoveryAddress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (discoveryAddress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscoveryAddress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DatagramConnectionTransportDataType other) {
    if (other == null) {
      return;
    }
    if (other.discoveryAddress_ != null) {
      if (discoveryAddress_ == null) {
        DiscoveryAddress = new global::ExtensionObject();
      }
      DiscoveryAddress.MergeFrom(other.DiscoveryAddress);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (discoveryAddress_ == null) {
            DiscoveryAddress = new global::ExtensionObject();
          }
          input.ReadMessage(DiscoveryAddress);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteMonitoredItemsRequest : pb::IMessage<DeleteMonitoredItemsRequest> {
  private static readonly pb::MessageParser<DeleteMonitoredItemsRequest> _parser = new pb::MessageParser<DeleteMonitoredItemsRequest>(() => new DeleteMonitoredItemsRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteMonitoredItemsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[337]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteMonitoredItemsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteMonitoredItemsRequest(DeleteMonitoredItemsRequest other) : this() {
    _hasBits0 = other._hasBits0;
    monitoredItemIds_ = other.monitoredItemIds_ != null ? other.monitoredItemIds_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionId_ = other.subscriptionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteMonitoredItemsRequest Clone() {
    return new DeleteMonitoredItemsRequest(this);
  }

  /// <summary>Field number for the "MonitoredItemIds" field.</summary>
  public const int MonitoredItemIdsFieldNumber = 1;
  private global::ListOfUInt32 monitoredItemIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 MonitoredItemIds {
    get { return monitoredItemIds_; }
    set {
      monitoredItemIds_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 3;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 1) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteMonitoredItemsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteMonitoredItemsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MonitoredItemIds, other.MonitoredItemIds)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (monitoredItemIds_ != null) hash ^= MonitoredItemIds.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (monitoredItemIds_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MonitoredItemIds);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(24);
      output.WriteUInt32(SubscriptionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (monitoredItemIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonitoredItemIds);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteMonitoredItemsRequest other) {
    if (other == null) {
      return;
    }
    if (other.monitoredItemIds_ != null) {
      if (monitoredItemIds_ == null) {
        MonitoredItemIds = new global::ListOfUInt32();
      }
      MonitoredItemIds.MergeFrom(other.MonitoredItemIds);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (monitoredItemIds_ == null) {
            MonitoredItemIds = new global::ListOfUInt32();
          }
          input.ReadMessage(MonitoredItemIds);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 24: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteMonitoredItemsResponse : pb::IMessage<DeleteMonitoredItemsResponse> {
  private static readonly pb::MessageParser<DeleteMonitoredItemsResponse> _parser = new pb::MessageParser<DeleteMonitoredItemsResponse>(() => new DeleteMonitoredItemsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteMonitoredItemsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[338]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteMonitoredItemsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteMonitoredItemsResponse(DeleteMonitoredItemsResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteMonitoredItemsResponse Clone() {
    return new DeleteMonitoredItemsResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteMonitoredItemsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteMonitoredItemsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteMonitoredItemsResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteNodesRequest : pb::IMessage<DeleteNodesRequest> {
  private static readonly pb::MessageParser<DeleteNodesRequest> _parser = new pb::MessageParser<DeleteNodesRequest>(() => new DeleteNodesRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteNodesRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[339]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesRequest(DeleteNodesRequest other) : this() {
    nodesToDelete_ = other.nodesToDelete_ != null ? other.nodesToDelete_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesRequest Clone() {
    return new DeleteNodesRequest(this);
  }

  /// <summary>Field number for the "NodesToDelete" field.</summary>
  public const int NodesToDeleteFieldNumber = 1;
  private global::ListOfDeleteNodesItem nodesToDelete_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDeleteNodesItem NodesToDelete {
    get { return nodesToDelete_; }
    set {
      nodesToDelete_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteNodesRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteNodesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodesToDelete, other.NodesToDelete)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nodesToDelete_ != null) hash ^= NodesToDelete.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nodesToDelete_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodesToDelete);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nodesToDelete_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToDelete);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteNodesRequest other) {
    if (other == null) {
      return;
    }
    if (other.nodesToDelete_ != null) {
      if (nodesToDelete_ == null) {
        NodesToDelete = new global::ListOfDeleteNodesItem();
      }
      NodesToDelete.MergeFrom(other.NodesToDelete);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nodesToDelete_ == null) {
            NodesToDelete = new global::ListOfDeleteNodesItem();
          }
          input.ReadMessage(NodesToDelete);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteNodesResponse : pb::IMessage<DeleteNodesResponse> {
  private static readonly pb::MessageParser<DeleteNodesResponse> _parser = new pb::MessageParser<DeleteNodesResponse>(() => new DeleteNodesResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteNodesResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[340]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesResponse(DeleteNodesResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteNodesResponse Clone() {
    return new DeleteNodesResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteNodesResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteNodesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteNodesResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteReferencesRequest : pb::IMessage<DeleteReferencesRequest> {
  private static readonly pb::MessageParser<DeleteReferencesRequest> _parser = new pb::MessageParser<DeleteReferencesRequest>(() => new DeleteReferencesRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteReferencesRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[341]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesRequest(DeleteReferencesRequest other) : this() {
    referencesToDelete_ = other.referencesToDelete_ != null ? other.referencesToDelete_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesRequest Clone() {
    return new DeleteReferencesRequest(this);
  }

  /// <summary>Field number for the "ReferencesToDelete" field.</summary>
  public const int ReferencesToDeleteFieldNumber = 1;
  private global::ListOfDeleteReferencesItem referencesToDelete_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDeleteReferencesItem ReferencesToDelete {
    get { return referencesToDelete_; }
    set {
      referencesToDelete_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteReferencesRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteReferencesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ReferencesToDelete, other.ReferencesToDelete)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (referencesToDelete_ != null) hash ^= ReferencesToDelete.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (referencesToDelete_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ReferencesToDelete);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (referencesToDelete_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencesToDelete);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteReferencesRequest other) {
    if (other == null) {
      return;
    }
    if (other.referencesToDelete_ != null) {
      if (referencesToDelete_ == null) {
        ReferencesToDelete = new global::ListOfDeleteReferencesItem();
      }
      ReferencesToDelete.MergeFrom(other.ReferencesToDelete);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (referencesToDelete_ == null) {
            ReferencesToDelete = new global::ListOfDeleteReferencesItem();
          }
          input.ReadMessage(ReferencesToDelete);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteReferencesResponse : pb::IMessage<DeleteReferencesResponse> {
  private static readonly pb::MessageParser<DeleteReferencesResponse> _parser = new pb::MessageParser<DeleteReferencesResponse>(() => new DeleteReferencesResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteReferencesResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[342]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesResponse(DeleteReferencesResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteReferencesResponse Clone() {
    return new DeleteReferencesResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteReferencesResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteReferencesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteReferencesResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteSubscriptionsRequest : pb::IMessage<DeleteSubscriptionsRequest> {
  private static readonly pb::MessageParser<DeleteSubscriptionsRequest> _parser = new pb::MessageParser<DeleteSubscriptionsRequest>(() => new DeleteSubscriptionsRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteSubscriptionsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[343]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSubscriptionsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSubscriptionsRequest(DeleteSubscriptionsRequest other) : this() {
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionIds_ = other.subscriptionIds_ != null ? other.subscriptionIds_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSubscriptionsRequest Clone() {
    return new DeleteSubscriptionsRequest(this);
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionIds" field.</summary>
  public const int SubscriptionIdsFieldNumber = 2;
  private global::ListOfUInt32 subscriptionIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 SubscriptionIds {
    get { return subscriptionIds_; }
    set {
      subscriptionIds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteSubscriptionsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteSubscriptionsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(SubscriptionIds, other.SubscriptionIds)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (subscriptionIds_ != null) hash ^= SubscriptionIds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (subscriptionIds_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SubscriptionIds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (subscriptionIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscriptionIds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteSubscriptionsRequest other) {
    if (other == null) {
      return;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.subscriptionIds_ != null) {
      if (subscriptionIds_ == null) {
        SubscriptionIds = new global::ListOfUInt32();
      }
      SubscriptionIds.MergeFrom(other.SubscriptionIds);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 18: {
          if (subscriptionIds_ == null) {
            SubscriptionIds = new global::ListOfUInt32();
          }
          input.ReadMessage(SubscriptionIds);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteSubscriptionsResponse : pb::IMessage<DeleteSubscriptionsResponse> {
  private static readonly pb::MessageParser<DeleteSubscriptionsResponse> _parser = new pb::MessageParser<DeleteSubscriptionsResponse>(() => new DeleteSubscriptionsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteSubscriptionsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[344]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSubscriptionsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSubscriptionsResponse(DeleteSubscriptionsResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSubscriptionsResponse Clone() {
    return new DeleteSubscriptionsResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteSubscriptionsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteSubscriptionsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteSubscriptionsResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class EndpointDescription : pb::IMessage<EndpointDescription> {
  private static readonly pb::MessageParser<EndpointDescription> _parser = new pb::MessageParser<EndpointDescription>(() => new EndpointDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EndpointDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[345]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointDescription(EndpointDescription other) : this() {
    _hasBits0 = other._hasBits0;
    endpointUrl_ = other.endpointUrl_;
    securityLevel_ = other.securityLevel_;
    securityMode_ = other.securityMode_;
    securityPolicyUri_ = other.securityPolicyUri_;
    server_ = other.server_ != null ? other.server_.Clone() : null;
    serverCertificate_ = other.serverCertificate_;
    transportProfileUri_ = other.transportProfileUri_;
    userIdentityTokens_ = other.userIdentityTokens_ != null ? other.userIdentityTokens_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EndpointDescription Clone() {
    return new EndpointDescription(this);
  }

  /// <summary>Field number for the "EndpointUrl" field.</summary>
  public const int EndpointUrlFieldNumber = 1;
  private readonly static string EndpointUrlDefaultValue = "";

  private string endpointUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EndpointUrl {
    get { return endpointUrl_ ?? EndpointUrlDefaultValue; }
    set {
      endpointUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EndpointUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndpointUrl {
    get { return endpointUrl_ != null; }
  }
  /// <summary>Clears the value of the "EndpointUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndpointUrl() {
    endpointUrl_ = null;
  }

  /// <summary>Field number for the "SecurityLevel" field.</summary>
  public const int SecurityLevelFieldNumber = 2;
  private readonly static uint SecurityLevelDefaultValue = 0;

  private uint securityLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SecurityLevel {
    get { if ((_hasBits0 & 1) != 0) { return securityLevel_; } else { return SecurityLevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      securityLevel_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SecurityLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 3;
  private readonly static global::EndpointDescription.Types.MessageSecurityMode SecurityModeDefaultValue = global::EndpointDescription.Types.MessageSecurityMode.Invalid0;

  private global::EndpointDescription.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EndpointDescription.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 2) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "SecurityPolicyUri" field.</summary>
  public const int SecurityPolicyUriFieldNumber = 4;
  private readonly static string SecurityPolicyUriDefaultValue = "";

  private string securityPolicyUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityPolicyUri {
    get { return securityPolicyUri_ ?? SecurityPolicyUriDefaultValue; }
    set {
      securityPolicyUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityPolicyUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityPolicyUri {
    get { return securityPolicyUri_ != null; }
  }
  /// <summary>Clears the value of the "SecurityPolicyUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityPolicyUri() {
    securityPolicyUri_ = null;
  }

  /// <summary>Field number for the "Server" field.</summary>
  public const int ServerFieldNumber = 5;
  private global::ApplicationDescription server_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ApplicationDescription Server {
    get { return server_; }
    set {
      server_ = value;
    }
  }

  /// <summary>Field number for the "ServerCertificate" field.</summary>
  public const int ServerCertificateFieldNumber = 6;
  private readonly static pb::ByteString ServerCertificateDefaultValue = pb::ByteString.Empty;

  private pb::ByteString serverCertificate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ServerCertificate {
    get { return serverCertificate_ ?? ServerCertificateDefaultValue; }
    set {
      serverCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerCertificate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerCertificate {
    get { return serverCertificate_ != null; }
  }
  /// <summary>Clears the value of the "ServerCertificate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerCertificate() {
    serverCertificate_ = null;
  }

  /// <summary>Field number for the "TransportProfileUri" field.</summary>
  public const int TransportProfileUriFieldNumber = 7;
  private readonly static string TransportProfileUriDefaultValue = "";

  private string transportProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TransportProfileUri {
    get { return transportProfileUri_ ?? TransportProfileUriDefaultValue; }
    set {
      transportProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "TransportProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransportProfileUri {
    get { return transportProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "TransportProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransportProfileUri() {
    transportProfileUri_ = null;
  }

  /// <summary>Field number for the "UserIdentityTokens" field.</summary>
  public const int UserIdentityTokensFieldNumber = 8;
  private global::ListOfUserTokenPolicy userIdentityTokens_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUserTokenPolicy UserIdentityTokens {
    get { return userIdentityTokens_; }
    set {
      userIdentityTokens_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EndpointDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EndpointDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndpointUrl != other.EndpointUrl) return false;
    if (SecurityLevel != other.SecurityLevel) return false;
    if (SecurityMode != other.SecurityMode) return false;
    if (SecurityPolicyUri != other.SecurityPolicyUri) return false;
    if (!object.Equals(Server, other.Server)) return false;
    if (ServerCertificate != other.ServerCertificate) return false;
    if (TransportProfileUri != other.TransportProfileUri) return false;
    if (!object.Equals(UserIdentityTokens, other.UserIdentityTokens)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndpointUrl) hash ^= EndpointUrl.GetHashCode();
    if (HasSecurityLevel) hash ^= SecurityLevel.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (HasSecurityPolicyUri) hash ^= SecurityPolicyUri.GetHashCode();
    if (server_ != null) hash ^= Server.GetHashCode();
    if (HasServerCertificate) hash ^= ServerCertificate.GetHashCode();
    if (HasTransportProfileUri) hash ^= TransportProfileUri.GetHashCode();
    if (userIdentityTokens_ != null) hash ^= UserIdentityTokens.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndpointUrl) {
      output.WriteRawTag(10);
      output.WriteString(EndpointUrl);
    }
    if (HasSecurityLevel) {
      output.WriteRawTag(16);
      output.WriteUInt32(SecurityLevel);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) SecurityMode);
    }
    if (HasSecurityPolicyUri) {
      output.WriteRawTag(34);
      output.WriteString(SecurityPolicyUri);
    }
    if (server_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Server);
    }
    if (HasServerCertificate) {
      output.WriteRawTag(50);
      output.WriteBytes(ServerCertificate);
    }
    if (HasTransportProfileUri) {
      output.WriteRawTag(58);
      output.WriteString(TransportProfileUri);
    }
    if (userIdentityTokens_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(UserIdentityTokens);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndpointUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EndpointUrl);
    }
    if (HasSecurityLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecurityLevel);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (HasSecurityPolicyUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityPolicyUri);
    }
    if (server_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
    }
    if (HasServerCertificate) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerCertificate);
    }
    if (HasTransportProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TransportProfileUri);
    }
    if (userIdentityTokens_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserIdentityTokens);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EndpointDescription other) {
    if (other == null) {
      return;
    }
    if (other.HasEndpointUrl) {
      EndpointUrl = other.EndpointUrl;
    }
    if (other.HasSecurityLevel) {
      SecurityLevel = other.SecurityLevel;
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    if (other.HasSecurityPolicyUri) {
      SecurityPolicyUri = other.SecurityPolicyUri;
    }
    if (other.server_ != null) {
      if (server_ == null) {
        Server = new global::ApplicationDescription();
      }
      Server.MergeFrom(other.Server);
    }
    if (other.HasServerCertificate) {
      ServerCertificate = other.ServerCertificate;
    }
    if (other.HasTransportProfileUri) {
      TransportProfileUri = other.TransportProfileUri;
    }
    if (other.userIdentityTokens_ != null) {
      if (userIdentityTokens_ == null) {
        UserIdentityTokens = new global::ListOfUserTokenPolicy();
      }
      UserIdentityTokens.MergeFrom(other.UserIdentityTokens);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointUrl = input.ReadString();
          break;
        }
        case 16: {
          SecurityLevel = input.ReadUInt32();
          break;
        }
        case 24: {
          SecurityMode = (global::EndpointDescription.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
        case 34: {
          SecurityPolicyUri = input.ReadString();
          break;
        }
        case 42: {
          if (server_ == null) {
            Server = new global::ApplicationDescription();
          }
          input.ReadMessage(Server);
          break;
        }
        case 50: {
          ServerCertificate = input.ReadBytes();
          break;
        }
        case 58: {
          TransportProfileUri = input.ReadString();
          break;
        }
        case 66: {
          if (userIdentityTokens_ == null) {
            UserIdentityTokens = new global::ListOfUserTokenPolicy();
          }
          input.ReadMessage(UserIdentityTokens);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the EndpointDescription message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class EnumDefinition : pb::IMessage<EnumDefinition> {
  private static readonly pb::MessageParser<EnumDefinition> _parser = new pb::MessageParser<EnumDefinition>(() => new EnumDefinition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnumDefinition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[346]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumDefinition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumDefinition(EnumDefinition other) : this() {
    fields_ = other.fields_ != null ? other.fields_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumDefinition Clone() {
    return new EnumDefinition(this);
  }

  /// <summary>Field number for the "Fields" field.</summary>
  public const int FieldsFieldNumber = 1;
  private global::ListOfEnumField fields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEnumField Fields {
    get { return fields_; }
    set {
      fields_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnumDefinition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnumDefinition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Fields, other.Fields)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fields_ != null) hash ^= Fields.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fields_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Fields);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fields);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnumDefinition other) {
    if (other == null) {
      return;
    }
    if (other.fields_ != null) {
      if (fields_ == null) {
        Fields = new global::ListOfEnumField();
      }
      Fields.MergeFrom(other.Fields);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fields_ == null) {
            Fields = new global::ListOfEnumField();
          }
          input.ReadMessage(Fields);
          break;
        }
      }
    }
  }

}

public sealed partial class EnumDescription : pb::IMessage<EnumDescription> {
  private static readonly pb::MessageParser<EnumDescription> _parser = new pb::MessageParser<EnumDescription>(() => new EnumDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnumDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[347]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumDescription(EnumDescription other) : this() {
    _hasBits0 = other._hasBits0;
    builtInType_ = other.builtInType_;
    dataTypeId_ = other.dataTypeId_ != null ? other.dataTypeId_.Clone() : null;
    EnumDefinition_ = other.EnumDefinition_ != null ? other.EnumDefinition_.Clone() : null;
    name_ = other.name_ != null ? other.name_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnumDescription Clone() {
    return new EnumDescription(this);
  }

  /// <summary>Field number for the "BuiltInType" field.</summary>
  public const int BuiltInTypeFieldNumber = 1;
  private readonly static uint BuiltInTypeDefaultValue = 0;

  private uint builtInType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BuiltInType {
    get { if ((_hasBits0 & 1) != 0) { return builtInType_; } else { return BuiltInTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      builtInType_ = value;
    }
  }
  /// <summary>Gets whether the "BuiltInType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBuiltInType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "BuiltInType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBuiltInType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataTypeId" field.</summary>
  public const int DataTypeIdFieldNumber = 2;
  private global::NodeId dataTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataTypeId {
    get { return dataTypeId_; }
    set {
      dataTypeId_ = value;
    }
  }

  /// <summary>Field number for the "_EnumDefinition" field.</summary>
  public const int EnumDefinitionFieldNumber = 3;
  private global::EnumDefinition EnumDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnumDefinition EnumDefinition {
    get { return EnumDefinition_; }
    set {
      EnumDefinition_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 4;
  private global::QualifiedName name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName Name {
    get { return name_; }
    set {
      name_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnumDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnumDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuiltInType != other.BuiltInType) return false;
    if (!object.Equals(DataTypeId, other.DataTypeId)) return false;
    if (!object.Equals(EnumDefinition, other.EnumDefinition)) return false;
    if (!object.Equals(Name, other.Name)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBuiltInType) hash ^= BuiltInType.GetHashCode();
    if (dataTypeId_ != null) hash ^= DataTypeId.GetHashCode();
    if (EnumDefinition_ != null) hash ^= EnumDefinition.GetHashCode();
    if (name_ != null) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBuiltInType) {
      output.WriteRawTag(8);
      output.WriteUInt32(BuiltInType);
    }
    if (dataTypeId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataTypeId);
    }
    if (EnumDefinition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(EnumDefinition);
    }
    if (name_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBuiltInType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuiltInType);
    }
    if (dataTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTypeId);
    }
    if (EnumDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnumDefinition);
    }
    if (name_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnumDescription other) {
    if (other == null) {
      return;
    }
    if (other.HasBuiltInType) {
      BuiltInType = other.BuiltInType;
    }
    if (other.dataTypeId_ != null) {
      if (dataTypeId_ == null) {
        DataTypeId = new global::NodeId();
      }
      DataTypeId.MergeFrom(other.DataTypeId);
    }
    if (other.EnumDefinition_ != null) {
      if (EnumDefinition_ == null) {
        EnumDefinition = new global::EnumDefinition();
      }
      EnumDefinition.MergeFrom(other.EnumDefinition);
    }
    if (other.name_ != null) {
      if (name_ == null) {
        Name = new global::QualifiedName();
      }
      Name.MergeFrom(other.Name);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BuiltInType = input.ReadUInt32();
          break;
        }
        case 18: {
          if (dataTypeId_ == null) {
            DataTypeId = new global::NodeId();
          }
          input.ReadMessage(DataTypeId);
          break;
        }
        case 26: {
          if (EnumDefinition_ == null) {
            EnumDefinition = new global::EnumDefinition();
          }
          input.ReadMessage(EnumDefinition);
          break;
        }
        case 34: {
          if (name_ == null) {
            Name = new global::QualifiedName();
          }
          input.ReadMessage(Name);
          break;
        }
      }
    }
  }

}

public sealed partial class EventFieldList : pb::IMessage<EventFieldList> {
  private static readonly pb::MessageParser<EventFieldList> _parser = new pb::MessageParser<EventFieldList>(() => new EventFieldList());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventFieldList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[348]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFieldList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFieldList(EventFieldList other) : this() {
    _hasBits0 = other._hasBits0;
    clientHandle_ = other.clientHandle_;
    eventFields_ = other.eventFields_ != null ? other.eventFields_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFieldList Clone() {
    return new EventFieldList(this);
  }

  /// <summary>Field number for the "ClientHandle" field.</summary>
  public const int ClientHandleFieldNumber = 1;
  private readonly static uint ClientHandleDefaultValue = 0;

  private uint clientHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ClientHandle {
    get { if ((_hasBits0 & 1) != 0) { return clientHandle_; } else { return ClientHandleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientHandle_ = value;
    }
  }
  /// <summary>Gets whether the "ClientHandle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientHandle {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ClientHandle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientHandle() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "EventFields" field.</summary>
  public const int EventFieldsFieldNumber = 2;
  private global::ListOfVariant eventFields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfVariant EventFields {
    get { return eventFields_; }
    set {
      eventFields_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventFieldList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventFieldList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientHandle != other.ClientHandle) return false;
    if (!object.Equals(EventFields, other.EventFields)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientHandle) hash ^= ClientHandle.GetHashCode();
    if (eventFields_ != null) hash ^= EventFields.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasClientHandle) {
      output.WriteRawTag(8);
      output.WriteUInt32(ClientHandle);
    }
    if (eventFields_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(EventFields);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientHandle) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientHandle);
    }
    if (eventFields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventFields);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventFieldList other) {
    if (other == null) {
      return;
    }
    if (other.HasClientHandle) {
      ClientHandle = other.ClientHandle;
    }
    if (other.eventFields_ != null) {
      if (eventFields_ == null) {
        EventFields = new global::ListOfVariant();
      }
      EventFields.MergeFrom(other.EventFields);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientHandle = input.ReadUInt32();
          break;
        }
        case 18: {
          if (eventFields_ == null) {
            EventFields = new global::ListOfVariant();
          }
          input.ReadMessage(EventFields);
          break;
        }
      }
    }
  }

}

public sealed partial class FieldMetaData : pb::IMessage<FieldMetaData> {
  private static readonly pb::MessageParser<FieldMetaData> _parser = new pb::MessageParser<FieldMetaData>(() => new FieldMetaData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FieldMetaData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[349]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldMetaData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldMetaData(FieldMetaData other) : this() {
    _hasBits0 = other._hasBits0;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    builtInType_ = other.builtInType_;
    dataSetFieldId_ = other.dataSetFieldId_ != null ? other.dataSetFieldId_.Clone() : null;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    fieldFlags_ = other.fieldFlags_;
    maxStringLength_ = other.maxStringLength_;
    name_ = other.name_;
    properties_ = other.properties_ != null ? other.properties_.Clone() : null;
    valueRank_ = other.valueRank_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FieldMetaData Clone() {
    return new FieldMetaData(this);
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 1;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "BuiltInType" field.</summary>
  public const int BuiltInTypeFieldNumber = 2;
  private readonly static uint BuiltInTypeDefaultValue = 0;

  private uint builtInType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BuiltInType {
    get { if ((_hasBits0 & 1) != 0) { return builtInType_; } else { return BuiltInTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      builtInType_ = value;
    }
  }
  /// <summary>Gets whether the "BuiltInType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBuiltInType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "BuiltInType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBuiltInType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetFieldId" field.</summary>
  public const int DataSetFieldIdFieldNumber = 3;
  private global::Guid dataSetFieldId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Guid DataSetFieldId {
    get { return dataSetFieldId_; }
    set {
      dataSetFieldId_ = value;
    }
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 4;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 5;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "FieldFlags" field.</summary>
  public const int FieldFlagsFieldNumber = 6;
  private readonly static uint FieldFlagsDefaultValue = 0;

  private uint fieldFlags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FieldFlags {
    get { if ((_hasBits0 & 2) != 0) { return fieldFlags_; } else { return FieldFlagsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fieldFlags_ = value;
    }
  }
  /// <summary>Gets whether the "FieldFlags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFieldFlags {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "FieldFlags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFieldFlags() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "MaxStringLength" field.</summary>
  public const int MaxStringLengthFieldNumber = 7;
  private readonly static uint MaxStringLengthDefaultValue = 0;

  private uint maxStringLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxStringLength {
    get { if ((_hasBits0 & 4) != 0) { return maxStringLength_; } else { return MaxStringLengthDefaultValue; } }
    set {
      _hasBits0 |= 4;
      maxStringLength_ = value;
    }
  }
  /// <summary>Gets whether the "MaxStringLength" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxStringLength {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "MaxStringLength" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxStringLength() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 8;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "Properties" field.</summary>
  public const int PropertiesFieldNumber = 9;
  private global::ListOfKeyValuePair properties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair Properties {
    get { return properties_; }
    set {
      properties_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 10;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 8) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 8;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FieldMetaData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FieldMetaData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (BuiltInType != other.BuiltInType) return false;
    if (!object.Equals(DataSetFieldId, other.DataSetFieldId)) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (FieldFlags != other.FieldFlags) return false;
    if (MaxStringLength != other.MaxStringLength) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(Properties, other.Properties)) return false;
    if (ValueRank != other.ValueRank) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (HasBuiltInType) hash ^= BuiltInType.GetHashCode();
    if (dataSetFieldId_ != null) hash ^= DataSetFieldId.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (HasFieldFlags) hash ^= FieldFlags.GetHashCode();
    if (HasMaxStringLength) hash ^= MaxStringLength.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (properties_ != null) hash ^= Properties.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (arrayDimensions_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ArrayDimensions);
    }
    if (HasBuiltInType) {
      output.WriteRawTag(16);
      output.WriteUInt32(BuiltInType);
    }
    if (dataSetFieldId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataSetFieldId);
    }
    if (dataType_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Description);
    }
    if (HasFieldFlags) {
      output.WriteRawTag(48);
      output.WriteUInt32(FieldFlags);
    }
    if (HasMaxStringLength) {
      output.WriteRawTag(56);
      output.WriteUInt32(MaxStringLength);
    }
    if (HasName) {
      output.WriteRawTag(66);
      output.WriteString(Name);
    }
    if (properties_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Properties);
    }
    if (HasValueRank) {
      output.WriteRawTag(80);
      output.WriteInt32(ValueRank);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (HasBuiltInType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuiltInType);
    }
    if (dataSetFieldId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetFieldId);
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (HasFieldFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldFlags);
    }
    if (HasMaxStringLength) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxStringLength);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (properties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
    }
    if (HasValueRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FieldMetaData other) {
    if (other == null) {
      return;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.HasBuiltInType) {
      BuiltInType = other.BuiltInType;
    }
    if (other.dataSetFieldId_ != null) {
      if (dataSetFieldId_ == null) {
        DataSetFieldId = new global::Guid();
      }
      DataSetFieldId.MergeFrom(other.DataSetFieldId);
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.HasFieldFlags) {
      FieldFlags = other.FieldFlags;
    }
    if (other.HasMaxStringLength) {
      MaxStringLength = other.MaxStringLength;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.properties_ != null) {
      if (properties_ == null) {
        Properties = new global::ListOfKeyValuePair();
      }
      Properties.MergeFrom(other.Properties);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 16: {
          BuiltInType = input.ReadUInt32();
          break;
        }
        case 26: {
          if (dataSetFieldId_ == null) {
            DataSetFieldId = new global::Guid();
          }
          input.ReadMessage(DataSetFieldId);
          break;
        }
        case 34: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 42: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 48: {
          FieldFlags = input.ReadUInt32();
          break;
        }
        case 56: {
          MaxStringLength = input.ReadUInt32();
          break;
        }
        case 66: {
          Name = input.ReadString();
          break;
        }
        case 74: {
          if (properties_ == null) {
            Properties = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(Properties);
          break;
        }
        case 80: {
          ValueRank = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class FilterOperand : pb::IMessage<FilterOperand> {
  private static readonly pb::MessageParser<FilterOperand> _parser = new pb::MessageParser<FilterOperand>(() => new FilterOperand());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FilterOperand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[350]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FilterOperand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FilterOperand(FilterOperand other) : this() {
    _hasBits0 = other._hasBits0;
    alias_ = other.alias_;
    attributeId_ = other.attributeId_;
    browsePath_ = other.browsePath_ != null ? other.browsePath_.Clone() : null;
    index_ = other.index_;
    indexRange_ = other.indexRange_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    typeDefinitionId_ = other.typeDefinitionId_ != null ? other.typeDefinitionId_.Clone() : null;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FilterOperand Clone() {
    return new FilterOperand(this);
  }

  /// <summary>Field number for the "Alias" field.</summary>
  public const int AliasFieldNumber = 1;
  private readonly static string AliasDefaultValue = "";

  private string alias_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Alias {
    get { return alias_ ?? AliasDefaultValue; }
    set {
      alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Alias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAlias {
    get { return alias_ != null; }
  }
  /// <summary>Clears the value of the "Alias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAlias() {
    alias_ = null;
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 2;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "BrowsePath" field.</summary>
  public const int BrowsePathFieldNumber = 3;
  private global::RelativePath browsePath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RelativePath BrowsePath {
    get { return browsePath_; }
    set {
      browsePath_ = value;
    }
  }

  /// <summary>Field number for the "Index" field.</summary>
  public const int IndexFieldNumber = 4;
  private readonly static uint IndexDefaultValue = 0;

  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { if ((_hasBits0 & 2) != 0) { return index_; } else { return IndexDefaultValue; } }
    set {
      _hasBits0 |= 2;
      index_ = value;
    }
  }
  /// <summary>Gets whether the "Index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndex {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndex() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 5;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 6;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "TypeDefinitionId" field.</summary>
  public const int TypeDefinitionIdFieldNumber = 7;
  private global::NodeId typeDefinitionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId TypeDefinitionId {
    get { return typeDefinitionId_; }
    set {
      typeDefinitionId_ = value;
    }
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 8;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FilterOperand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FilterOperand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Alias != other.Alias) return false;
    if (AttributeId != other.AttributeId) return false;
    if (!object.Equals(BrowsePath, other.BrowsePath)) return false;
    if (Index != other.Index) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(TypeDefinitionId, other.TypeDefinitionId)) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAlias) hash ^= Alias.GetHashCode();
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (browsePath_ != null) hash ^= BrowsePath.GetHashCode();
    if (HasIndex) hash ^= Index.GetHashCode();
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (typeDefinitionId_ != null) hash ^= TypeDefinitionId.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAlias) {
      output.WriteRawTag(10);
      output.WriteString(Alias);
    }
    if (HasAttributeId) {
      output.WriteRawTag(16);
      output.WriteUInt32(AttributeId);
    }
    if (browsePath_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(BrowsePath);
    }
    if (HasIndex) {
      output.WriteRawTag(32);
      output.WriteUInt32(Index);
    }
    if (HasIndexRange) {
      output.WriteRawTag(42);
      output.WriteString(IndexRange);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(NodeId);
    }
    if (typeDefinitionId_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(TypeDefinitionId);
    }
    if (value_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAlias) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
    }
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (browsePath_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowsePath);
    }
    if (HasIndex) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (typeDefinitionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeDefinitionId);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FilterOperand other) {
    if (other == null) {
      return;
    }
    if (other.HasAlias) {
      Alias = other.Alias;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.browsePath_ != null) {
      if (browsePath_ == null) {
        BrowsePath = new global::RelativePath();
      }
      BrowsePath.MergeFrom(other.BrowsePath);
    }
    if (other.HasIndex) {
      Index = other.Index;
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.typeDefinitionId_ != null) {
      if (typeDefinitionId_ == null) {
        TypeDefinitionId = new global::NodeId();
      }
      TypeDefinitionId.MergeFrom(other.TypeDefinitionId);
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Alias = input.ReadString();
          break;
        }
        case 16: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (browsePath_ == null) {
            BrowsePath = new global::RelativePath();
          }
          input.ReadMessage(BrowsePath);
          break;
        }
        case 32: {
          Index = input.ReadUInt32();
          break;
        }
        case 42: {
          IndexRange = input.ReadString();
          break;
        }
        case 50: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 58: {
          if (typeDefinitionId_ == null) {
            TypeDefinitionId = new global::NodeId();
          }
          input.ReadMessage(TypeDefinitionId);
          break;
        }
        case 66: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }

}

public sealed partial class FindServersOnNetworkRequest : pb::IMessage<FindServersOnNetworkRequest> {
  private static readonly pb::MessageParser<FindServersOnNetworkRequest> _parser = new pb::MessageParser<FindServersOnNetworkRequest>(() => new FindServersOnNetworkRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FindServersOnNetworkRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[351]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersOnNetworkRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersOnNetworkRequest(FindServersOnNetworkRequest other) : this() {
    _hasBits0 = other._hasBits0;
    maxRecordsToReturn_ = other.maxRecordsToReturn_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    serverCapabilityFilter_ = other.serverCapabilityFilter_ != null ? other.serverCapabilityFilter_.Clone() : null;
    startingRecordId_ = other.startingRecordId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersOnNetworkRequest Clone() {
    return new FindServersOnNetworkRequest(this);
  }

  /// <summary>Field number for the "MaxRecordsToReturn" field.</summary>
  public const int MaxRecordsToReturnFieldNumber = 1;
  private readonly static uint MaxRecordsToReturnDefaultValue = 0;

  private uint maxRecordsToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxRecordsToReturn {
    get { if ((_hasBits0 & 1) != 0) { return maxRecordsToReturn_; } else { return MaxRecordsToReturnDefaultValue; } }
    set {
      _hasBits0 |= 1;
      maxRecordsToReturn_ = value;
    }
  }
  /// <summary>Gets whether the "MaxRecordsToReturn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxRecordsToReturn {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MaxRecordsToReturn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxRecordsToReturn() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "ServerCapabilityFilter" field.</summary>
  public const int ServerCapabilityFilterFieldNumber = 3;
  private global::ListOfString serverCapabilityFilter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ServerCapabilityFilter {
    get { return serverCapabilityFilter_; }
    set {
      serverCapabilityFilter_ = value;
    }
  }

  /// <summary>Field number for the "StartingRecordId" field.</summary>
  public const int StartingRecordIdFieldNumber = 4;
  private readonly static uint StartingRecordIdDefaultValue = 0;

  private uint startingRecordId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StartingRecordId {
    get { if ((_hasBits0 & 2) != 0) { return startingRecordId_; } else { return StartingRecordIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      startingRecordId_ = value;
    }
  }
  /// <summary>Gets whether the "StartingRecordId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartingRecordId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "StartingRecordId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartingRecordId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FindServersOnNetworkRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FindServersOnNetworkRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MaxRecordsToReturn != other.MaxRecordsToReturn) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ServerCapabilityFilter, other.ServerCapabilityFilter)) return false;
    if (StartingRecordId != other.StartingRecordId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMaxRecordsToReturn) hash ^= MaxRecordsToReturn.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (serverCapabilityFilter_ != null) hash ^= ServerCapabilityFilter.GetHashCode();
    if (HasStartingRecordId) hash ^= StartingRecordId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMaxRecordsToReturn) {
      output.WriteRawTag(8);
      output.WriteUInt32(MaxRecordsToReturn);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (serverCapabilityFilter_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ServerCapabilityFilter);
    }
    if (HasStartingRecordId) {
      output.WriteRawTag(32);
      output.WriteUInt32(StartingRecordId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMaxRecordsToReturn) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxRecordsToReturn);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (serverCapabilityFilter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerCapabilityFilter);
    }
    if (HasStartingRecordId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingRecordId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FindServersOnNetworkRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasMaxRecordsToReturn) {
      MaxRecordsToReturn = other.MaxRecordsToReturn;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.serverCapabilityFilter_ != null) {
      if (serverCapabilityFilter_ == null) {
        ServerCapabilityFilter = new global::ListOfString();
      }
      ServerCapabilityFilter.MergeFrom(other.ServerCapabilityFilter);
    }
    if (other.HasStartingRecordId) {
      StartingRecordId = other.StartingRecordId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MaxRecordsToReturn = input.ReadUInt32();
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 26: {
          if (serverCapabilityFilter_ == null) {
            ServerCapabilityFilter = new global::ListOfString();
          }
          input.ReadMessage(ServerCapabilityFilter);
          break;
        }
        case 32: {
          StartingRecordId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class FindServersOnNetworkResponse : pb::IMessage<FindServersOnNetworkResponse> {
  private static readonly pb::MessageParser<FindServersOnNetworkResponse> _parser = new pb::MessageParser<FindServersOnNetworkResponse>(() => new FindServersOnNetworkResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FindServersOnNetworkResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[352]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersOnNetworkResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersOnNetworkResponse(FindServersOnNetworkResponse other) : this() {
    _hasBits0 = other._hasBits0;
    lastCounterResetTime_ = other.lastCounterResetTime_;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    servers_ = other.servers_ != null ? other.servers_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersOnNetworkResponse Clone() {
    return new FindServersOnNetworkResponse(this);
  }

  /// <summary>Field number for the "LastCounterResetTime" field.</summary>
  public const int LastCounterResetTimeFieldNumber = 1;
  private readonly static long LastCounterResetTimeDefaultValue = 0L;

  private long lastCounterResetTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastCounterResetTime {
    get { if ((_hasBits0 & 1) != 0) { return lastCounterResetTime_; } else { return LastCounterResetTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      lastCounterResetTime_ = value;
    }
  }
  /// <summary>Gets whether the "LastCounterResetTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastCounterResetTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "LastCounterResetTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastCounterResetTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Servers" field.</summary>
  public const int ServersFieldNumber = 3;
  private global::ListOfServerOnNetwork servers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfServerOnNetwork Servers {
    get { return servers_; }
    set {
      servers_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FindServersOnNetworkResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FindServersOnNetworkResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LastCounterResetTime != other.LastCounterResetTime) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Servers, other.Servers)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLastCounterResetTime) hash ^= LastCounterResetTime.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (servers_ != null) hash ^= Servers.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasLastCounterResetTime) {
      output.WriteRawTag(8);
      output.WriteInt64(LastCounterResetTime);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (servers_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Servers);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasLastCounterResetTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCounterResetTime);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (servers_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Servers);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FindServersOnNetworkResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasLastCounterResetTime) {
      LastCounterResetTime = other.LastCounterResetTime;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.servers_ != null) {
      if (servers_ == null) {
        Servers = new global::ListOfServerOnNetwork();
      }
      Servers.MergeFrom(other.Servers);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LastCounterResetTime = input.ReadInt64();
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (servers_ == null) {
            Servers = new global::ListOfServerOnNetwork();
          }
          input.ReadMessage(Servers);
          break;
        }
      }
    }
  }

}

public sealed partial class FindServersRequest : pb::IMessage<FindServersRequest> {
  private static readonly pb::MessageParser<FindServersRequest> _parser = new pb::MessageParser<FindServersRequest>(() => new FindServersRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FindServersRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[353]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersRequest(FindServersRequest other) : this() {
    endpointUrl_ = other.endpointUrl_;
    localeIds_ = other.localeIds_ != null ? other.localeIds_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    serverUris_ = other.serverUris_ != null ? other.serverUris_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersRequest Clone() {
    return new FindServersRequest(this);
  }

  /// <summary>Field number for the "EndpointUrl" field.</summary>
  public const int EndpointUrlFieldNumber = 1;
  private readonly static string EndpointUrlDefaultValue = "";

  private string endpointUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EndpointUrl {
    get { return endpointUrl_ ?? EndpointUrlDefaultValue; }
    set {
      endpointUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EndpointUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndpointUrl {
    get { return endpointUrl_ != null; }
  }
  /// <summary>Clears the value of the "EndpointUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndpointUrl() {
    endpointUrl_ = null;
  }

  /// <summary>Field number for the "LocaleIds" field.</summary>
  public const int LocaleIdsFieldNumber = 2;
  private global::ListOfString localeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString LocaleIds {
    get { return localeIds_; }
    set {
      localeIds_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "ServerUris" field.</summary>
  public const int ServerUrisFieldNumber = 4;
  private global::ListOfString serverUris_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ServerUris {
    get { return serverUris_; }
    set {
      serverUris_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FindServersRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FindServersRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndpointUrl != other.EndpointUrl) return false;
    if (!object.Equals(LocaleIds, other.LocaleIds)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ServerUris, other.ServerUris)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndpointUrl) hash ^= EndpointUrl.GetHashCode();
    if (localeIds_ != null) hash ^= LocaleIds.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (serverUris_ != null) hash ^= ServerUris.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndpointUrl) {
      output.WriteRawTag(10);
      output.WriteString(EndpointUrl);
    }
    if (localeIds_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(LocaleIds);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (serverUris_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ServerUris);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndpointUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EndpointUrl);
    }
    if (localeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocaleIds);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (serverUris_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerUris);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FindServersRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasEndpointUrl) {
      EndpointUrl = other.EndpointUrl;
    }
    if (other.localeIds_ != null) {
      if (localeIds_ == null) {
        LocaleIds = new global::ListOfString();
      }
      LocaleIds.MergeFrom(other.LocaleIds);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.serverUris_ != null) {
      if (serverUris_ == null) {
        ServerUris = new global::ListOfString();
      }
      ServerUris.MergeFrom(other.ServerUris);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointUrl = input.ReadString();
          break;
        }
        case 18: {
          if (localeIds_ == null) {
            LocaleIds = new global::ListOfString();
          }
          input.ReadMessage(LocaleIds);
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 34: {
          if (serverUris_ == null) {
            ServerUris = new global::ListOfString();
          }
          input.ReadMessage(ServerUris);
          break;
        }
      }
    }
  }

}

public sealed partial class FindServersResponse : pb::IMessage<FindServersResponse> {
  private static readonly pb::MessageParser<FindServersResponse> _parser = new pb::MessageParser<FindServersResponse>(() => new FindServersResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FindServersResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[354]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersResponse(FindServersResponse other) : this() {
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    servers_ = other.servers_ != null ? other.servers_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FindServersResponse Clone() {
    return new FindServersResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Servers" field.</summary>
  public const int ServersFieldNumber = 2;
  private global::ListOfApplicationDescription servers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfApplicationDescription Servers {
    get { return servers_; }
    set {
      servers_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FindServersResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FindServersResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Servers, other.Servers)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (servers_ != null) hash ^= Servers.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (servers_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Servers);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (servers_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Servers);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FindServersResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.servers_ != null) {
      if (servers_ == null) {
        Servers = new global::ListOfApplicationDescription();
      }
      Servers.MergeFrom(other.Servers);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 18: {
          if (servers_ == null) {
            Servers = new global::ListOfApplicationDescription();
          }
          input.ReadMessage(Servers);
          break;
        }
      }
    }
  }

}

public sealed partial class GenericAttributes : pb::IMessage<GenericAttributes> {
  private static readonly pb::MessageParser<GenericAttributes> _parser = new pb::MessageParser<GenericAttributes>(() => new GenericAttributes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GenericAttributes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[355]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenericAttributes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenericAttributes(GenericAttributes other) : this() {
    _hasBits0 = other._hasBits0;
    attributeValues_ = other.attributeValues_ != null ? other.attributeValues_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    specifiedAttributes_ = other.specifiedAttributes_;
    userWriteMask_ = other.userWriteMask_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenericAttributes Clone() {
    return new GenericAttributes(this);
  }

  /// <summary>Field number for the "AttributeValues" field.</summary>
  public const int AttributeValuesFieldNumber = 1;
  private global::ListOfGenericAttributeValue attributeValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfGenericAttributeValue AttributeValues {
    get { return attributeValues_; }
    set {
      attributeValues_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 2;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 3;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "SpecifiedAttributes" field.</summary>
  public const int SpecifiedAttributesFieldNumber = 4;
  private readonly static uint SpecifiedAttributesDefaultValue = 0;

  private uint specifiedAttributes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpecifiedAttributes {
    get { if ((_hasBits0 & 1) != 0) { return specifiedAttributes_; } else { return SpecifiedAttributesDefaultValue; } }
    set {
      _hasBits0 |= 1;
      specifiedAttributes_ = value;
    }
  }
  /// <summary>Gets whether the "SpecifiedAttributes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSpecifiedAttributes {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SpecifiedAttributes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSpecifiedAttributes() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 5;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 2) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 2;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 6;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 4) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 4;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GenericAttributes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GenericAttributes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AttributeValues, other.AttributeValues)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (SpecifiedAttributes != other.SpecifiedAttributes) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (attributeValues_ != null) hash ^= AttributeValues.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasSpecifiedAttributes) hash ^= SpecifiedAttributes.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (attributeValues_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AttributeValues);
    }
    if (description_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DisplayName);
    }
    if (HasSpecifiedAttributes) {
      output.WriteRawTag(32);
      output.WriteUInt32(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(40);
      output.WriteUInt32(UserWriteMask);
    }
    if (HasWriteMask) {
      output.WriteRawTag(48);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (attributeValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttributeValues);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasSpecifiedAttributes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecifiedAttributes);
    }
    if (HasUserWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (HasWriteMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GenericAttributes other) {
    if (other == null) {
      return;
    }
    if (other.attributeValues_ != null) {
      if (attributeValues_ == null) {
        AttributeValues = new global::ListOfGenericAttributeValue();
      }
      AttributeValues.MergeFrom(other.AttributeValues);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasSpecifiedAttributes) {
      SpecifiedAttributes = other.SpecifiedAttributes;
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (attributeValues_ == null) {
            AttributeValues = new global::ListOfGenericAttributeValue();
          }
          input.ReadMessage(AttributeValues);
          break;
        }
        case 18: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 26: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 32: {
          SpecifiedAttributes = input.ReadUInt32();
          break;
        }
        case 40: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 48: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GetEndpointsRequest : pb::IMessage<GetEndpointsRequest> {
  private static readonly pb::MessageParser<GetEndpointsRequest> _parser = new pb::MessageParser<GetEndpointsRequest>(() => new GetEndpointsRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetEndpointsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[356]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetEndpointsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetEndpointsRequest(GetEndpointsRequest other) : this() {
    endpointUrl_ = other.endpointUrl_;
    localeIds_ = other.localeIds_ != null ? other.localeIds_.Clone() : null;
    profileUris_ = other.profileUris_ != null ? other.profileUris_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetEndpointsRequest Clone() {
    return new GetEndpointsRequest(this);
  }

  /// <summary>Field number for the "EndpointUrl" field.</summary>
  public const int EndpointUrlFieldNumber = 1;
  private readonly static string EndpointUrlDefaultValue = "";

  private string endpointUrl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EndpointUrl {
    get { return endpointUrl_ ?? EndpointUrlDefaultValue; }
    set {
      endpointUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "EndpointUrl" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndpointUrl {
    get { return endpointUrl_ != null; }
  }
  /// <summary>Clears the value of the "EndpointUrl" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndpointUrl() {
    endpointUrl_ = null;
  }

  /// <summary>Field number for the "LocaleIds" field.</summary>
  public const int LocaleIdsFieldNumber = 2;
  private global::ListOfString localeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString LocaleIds {
    get { return localeIds_; }
    set {
      localeIds_ = value;
    }
  }

  /// <summary>Field number for the "ProfileUris" field.</summary>
  public const int ProfileUrisFieldNumber = 3;
  private global::ListOfString profileUris_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString ProfileUris {
    get { return profileUris_; }
    set {
      profileUris_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 4;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetEndpointsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetEndpointsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndpointUrl != other.EndpointUrl) return false;
    if (!object.Equals(LocaleIds, other.LocaleIds)) return false;
    if (!object.Equals(ProfileUris, other.ProfileUris)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndpointUrl) hash ^= EndpointUrl.GetHashCode();
    if (localeIds_ != null) hash ^= LocaleIds.GetHashCode();
    if (profileUris_ != null) hash ^= ProfileUris.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndpointUrl) {
      output.WriteRawTag(10);
      output.WriteString(EndpointUrl);
    }
    if (localeIds_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(LocaleIds);
    }
    if (profileUris_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ProfileUris);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndpointUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EndpointUrl);
    }
    if (localeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocaleIds);
    }
    if (profileUris_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileUris);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetEndpointsRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasEndpointUrl) {
      EndpointUrl = other.EndpointUrl;
    }
    if (other.localeIds_ != null) {
      if (localeIds_ == null) {
        LocaleIds = new global::ListOfString();
      }
      LocaleIds.MergeFrom(other.LocaleIds);
    }
    if (other.profileUris_ != null) {
      if (profileUris_ == null) {
        ProfileUris = new global::ListOfString();
      }
      ProfileUris.MergeFrom(other.ProfileUris);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointUrl = input.ReadString();
          break;
        }
        case 18: {
          if (localeIds_ == null) {
            LocaleIds = new global::ListOfString();
          }
          input.ReadMessage(LocaleIds);
          break;
        }
        case 26: {
          if (profileUris_ == null) {
            ProfileUris = new global::ListOfString();
          }
          input.ReadMessage(ProfileUris);
          break;
        }
        case 34: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryData : pb::IMessage<HistoryData> {
  private static readonly pb::MessageParser<HistoryData> _parser = new pb::MessageParser<HistoryData>(() => new HistoryData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[357]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryData(HistoryData other) : this() {
    dataValues_ = other.dataValues_ != null ? other.dataValues_.Clone() : null;
    modificationInfos_ = other.modificationInfos_ != null ? other.modificationInfos_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryData Clone() {
    return new HistoryData(this);
  }

  /// <summary>Field number for the "DataValues" field.</summary>
  public const int DataValuesFieldNumber = 1;
  private global::ListOfDataValue dataValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataValue DataValues {
    get { return dataValues_; }
    set {
      dataValues_ = value;
    }
  }

  /// <summary>Field number for the "ModificationInfos" field.</summary>
  public const int ModificationInfosFieldNumber = 2;
  private global::ListOfModificationInfo modificationInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfModificationInfo ModificationInfos {
    get { return modificationInfos_; }
    set {
      modificationInfos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataValues, other.DataValues)) return false;
    if (!object.Equals(ModificationInfos, other.ModificationInfos)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataValues_ != null) hash ^= DataValues.GetHashCode();
    if (modificationInfos_ != null) hash ^= ModificationInfos.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataValues_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataValues);
    }
    if (modificationInfos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ModificationInfos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataValues);
    }
    if (modificationInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModificationInfos);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryData other) {
    if (other == null) {
      return;
    }
    if (other.dataValues_ != null) {
      if (dataValues_ == null) {
        DataValues = new global::ListOfDataValue();
      }
      DataValues.MergeFrom(other.DataValues);
    }
    if (other.modificationInfos_ != null) {
      if (modificationInfos_ == null) {
        ModificationInfos = new global::ListOfModificationInfo();
      }
      ModificationInfos.MergeFrom(other.ModificationInfos);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataValues_ == null) {
            DataValues = new global::ListOfDataValue();
          }
          input.ReadMessage(DataValues);
          break;
        }
        case 18: {
          if (modificationInfos_ == null) {
            ModificationInfos = new global::ListOfModificationInfo();
          }
          input.ReadMessage(ModificationInfos);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryEventFieldList : pb::IMessage<HistoryEventFieldList> {
  private static readonly pb::MessageParser<HistoryEventFieldList> _parser = new pb::MessageParser<HistoryEventFieldList>(() => new HistoryEventFieldList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryEventFieldList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[358]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryEventFieldList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryEventFieldList(HistoryEventFieldList other) : this() {
    eventFields_ = other.eventFields_ != null ? other.eventFields_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryEventFieldList Clone() {
    return new HistoryEventFieldList(this);
  }

  /// <summary>Field number for the "EventFields" field.</summary>
  public const int EventFieldsFieldNumber = 1;
  private global::ListOfVariant eventFields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfVariant EventFields {
    get { return eventFields_; }
    set {
      eventFields_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryEventFieldList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryEventFieldList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(EventFields, other.EventFields)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (eventFields_ != null) hash ^= EventFields.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (eventFields_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EventFields);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (eventFields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventFields);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryEventFieldList other) {
    if (other == null) {
      return;
    }
    if (other.eventFields_ != null) {
      if (eventFields_ == null) {
        EventFields = new global::ListOfVariant();
      }
      EventFields.MergeFrom(other.EventFields);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (eventFields_ == null) {
            EventFields = new global::ListOfVariant();
          }
          input.ReadMessage(EventFields);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryModifiedData : pb::IMessage<HistoryModifiedData> {
  private static readonly pb::MessageParser<HistoryModifiedData> _parser = new pb::MessageParser<HistoryModifiedData>(() => new HistoryModifiedData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryModifiedData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[359]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryModifiedData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryModifiedData(HistoryModifiedData other) : this() {
    dataValues_ = other.dataValues_ != null ? other.dataValues_.Clone() : null;
    modificationInfos_ = other.modificationInfos_ != null ? other.modificationInfos_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryModifiedData Clone() {
    return new HistoryModifiedData(this);
  }

  /// <summary>Field number for the "DataValues" field.</summary>
  public const int DataValuesFieldNumber = 1;
  private global::ListOfDataValue dataValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataValue DataValues {
    get { return dataValues_; }
    set {
      dataValues_ = value;
    }
  }

  /// <summary>Field number for the "ModificationInfos" field.</summary>
  public const int ModificationInfosFieldNumber = 2;
  private global::ListOfModificationInfo modificationInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfModificationInfo ModificationInfos {
    get { return modificationInfos_; }
    set {
      modificationInfos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryModifiedData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryModifiedData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataValues, other.DataValues)) return false;
    if (!object.Equals(ModificationInfos, other.ModificationInfos)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataValues_ != null) hash ^= DataValues.GetHashCode();
    if (modificationInfos_ != null) hash ^= ModificationInfos.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataValues_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataValues);
    }
    if (modificationInfos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ModificationInfos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataValues);
    }
    if (modificationInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModificationInfos);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryModifiedData other) {
    if (other == null) {
      return;
    }
    if (other.dataValues_ != null) {
      if (dataValues_ == null) {
        DataValues = new global::ListOfDataValue();
      }
      DataValues.MergeFrom(other.DataValues);
    }
    if (other.modificationInfos_ != null) {
      if (modificationInfos_ == null) {
        ModificationInfos = new global::ListOfModificationInfo();
      }
      ModificationInfos.MergeFrom(other.ModificationInfos);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataValues_ == null) {
            DataValues = new global::ListOfDataValue();
          }
          input.ReadMessage(DataValues);
          break;
        }
        case 18: {
          if (modificationInfos_ == null) {
            ModificationInfos = new global::ListOfModificationInfo();
          }
          input.ReadMessage(ModificationInfos);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryReadRequest : pb::IMessage<HistoryReadRequest> {
  private static readonly pb::MessageParser<HistoryReadRequest> _parser = new pb::MessageParser<HistoryReadRequest>(() => new HistoryReadRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryReadRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[360]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadRequest(HistoryReadRequest other) : this() {
    _hasBits0 = other._hasBits0;
    historyReadDetails_ = other.historyReadDetails_ != null ? other.historyReadDetails_.Clone() : null;
    nodesToRead_ = other.nodesToRead_ != null ? other.nodesToRead_.Clone() : null;
    releaseContinuationPoints_ = other.releaseContinuationPoints_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    TimestampsToReturn_ = other.TimestampsToReturn_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadRequest Clone() {
    return new HistoryReadRequest(this);
  }

  /// <summary>Field number for the "HistoryReadDetails" field.</summary>
  public const int HistoryReadDetailsFieldNumber = 1;
  private global::ExtensionObject historyReadDetails_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject HistoryReadDetails {
    get { return historyReadDetails_; }
    set {
      historyReadDetails_ = value;
    }
  }

  /// <summary>Field number for the "NodesToRead" field.</summary>
  public const int NodesToReadFieldNumber = 2;
  private global::ListOfHistoryReadValueId nodesToRead_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfHistoryReadValueId NodesToRead {
    get { return nodesToRead_; }
    set {
      nodesToRead_ = value;
    }
  }

  /// <summary>Field number for the "ReleaseContinuationPoints" field.</summary>
  public const int ReleaseContinuationPointsFieldNumber = 3;
  private readonly static bool ReleaseContinuationPointsDefaultValue = false;

  private bool releaseContinuationPoints_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReleaseContinuationPoints {
    get { if ((_hasBits0 & 1) != 0) { return releaseContinuationPoints_; } else { return ReleaseContinuationPointsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      releaseContinuationPoints_ = value;
    }
  }
  /// <summary>Gets whether the "ReleaseContinuationPoints" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReleaseContinuationPoints {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ReleaseContinuationPoints" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReleaseContinuationPoints() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 4;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "_TimestampsToReturn" field.</summary>
  public const int TimestampsToReturnFieldNumber = 5;
  private readonly static global::HistoryReadRequest.Types.TimestampsToReturn TimestampsToReturnDefaultValue = global::HistoryReadRequest.Types.TimestampsToReturn.Both2;

  private global::HistoryReadRequest.Types.TimestampsToReturn TimestampsToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HistoryReadRequest.Types.TimestampsToReturn TimestampsToReturn {
    get { if ((_hasBits0 & 2) != 0) { return TimestampsToReturn_; } else { return TimestampsToReturnDefaultValue; } }
    set {
      _hasBits0 |= 2;
      TimestampsToReturn_ = value;
    }
  }
  /// <summary>Gets whether the "_TimestampsToReturn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestampsToReturn {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "_TimestampsToReturn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestampsToReturn() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryReadRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryReadRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(HistoryReadDetails, other.HistoryReadDetails)) return false;
    if (!object.Equals(NodesToRead, other.NodesToRead)) return false;
    if (ReleaseContinuationPoints != other.ReleaseContinuationPoints) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (TimestampsToReturn != other.TimestampsToReturn) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (historyReadDetails_ != null) hash ^= HistoryReadDetails.GetHashCode();
    if (nodesToRead_ != null) hash ^= NodesToRead.GetHashCode();
    if (HasReleaseContinuationPoints) hash ^= ReleaseContinuationPoints.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasTimestampsToReturn) hash ^= TimestampsToReturn.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (historyReadDetails_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(HistoryReadDetails);
    }
    if (nodesToRead_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NodesToRead);
    }
    if (HasReleaseContinuationPoints) {
      output.WriteRawTag(24);
      output.WriteBool(ReleaseContinuationPoints);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(RequestHeader);
    }
    if (HasTimestampsToReturn) {
      output.WriteRawTag(40);
      output.WriteEnum((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (historyReadDetails_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HistoryReadDetails);
    }
    if (nodesToRead_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToRead);
    }
    if (HasReleaseContinuationPoints) {
      size += 1 + 1;
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasTimestampsToReturn) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryReadRequest other) {
    if (other == null) {
      return;
    }
    if (other.historyReadDetails_ != null) {
      if (historyReadDetails_ == null) {
        HistoryReadDetails = new global::ExtensionObject();
      }
      HistoryReadDetails.MergeFrom(other.HistoryReadDetails);
    }
    if (other.nodesToRead_ != null) {
      if (nodesToRead_ == null) {
        NodesToRead = new global::ListOfHistoryReadValueId();
      }
      NodesToRead.MergeFrom(other.NodesToRead);
    }
    if (other.HasReleaseContinuationPoints) {
      ReleaseContinuationPoints = other.ReleaseContinuationPoints;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasTimestampsToReturn) {
      TimestampsToReturn = other.TimestampsToReturn;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (historyReadDetails_ == null) {
            HistoryReadDetails = new global::ExtensionObject();
          }
          input.ReadMessage(HistoryReadDetails);
          break;
        }
        case 18: {
          if (nodesToRead_ == null) {
            NodesToRead = new global::ListOfHistoryReadValueId();
          }
          input.ReadMessage(NodesToRead);
          break;
        }
        case 24: {
          ReleaseContinuationPoints = input.ReadBool();
          break;
        }
        case 34: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 40: {
          TimestampsToReturn = (global::HistoryReadRequest.Types.TimestampsToReturn) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the HistoryReadRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TimestampsToReturn {
      [pbr::OriginalName("TimestampsToReturn_Both_2")] Both2 = 1,
      [pbr::OriginalName("TimestampsToReturn_Invalid_4")] Invalid4 = 2,
      [pbr::OriginalName("TimestampsToReturn_Neither_3")] Neither3 = 3,
      [pbr::OriginalName("TimestampsToReturn_Server_1")] Server1 = 4,
      [pbr::OriginalName("TimestampsToReturn_Source_0")] Source0 = 5,
    }

  }
  #endregion

}

public sealed partial class HistoryReadResponse : pb::IMessage<HistoryReadResponse> {
  private static readonly pb::MessageParser<HistoryReadResponse> _parser = new pb::MessageParser<HistoryReadResponse>(() => new HistoryReadResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryReadResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[361]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadResponse(HistoryReadResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadResponse Clone() {
    return new HistoryReadResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfHistoryReadResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfHistoryReadResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryReadResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryReadResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryReadResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfHistoryReadResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfHistoryReadResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryUpdateRequest : pb::IMessage<HistoryUpdateRequest> {
  private static readonly pb::MessageParser<HistoryUpdateRequest> _parser = new pb::MessageParser<HistoryUpdateRequest>(() => new HistoryUpdateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryUpdateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[362]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateRequest(HistoryUpdateRequest other) : this() {
    historyUpdateDetails_ = other.historyUpdateDetails_ != null ? other.historyUpdateDetails_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateRequest Clone() {
    return new HistoryUpdateRequest(this);
  }

  /// <summary>Field number for the "HistoryUpdateDetails" field.</summary>
  public const int HistoryUpdateDetailsFieldNumber = 1;
  private global::ListOfExtensionObject historyUpdateDetails_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfExtensionObject HistoryUpdateDetails {
    get { return historyUpdateDetails_; }
    set {
      historyUpdateDetails_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryUpdateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryUpdateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(HistoryUpdateDetails, other.HistoryUpdateDetails)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (historyUpdateDetails_ != null) hash ^= HistoryUpdateDetails.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (historyUpdateDetails_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(HistoryUpdateDetails);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (historyUpdateDetails_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HistoryUpdateDetails);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryUpdateRequest other) {
    if (other == null) {
      return;
    }
    if (other.historyUpdateDetails_ != null) {
      if (historyUpdateDetails_ == null) {
        HistoryUpdateDetails = new global::ListOfExtensionObject();
      }
      HistoryUpdateDetails.MergeFrom(other.HistoryUpdateDetails);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (historyUpdateDetails_ == null) {
            HistoryUpdateDetails = new global::ListOfExtensionObject();
          }
          input.ReadMessage(HistoryUpdateDetails);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryUpdateResult : pb::IMessage<HistoryUpdateResult> {
  private static readonly pb::MessageParser<HistoryUpdateResult> _parser = new pb::MessageParser<HistoryUpdateResult>(() => new HistoryUpdateResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryUpdateResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[363]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateResult(HistoryUpdateResult other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    operationResults_ = other.operationResults_ != null ? other.operationResults_.Clone() : null;
    StatusCode_ = other.StatusCode_ != null ? other.StatusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateResult Clone() {
    return new HistoryUpdateResult(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "OperationResults" field.</summary>
  public const int OperationResultsFieldNumber = 2;
  private global::ListOfStatusCode operationResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode OperationResults {
    get { return operationResults_; }
    set {
      operationResults_ = value;
    }
  }

  /// <summary>Field number for the "_StatusCode" field.</summary>
  public const int StatusCodeFieldNumber = 3;
  private global::StatusCode StatusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return StatusCode_; }
    set {
      StatusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryUpdateResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryUpdateResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(OperationResults, other.OperationResults)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (operationResults_ != null) hash ^= OperationResults.GetHashCode();
    if (StatusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (operationResults_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(OperationResults);
    }
    if (StatusCode_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (operationResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperationResults);
    }
    if (StatusCode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryUpdateResult other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.operationResults_ != null) {
      if (operationResults_ == null) {
        OperationResults = new global::ListOfStatusCode();
      }
      OperationResults.MergeFrom(other.OperationResults);
    }
    if (other.StatusCode_ != null) {
      if (StatusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (operationResults_ == null) {
            OperationResults = new global::ListOfStatusCode();
          }
          input.ReadMessage(OperationResults);
          break;
        }
        case 26: {
          if (StatusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class InstanceNode : pb::IMessage<InstanceNode> {
  private static readonly pb::MessageParser<InstanceNode> _parser = new pb::MessageParser<InstanceNode>(() => new InstanceNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InstanceNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[364]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InstanceNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InstanceNode(InstanceNode other) : this() {
    _hasBits0 = other._hasBits0;
    accessLevel_ = other.accessLevel_;
    accessLevelEx_ = other.accessLevelEx_;
    accessRestrictions_ = other.accessRestrictions_;
    arrayDimensions_ = other.arrayDimensions_ != null ? other.arrayDimensions_.Clone() : null;
    browseName_ = other.browseName_ != null ? other.browseName_.Clone() : null;
    containsNoLoops_ = other.containsNoLoops_;
    dataType_ = other.dataType_ != null ? other.dataType_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
    eventNotifier_ = other.eventNotifier_;
    executable_ = other.executable_;
    historizing_ = other.historizing_;
    minimumSamplingInterval_ = other.minimumSamplingInterval_;
    NodeClass_ = other.NodeClass_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    references_ = other.references_ != null ? other.references_.Clone() : null;
    rolePermissions_ = other.rolePermissions_ != null ? other.rolePermissions_.Clone() : null;
    userAccessLevel_ = other.userAccessLevel_;
    userExecutable_ = other.userExecutable_;
    userRolePermissions_ = other.userRolePermissions_ != null ? other.userRolePermissions_.Clone() : null;
    userWriteMask_ = other.userWriteMask_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    valueRank_ = other.valueRank_;
    writeMask_ = other.writeMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InstanceNode Clone() {
    return new InstanceNode(this);
  }

  /// <summary>Field number for the "AccessLevel" field.</summary>
  public const int AccessLevelFieldNumber = 1;
  private readonly static uint AccessLevelDefaultValue = 0;

  private uint accessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevel {
    get { if ((_hasBits0 & 1) != 0) { return accessLevel_; } else { return AccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      accessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "AccessLevelEx" field.</summary>
  public const int AccessLevelExFieldNumber = 2;
  private readonly static uint AccessLevelExDefaultValue = 0;

  private uint accessLevelEx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessLevelEx {
    get { if ((_hasBits0 & 2) != 0) { return accessLevelEx_; } else { return AccessLevelExDefaultValue; } }
    set {
      _hasBits0 |= 2;
      accessLevelEx_ = value;
    }
  }
  /// <summary>Gets whether the "AccessLevelEx" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessLevelEx {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "AccessLevelEx" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessLevelEx() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "AccessRestrictions" field.</summary>
  public const int AccessRestrictionsFieldNumber = 3;
  private readonly static uint AccessRestrictionsDefaultValue = 0;

  private uint accessRestrictions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AccessRestrictions {
    get { if ((_hasBits0 & 4) != 0) { return accessRestrictions_; } else { return AccessRestrictionsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      accessRestrictions_ = value;
    }
  }
  /// <summary>Gets whether the "AccessRestrictions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessRestrictions {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "AccessRestrictions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessRestrictions() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ArrayDimensions" field.</summary>
  public const int ArrayDimensionsFieldNumber = 4;
  private global::ListOfUInt32 arrayDimensions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 ArrayDimensions {
    get { return arrayDimensions_; }
    set {
      arrayDimensions_ = value;
    }
  }

  /// <summary>Field number for the "BrowseName" field.</summary>
  public const int BrowseNameFieldNumber = 5;
  private global::QualifiedName browseName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName BrowseName {
    get { return browseName_; }
    set {
      browseName_ = value;
    }
  }

  /// <summary>Field number for the "ContainsNoLoops" field.</summary>
  public const int ContainsNoLoopsFieldNumber = 6;
  private readonly static bool ContainsNoLoopsDefaultValue = false;

  private bool containsNoLoops_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ContainsNoLoops {
    get { if ((_hasBits0 & 8) != 0) { return containsNoLoops_; } else { return ContainsNoLoopsDefaultValue; } }
    set {
      _hasBits0 |= 8;
      containsNoLoops_ = value;
    }
  }
  /// <summary>Gets whether the "ContainsNoLoops" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContainsNoLoops {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ContainsNoLoops" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContainsNoLoops() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "DataType" field.</summary>
  public const int DataTypeFieldNumber = 7;
  private global::NodeId dataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataType {
    get { return dataType_; }
    set {
      dataType_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 8;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "DisplayName" field.</summary>
  public const int DisplayNameFieldNumber = 9;
  private global::LocalizedText displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText DisplayName {
    get { return displayName_; }
    set {
      displayName_ = value;
    }
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 10;
  private readonly static uint EventNotifierDefaultValue = 0;

  private uint eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventNotifier {
    get { if ((_hasBits0 & 16) != 0) { return eventNotifier_; } else { return EventNotifierDefaultValue; } }
    set {
      _hasBits0 |= 16;
      eventNotifier_ = value;
    }
  }
  /// <summary>Gets whether the "EventNotifier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEventNotifier {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "EventNotifier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventNotifier() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "Executable" field.</summary>
  public const int ExecutableFieldNumber = 11;
  private readonly static bool ExecutableDefaultValue = false;

  private bool executable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Executable {
    get { if ((_hasBits0 & 32) != 0) { return executable_; } else { return ExecutableDefaultValue; } }
    set {
      _hasBits0 |= 32;
      executable_ = value;
    }
  }
  /// <summary>Gets whether the "Executable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExecutable {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "Executable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExecutable() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "Historizing" field.</summary>
  public const int HistorizingFieldNumber = 12;
  private readonly static bool HistorizingDefaultValue = false;

  private bool historizing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Historizing {
    get { if ((_hasBits0 & 64) != 0) { return historizing_; } else { return HistorizingDefaultValue; } }
    set {
      _hasBits0 |= 64;
      historizing_ = value;
    }
  }
  /// <summary>Gets whether the "Historizing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHistorizing {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "Historizing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHistorizing() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "MinimumSamplingInterval" field.</summary>
  public const int MinimumSamplingIntervalFieldNumber = 13;
  private readonly static double MinimumSamplingIntervalDefaultValue = 0D;

  private double minimumSamplingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinimumSamplingInterval {
    get { if ((_hasBits0 & 128) != 0) { return minimumSamplingInterval_; } else { return MinimumSamplingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 128;
      minimumSamplingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "MinimumSamplingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMinimumSamplingInterval {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "MinimumSamplingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMinimumSamplingInterval() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "_NodeClass" field.</summary>
  public const int NodeClassFieldNumber = 14;
  private readonly static global::InstanceNode.Types.NodeClass NodeClassDefaultValue = global::InstanceNode.Types.NodeClass.DataType64;

  private global::InstanceNode.Types.NodeClass NodeClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InstanceNode.Types.NodeClass NodeClass {
    get { if ((_hasBits0 & 256) != 0) { return NodeClass_; } else { return NodeClassDefaultValue; } }
    set {
      _hasBits0 |= 256;
      NodeClass_ = value;
    }
  }
  /// <summary>Gets whether the "_NodeClass" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNodeClass {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "_NodeClass" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNodeClass() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 15;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "References" field.</summary>
  public const int ReferencesFieldNumber = 16;
  private global::ListOfReferenceNode references_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReferenceNode References {
    get { return references_; }
    set {
      references_ = value;
    }
  }

  /// <summary>Field number for the "RolePermissions" field.</summary>
  public const int RolePermissionsFieldNumber = 17;
  private global::ListOfRolePermissionType rolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType RolePermissions {
    get { return rolePermissions_; }
    set {
      rolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserAccessLevel" field.</summary>
  public const int UserAccessLevelFieldNumber = 18;
  private readonly static uint UserAccessLevelDefaultValue = 0;

  private uint userAccessLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserAccessLevel {
    get { if ((_hasBits0 & 512) != 0) { return userAccessLevel_; } else { return UserAccessLevelDefaultValue; } }
    set {
      _hasBits0 |= 512;
      userAccessLevel_ = value;
    }
  }
  /// <summary>Gets whether the "UserAccessLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserAccessLevel {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "UserAccessLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserAccessLevel() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "UserExecutable" field.</summary>
  public const int UserExecutableFieldNumber = 19;
  private readonly static bool UserExecutableDefaultValue = false;

  private bool userExecutable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UserExecutable {
    get { if ((_hasBits0 & 1024) != 0) { return userExecutable_; } else { return UserExecutableDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      userExecutable_ = value;
    }
  }
  /// <summary>Gets whether the "UserExecutable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserExecutable {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "UserExecutable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserExecutable() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "UserRolePermissions" field.</summary>
  public const int UserRolePermissionsFieldNumber = 20;
  private global::ListOfRolePermissionType userRolePermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfRolePermissionType UserRolePermissions {
    get { return userRolePermissions_; }
    set {
      userRolePermissions_ = value;
    }
  }

  /// <summary>Field number for the "UserWriteMask" field.</summary>
  public const int UserWriteMaskFieldNumber = 21;
  private readonly static uint UserWriteMaskDefaultValue = 0;

  private uint userWriteMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserWriteMask {
    get { if ((_hasBits0 & 2048) != 0) { return userWriteMask_; } else { return UserWriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      userWriteMask_ = value;
    }
  }
  /// <summary>Gets whether the "UserWriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserWriteMask {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "UserWriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserWriteMask() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 22;
  private global::Variant value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "ValueRank" field.</summary>
  public const int ValueRankFieldNumber = 23;
  private readonly static int ValueRankDefaultValue = 0;

  private int valueRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ValueRank {
    get { if ((_hasBits0 & 4096) != 0) { return valueRank_; } else { return ValueRankDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      valueRank_ = value;
    }
  }
  /// <summary>Gets whether the "ValueRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValueRank {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "ValueRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValueRank() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "WriteMask" field.</summary>
  public const int WriteMaskFieldNumber = 24;
  private readonly static uint WriteMaskDefaultValue = 0;

  private uint writeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriteMask {
    get { if ((_hasBits0 & 8192) != 0) { return writeMask_; } else { return WriteMaskDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      writeMask_ = value;
    }
  }
  /// <summary>Gets whether the "WriteMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriteMask {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "WriteMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriteMask() {
    _hasBits0 &= ~8192;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InstanceNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InstanceNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessLevel != other.AccessLevel) return false;
    if (AccessLevelEx != other.AccessLevelEx) return false;
    if (AccessRestrictions != other.AccessRestrictions) return false;
    if (!object.Equals(ArrayDimensions, other.ArrayDimensions)) return false;
    if (!object.Equals(BrowseName, other.BrowseName)) return false;
    if (ContainsNoLoops != other.ContainsNoLoops) return false;
    if (!object.Equals(DataType, other.DataType)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(DisplayName, other.DisplayName)) return false;
    if (EventNotifier != other.EventNotifier) return false;
    if (Executable != other.Executable) return false;
    if (Historizing != other.Historizing) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumSamplingInterval, other.MinimumSamplingInterval)) return false;
    if (NodeClass != other.NodeClass) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (!object.Equals(References, other.References)) return false;
    if (!object.Equals(RolePermissions, other.RolePermissions)) return false;
    if (UserAccessLevel != other.UserAccessLevel) return false;
    if (UserExecutable != other.UserExecutable) return false;
    if (!object.Equals(UserRolePermissions, other.UserRolePermissions)) return false;
    if (UserWriteMask != other.UserWriteMask) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (ValueRank != other.ValueRank) return false;
    if (WriteMask != other.WriteMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccessLevel) hash ^= AccessLevel.GetHashCode();
    if (HasAccessLevelEx) hash ^= AccessLevelEx.GetHashCode();
    if (HasAccessRestrictions) hash ^= AccessRestrictions.GetHashCode();
    if (arrayDimensions_ != null) hash ^= ArrayDimensions.GetHashCode();
    if (browseName_ != null) hash ^= BrowseName.GetHashCode();
    if (HasContainsNoLoops) hash ^= ContainsNoLoops.GetHashCode();
    if (dataType_ != null) hash ^= DataType.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (displayName_ != null) hash ^= DisplayName.GetHashCode();
    if (HasEventNotifier) hash ^= EventNotifier.GetHashCode();
    if (HasExecutable) hash ^= Executable.GetHashCode();
    if (HasHistorizing) hash ^= Historizing.GetHashCode();
    if (HasMinimumSamplingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumSamplingInterval);
    if (HasNodeClass) hash ^= NodeClass.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (references_ != null) hash ^= References.GetHashCode();
    if (rolePermissions_ != null) hash ^= RolePermissions.GetHashCode();
    if (HasUserAccessLevel) hash ^= UserAccessLevel.GetHashCode();
    if (HasUserExecutable) hash ^= UserExecutable.GetHashCode();
    if (userRolePermissions_ != null) hash ^= UserRolePermissions.GetHashCode();
    if (HasUserWriteMask) hash ^= UserWriteMask.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (HasValueRank) hash ^= ValueRank.GetHashCode();
    if (HasWriteMask) hash ^= WriteMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccessLevel) {
      output.WriteRawTag(8);
      output.WriteUInt32(AccessLevel);
    }
    if (HasAccessLevelEx) {
      output.WriteRawTag(16);
      output.WriteUInt32(AccessLevelEx);
    }
    if (HasAccessRestrictions) {
      output.WriteRawTag(24);
      output.WriteUInt32(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ArrayDimensions);
    }
    if (browseName_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(BrowseName);
    }
    if (HasContainsNoLoops) {
      output.WriteRawTag(48);
      output.WriteBool(ContainsNoLoops);
    }
    if (dataType_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DataType);
    }
    if (description_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Description);
    }
    if (displayName_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(DisplayName);
    }
    if (HasEventNotifier) {
      output.WriteRawTag(80);
      output.WriteUInt32(EventNotifier);
    }
    if (HasExecutable) {
      output.WriteRawTag(88);
      output.WriteBool(Executable);
    }
    if (HasHistorizing) {
      output.WriteRawTag(96);
      output.WriteBool(Historizing);
    }
    if (HasMinimumSamplingInterval) {
      output.WriteRawTag(105);
      output.WriteDouble(MinimumSamplingInterval);
    }
    if (HasNodeClass) {
      output.WriteRawTag(112);
      output.WriteEnum((int) NodeClass);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(NodeId);
    }
    if (references_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(References);
    }
    if (rolePermissions_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(RolePermissions);
    }
    if (HasUserAccessLevel) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(UserAccessLevel);
    }
    if (HasUserExecutable) {
      output.WriteRawTag(152, 1);
      output.WriteBool(UserExecutable);
    }
    if (userRolePermissions_ != null) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(UserWriteMask);
    }
    if (value_ != null) {
      output.WriteRawTag(178, 1);
      output.WriteMessage(Value);
    }
    if (HasValueRank) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(ValueRank);
    }
    if (HasWriteMask) {
      output.WriteRawTag(192, 1);
      output.WriteUInt32(WriteMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccessLevel) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevel);
    }
    if (HasAccessLevelEx) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessLevelEx);
    }
    if (HasAccessRestrictions) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccessRestrictions);
    }
    if (arrayDimensions_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayDimensions);
    }
    if (browseName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowseName);
    }
    if (HasContainsNoLoops) {
      size += 1 + 1;
    }
    if (dataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataType);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (displayName_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
    }
    if (HasEventNotifier) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventNotifier);
    }
    if (HasExecutable) {
      size += 1 + 1;
    }
    if (HasHistorizing) {
      size += 1 + 1;
    }
    if (HasMinimumSamplingInterval) {
      size += 1 + 8;
    }
    if (HasNodeClass) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeClass);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (references_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(References);
    }
    if (rolePermissions_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RolePermissions);
    }
    if (HasUserAccessLevel) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserAccessLevel);
    }
    if (HasUserExecutable) {
      size += 2 + 1;
    }
    if (userRolePermissions_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserRolePermissions);
    }
    if (HasUserWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserWriteMask);
    }
    if (value_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (HasValueRank) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValueRank);
    }
    if (HasWriteMask) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriteMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InstanceNode other) {
    if (other == null) {
      return;
    }
    if (other.HasAccessLevel) {
      AccessLevel = other.AccessLevel;
    }
    if (other.HasAccessLevelEx) {
      AccessLevelEx = other.AccessLevelEx;
    }
    if (other.HasAccessRestrictions) {
      AccessRestrictions = other.AccessRestrictions;
    }
    if (other.arrayDimensions_ != null) {
      if (arrayDimensions_ == null) {
        ArrayDimensions = new global::ListOfUInt32();
      }
      ArrayDimensions.MergeFrom(other.ArrayDimensions);
    }
    if (other.browseName_ != null) {
      if (browseName_ == null) {
        BrowseName = new global::QualifiedName();
      }
      BrowseName.MergeFrom(other.BrowseName);
    }
    if (other.HasContainsNoLoops) {
      ContainsNoLoops = other.ContainsNoLoops;
    }
    if (other.dataType_ != null) {
      if (dataType_ == null) {
        DataType = new global::NodeId();
      }
      DataType.MergeFrom(other.DataType);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.displayName_ != null) {
      if (displayName_ == null) {
        DisplayName = new global::LocalizedText();
      }
      DisplayName.MergeFrom(other.DisplayName);
    }
    if (other.HasEventNotifier) {
      EventNotifier = other.EventNotifier;
    }
    if (other.HasExecutable) {
      Executable = other.Executable;
    }
    if (other.HasHistorizing) {
      Historizing = other.Historizing;
    }
    if (other.HasMinimumSamplingInterval) {
      MinimumSamplingInterval = other.MinimumSamplingInterval;
    }
    if (other.HasNodeClass) {
      NodeClass = other.NodeClass;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.references_ != null) {
      if (references_ == null) {
        References = new global::ListOfReferenceNode();
      }
      References.MergeFrom(other.References);
    }
    if (other.rolePermissions_ != null) {
      if (rolePermissions_ == null) {
        RolePermissions = new global::ListOfRolePermissionType();
      }
      RolePermissions.MergeFrom(other.RolePermissions);
    }
    if (other.HasUserAccessLevel) {
      UserAccessLevel = other.UserAccessLevel;
    }
    if (other.HasUserExecutable) {
      UserExecutable = other.UserExecutable;
    }
    if (other.userRolePermissions_ != null) {
      if (userRolePermissions_ == null) {
        UserRolePermissions = new global::ListOfRolePermissionType();
      }
      UserRolePermissions.MergeFrom(other.UserRolePermissions);
    }
    if (other.HasUserWriteMask) {
      UserWriteMask = other.UserWriteMask;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Variant();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.HasValueRank) {
      ValueRank = other.ValueRank;
    }
    if (other.HasWriteMask) {
      WriteMask = other.WriteMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccessLevel = input.ReadUInt32();
          break;
        }
        case 16: {
          AccessLevelEx = input.ReadUInt32();
          break;
        }
        case 24: {
          AccessRestrictions = input.ReadUInt32();
          break;
        }
        case 34: {
          if (arrayDimensions_ == null) {
            ArrayDimensions = new global::ListOfUInt32();
          }
          input.ReadMessage(ArrayDimensions);
          break;
        }
        case 42: {
          if (browseName_ == null) {
            BrowseName = new global::QualifiedName();
          }
          input.ReadMessage(BrowseName);
          break;
        }
        case 48: {
          ContainsNoLoops = input.ReadBool();
          break;
        }
        case 58: {
          if (dataType_ == null) {
            DataType = new global::NodeId();
          }
          input.ReadMessage(DataType);
          break;
        }
        case 66: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 74: {
          if (displayName_ == null) {
            DisplayName = new global::LocalizedText();
          }
          input.ReadMessage(DisplayName);
          break;
        }
        case 80: {
          EventNotifier = input.ReadUInt32();
          break;
        }
        case 88: {
          Executable = input.ReadBool();
          break;
        }
        case 96: {
          Historizing = input.ReadBool();
          break;
        }
        case 105: {
          MinimumSamplingInterval = input.ReadDouble();
          break;
        }
        case 112: {
          NodeClass = (global::InstanceNode.Types.NodeClass) input.ReadEnum();
          break;
        }
        case 122: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 130: {
          if (references_ == null) {
            References = new global::ListOfReferenceNode();
          }
          input.ReadMessage(References);
          break;
        }
        case 138: {
          if (rolePermissions_ == null) {
            RolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(RolePermissions);
          break;
        }
        case 144: {
          UserAccessLevel = input.ReadUInt32();
          break;
        }
        case 152: {
          UserExecutable = input.ReadBool();
          break;
        }
        case 162: {
          if (userRolePermissions_ == null) {
            UserRolePermissions = new global::ListOfRolePermissionType();
          }
          input.ReadMessage(UserRolePermissions);
          break;
        }
        case 168: {
          UserWriteMask = input.ReadUInt32();
          break;
        }
        case 178: {
          if (value_ == null) {
            Value = new global::Variant();
          }
          input.ReadMessage(Value);
          break;
        }
        case 184: {
          ValueRank = input.ReadInt32();
          break;
        }
        case 192: {
          WriteMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the InstanceNode message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum NodeClass {
      [pbr::OriginalName("NodeClass_DataType_64")] DataType64 = 1,
      [pbr::OriginalName("NodeClass_Method_4")] Method4 = 2,
      [pbr::OriginalName("NodeClass_ObjectType_8")] ObjectType8 = 3,
      [pbr::OriginalName("NodeClass_Object_1")] Object1 = 4,
      [pbr::OriginalName("NodeClass_ReferenceType_32")] ReferenceType32 = 5,
      [pbr::OriginalName("NodeClass_Unspecified_0")] Unspecified0 = 6,
      [pbr::OriginalName("NodeClass_VariableType_16")] VariableType16 = 7,
      [pbr::OriginalName("NodeClass_Variable_2")] Variable2 = 8,
      [pbr::OriginalName("NodeClass_View_128")] View128 = 9,
    }

  }
  #endregion

}

public sealed partial class ListOfAddNodesItem : pb::IMessage<ListOfAddNodesItem> {
  private static readonly pb::MessageParser<ListOfAddNodesItem> _parser = new pb::MessageParser<ListOfAddNodesItem>(() => new ListOfAddNodesItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfAddNodesItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[365]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddNodesItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddNodesItem(ListOfAddNodesItem other) : this() {
    AddNodesItem_ = other.AddNodesItem_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfAddNodesItem Clone() {
    return new ListOfAddNodesItem(this);
  }

  /// <summary>Field number for the "_AddNodesItem" field.</summary>
  public const int AddNodesItemFieldNumber = 1;
  private static readonly pb::FieldCodec<global::AddNodesItem> _repeated_AddNodesItem_codec
      = pb::FieldCodec.ForMessage(10, global::AddNodesItem.Parser);
  private readonly pbc::RepeatedField<global::AddNodesItem> AddNodesItem_ = new pbc::RepeatedField<global::AddNodesItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AddNodesItem> AddNodesItem {
    get { return AddNodesItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfAddNodesItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfAddNodesItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!AddNodesItem_.Equals(other.AddNodesItem_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AddNodesItem_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    AddNodesItem_.WriteTo(output, _repeated_AddNodesItem_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += AddNodesItem_.CalculateSize(_repeated_AddNodesItem_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfAddNodesItem other) {
    if (other == null) {
      return;
    }
    AddNodesItem_.Add(other.AddNodesItem_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AddNodesItem_.AddEntriesFrom(input, _repeated_AddNodesItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrowsePath : pb::IMessage<ListOfBrowsePath> {
  private static readonly pb::MessageParser<ListOfBrowsePath> _parser = new pb::MessageParser<ListOfBrowsePath>(() => new ListOfBrowsePath());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrowsePath> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[366]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePath() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePath(ListOfBrowsePath other) : this() {
    BrowsePath_ = other.BrowsePath_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePath Clone() {
    return new ListOfBrowsePath(this);
  }

  /// <summary>Field number for the "_BrowsePath" field.</summary>
  public const int BrowsePathFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrowsePath> _repeated_BrowsePath_codec
      = pb::FieldCodec.ForMessage(10, global::BrowsePath.Parser);
  private readonly pbc::RepeatedField<global::BrowsePath> BrowsePath_ = new pbc::RepeatedField<global::BrowsePath>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrowsePath> BrowsePath {
    get { return BrowsePath_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrowsePath);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrowsePath other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrowsePath_.Equals(other.BrowsePath_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrowsePath_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrowsePath_.WriteTo(output, _repeated_BrowsePath_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrowsePath_.CalculateSize(_repeated_BrowsePath_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrowsePath other) {
    if (other == null) {
      return;
    }
    BrowsePath_.Add(other.BrowsePath_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrowsePath_.AddEntriesFrom(input, _repeated_BrowsePath_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrowsePathResult : pb::IMessage<ListOfBrowsePathResult> {
  private static readonly pb::MessageParser<ListOfBrowsePathResult> _parser = new pb::MessageParser<ListOfBrowsePathResult>(() => new ListOfBrowsePathResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrowsePathResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[367]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePathResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePathResult(ListOfBrowsePathResult other) : this() {
    BrowsePathResult_ = other.BrowsePathResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowsePathResult Clone() {
    return new ListOfBrowsePathResult(this);
  }

  /// <summary>Field number for the "_BrowsePathResult" field.</summary>
  public const int BrowsePathResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrowsePathResult> _repeated_BrowsePathResult_codec
      = pb::FieldCodec.ForMessage(10, global::BrowsePathResult.Parser);
  private readonly pbc::RepeatedField<global::BrowsePathResult> BrowsePathResult_ = new pbc::RepeatedField<global::BrowsePathResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrowsePathResult> BrowsePathResult {
    get { return BrowsePathResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrowsePathResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrowsePathResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrowsePathResult_.Equals(other.BrowsePathResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrowsePathResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrowsePathResult_.WriteTo(output, _repeated_BrowsePathResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrowsePathResult_.CalculateSize(_repeated_BrowsePathResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrowsePathResult other) {
    if (other == null) {
      return;
    }
    BrowsePathResult_.Add(other.BrowsePathResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrowsePathResult_.AddEntriesFrom(input, _repeated_BrowsePathResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfBrowseResult : pb::IMessage<ListOfBrowseResult> {
  private static readonly pb::MessageParser<ListOfBrowseResult> _parser = new pb::MessageParser<ListOfBrowseResult>(() => new ListOfBrowseResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfBrowseResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[368]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowseResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowseResult(ListOfBrowseResult other) : this() {
    BrowseResult_ = other.BrowseResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfBrowseResult Clone() {
    return new ListOfBrowseResult(this);
  }

  /// <summary>Field number for the "_BrowseResult" field.</summary>
  public const int BrowseResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BrowseResult> _repeated_BrowseResult_codec
      = pb::FieldCodec.ForMessage(10, global::BrowseResult.Parser);
  private readonly pbc::RepeatedField<global::BrowseResult> BrowseResult_ = new pbc::RepeatedField<global::BrowseResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrowseResult> BrowseResult {
    get { return BrowseResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfBrowseResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfBrowseResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!BrowseResult_.Equals(other.BrowseResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BrowseResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    BrowseResult_.WriteTo(output, _repeated_BrowseResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += BrowseResult_.CalculateSize(_repeated_BrowseResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfBrowseResult other) {
    if (other == null) {
      return;
    }
    BrowseResult_.Add(other.BrowseResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrowseResult_.AddEntriesFrom(input, _repeated_BrowseResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfCallMethodRequest : pb::IMessage<ListOfCallMethodRequest> {
  private static readonly pb::MessageParser<ListOfCallMethodRequest> _parser = new pb::MessageParser<ListOfCallMethodRequest>(() => new ListOfCallMethodRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfCallMethodRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[369]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCallMethodRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCallMethodRequest(ListOfCallMethodRequest other) : this() {
    CallMethodRequest_ = other.CallMethodRequest_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCallMethodRequest Clone() {
    return new ListOfCallMethodRequest(this);
  }

  /// <summary>Field number for the "_CallMethodRequest" field.</summary>
  public const int CallMethodRequestFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CallMethodRequest> _repeated_CallMethodRequest_codec
      = pb::FieldCodec.ForMessage(10, global::CallMethodRequest.Parser);
  private readonly pbc::RepeatedField<global::CallMethodRequest> CallMethodRequest_ = new pbc::RepeatedField<global::CallMethodRequest>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CallMethodRequest> CallMethodRequest {
    get { return CallMethodRequest_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfCallMethodRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfCallMethodRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!CallMethodRequest_.Equals(other.CallMethodRequest_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CallMethodRequest_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    CallMethodRequest_.WriteTo(output, _repeated_CallMethodRequest_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += CallMethodRequest_.CalculateSize(_repeated_CallMethodRequest_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfCallMethodRequest other) {
    if (other == null) {
      return;
    }
    CallMethodRequest_.Add(other.CallMethodRequest_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CallMethodRequest_.AddEntriesFrom(input, _repeated_CallMethodRequest_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfCallMethodResult : pb::IMessage<ListOfCallMethodResult> {
  private static readonly pb::MessageParser<ListOfCallMethodResult> _parser = new pb::MessageParser<ListOfCallMethodResult>(() => new ListOfCallMethodResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfCallMethodResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[370]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCallMethodResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCallMethodResult(ListOfCallMethodResult other) : this() {
    CallMethodResult_ = other.CallMethodResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfCallMethodResult Clone() {
    return new ListOfCallMethodResult(this);
  }

  /// <summary>Field number for the "_CallMethodResult" field.</summary>
  public const int CallMethodResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CallMethodResult> _repeated_CallMethodResult_codec
      = pb::FieldCodec.ForMessage(10, global::CallMethodResult.Parser);
  private readonly pbc::RepeatedField<global::CallMethodResult> CallMethodResult_ = new pbc::RepeatedField<global::CallMethodResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CallMethodResult> CallMethodResult {
    get { return CallMethodResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfCallMethodResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfCallMethodResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!CallMethodResult_.Equals(other.CallMethodResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CallMethodResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    CallMethodResult_.WriteTo(output, _repeated_CallMethodResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += CallMethodResult_.CalculateSize(_repeated_CallMethodResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfCallMethodResult other) {
    if (other == null) {
      return;
    }
    CallMethodResult_.Add(other.CallMethodResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CallMethodResult_.AddEntriesFrom(input, _repeated_CallMethodResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfConnectionTransportDataType : pb::IMessage<ListOfConnectionTransportDataType> {
  private static readonly pb::MessageParser<ListOfConnectionTransportDataType> _parser = new pb::MessageParser<ListOfConnectionTransportDataType>(() => new ListOfConnectionTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfConnectionTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[371]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfConnectionTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfConnectionTransportDataType(ListOfConnectionTransportDataType other) : this() {
    ConnectionTransportDataType_ = other.ConnectionTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfConnectionTransportDataType Clone() {
    return new ListOfConnectionTransportDataType(this);
  }

  /// <summary>Field number for the "_ConnectionTransportDataType" field.</summary>
  public const int ConnectionTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ConnectionTransportDataType> _repeated_ConnectionTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::ConnectionTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::ConnectionTransportDataType> ConnectionTransportDataType_ = new pbc::RepeatedField<global::ConnectionTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ConnectionTransportDataType> ConnectionTransportDataType {
    get { return ConnectionTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfConnectionTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfConnectionTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ConnectionTransportDataType_.Equals(other.ConnectionTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ConnectionTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ConnectionTransportDataType_.WriteTo(output, _repeated_ConnectionTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ConnectionTransportDataType_.CalculateSize(_repeated_ConnectionTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfConnectionTransportDataType other) {
    if (other == null) {
      return;
    }
    ConnectionTransportDataType_.Add(other.ConnectionTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ConnectionTransportDataType_.AddEntriesFrom(input, _repeated_ConnectionTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfContentFilterElement : pb::IMessage<ListOfContentFilterElement> {
  private static readonly pb::MessageParser<ListOfContentFilterElement> _parser = new pb::MessageParser<ListOfContentFilterElement>(() => new ListOfContentFilterElement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfContentFilterElement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[372]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilterElement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilterElement(ListOfContentFilterElement other) : this() {
    ContentFilterElement_ = other.ContentFilterElement_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilterElement Clone() {
    return new ListOfContentFilterElement(this);
  }

  /// <summary>Field number for the "_ContentFilterElement" field.</summary>
  public const int ContentFilterElementFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ContentFilterElement> _repeated_ContentFilterElement_codec
      = pb::FieldCodec.ForMessage(10, global::ContentFilterElement.Parser);
  private readonly pbc::RepeatedField<global::ContentFilterElement> ContentFilterElement_ = new pbc::RepeatedField<global::ContentFilterElement>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ContentFilterElement> ContentFilterElement {
    get { return ContentFilterElement_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfContentFilterElement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfContentFilterElement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ContentFilterElement_.Equals(other.ContentFilterElement_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ContentFilterElement_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ContentFilterElement_.WriteTo(output, _repeated_ContentFilterElement_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ContentFilterElement_.CalculateSize(_repeated_ContentFilterElement_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfContentFilterElement other) {
    if (other == null) {
      return;
    }
    ContentFilterElement_.Add(other.ContentFilterElement_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContentFilterElement_.AddEntriesFrom(input, _repeated_ContentFilterElement_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfContentFilterElementResult : pb::IMessage<ListOfContentFilterElementResult> {
  private static readonly pb::MessageParser<ListOfContentFilterElementResult> _parser = new pb::MessageParser<ListOfContentFilterElementResult>(() => new ListOfContentFilterElementResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfContentFilterElementResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[373]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilterElementResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilterElementResult(ListOfContentFilterElementResult other) : this() {
    ContentFilterElementResult_ = other.ContentFilterElementResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilterElementResult Clone() {
    return new ListOfContentFilterElementResult(this);
  }

  /// <summary>Field number for the "_ContentFilterElementResult" field.</summary>
  public const int ContentFilterElementResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ContentFilterElementResult> _repeated_ContentFilterElementResult_codec
      = pb::FieldCodec.ForMessage(10, global::ContentFilterElementResult.Parser);
  private readonly pbc::RepeatedField<global::ContentFilterElementResult> ContentFilterElementResult_ = new pbc::RepeatedField<global::ContentFilterElementResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ContentFilterElementResult> ContentFilterElementResult {
    get { return ContentFilterElementResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfContentFilterElementResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfContentFilterElementResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ContentFilterElementResult_.Equals(other.ContentFilterElementResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ContentFilterElementResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ContentFilterElementResult_.WriteTo(output, _repeated_ContentFilterElementResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ContentFilterElementResult_.CalculateSize(_repeated_ContentFilterElementResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfContentFilterElementResult other) {
    if (other == null) {
      return;
    }
    ContentFilterElementResult_.Add(other.ContentFilterElementResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContentFilterElementResult_.AddEntriesFrom(input, _repeated_ContentFilterElementResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetWriterDataType : pb::IMessage<ListOfDataSetWriterDataType> {
  private static readonly pb::MessageParser<ListOfDataSetWriterDataType> _parser = new pb::MessageParser<ListOfDataSetWriterDataType>(() => new ListOfDataSetWriterDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetWriterDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[374]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterDataType(ListOfDataSetWriterDataType other) : this() {
    DataSetWriterDataType_ = other.DataSetWriterDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetWriterDataType Clone() {
    return new ListOfDataSetWriterDataType(this);
  }

  /// <summary>Field number for the "_DataSetWriterDataType" field.</summary>
  public const int DataSetWriterDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataSetWriterDataType> _repeated_DataSetWriterDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DataSetWriterDataType.Parser);
  private readonly pbc::RepeatedField<global::DataSetWriterDataType> DataSetWriterDataType_ = new pbc::RepeatedField<global::DataSetWriterDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataSetWriterDataType> DataSetWriterDataType {
    get { return DataSetWriterDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetWriterDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetWriterDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetWriterDataType_.Equals(other.DataSetWriterDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetWriterDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetWriterDataType_.WriteTo(output, _repeated_DataSetWriterDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetWriterDataType_.CalculateSize(_repeated_DataSetWriterDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetWriterDataType other) {
    if (other == null) {
      return;
    }
    DataSetWriterDataType_.Add(other.DataSetWriterDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataSetWriterDataType_.AddEntriesFrom(input, _repeated_DataSetWriterDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataTypeDefinition : pb::IMessage<ListOfDataTypeDefinition> {
  private static readonly pb::MessageParser<ListOfDataTypeDefinition> _parser = new pb::MessageParser<ListOfDataTypeDefinition>(() => new ListOfDataTypeDefinition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataTypeDefinition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[375]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeDefinition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeDefinition(ListOfDataTypeDefinition other) : this() {
    DataTypeDefinition_ = other.DataTypeDefinition_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeDefinition Clone() {
    return new ListOfDataTypeDefinition(this);
  }

  /// <summary>Field number for the "_DataTypeDefinition" field.</summary>
  public const int DataTypeDefinitionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataTypeDefinition> _repeated_DataTypeDefinition_codec
      = pb::FieldCodec.ForMessage(10, global::DataTypeDefinition.Parser);
  private readonly pbc::RepeatedField<global::DataTypeDefinition> DataTypeDefinition_ = new pbc::RepeatedField<global::DataTypeDefinition>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataTypeDefinition> DataTypeDefinition {
    get { return DataTypeDefinition_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataTypeDefinition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataTypeDefinition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataTypeDefinition_.Equals(other.DataTypeDefinition_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataTypeDefinition_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataTypeDefinition_.WriteTo(output, _repeated_DataTypeDefinition_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataTypeDefinition_.CalculateSize(_repeated_DataTypeDefinition_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataTypeDefinition other) {
    if (other == null) {
      return;
    }
    DataTypeDefinition_.Add(other.DataTypeDefinition_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataTypeDefinition_.AddEntriesFrom(input, _repeated_DataTypeDefinition_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDatagramConnectionTransportDataType : pb::IMessage<ListOfDatagramConnectionTransportDataType> {
  private static readonly pb::MessageParser<ListOfDatagramConnectionTransportDataType> _parser = new pb::MessageParser<ListOfDatagramConnectionTransportDataType>(() => new ListOfDatagramConnectionTransportDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDatagramConnectionTransportDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[376]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDatagramConnectionTransportDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDatagramConnectionTransportDataType(ListOfDatagramConnectionTransportDataType other) : this() {
    DatagramConnectionTransportDataType_ = other.DatagramConnectionTransportDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDatagramConnectionTransportDataType Clone() {
    return new ListOfDatagramConnectionTransportDataType(this);
  }

  /// <summary>Field number for the "_DatagramConnectionTransportDataType" field.</summary>
  public const int DatagramConnectionTransportDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DatagramConnectionTransportDataType> _repeated_DatagramConnectionTransportDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DatagramConnectionTransportDataType.Parser);
  private readonly pbc::RepeatedField<global::DatagramConnectionTransportDataType> DatagramConnectionTransportDataType_ = new pbc::RepeatedField<global::DatagramConnectionTransportDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DatagramConnectionTransportDataType> DatagramConnectionTransportDataType {
    get { return DatagramConnectionTransportDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDatagramConnectionTransportDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDatagramConnectionTransportDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DatagramConnectionTransportDataType_.Equals(other.DatagramConnectionTransportDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DatagramConnectionTransportDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DatagramConnectionTransportDataType_.WriteTo(output, _repeated_DatagramConnectionTransportDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DatagramConnectionTransportDataType_.CalculateSize(_repeated_DatagramConnectionTransportDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDatagramConnectionTransportDataType other) {
    if (other == null) {
      return;
    }
    DatagramConnectionTransportDataType_.Add(other.DatagramConnectionTransportDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DatagramConnectionTransportDataType_.AddEntriesFrom(input, _repeated_DatagramConnectionTransportDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEndpointDescription : pb::IMessage<ListOfEndpointDescription> {
  private static readonly pb::MessageParser<ListOfEndpointDescription> _parser = new pb::MessageParser<ListOfEndpointDescription>(() => new ListOfEndpointDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEndpointDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[377]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointDescription(ListOfEndpointDescription other) : this() {
    EndpointDescription_ = other.EndpointDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEndpointDescription Clone() {
    return new ListOfEndpointDescription(this);
  }

  /// <summary>Field number for the "_EndpointDescription" field.</summary>
  public const int EndpointDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EndpointDescription> _repeated_EndpointDescription_codec
      = pb::FieldCodec.ForMessage(10, global::EndpointDescription.Parser);
  private readonly pbc::RepeatedField<global::EndpointDescription> EndpointDescription_ = new pbc::RepeatedField<global::EndpointDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EndpointDescription> EndpointDescription {
    get { return EndpointDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEndpointDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEndpointDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EndpointDescription_.Equals(other.EndpointDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EndpointDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EndpointDescription_.WriteTo(output, _repeated_EndpointDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EndpointDescription_.CalculateSize(_repeated_EndpointDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEndpointDescription other) {
    if (other == null) {
      return;
    }
    EndpointDescription_.Add(other.EndpointDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EndpointDescription_.AddEntriesFrom(input, _repeated_EndpointDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEnumDefinition : pb::IMessage<ListOfEnumDefinition> {
  private static readonly pb::MessageParser<ListOfEnumDefinition> _parser = new pb::MessageParser<ListOfEnumDefinition>(() => new ListOfEnumDefinition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEnumDefinition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[378]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumDefinition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumDefinition(ListOfEnumDefinition other) : this() {
    EnumDefinition_ = other.EnumDefinition_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumDefinition Clone() {
    return new ListOfEnumDefinition(this);
  }

  /// <summary>Field number for the "_EnumDefinition" field.</summary>
  public const int EnumDefinitionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EnumDefinition> _repeated_EnumDefinition_codec
      = pb::FieldCodec.ForMessage(10, global::EnumDefinition.Parser);
  private readonly pbc::RepeatedField<global::EnumDefinition> EnumDefinition_ = new pbc::RepeatedField<global::EnumDefinition>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnumDefinition> EnumDefinition {
    get { return EnumDefinition_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEnumDefinition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEnumDefinition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EnumDefinition_.Equals(other.EnumDefinition_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EnumDefinition_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EnumDefinition_.WriteTo(output, _repeated_EnumDefinition_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EnumDefinition_.CalculateSize(_repeated_EnumDefinition_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEnumDefinition other) {
    if (other == null) {
      return;
    }
    EnumDefinition_.Add(other.EnumDefinition_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EnumDefinition_.AddEntriesFrom(input, _repeated_EnumDefinition_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEnumDescription : pb::IMessage<ListOfEnumDescription> {
  private static readonly pb::MessageParser<ListOfEnumDescription> _parser = new pb::MessageParser<ListOfEnumDescription>(() => new ListOfEnumDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEnumDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[379]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumDescription(ListOfEnumDescription other) : this() {
    EnumDescription_ = other.EnumDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEnumDescription Clone() {
    return new ListOfEnumDescription(this);
  }

  /// <summary>Field number for the "_EnumDescription" field.</summary>
  public const int EnumDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EnumDescription> _repeated_EnumDescription_codec
      = pb::FieldCodec.ForMessage(10, global::EnumDescription.Parser);
  private readonly pbc::RepeatedField<global::EnumDescription> EnumDescription_ = new pbc::RepeatedField<global::EnumDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnumDescription> EnumDescription {
    get { return EnumDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEnumDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEnumDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EnumDescription_.Equals(other.EnumDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EnumDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EnumDescription_.WriteTo(output, _repeated_EnumDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EnumDescription_.CalculateSize(_repeated_EnumDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEnumDescription other) {
    if (other == null) {
      return;
    }
    EnumDescription_.Add(other.EnumDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EnumDescription_.AddEntriesFrom(input, _repeated_EnumDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfEventFieldList : pb::IMessage<ListOfEventFieldList> {
  private static readonly pb::MessageParser<ListOfEventFieldList> _parser = new pb::MessageParser<ListOfEventFieldList>(() => new ListOfEventFieldList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfEventFieldList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[380]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEventFieldList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEventFieldList(ListOfEventFieldList other) : this() {
    EventFieldList_ = other.EventFieldList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfEventFieldList Clone() {
    return new ListOfEventFieldList(this);
  }

  /// <summary>Field number for the "_EventFieldList" field.</summary>
  public const int EventFieldListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EventFieldList> _repeated_EventFieldList_codec
      = pb::FieldCodec.ForMessage(10, global::EventFieldList.Parser);
  private readonly pbc::RepeatedField<global::EventFieldList> EventFieldList_ = new pbc::RepeatedField<global::EventFieldList>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EventFieldList> EventFieldList {
    get { return EventFieldList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfEventFieldList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfEventFieldList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!EventFieldList_.Equals(other.EventFieldList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EventFieldList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    EventFieldList_.WriteTo(output, _repeated_EventFieldList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += EventFieldList_.CalculateSize(_repeated_EventFieldList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfEventFieldList other) {
    if (other == null) {
      return;
    }
    EventFieldList_.Add(other.EventFieldList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EventFieldList_.AddEntriesFrom(input, _repeated_EventFieldList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfFieldMetaData : pb::IMessage<ListOfFieldMetaData> {
  private static readonly pb::MessageParser<ListOfFieldMetaData> _parser = new pb::MessageParser<ListOfFieldMetaData>(() => new ListOfFieldMetaData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfFieldMetaData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[381]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFieldMetaData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFieldMetaData(ListOfFieldMetaData other) : this() {
    FieldMetaData_ = other.FieldMetaData_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfFieldMetaData Clone() {
    return new ListOfFieldMetaData(this);
  }

  /// <summary>Field number for the "_FieldMetaData" field.</summary>
  public const int FieldMetaDataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FieldMetaData> _repeated_FieldMetaData_codec
      = pb::FieldCodec.ForMessage(10, global::FieldMetaData.Parser);
  private readonly pbc::RepeatedField<global::FieldMetaData> FieldMetaData_ = new pbc::RepeatedField<global::FieldMetaData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FieldMetaData> FieldMetaData {
    get { return FieldMetaData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfFieldMetaData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfFieldMetaData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!FieldMetaData_.Equals(other.FieldMetaData_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= FieldMetaData_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    FieldMetaData_.WriteTo(output, _repeated_FieldMetaData_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += FieldMetaData_.CalculateSize(_repeated_FieldMetaData_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfFieldMetaData other) {
    if (other == null) {
      return;
    }
    FieldMetaData_.Add(other.FieldMetaData_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          FieldMetaData_.AddEntriesFrom(input, _repeated_FieldMetaData_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfHistoryEventFieldList : pb::IMessage<ListOfHistoryEventFieldList> {
  private static readonly pb::MessageParser<ListOfHistoryEventFieldList> _parser = new pb::MessageParser<ListOfHistoryEventFieldList>(() => new ListOfHistoryEventFieldList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfHistoryEventFieldList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[382]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryEventFieldList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryEventFieldList(ListOfHistoryEventFieldList other) : this() {
    HistoryEventFieldList_ = other.HistoryEventFieldList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryEventFieldList Clone() {
    return new ListOfHistoryEventFieldList(this);
  }

  /// <summary>Field number for the "_HistoryEventFieldList" field.</summary>
  public const int HistoryEventFieldListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HistoryEventFieldList> _repeated_HistoryEventFieldList_codec
      = pb::FieldCodec.ForMessage(10, global::HistoryEventFieldList.Parser);
  private readonly pbc::RepeatedField<global::HistoryEventFieldList> HistoryEventFieldList_ = new pbc::RepeatedField<global::HistoryEventFieldList>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HistoryEventFieldList> HistoryEventFieldList {
    get { return HistoryEventFieldList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfHistoryEventFieldList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfHistoryEventFieldList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!HistoryEventFieldList_.Equals(other.HistoryEventFieldList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= HistoryEventFieldList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    HistoryEventFieldList_.WriteTo(output, _repeated_HistoryEventFieldList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += HistoryEventFieldList_.CalculateSize(_repeated_HistoryEventFieldList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfHistoryEventFieldList other) {
    if (other == null) {
      return;
    }
    HistoryEventFieldList_.Add(other.HistoryEventFieldList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HistoryEventFieldList_.AddEntriesFrom(input, _repeated_HistoryEventFieldList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfHistoryUpdateResult : pb::IMessage<ListOfHistoryUpdateResult> {
  private static readonly pb::MessageParser<ListOfHistoryUpdateResult> _parser = new pb::MessageParser<ListOfHistoryUpdateResult>(() => new ListOfHistoryUpdateResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfHistoryUpdateResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[383]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryUpdateResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryUpdateResult(ListOfHistoryUpdateResult other) : this() {
    HistoryUpdateResult_ = other.HistoryUpdateResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfHistoryUpdateResult Clone() {
    return new ListOfHistoryUpdateResult(this);
  }

  /// <summary>Field number for the "_HistoryUpdateResult" field.</summary>
  public const int HistoryUpdateResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HistoryUpdateResult> _repeated_HistoryUpdateResult_codec
      = pb::FieldCodec.ForMessage(10, global::HistoryUpdateResult.Parser);
  private readonly pbc::RepeatedField<global::HistoryUpdateResult> HistoryUpdateResult_ = new pbc::RepeatedField<global::HistoryUpdateResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HistoryUpdateResult> HistoryUpdateResult {
    get { return HistoryUpdateResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfHistoryUpdateResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfHistoryUpdateResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!HistoryUpdateResult_.Equals(other.HistoryUpdateResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= HistoryUpdateResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    HistoryUpdateResult_.WriteTo(output, _repeated_HistoryUpdateResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += HistoryUpdateResult_.CalculateSize(_repeated_HistoryUpdateResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfHistoryUpdateResult other) {
    if (other == null) {
      return;
    }
    HistoryUpdateResult_.Add(other.HistoryUpdateResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HistoryUpdateResult_.AddEntriesFrom(input, _repeated_HistoryUpdateResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfModelChangeStructureDataType : pb::IMessage<ListOfModelChangeStructureDataType> {
  private static readonly pb::MessageParser<ListOfModelChangeStructureDataType> _parser = new pb::MessageParser<ListOfModelChangeStructureDataType>(() => new ListOfModelChangeStructureDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfModelChangeStructureDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[384]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfModelChangeStructureDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfModelChangeStructureDataType(ListOfModelChangeStructureDataType other) : this() {
    ModelChangeStructureDataType_ = other.ModelChangeStructureDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfModelChangeStructureDataType Clone() {
    return new ListOfModelChangeStructureDataType(this);
  }

  /// <summary>Field number for the "_ModelChangeStructureDataType" field.</summary>
  public const int ModelChangeStructureDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ModelChangeStructureDataType> _repeated_ModelChangeStructureDataType_codec
      = pb::FieldCodec.ForMessage(10, global::ModelChangeStructureDataType.Parser);
  private readonly pbc::RepeatedField<global::ModelChangeStructureDataType> ModelChangeStructureDataType_ = new pbc::RepeatedField<global::ModelChangeStructureDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ModelChangeStructureDataType> ModelChangeStructureDataType {
    get { return ModelChangeStructureDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfModelChangeStructureDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfModelChangeStructureDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ModelChangeStructureDataType_.Equals(other.ModelChangeStructureDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ModelChangeStructureDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ModelChangeStructureDataType_.WriteTo(output, _repeated_ModelChangeStructureDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ModelChangeStructureDataType_.CalculateSize(_repeated_ModelChangeStructureDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfModelChangeStructureDataType other) {
    if (other == null) {
      return;
    }
    ModelChangeStructureDataType_.Add(other.ModelChangeStructureDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ModelChangeStructureDataType_.AddEntriesFrom(input, _repeated_ModelChangeStructureDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfMonitoredItemCreateResult : pb::IMessage<ListOfMonitoredItemCreateResult> {
  private static readonly pb::MessageParser<ListOfMonitoredItemCreateResult> _parser = new pb::MessageParser<ListOfMonitoredItemCreateResult>(() => new ListOfMonitoredItemCreateResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfMonitoredItemCreateResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[385]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemCreateResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemCreateResult(ListOfMonitoredItemCreateResult other) : this() {
    MonitoredItemCreateResult_ = other.MonitoredItemCreateResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemCreateResult Clone() {
    return new ListOfMonitoredItemCreateResult(this);
  }

  /// <summary>Field number for the "_MonitoredItemCreateResult" field.</summary>
  public const int MonitoredItemCreateResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MonitoredItemCreateResult> _repeated_MonitoredItemCreateResult_codec
      = pb::FieldCodec.ForMessage(10, global::MonitoredItemCreateResult.Parser);
  private readonly pbc::RepeatedField<global::MonitoredItemCreateResult> MonitoredItemCreateResult_ = new pbc::RepeatedField<global::MonitoredItemCreateResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MonitoredItemCreateResult> MonitoredItemCreateResult {
    get { return MonitoredItemCreateResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfMonitoredItemCreateResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfMonitoredItemCreateResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!MonitoredItemCreateResult_.Equals(other.MonitoredItemCreateResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= MonitoredItemCreateResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    MonitoredItemCreateResult_.WriteTo(output, _repeated_MonitoredItemCreateResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += MonitoredItemCreateResult_.CalculateSize(_repeated_MonitoredItemCreateResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfMonitoredItemCreateResult other) {
    if (other == null) {
      return;
    }
    MonitoredItemCreateResult_.Add(other.MonitoredItemCreateResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MonitoredItemCreateResult_.AddEntriesFrom(input, _repeated_MonitoredItemCreateResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfMonitoredItemModifyResult : pb::IMessage<ListOfMonitoredItemModifyResult> {
  private static readonly pb::MessageParser<ListOfMonitoredItemModifyResult> _parser = new pb::MessageParser<ListOfMonitoredItemModifyResult>(() => new ListOfMonitoredItemModifyResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfMonitoredItemModifyResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[386]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemModifyResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemModifyResult(ListOfMonitoredItemModifyResult other) : this() {
    MonitoredItemModifyResult_ = other.MonitoredItemModifyResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemModifyResult Clone() {
    return new ListOfMonitoredItemModifyResult(this);
  }

  /// <summary>Field number for the "_MonitoredItemModifyResult" field.</summary>
  public const int MonitoredItemModifyResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MonitoredItemModifyResult> _repeated_MonitoredItemModifyResult_codec
      = pb::FieldCodec.ForMessage(10, global::MonitoredItemModifyResult.Parser);
  private readonly pbc::RepeatedField<global::MonitoredItemModifyResult> MonitoredItemModifyResult_ = new pbc::RepeatedField<global::MonitoredItemModifyResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MonitoredItemModifyResult> MonitoredItemModifyResult {
    get { return MonitoredItemModifyResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfMonitoredItemModifyResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfMonitoredItemModifyResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!MonitoredItemModifyResult_.Equals(other.MonitoredItemModifyResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= MonitoredItemModifyResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    MonitoredItemModifyResult_.WriteTo(output, _repeated_MonitoredItemModifyResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += MonitoredItemModifyResult_.CalculateSize(_repeated_MonitoredItemModifyResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfMonitoredItemModifyResult other) {
    if (other == null) {
      return;
    }
    MonitoredItemModifyResult_.Add(other.MonitoredItemModifyResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MonitoredItemModifyResult_.AddEntriesFrom(input, _repeated_MonitoredItemModifyResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfMonitoredItemNotification : pb::IMessage<ListOfMonitoredItemNotification> {
  private static readonly pb::MessageParser<ListOfMonitoredItemNotification> _parser = new pb::MessageParser<ListOfMonitoredItemNotification>(() => new ListOfMonitoredItemNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfMonitoredItemNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[387]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemNotification(ListOfMonitoredItemNotification other) : this() {
    MonitoredItemNotification_ = other.MonitoredItemNotification_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemNotification Clone() {
    return new ListOfMonitoredItemNotification(this);
  }

  /// <summary>Field number for the "_MonitoredItemNotification" field.</summary>
  public const int MonitoredItemNotificationFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MonitoredItemNotification> _repeated_MonitoredItemNotification_codec
      = pb::FieldCodec.ForMessage(10, global::MonitoredItemNotification.Parser);
  private readonly pbc::RepeatedField<global::MonitoredItemNotification> MonitoredItemNotification_ = new pbc::RepeatedField<global::MonitoredItemNotification>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MonitoredItemNotification> MonitoredItemNotification {
    get { return MonitoredItemNotification_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfMonitoredItemNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfMonitoredItemNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!MonitoredItemNotification_.Equals(other.MonitoredItemNotification_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= MonitoredItemNotification_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    MonitoredItemNotification_.WriteTo(output, _repeated_MonitoredItemNotification_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += MonitoredItemNotification_.CalculateSize(_repeated_MonitoredItemNotification_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfMonitoredItemNotification other) {
    if (other == null) {
      return;
    }
    MonitoredItemNotification_.Add(other.MonitoredItemNotification_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MonitoredItemNotification_.AddEntriesFrom(input, _repeated_MonitoredItemNotification_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfNetworkGroupDataType : pb::IMessage<ListOfNetworkGroupDataType> {
  private static readonly pb::MessageParser<ListOfNetworkGroupDataType> _parser = new pb::MessageParser<ListOfNetworkGroupDataType>(() => new ListOfNetworkGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNetworkGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[388]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkGroupDataType(ListOfNetworkGroupDataType other) : this() {
    NetworkGroupDataType_ = other.NetworkGroupDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNetworkGroupDataType Clone() {
    return new ListOfNetworkGroupDataType(this);
  }

  /// <summary>Field number for the "_NetworkGroupDataType" field.</summary>
  public const int NetworkGroupDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NetworkGroupDataType> _repeated_NetworkGroupDataType_codec
      = pb::FieldCodec.ForMessage(10, global::NetworkGroupDataType.Parser);
  private readonly pbc::RepeatedField<global::NetworkGroupDataType> NetworkGroupDataType_ = new pbc::RepeatedField<global::NetworkGroupDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NetworkGroupDataType> NetworkGroupDataType {
    get { return NetworkGroupDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNetworkGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNetworkGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!NetworkGroupDataType_.Equals(other.NetworkGroupDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= NetworkGroupDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    NetworkGroupDataType_.WriteTo(output, _repeated_NetworkGroupDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += NetworkGroupDataType_.CalculateSize(_repeated_NetworkGroupDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNetworkGroupDataType other) {
    if (other == null) {
      return;
    }
    NetworkGroupDataType_.Add(other.NetworkGroupDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NetworkGroupDataType_.AddEntriesFrom(input, _repeated_NetworkGroupDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfNode : pb::IMessage<ListOfNode> {
  private static readonly pb::MessageParser<ListOfNode> _parser = new pb::MessageParser<ListOfNode>(() => new ListOfNode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[389]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNode(ListOfNode other) : this() {
    Node_ = other.Node_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNode Clone() {
    return new ListOfNode(this);
  }

  /// <summary>Field number for the "_Node" field.</summary>
  public const int NodeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Node> _repeated_Node_codec
      = pb::FieldCodec.ForMessage(10, global::Node.Parser);
  private readonly pbc::RepeatedField<global::Node> Node_ = new pbc::RepeatedField<global::Node>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Node> Node {
    get { return Node_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Node_.Equals(other.Node_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Node_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    Node_.WriteTo(output, _repeated_Node_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += Node_.CalculateSize(_repeated_Node_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNode other) {
    if (other == null) {
      return;
    }
    Node_.Add(other.Node_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Node_.AddEntriesFrom(input, _repeated_Node_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfNodeReference : pb::IMessage<ListOfNodeReference> {
  private static readonly pb::MessageParser<ListOfNodeReference> _parser = new pb::MessageParser<ListOfNodeReference>(() => new ListOfNodeReference());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNodeReference> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[390]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeReference() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeReference(ListOfNodeReference other) : this() {
    NodeReference_ = other.NodeReference_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeReference Clone() {
    return new ListOfNodeReference(this);
  }

  /// <summary>Field number for the "_NodeReference" field.</summary>
  public const int NodeReferenceFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NodeReference> _repeated_NodeReference_codec
      = pb::FieldCodec.ForMessage(10, global::NodeReference.Parser);
  private readonly pbc::RepeatedField<global::NodeReference> NodeReference_ = new pbc::RepeatedField<global::NodeReference>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NodeReference> NodeReference {
    get { return NodeReference_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNodeReference);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNodeReference other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!NodeReference_.Equals(other.NodeReference_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= NodeReference_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    NodeReference_.WriteTo(output, _repeated_NodeReference_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += NodeReference_.CalculateSize(_repeated_NodeReference_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNodeReference other) {
    if (other == null) {
      return;
    }
    NodeReference_.Add(other.NodeReference_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NodeReference_.AddEntriesFrom(input, _repeated_NodeReference_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfParsingResult : pb::IMessage<ListOfParsingResult> {
  private static readonly pb::MessageParser<ListOfParsingResult> _parser = new pb::MessageParser<ListOfParsingResult>(() => new ListOfParsingResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfParsingResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[391]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfParsingResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfParsingResult(ListOfParsingResult other) : this() {
    ParsingResult_ = other.ParsingResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfParsingResult Clone() {
    return new ListOfParsingResult(this);
  }

  /// <summary>Field number for the "_ParsingResult" field.</summary>
  public const int ParsingResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ParsingResult> _repeated_ParsingResult_codec
      = pb::FieldCodec.ForMessage(10, global::ParsingResult.Parser);
  private readonly pbc::RepeatedField<global::ParsingResult> ParsingResult_ = new pbc::RepeatedField<global::ParsingResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ParsingResult> ParsingResult {
    get { return ParsingResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfParsingResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfParsingResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ParsingResult_.Equals(other.ParsingResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ParsingResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ParsingResult_.WriteTo(output, _repeated_ParsingResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ParsingResult_.CalculateSize(_repeated_ParsingResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfParsingResult other) {
    if (other == null) {
      return;
    }
    ParsingResult_.Add(other.ParsingResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ParsingResult_.AddEntriesFrom(input, _repeated_ParsingResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPublishedVariableDataType : pb::IMessage<ListOfPublishedVariableDataType> {
  private static readonly pb::MessageParser<ListOfPublishedVariableDataType> _parser = new pb::MessageParser<ListOfPublishedVariableDataType>(() => new ListOfPublishedVariableDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPublishedVariableDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[392]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedVariableDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedVariableDataType(ListOfPublishedVariableDataType other) : this() {
    PublishedVariableDataType_ = other.PublishedVariableDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedVariableDataType Clone() {
    return new ListOfPublishedVariableDataType(this);
  }

  /// <summary>Field number for the "_PublishedVariableDataType" field.</summary>
  public const int PublishedVariableDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PublishedVariableDataType> _repeated_PublishedVariableDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PublishedVariableDataType.Parser);
  private readonly pbc::RepeatedField<global::PublishedVariableDataType> PublishedVariableDataType_ = new pbc::RepeatedField<global::PublishedVariableDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PublishedVariableDataType> PublishedVariableDataType {
    get { return PublishedVariableDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPublishedVariableDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPublishedVariableDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PublishedVariableDataType_.Equals(other.PublishedVariableDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PublishedVariableDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PublishedVariableDataType_.WriteTo(output, _repeated_PublishedVariableDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PublishedVariableDataType_.CalculateSize(_repeated_PublishedVariableDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPublishedVariableDataType other) {
    if (other == null) {
      return;
    }
    PublishedVariableDataType_.Add(other.PublishedVariableDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublishedVariableDataType_.AddEntriesFrom(input, _repeated_PublishedVariableDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfQueryDataSet : pb::IMessage<ListOfQueryDataSet> {
  private static readonly pb::MessageParser<ListOfQueryDataSet> _parser = new pb::MessageParser<ListOfQueryDataSet>(() => new ListOfQueryDataSet());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfQueryDataSet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[393]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQueryDataSet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQueryDataSet(ListOfQueryDataSet other) : this() {
    QueryDataSet_ = other.QueryDataSet_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQueryDataSet Clone() {
    return new ListOfQueryDataSet(this);
  }

  /// <summary>Field number for the "_QueryDataSet" field.</summary>
  public const int QueryDataSetFieldNumber = 1;
  private static readonly pb::FieldCodec<global::QueryDataSet> _repeated_QueryDataSet_codec
      = pb::FieldCodec.ForMessage(10, global::QueryDataSet.Parser);
  private readonly pbc::RepeatedField<global::QueryDataSet> QueryDataSet_ = new pbc::RepeatedField<global::QueryDataSet>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::QueryDataSet> QueryDataSet {
    get { return QueryDataSet_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfQueryDataSet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfQueryDataSet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!QueryDataSet_.Equals(other.QueryDataSet_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= QueryDataSet_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    QueryDataSet_.WriteTo(output, _repeated_QueryDataSet_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += QueryDataSet_.CalculateSize(_repeated_QueryDataSet_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfQueryDataSet other) {
    if (other == null) {
      return;
    }
    QueryDataSet_.Add(other.QueryDataSet_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          QueryDataSet_.AddEntriesFrom(input, _repeated_QueryDataSet_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfRegisteredServer : pb::IMessage<ListOfRegisteredServer> {
  private static readonly pb::MessageParser<ListOfRegisteredServer> _parser = new pb::MessageParser<ListOfRegisteredServer>(() => new ListOfRegisteredServer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfRegisteredServer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[394]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRegisteredServer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRegisteredServer(ListOfRegisteredServer other) : this() {
    RegisteredServer_ = other.RegisteredServer_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfRegisteredServer Clone() {
    return new ListOfRegisteredServer(this);
  }

  /// <summary>Field number for the "_RegisteredServer" field.</summary>
  public const int RegisteredServerFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RegisteredServer> _repeated_RegisteredServer_codec
      = pb::FieldCodec.ForMessage(10, global::RegisteredServer.Parser);
  private readonly pbc::RepeatedField<global::RegisteredServer> RegisteredServer_ = new pbc::RepeatedField<global::RegisteredServer>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RegisteredServer> RegisteredServer {
    get { return RegisteredServer_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfRegisteredServer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfRegisteredServer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!RegisteredServer_.Equals(other.RegisteredServer_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= RegisteredServer_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    RegisteredServer_.WriteTo(output, _repeated_RegisteredServer_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += RegisteredServer_.CalculateSize(_repeated_RegisteredServer_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfRegisteredServer other) {
    if (other == null) {
      return;
    }
    RegisteredServer_.Add(other.RegisteredServer_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RegisteredServer_.AddEntriesFrom(input, _repeated_RegisteredServer_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSessionDiagnosticsDataType : pb::IMessage<ListOfSessionDiagnosticsDataType> {
  private static readonly pb::MessageParser<ListOfSessionDiagnosticsDataType> _parser = new pb::MessageParser<ListOfSessionDiagnosticsDataType>(() => new ListOfSessionDiagnosticsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSessionDiagnosticsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[395]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSessionDiagnosticsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSessionDiagnosticsDataType(ListOfSessionDiagnosticsDataType other) : this() {
    SessionDiagnosticsDataType_ = other.SessionDiagnosticsDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSessionDiagnosticsDataType Clone() {
    return new ListOfSessionDiagnosticsDataType(this);
  }

  /// <summary>Field number for the "_SessionDiagnosticsDataType" field.</summary>
  public const int SessionDiagnosticsDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SessionDiagnosticsDataType> _repeated_SessionDiagnosticsDataType_codec
      = pb::FieldCodec.ForMessage(10, global::SessionDiagnosticsDataType.Parser);
  private readonly pbc::RepeatedField<global::SessionDiagnosticsDataType> SessionDiagnosticsDataType_ = new pbc::RepeatedField<global::SessionDiagnosticsDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SessionDiagnosticsDataType> SessionDiagnosticsDataType {
    get { return SessionDiagnosticsDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSessionDiagnosticsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSessionDiagnosticsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SessionDiagnosticsDataType_.Equals(other.SessionDiagnosticsDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SessionDiagnosticsDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SessionDiagnosticsDataType_.WriteTo(output, _repeated_SessionDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SessionDiagnosticsDataType_.CalculateSize(_repeated_SessionDiagnosticsDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSessionDiagnosticsDataType other) {
    if (other == null) {
      return;
    }
    SessionDiagnosticsDataType_.Add(other.SessionDiagnosticsDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionDiagnosticsDataType_.AddEntriesFrom(input, _repeated_SessionDiagnosticsDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSimpleAttributeOperand : pb::IMessage<ListOfSimpleAttributeOperand> {
  private static readonly pb::MessageParser<ListOfSimpleAttributeOperand> _parser = new pb::MessageParser<ListOfSimpleAttributeOperand>(() => new ListOfSimpleAttributeOperand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSimpleAttributeOperand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[396]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSimpleAttributeOperand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSimpleAttributeOperand(ListOfSimpleAttributeOperand other) : this() {
    SimpleAttributeOperand_ = other.SimpleAttributeOperand_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSimpleAttributeOperand Clone() {
    return new ListOfSimpleAttributeOperand(this);
  }

  /// <summary>Field number for the "_SimpleAttributeOperand" field.</summary>
  public const int SimpleAttributeOperandFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SimpleAttributeOperand> _repeated_SimpleAttributeOperand_codec
      = pb::FieldCodec.ForMessage(10, global::SimpleAttributeOperand.Parser);
  private readonly pbc::RepeatedField<global::SimpleAttributeOperand> SimpleAttributeOperand_ = new pbc::RepeatedField<global::SimpleAttributeOperand>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SimpleAttributeOperand> SimpleAttributeOperand {
    get { return SimpleAttributeOperand_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSimpleAttributeOperand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSimpleAttributeOperand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SimpleAttributeOperand_.Equals(other.SimpleAttributeOperand_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SimpleAttributeOperand_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SimpleAttributeOperand_.WriteTo(output, _repeated_SimpleAttributeOperand_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SimpleAttributeOperand_.CalculateSize(_repeated_SimpleAttributeOperand_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSimpleAttributeOperand other) {
    if (other == null) {
      return;
    }
    SimpleAttributeOperand_.Add(other.SimpleAttributeOperand_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SimpleAttributeOperand_.AddEntriesFrom(input, _repeated_SimpleAttributeOperand_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfStatusResult : pb::IMessage<ListOfStatusResult> {
  private static readonly pb::MessageParser<ListOfStatusResult> _parser = new pb::MessageParser<ListOfStatusResult>(() => new ListOfStatusResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfStatusResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[397]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStatusResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStatusResult(ListOfStatusResult other) : this() {
    StatusResult_ = other.StatusResult_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStatusResult Clone() {
    return new ListOfStatusResult(this);
  }

  /// <summary>Field number for the "_StatusResult" field.</summary>
  public const int StatusResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StatusResult> _repeated_StatusResult_codec
      = pb::FieldCodec.ForMessage(10, global::StatusResult.Parser);
  private readonly pbc::RepeatedField<global::StatusResult> StatusResult_ = new pbc::RepeatedField<global::StatusResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StatusResult> StatusResult {
    get { return StatusResult_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfStatusResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfStatusResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!StatusResult_.Equals(other.StatusResult_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= StatusResult_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    StatusResult_.WriteTo(output, _repeated_StatusResult_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += StatusResult_.CalculateSize(_repeated_StatusResult_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfStatusResult other) {
    if (other == null) {
      return;
    }
    StatusResult_.Add(other.StatusResult_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StatusResult_.AddEntriesFrom(input, _repeated_StatusResult_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfStructureDefinition : pb::IMessage<ListOfStructureDefinition> {
  private static readonly pb::MessageParser<ListOfStructureDefinition> _parser = new pb::MessageParser<ListOfStructureDefinition>(() => new ListOfStructureDefinition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfStructureDefinition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[398]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureDefinition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureDefinition(ListOfStructureDefinition other) : this() {
    StructureDefinition_ = other.StructureDefinition_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureDefinition Clone() {
    return new ListOfStructureDefinition(this);
  }

  /// <summary>Field number for the "_StructureDefinition" field.</summary>
  public const int StructureDefinitionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StructureDefinition> _repeated_StructureDefinition_codec
      = pb::FieldCodec.ForMessage(10, global::StructureDefinition.Parser);
  private readonly pbc::RepeatedField<global::StructureDefinition> StructureDefinition_ = new pbc::RepeatedField<global::StructureDefinition>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StructureDefinition> StructureDefinition {
    get { return StructureDefinition_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfStructureDefinition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfStructureDefinition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!StructureDefinition_.Equals(other.StructureDefinition_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= StructureDefinition_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    StructureDefinition_.WriteTo(output, _repeated_StructureDefinition_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += StructureDefinition_.CalculateSize(_repeated_StructureDefinition_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfStructureDefinition other) {
    if (other == null) {
      return;
    }
    StructureDefinition_.Add(other.StructureDefinition_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StructureDefinition_.AddEntriesFrom(input, _repeated_StructureDefinition_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfStructureDescription : pb::IMessage<ListOfStructureDescription> {
  private static readonly pb::MessageParser<ListOfStructureDescription> _parser = new pb::MessageParser<ListOfStructureDescription>(() => new ListOfStructureDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfStructureDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[399]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureDescription(ListOfStructureDescription other) : this() {
    StructureDescription_ = other.StructureDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfStructureDescription Clone() {
    return new ListOfStructureDescription(this);
  }

  /// <summary>Field number for the "_StructureDescription" field.</summary>
  public const int StructureDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StructureDescription> _repeated_StructureDescription_codec
      = pb::FieldCodec.ForMessage(10, global::StructureDescription.Parser);
  private readonly pbc::RepeatedField<global::StructureDescription> StructureDescription_ = new pbc::RepeatedField<global::StructureDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StructureDescription> StructureDescription {
    get { return StructureDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfStructureDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfStructureDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!StructureDescription_.Equals(other.StructureDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= StructureDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    StructureDescription_.WriteTo(output, _repeated_StructureDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += StructureDescription_.CalculateSize(_repeated_StructureDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfStructureDescription other) {
    if (other == null) {
      return;
    }
    StructureDescription_.Add(other.StructureDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StructureDescription_.AddEntriesFrom(input, _repeated_StructureDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSubscribedDataSetDataType : pb::IMessage<ListOfSubscribedDataSetDataType> {
  private static readonly pb::MessageParser<ListOfSubscribedDataSetDataType> _parser = new pb::MessageParser<ListOfSubscribedDataSetDataType>(() => new ListOfSubscribedDataSetDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSubscribedDataSetDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[400]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscribedDataSetDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscribedDataSetDataType(ListOfSubscribedDataSetDataType other) : this() {
    SubscribedDataSetDataType_ = other.SubscribedDataSetDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscribedDataSetDataType Clone() {
    return new ListOfSubscribedDataSetDataType(this);
  }

  /// <summary>Field number for the "_SubscribedDataSetDataType" field.</summary>
  public const int SubscribedDataSetDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SubscribedDataSetDataType> _repeated_SubscribedDataSetDataType_codec
      = pb::FieldCodec.ForMessage(10, global::SubscribedDataSetDataType.Parser);
  private readonly pbc::RepeatedField<global::SubscribedDataSetDataType> SubscribedDataSetDataType_ = new pbc::RepeatedField<global::SubscribedDataSetDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SubscribedDataSetDataType> SubscribedDataSetDataType {
    get { return SubscribedDataSetDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSubscribedDataSetDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSubscribedDataSetDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SubscribedDataSetDataType_.Equals(other.SubscribedDataSetDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SubscribedDataSetDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SubscribedDataSetDataType_.WriteTo(output, _repeated_SubscribedDataSetDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SubscribedDataSetDataType_.CalculateSize(_repeated_SubscribedDataSetDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSubscribedDataSetDataType other) {
    if (other == null) {
      return;
    }
    SubscribedDataSetDataType_.Add(other.SubscribedDataSetDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SubscribedDataSetDataType_.AddEntriesFrom(input, _repeated_SubscribedDataSetDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfSubscribedDataSetMirrorDataType : pb::IMessage<ListOfSubscribedDataSetMirrorDataType> {
  private static readonly pb::MessageParser<ListOfSubscribedDataSetMirrorDataType> _parser = new pb::MessageParser<ListOfSubscribedDataSetMirrorDataType>(() => new ListOfSubscribedDataSetMirrorDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfSubscribedDataSetMirrorDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[401]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscribedDataSetMirrorDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscribedDataSetMirrorDataType(ListOfSubscribedDataSetMirrorDataType other) : this() {
    SubscribedDataSetMirrorDataType_ = other.SubscribedDataSetMirrorDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfSubscribedDataSetMirrorDataType Clone() {
    return new ListOfSubscribedDataSetMirrorDataType(this);
  }

  /// <summary>Field number for the "_SubscribedDataSetMirrorDataType" field.</summary>
  public const int SubscribedDataSetMirrorDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SubscribedDataSetMirrorDataType> _repeated_SubscribedDataSetMirrorDataType_codec
      = pb::FieldCodec.ForMessage(10, global::SubscribedDataSetMirrorDataType.Parser);
  private readonly pbc::RepeatedField<global::SubscribedDataSetMirrorDataType> SubscribedDataSetMirrorDataType_ = new pbc::RepeatedField<global::SubscribedDataSetMirrorDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SubscribedDataSetMirrorDataType> SubscribedDataSetMirrorDataType {
    get { return SubscribedDataSetMirrorDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfSubscribedDataSetMirrorDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfSubscribedDataSetMirrorDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!SubscribedDataSetMirrorDataType_.Equals(other.SubscribedDataSetMirrorDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SubscribedDataSetMirrorDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    SubscribedDataSetMirrorDataType_.WriteTo(output, _repeated_SubscribedDataSetMirrorDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += SubscribedDataSetMirrorDataType_.CalculateSize(_repeated_SubscribedDataSetMirrorDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfSubscribedDataSetMirrorDataType other) {
    if (other == null) {
      return;
    }
    SubscribedDataSetMirrorDataType_.Add(other.SubscribedDataSetMirrorDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SubscribedDataSetMirrorDataType_.AddEntriesFrom(input, _repeated_SubscribedDataSetMirrorDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfTargetVariablesDataType : pb::IMessage<ListOfTargetVariablesDataType> {
  private static readonly pb::MessageParser<ListOfTargetVariablesDataType> _parser = new pb::MessageParser<ListOfTargetVariablesDataType>(() => new ListOfTargetVariablesDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfTargetVariablesDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[402]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTargetVariablesDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTargetVariablesDataType(ListOfTargetVariablesDataType other) : this() {
    TargetVariablesDataType_ = other.TargetVariablesDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfTargetVariablesDataType Clone() {
    return new ListOfTargetVariablesDataType(this);
  }

  /// <summary>Field number for the "_TargetVariablesDataType" field.</summary>
  public const int TargetVariablesDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TargetVariablesDataType> _repeated_TargetVariablesDataType_codec
      = pb::FieldCodec.ForMessage(10, global::TargetVariablesDataType.Parser);
  private readonly pbc::RepeatedField<global::TargetVariablesDataType> TargetVariablesDataType_ = new pbc::RepeatedField<global::TargetVariablesDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TargetVariablesDataType> TargetVariablesDataType {
    get { return TargetVariablesDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfTargetVariablesDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfTargetVariablesDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!TargetVariablesDataType_.Equals(other.TargetVariablesDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TargetVariablesDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    TargetVariablesDataType_.WriteTo(output, _repeated_TargetVariablesDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += TargetVariablesDataType_.CalculateSize(_repeated_TargetVariablesDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfTargetVariablesDataType other) {
    if (other == null) {
      return;
    }
    TargetVariablesDataType_.Add(other.TargetVariablesDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TargetVariablesDataType_.AddEntriesFrom(input, _repeated_TargetVariablesDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfThreeDFrame : pb::IMessage<ListOfThreeDFrame> {
  private static readonly pb::MessageParser<ListOfThreeDFrame> _parser = new pb::MessageParser<ListOfThreeDFrame>(() => new ListOfThreeDFrame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfThreeDFrame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[403]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDFrame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDFrame(ListOfThreeDFrame other) : this() {
    ThreeDFrame_ = other.ThreeDFrame_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfThreeDFrame Clone() {
    return new ListOfThreeDFrame(this);
  }

  /// <summary>Field number for the "_ThreeDFrame" field.</summary>
  public const int ThreeDFrameFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ThreeDFrame> _repeated_ThreeDFrame_codec
      = pb::FieldCodec.ForMessage(10, global::ThreeDFrame.Parser);
  private readonly pbc::RepeatedField<global::ThreeDFrame> ThreeDFrame_ = new pbc::RepeatedField<global::ThreeDFrame>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ThreeDFrame> ThreeDFrame {
    get { return ThreeDFrame_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfThreeDFrame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfThreeDFrame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ThreeDFrame_.Equals(other.ThreeDFrame_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ThreeDFrame_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ThreeDFrame_.WriteTo(output, _repeated_ThreeDFrame_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ThreeDFrame_.CalculateSize(_repeated_ThreeDFrame_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfThreeDFrame other) {
    if (other == null) {
      return;
    }
    ThreeDFrame_.Add(other.ThreeDFrame_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ThreeDFrame_.AddEntriesFrom(input, _repeated_ThreeDFrame_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfWriteValue : pb::IMessage<ListOfWriteValue> {
  private static readonly pb::MessageParser<ListOfWriteValue> _parser = new pb::MessageParser<ListOfWriteValue>(() => new ListOfWriteValue());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfWriteValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[404]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriteValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriteValue(ListOfWriteValue other) : this() {
    WriteValue_ = other.WriteValue_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriteValue Clone() {
    return new ListOfWriteValue(this);
  }

  /// <summary>Field number for the "_WriteValue" field.</summary>
  public const int WriteValueFieldNumber = 1;
  private static readonly pb::FieldCodec<global::WriteValue> _repeated_WriteValue_codec
      = pb::FieldCodec.ForMessage(10, global::WriteValue.Parser);
  private readonly pbc::RepeatedField<global::WriteValue> WriteValue_ = new pbc::RepeatedField<global::WriteValue>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::WriteValue> WriteValue {
    get { return WriteValue_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfWriteValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfWriteValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!WriteValue_.Equals(other.WriteValue_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= WriteValue_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    WriteValue_.WriteTo(output, _repeated_WriteValue_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += WriteValue_.CalculateSize(_repeated_WriteValue_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfWriteValue other) {
    if (other == null) {
      return;
    }
    WriteValue_.Add(other.WriteValue_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          WriteValue_.AddEntriesFrom(input, _repeated_WriteValue_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ModifyMonitoredItemsResponse : pb::IMessage<ModifyMonitoredItemsResponse> {
  private static readonly pb::MessageParser<ModifyMonitoredItemsResponse> _parser = new pb::MessageParser<ModifyMonitoredItemsResponse>(() => new ModifyMonitoredItemsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModifyMonitoredItemsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[405]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifyMonitoredItemsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifyMonitoredItemsResponse(ModifyMonitoredItemsResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifyMonitoredItemsResponse Clone() {
    return new ModifyMonitoredItemsResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfMonitoredItemModifyResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfMonitoredItemModifyResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModifyMonitoredItemsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModifyMonitoredItemsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModifyMonitoredItemsResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfMonitoredItemModifyResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfMonitoredItemModifyResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class ModifySubscriptionRequest : pb::IMessage<ModifySubscriptionRequest> {
  private static readonly pb::MessageParser<ModifySubscriptionRequest> _parser = new pb::MessageParser<ModifySubscriptionRequest>(() => new ModifySubscriptionRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModifySubscriptionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[406]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifySubscriptionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifySubscriptionRequest(ModifySubscriptionRequest other) : this() {
    _hasBits0 = other._hasBits0;
    maxNotificationsPerPublish_ = other.maxNotificationsPerPublish_;
    priority_ = other.priority_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    requestedLifetimeCount_ = other.requestedLifetimeCount_;
    requestedMaxKeepAliveCount_ = other.requestedMaxKeepAliveCount_;
    requestedPublishingInterval_ = other.requestedPublishingInterval_;
    subscriptionId_ = other.subscriptionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifySubscriptionRequest Clone() {
    return new ModifySubscriptionRequest(this);
  }

  /// <summary>Field number for the "MaxNotificationsPerPublish" field.</summary>
  public const int MaxNotificationsPerPublishFieldNumber = 1;
  private readonly static uint MaxNotificationsPerPublishDefaultValue = 0;

  private uint maxNotificationsPerPublish_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxNotificationsPerPublish {
    get { if ((_hasBits0 & 1) != 0) { return maxNotificationsPerPublish_; } else { return MaxNotificationsPerPublishDefaultValue; } }
    set {
      _hasBits0 |= 1;
      maxNotificationsPerPublish_ = value;
    }
  }
  /// <summary>Gets whether the "MaxNotificationsPerPublish" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxNotificationsPerPublish {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MaxNotificationsPerPublish" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxNotificationsPerPublish() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Priority" field.</summary>
  public const int PriorityFieldNumber = 2;
  private readonly static uint PriorityDefaultValue = 0;

  private uint priority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Priority {
    get { if ((_hasBits0 & 2) != 0) { return priority_; } else { return PriorityDefaultValue; } }
    set {
      _hasBits0 |= 2;
      priority_ = value;
    }
  }
  /// <summary>Gets whether the "Priority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPriority {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Priority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPriority() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "RequestedLifetimeCount" field.</summary>
  public const int RequestedLifetimeCountFieldNumber = 4;
  private readonly static uint RequestedLifetimeCountDefaultValue = 0;

  private uint requestedLifetimeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestedLifetimeCount {
    get { if ((_hasBits0 & 4) != 0) { return requestedLifetimeCount_; } else { return RequestedLifetimeCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      requestedLifetimeCount_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedLifetimeCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedLifetimeCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "RequestedLifetimeCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedLifetimeCount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "RequestedMaxKeepAliveCount" field.</summary>
  public const int RequestedMaxKeepAliveCountFieldNumber = 5;
  private readonly static uint RequestedMaxKeepAliveCountDefaultValue = 0;

  private uint requestedMaxKeepAliveCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestedMaxKeepAliveCount {
    get { if ((_hasBits0 & 8) != 0) { return requestedMaxKeepAliveCount_; } else { return RequestedMaxKeepAliveCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      requestedMaxKeepAliveCount_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedMaxKeepAliveCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedMaxKeepAliveCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "RequestedMaxKeepAliveCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedMaxKeepAliveCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "RequestedPublishingInterval" field.</summary>
  public const int RequestedPublishingIntervalFieldNumber = 6;
  private readonly static double RequestedPublishingIntervalDefaultValue = 0D;

  private double requestedPublishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RequestedPublishingInterval {
    get { if ((_hasBits0 & 16) != 0) { return requestedPublishingInterval_; } else { return RequestedPublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 16;
      requestedPublishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedPublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedPublishingInterval {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "RequestedPublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedPublishingInterval() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 7;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 32) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModifySubscriptionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModifySubscriptionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MaxNotificationsPerPublish != other.MaxNotificationsPerPublish) return false;
    if (Priority != other.Priority) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (RequestedLifetimeCount != other.RequestedLifetimeCount) return false;
    if (RequestedMaxKeepAliveCount != other.RequestedMaxKeepAliveCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RequestedPublishingInterval, other.RequestedPublishingInterval)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMaxNotificationsPerPublish) hash ^= MaxNotificationsPerPublish.GetHashCode();
    if (HasPriority) hash ^= Priority.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasRequestedLifetimeCount) hash ^= RequestedLifetimeCount.GetHashCode();
    if (HasRequestedMaxKeepAliveCount) hash ^= RequestedMaxKeepAliveCount.GetHashCode();
    if (HasRequestedPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RequestedPublishingInterval);
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMaxNotificationsPerPublish) {
      output.WriteRawTag(8);
      output.WriteUInt32(MaxNotificationsPerPublish);
    }
    if (HasPriority) {
      output.WriteRawTag(16);
      output.WriteUInt32(Priority);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (HasRequestedLifetimeCount) {
      output.WriteRawTag(32);
      output.WriteUInt32(RequestedLifetimeCount);
    }
    if (HasRequestedMaxKeepAliveCount) {
      output.WriteRawTag(40);
      output.WriteUInt32(RequestedMaxKeepAliveCount);
    }
    if (HasRequestedPublishingInterval) {
      output.WriteRawTag(49);
      output.WriteDouble(RequestedPublishingInterval);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(56);
      output.WriteUInt32(SubscriptionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMaxNotificationsPerPublish) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNotificationsPerPublish);
    }
    if (HasPriority) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasRequestedLifetimeCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestedLifetimeCount);
    }
    if (HasRequestedMaxKeepAliveCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestedMaxKeepAliveCount);
    }
    if (HasRequestedPublishingInterval) {
      size += 1 + 8;
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModifySubscriptionRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasMaxNotificationsPerPublish) {
      MaxNotificationsPerPublish = other.MaxNotificationsPerPublish;
    }
    if (other.HasPriority) {
      Priority = other.Priority;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasRequestedLifetimeCount) {
      RequestedLifetimeCount = other.RequestedLifetimeCount;
    }
    if (other.HasRequestedMaxKeepAliveCount) {
      RequestedMaxKeepAliveCount = other.RequestedMaxKeepAliveCount;
    }
    if (other.HasRequestedPublishingInterval) {
      RequestedPublishingInterval = other.RequestedPublishingInterval;
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MaxNotificationsPerPublish = input.ReadUInt32();
          break;
        }
        case 16: {
          Priority = input.ReadUInt32();
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 32: {
          RequestedLifetimeCount = input.ReadUInt32();
          break;
        }
        case 40: {
          RequestedMaxKeepAliveCount = input.ReadUInt32();
          break;
        }
        case 49: {
          RequestedPublishingInterval = input.ReadDouble();
          break;
        }
        case 56: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ModifySubscriptionResponse : pb::IMessage<ModifySubscriptionResponse> {
  private static readonly pb::MessageParser<ModifySubscriptionResponse> _parser = new pb::MessageParser<ModifySubscriptionResponse>(() => new ModifySubscriptionResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModifySubscriptionResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[407]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifySubscriptionResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifySubscriptionResponse(ModifySubscriptionResponse other) : this() {
    _hasBits0 = other._hasBits0;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    revisedLifetimeCount_ = other.revisedLifetimeCount_;
    revisedMaxKeepAliveCount_ = other.revisedMaxKeepAliveCount_;
    revisedPublishingInterval_ = other.revisedPublishingInterval_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifySubscriptionResponse Clone() {
    return new ModifySubscriptionResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "RevisedLifetimeCount" field.</summary>
  public const int RevisedLifetimeCountFieldNumber = 2;
  private readonly static uint RevisedLifetimeCountDefaultValue = 0;

  private uint revisedLifetimeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RevisedLifetimeCount {
    get { if ((_hasBits0 & 1) != 0) { return revisedLifetimeCount_; } else { return RevisedLifetimeCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      revisedLifetimeCount_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedLifetimeCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedLifetimeCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RevisedLifetimeCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedLifetimeCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RevisedMaxKeepAliveCount" field.</summary>
  public const int RevisedMaxKeepAliveCountFieldNumber = 3;
  private readonly static uint RevisedMaxKeepAliveCountDefaultValue = 0;

  private uint revisedMaxKeepAliveCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RevisedMaxKeepAliveCount {
    get { if ((_hasBits0 & 2) != 0) { return revisedMaxKeepAliveCount_; } else { return RevisedMaxKeepAliveCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      revisedMaxKeepAliveCount_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedMaxKeepAliveCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedMaxKeepAliveCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RevisedMaxKeepAliveCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedMaxKeepAliveCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "RevisedPublishingInterval" field.</summary>
  public const int RevisedPublishingIntervalFieldNumber = 4;
  private readonly static double RevisedPublishingIntervalDefaultValue = 0D;

  private double revisedPublishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RevisedPublishingInterval {
    get { if ((_hasBits0 & 4) != 0) { return revisedPublishingInterval_; } else { return RevisedPublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 4;
      revisedPublishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedPublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedPublishingInterval {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "RevisedPublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedPublishingInterval() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModifySubscriptionResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModifySubscriptionResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (RevisedLifetimeCount != other.RevisedLifetimeCount) return false;
    if (RevisedMaxKeepAliveCount != other.RevisedMaxKeepAliveCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevisedPublishingInterval, other.RevisedPublishingInterval)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (HasRevisedLifetimeCount) hash ^= RevisedLifetimeCount.GetHashCode();
    if (HasRevisedMaxKeepAliveCount) hash ^= RevisedMaxKeepAliveCount.GetHashCode();
    if (HasRevisedPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevisedPublishingInterval);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (HasRevisedLifetimeCount) {
      output.WriteRawTag(16);
      output.WriteUInt32(RevisedLifetimeCount);
    }
    if (HasRevisedMaxKeepAliveCount) {
      output.WriteRawTag(24);
      output.WriteUInt32(RevisedMaxKeepAliveCount);
    }
    if (HasRevisedPublishingInterval) {
      output.WriteRawTag(33);
      output.WriteDouble(RevisedPublishingInterval);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (HasRevisedLifetimeCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisedLifetimeCount);
    }
    if (HasRevisedMaxKeepAliveCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevisedMaxKeepAliveCount);
    }
    if (HasRevisedPublishingInterval) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModifySubscriptionResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.HasRevisedLifetimeCount) {
      RevisedLifetimeCount = other.RevisedLifetimeCount;
    }
    if (other.HasRevisedMaxKeepAliveCount) {
      RevisedMaxKeepAliveCount = other.RevisedMaxKeepAliveCount;
    }
    if (other.HasRevisedPublishingInterval) {
      RevisedPublishingInterval = other.RevisedPublishingInterval;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 16: {
          RevisedLifetimeCount = input.ReadUInt32();
          break;
        }
        case 24: {
          RevisedMaxKeepAliveCount = input.ReadUInt32();
          break;
        }
        case 33: {
          RevisedPublishingInterval = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class MonitoredItemCreateRequest : pb::IMessage<MonitoredItemCreateRequest> {
  private static readonly pb::MessageParser<MonitoredItemCreateRequest> _parser = new pb::MessageParser<MonitoredItemCreateRequest>(() => new MonitoredItemCreateRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoredItemCreateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[408]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemCreateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemCreateRequest(MonitoredItemCreateRequest other) : this() {
    _hasBits0 = other._hasBits0;
    itemToMonitor_ = other.itemToMonitor_ != null ? other.itemToMonitor_.Clone() : null;
    MonitoringMode_ = other.MonitoringMode_;
    requestedParameters_ = other.requestedParameters_ != null ? other.requestedParameters_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemCreateRequest Clone() {
    return new MonitoredItemCreateRequest(this);
  }

  /// <summary>Field number for the "ItemToMonitor" field.</summary>
  public const int ItemToMonitorFieldNumber = 1;
  private global::ReadValueId itemToMonitor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReadValueId ItemToMonitor {
    get { return itemToMonitor_; }
    set {
      itemToMonitor_ = value;
    }
  }

  /// <summary>Field number for the "_MonitoringMode" field.</summary>
  public const int MonitoringModeFieldNumber = 2;
  private readonly static global::MonitoredItemCreateRequest.Types.MonitoringMode MonitoringModeDefaultValue = global::MonitoredItemCreateRequest.Types.MonitoringMode.Disabled0;

  private global::MonitoredItemCreateRequest.Types.MonitoringMode MonitoringMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MonitoredItemCreateRequest.Types.MonitoringMode MonitoringMode {
    get { if ((_hasBits0 & 1) != 0) { return MonitoringMode_; } else { return MonitoringModeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      MonitoringMode_ = value;
    }
  }
  /// <summary>Gets whether the "_MonitoringMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMonitoringMode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "_MonitoringMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMonitoringMode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RequestedParameters" field.</summary>
  public const int RequestedParametersFieldNumber = 3;
  private global::MonitoringParameters requestedParameters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MonitoringParameters RequestedParameters {
    get { return requestedParameters_; }
    set {
      requestedParameters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoredItemCreateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoredItemCreateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ItemToMonitor, other.ItemToMonitor)) return false;
    if (MonitoringMode != other.MonitoringMode) return false;
    if (!object.Equals(RequestedParameters, other.RequestedParameters)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (itemToMonitor_ != null) hash ^= ItemToMonitor.GetHashCode();
    if (HasMonitoringMode) hash ^= MonitoringMode.GetHashCode();
    if (requestedParameters_ != null) hash ^= RequestedParameters.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (itemToMonitor_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ItemToMonitor);
    }
    if (HasMonitoringMode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MonitoringMode);
    }
    if (requestedParameters_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestedParameters);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (itemToMonitor_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemToMonitor);
    }
    if (HasMonitoringMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MonitoringMode);
    }
    if (requestedParameters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedParameters);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoredItemCreateRequest other) {
    if (other == null) {
      return;
    }
    if (other.itemToMonitor_ != null) {
      if (itemToMonitor_ == null) {
        ItemToMonitor = new global::ReadValueId();
      }
      ItemToMonitor.MergeFrom(other.ItemToMonitor);
    }
    if (other.HasMonitoringMode) {
      MonitoringMode = other.MonitoringMode;
    }
    if (other.requestedParameters_ != null) {
      if (requestedParameters_ == null) {
        RequestedParameters = new global::MonitoringParameters();
      }
      RequestedParameters.MergeFrom(other.RequestedParameters);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (itemToMonitor_ == null) {
            ItemToMonitor = new global::ReadValueId();
          }
          input.ReadMessage(ItemToMonitor);
          break;
        }
        case 16: {
          MonitoringMode = (global::MonitoredItemCreateRequest.Types.MonitoringMode) input.ReadEnum();
          break;
        }
        case 26: {
          if (requestedParameters_ == null) {
            RequestedParameters = new global::MonitoringParameters();
          }
          input.ReadMessage(RequestedParameters);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the MonitoredItemCreateRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MonitoringMode {
      [pbr::OriginalName("MonitoringMode_Disabled_0")] Disabled0 = 1,
      [pbr::OriginalName("MonitoringMode_Reporting_2")] Reporting2 = 2,
      [pbr::OriginalName("MonitoringMode_Sampling_1")] Sampling1 = 3,
    }

  }
  #endregion

}

public sealed partial class MonitoredItemModifyRequest : pb::IMessage<MonitoredItemModifyRequest> {
  private static readonly pb::MessageParser<MonitoredItemModifyRequest> _parser = new pb::MessageParser<MonitoredItemModifyRequest>(() => new MonitoredItemModifyRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoredItemModifyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[409]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemModifyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemModifyRequest(MonitoredItemModifyRequest other) : this() {
    _hasBits0 = other._hasBits0;
    monitoredItemId_ = other.monitoredItemId_;
    requestedParameters_ = other.requestedParameters_ != null ? other.requestedParameters_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoredItemModifyRequest Clone() {
    return new MonitoredItemModifyRequest(this);
  }

  /// <summary>Field number for the "MonitoredItemId" field.</summary>
  public const int MonitoredItemIdFieldNumber = 1;
  private readonly static uint MonitoredItemIdDefaultValue = 0;

  private uint monitoredItemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MonitoredItemId {
    get { if ((_hasBits0 & 1) != 0) { return monitoredItemId_; } else { return MonitoredItemIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      monitoredItemId_ = value;
    }
  }
  /// <summary>Gets whether the "MonitoredItemId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMonitoredItemId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MonitoredItemId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMonitoredItemId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RequestedParameters" field.</summary>
  public const int RequestedParametersFieldNumber = 2;
  private global::MonitoringParameters requestedParameters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MonitoringParameters RequestedParameters {
    get { return requestedParameters_; }
    set {
      requestedParameters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoredItemModifyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoredItemModifyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MonitoredItemId != other.MonitoredItemId) return false;
    if (!object.Equals(RequestedParameters, other.RequestedParameters)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMonitoredItemId) hash ^= MonitoredItemId.GetHashCode();
    if (requestedParameters_ != null) hash ^= RequestedParameters.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMonitoredItemId) {
      output.WriteRawTag(8);
      output.WriteUInt32(MonitoredItemId);
    }
    if (requestedParameters_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestedParameters);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMonitoredItemId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonitoredItemId);
    }
    if (requestedParameters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedParameters);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoredItemModifyRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasMonitoredItemId) {
      MonitoredItemId = other.MonitoredItemId;
    }
    if (other.requestedParameters_ != null) {
      if (requestedParameters_ == null) {
        RequestedParameters = new global::MonitoringParameters();
      }
      RequestedParameters.MergeFrom(other.RequestedParameters);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MonitoredItemId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (requestedParameters_ == null) {
            RequestedParameters = new global::MonitoringParameters();
          }
          input.ReadMessage(RequestedParameters);
          break;
        }
      }
    }
  }

}

public sealed partial class NotificationData : pb::IMessage<NotificationData> {
  private static readonly pb::MessageParser<NotificationData> _parser = new pb::MessageParser<NotificationData>(() => new NotificationData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotificationData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[410]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotificationData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotificationData(NotificationData other) : this() {
    DiagnosticInfo_ = other.DiagnosticInfo_ != null ? other.DiagnosticInfo_.Clone() : null;
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    events_ = other.events_ != null ? other.events_.Clone() : null;
    monitoredItems_ = other.monitoredItems_ != null ? other.monitoredItems_.Clone() : null;
    status_ = other.status_ != null ? other.status_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotificationData Clone() {
    return new NotificationData(this);
  }

  /// <summary>Field number for the "_DiagnosticInfo" field.</summary>
  public const int DiagnosticInfoFieldNumber = 1;
  private global::DiagnosticInfo DiagnosticInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiagnosticInfo DiagnosticInfo {
    get { return DiagnosticInfo_; }
    set {
      DiagnosticInfo_ = value;
    }
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 2;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "Events" field.</summary>
  public const int EventsFieldNumber = 3;
  private global::ListOfEventFieldList events_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEventFieldList Events {
    get { return events_; }
    set {
      events_ = value;
    }
  }

  /// <summary>Field number for the "MonitoredItems" field.</summary>
  public const int MonitoredItemsFieldNumber = 4;
  private global::ListOfMonitoredItemNotification monitoredItems_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfMonitoredItemNotification MonitoredItems {
    get { return monitoredItems_; }
    set {
      monitoredItems_ = value;
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 5;
  private global::StatusCode status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotificationData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotificationData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfo, other.DiagnosticInfo)) return false;
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(Events, other.Events)) return false;
    if (!object.Equals(MonitoredItems, other.MonitoredItems)) return false;
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DiagnosticInfo_ != null) hash ^= DiagnosticInfo.GetHashCode();
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (events_ != null) hash ^= Events.GetHashCode();
    if (monitoredItems_ != null) hash ^= MonitoredItems.GetHashCode();
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DiagnosticInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfo);
    }
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DiagnosticInfos);
    }
    if (events_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Events);
    }
    if (monitoredItems_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MonitoredItems);
    }
    if (status_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DiagnosticInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfo);
    }
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (events_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Events);
    }
    if (monitoredItems_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonitoredItems);
    }
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotificationData other) {
    if (other == null) {
      return;
    }
    if (other.DiagnosticInfo_ != null) {
      if (DiagnosticInfo_ == null) {
        DiagnosticInfo = new global::DiagnosticInfo();
      }
      DiagnosticInfo.MergeFrom(other.DiagnosticInfo);
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.events_ != null) {
      if (events_ == null) {
        Events = new global::ListOfEventFieldList();
      }
      Events.MergeFrom(other.Events);
    }
    if (other.monitoredItems_ != null) {
      if (monitoredItems_ == null) {
        MonitoredItems = new global::ListOfMonitoredItemNotification();
      }
      MonitoredItems.MergeFrom(other.MonitoredItems);
    }
    if (other.status_ != null) {
      if (status_ == null) {
        Status = new global::StatusCode();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (DiagnosticInfo_ == null) {
            DiagnosticInfo = new global::DiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfo);
          break;
        }
        case 18: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 26: {
          if (events_ == null) {
            Events = new global::ListOfEventFieldList();
          }
          input.ReadMessage(Events);
          break;
        }
        case 34: {
          if (monitoredItems_ == null) {
            MonitoredItems = new global::ListOfMonitoredItemNotification();
          }
          input.ReadMessage(MonitoredItems);
          break;
        }
        case 42: {
          if (status_ == null) {
            Status = new global::StatusCode();
          }
          input.ReadMessage(Status);
          break;
        }
      }
    }
  }

}

public sealed partial class OpenSecureChannelRequest : pb::IMessage<OpenSecureChannelRequest> {
  private static readonly pb::MessageParser<OpenSecureChannelRequest> _parser = new pb::MessageParser<OpenSecureChannelRequest>(() => new OpenSecureChannelRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OpenSecureChannelRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[411]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OpenSecureChannelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OpenSecureChannelRequest(OpenSecureChannelRequest other) : this() {
    _hasBits0 = other._hasBits0;
    clientNonce_ = other.clientNonce_;
    clientProtocolVersion_ = other.clientProtocolVersion_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    requestType_ = other.requestType_;
    requestedLifetime_ = other.requestedLifetime_;
    securityMode_ = other.securityMode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OpenSecureChannelRequest Clone() {
    return new OpenSecureChannelRequest(this);
  }

  /// <summary>Field number for the "ClientNonce" field.</summary>
  public const int ClientNonceFieldNumber = 1;
  private readonly static pb::ByteString ClientNonceDefaultValue = pb::ByteString.Empty;

  private pb::ByteString clientNonce_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ClientNonce {
    get { return clientNonce_ ?? ClientNonceDefaultValue; }
    set {
      clientNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ClientNonce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientNonce {
    get { return clientNonce_ != null; }
  }
  /// <summary>Clears the value of the "ClientNonce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientNonce() {
    clientNonce_ = null;
  }

  /// <summary>Field number for the "ClientProtocolVersion" field.</summary>
  public const int ClientProtocolVersionFieldNumber = 2;
  private readonly static uint ClientProtocolVersionDefaultValue = 0;

  private uint clientProtocolVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ClientProtocolVersion {
    get { if ((_hasBits0 & 1) != 0) { return clientProtocolVersion_; } else { return ClientProtocolVersionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientProtocolVersion_ = value;
    }
  }
  /// <summary>Gets whether the "ClientProtocolVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientProtocolVersion {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ClientProtocolVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientProtocolVersion() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "RequestType" field.</summary>
  public const int RequestTypeFieldNumber = 4;
  private readonly static global::OpenSecureChannelRequest.Types.SecurityTokenRequestType RequestTypeDefaultValue = global::OpenSecureChannelRequest.Types.SecurityTokenRequestType.Issue0;

  private global::OpenSecureChannelRequest.Types.SecurityTokenRequestType requestType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OpenSecureChannelRequest.Types.SecurityTokenRequestType RequestType {
    get { if ((_hasBits0 & 2) != 0) { return requestType_; } else { return RequestTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      requestType_ = value;
    }
  }
  /// <summary>Gets whether the "RequestType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RequestType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "RequestedLifetime" field.</summary>
  public const int RequestedLifetimeFieldNumber = 5;
  private readonly static uint RequestedLifetimeDefaultValue = 0;

  private uint requestedLifetime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestedLifetime {
    get { if ((_hasBits0 & 4) != 0) { return requestedLifetime_; } else { return RequestedLifetimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      requestedLifetime_ = value;
    }
  }
  /// <summary>Gets whether the "RequestedLifetime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRequestedLifetime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "RequestedLifetime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRequestedLifetime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 6;
  private readonly static global::OpenSecureChannelRequest.Types.MessageSecurityMode SecurityModeDefaultValue = global::OpenSecureChannelRequest.Types.MessageSecurityMode.Invalid0;

  private global::OpenSecureChannelRequest.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OpenSecureChannelRequest.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 8) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OpenSecureChannelRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OpenSecureChannelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientNonce != other.ClientNonce) return false;
    if (ClientProtocolVersion != other.ClientProtocolVersion) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (RequestType != other.RequestType) return false;
    if (RequestedLifetime != other.RequestedLifetime) return false;
    if (SecurityMode != other.SecurityMode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientNonce) hash ^= ClientNonce.GetHashCode();
    if (HasClientProtocolVersion) hash ^= ClientProtocolVersion.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasRequestType) hash ^= RequestType.GetHashCode();
    if (HasRequestedLifetime) hash ^= RequestedLifetime.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasClientNonce) {
      output.WriteRawTag(10);
      output.WriteBytes(ClientNonce);
    }
    if (HasClientProtocolVersion) {
      output.WriteRawTag(16);
      output.WriteUInt32(ClientProtocolVersion);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (HasRequestType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) RequestType);
    }
    if (HasRequestedLifetime) {
      output.WriteRawTag(40);
      output.WriteUInt32(RequestedLifetime);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(48);
      output.WriteEnum((int) SecurityMode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasClientNonce) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientNonce);
    }
    if (HasClientProtocolVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientProtocolVersion);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasRequestType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestType);
    }
    if (HasRequestedLifetime) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestedLifetime);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OpenSecureChannelRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasClientNonce) {
      ClientNonce = other.ClientNonce;
    }
    if (other.HasClientProtocolVersion) {
      ClientProtocolVersion = other.ClientProtocolVersion;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasRequestType) {
      RequestType = other.RequestType;
    }
    if (other.HasRequestedLifetime) {
      RequestedLifetime = other.RequestedLifetime;
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ClientNonce = input.ReadBytes();
          break;
        }
        case 16: {
          ClientProtocolVersion = input.ReadUInt32();
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 32: {
          RequestType = (global::OpenSecureChannelRequest.Types.SecurityTokenRequestType) input.ReadEnum();
          break;
        }
        case 40: {
          RequestedLifetime = input.ReadUInt32();
          break;
        }
        case 48: {
          SecurityMode = (global::OpenSecureChannelRequest.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the OpenSecureChannelRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum SecurityTokenRequestType {
      [pbr::OriginalName("SecurityTokenRequestType_Issue_0")] Issue0 = 1,
      [pbr::OriginalName("SecurityTokenRequestType_Renew_1")] Renew1 = 2,
    }

    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class OpenSecureChannelResponse : pb::IMessage<OpenSecureChannelResponse> {
  private static readonly pb::MessageParser<OpenSecureChannelResponse> _parser = new pb::MessageParser<OpenSecureChannelResponse>(() => new OpenSecureChannelResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OpenSecureChannelResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[412]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OpenSecureChannelResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OpenSecureChannelResponse(OpenSecureChannelResponse other) : this() {
    _hasBits0 = other._hasBits0;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    securityToken_ = other.securityToken_ != null ? other.securityToken_.Clone() : null;
    serverNonce_ = other.serverNonce_;
    serverProtocolVersion_ = other.serverProtocolVersion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OpenSecureChannelResponse Clone() {
    return new OpenSecureChannelResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "SecurityToken" field.</summary>
  public const int SecurityTokenFieldNumber = 2;
  private global::ChannelSecurityToken securityToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChannelSecurityToken SecurityToken {
    get { return securityToken_; }
    set {
      securityToken_ = value;
    }
  }

  /// <summary>Field number for the "ServerNonce" field.</summary>
  public const int ServerNonceFieldNumber = 3;
  private readonly static pb::ByteString ServerNonceDefaultValue = pb::ByteString.Empty;

  private pb::ByteString serverNonce_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ServerNonce {
    get { return serverNonce_ ?? ServerNonceDefaultValue; }
    set {
      serverNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerNonce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerNonce {
    get { return serverNonce_ != null; }
  }
  /// <summary>Clears the value of the "ServerNonce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerNonce() {
    serverNonce_ = null;
  }

  /// <summary>Field number for the "ServerProtocolVersion" field.</summary>
  public const int ServerProtocolVersionFieldNumber = 4;
  private readonly static uint ServerProtocolVersionDefaultValue = 0;

  private uint serverProtocolVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerProtocolVersion {
    get { if ((_hasBits0 & 1) != 0) { return serverProtocolVersion_; } else { return ServerProtocolVersionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serverProtocolVersion_ = value;
    }
  }
  /// <summary>Gets whether the "ServerProtocolVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerProtocolVersion {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ServerProtocolVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerProtocolVersion() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OpenSecureChannelResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OpenSecureChannelResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(SecurityToken, other.SecurityToken)) return false;
    if (ServerNonce != other.ServerNonce) return false;
    if (ServerProtocolVersion != other.ServerProtocolVersion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (securityToken_ != null) hash ^= SecurityToken.GetHashCode();
    if (HasServerNonce) hash ^= ServerNonce.GetHashCode();
    if (HasServerProtocolVersion) hash ^= ServerProtocolVersion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (securityToken_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SecurityToken);
    }
    if (HasServerNonce) {
      output.WriteRawTag(26);
      output.WriteBytes(ServerNonce);
    }
    if (HasServerProtocolVersion) {
      output.WriteRawTag(32);
      output.WriteUInt32(ServerProtocolVersion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (securityToken_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecurityToken);
    }
    if (HasServerNonce) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerNonce);
    }
    if (HasServerProtocolVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerProtocolVersion);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OpenSecureChannelResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.securityToken_ != null) {
      if (securityToken_ == null) {
        SecurityToken = new global::ChannelSecurityToken();
      }
      SecurityToken.MergeFrom(other.SecurityToken);
    }
    if (other.HasServerNonce) {
      ServerNonce = other.ServerNonce;
    }
    if (other.HasServerProtocolVersion) {
      ServerProtocolVersion = other.ServerProtocolVersion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 18: {
          if (securityToken_ == null) {
            SecurityToken = new global::ChannelSecurityToken();
          }
          input.ReadMessage(SecurityToken);
          break;
        }
        case 26: {
          ServerNonce = input.ReadBytes();
          break;
        }
        case 32: {
          ServerProtocolVersion = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ProgramDiagnosticDataType : pb::IMessage<ProgramDiagnosticDataType> {
  private static readonly pb::MessageParser<ProgramDiagnosticDataType> _parser = new pb::MessageParser<ProgramDiagnosticDataType>(() => new ProgramDiagnosticDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProgramDiagnosticDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[413]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgramDiagnosticDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgramDiagnosticDataType(ProgramDiagnosticDataType other) : this() {
    _hasBits0 = other._hasBits0;
    createClientName_ = other.createClientName_;
    createSessionId_ = other.createSessionId_ != null ? other.createSessionId_.Clone() : null;
    invocationCreationTime_ = other.invocationCreationTime_;
    lastMethodCall_ = other.lastMethodCall_;
    lastMethodCallTime_ = other.lastMethodCallTime_;
    lastMethodInputArguments_ = other.lastMethodInputArguments_ != null ? other.lastMethodInputArguments_.Clone() : null;
    lastMethodOutputArguments_ = other.lastMethodOutputArguments_ != null ? other.lastMethodOutputArguments_.Clone() : null;
    lastMethodReturnStatus_ = other.lastMethodReturnStatus_ != null ? other.lastMethodReturnStatus_.Clone() : null;
    lastMethodSessionId_ = other.lastMethodSessionId_ != null ? other.lastMethodSessionId_.Clone() : null;
    lastTransitionTime_ = other.lastTransitionTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgramDiagnosticDataType Clone() {
    return new ProgramDiagnosticDataType(this);
  }

  /// <summary>Field number for the "CreateClientName" field.</summary>
  public const int CreateClientNameFieldNumber = 1;
  private readonly static string CreateClientNameDefaultValue = "";

  private string createClientName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CreateClientName {
    get { return createClientName_ ?? CreateClientNameDefaultValue; }
    set {
      createClientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "CreateClientName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCreateClientName {
    get { return createClientName_ != null; }
  }
  /// <summary>Clears the value of the "CreateClientName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCreateClientName() {
    createClientName_ = null;
  }

  /// <summary>Field number for the "CreateSessionId" field.</summary>
  public const int CreateSessionIdFieldNumber = 2;
  private global::NodeId createSessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId CreateSessionId {
    get { return createSessionId_; }
    set {
      createSessionId_ = value;
    }
  }

  /// <summary>Field number for the "InvocationCreationTime" field.</summary>
  public const int InvocationCreationTimeFieldNumber = 3;
  private readonly static long InvocationCreationTimeDefaultValue = 0L;

  private long invocationCreationTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long InvocationCreationTime {
    get { if ((_hasBits0 & 1) != 0) { return invocationCreationTime_; } else { return InvocationCreationTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      invocationCreationTime_ = value;
    }
  }
  /// <summary>Gets whether the "InvocationCreationTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasInvocationCreationTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "InvocationCreationTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInvocationCreationTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "LastMethodCall" field.</summary>
  public const int LastMethodCallFieldNumber = 4;
  private readonly static string LastMethodCallDefaultValue = "";

  private string lastMethodCall_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LastMethodCall {
    get { return lastMethodCall_ ?? LastMethodCallDefaultValue; }
    set {
      lastMethodCall_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "LastMethodCall" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastMethodCall {
    get { return lastMethodCall_ != null; }
  }
  /// <summary>Clears the value of the "LastMethodCall" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastMethodCall() {
    lastMethodCall_ = null;
  }

  /// <summary>Field number for the "LastMethodCallTime" field.</summary>
  public const int LastMethodCallTimeFieldNumber = 5;
  private readonly static long LastMethodCallTimeDefaultValue = 0L;

  private long lastMethodCallTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastMethodCallTime {
    get { if ((_hasBits0 & 2) != 0) { return lastMethodCallTime_; } else { return LastMethodCallTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      lastMethodCallTime_ = value;
    }
  }
  /// <summary>Gets whether the "LastMethodCallTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastMethodCallTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "LastMethodCallTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastMethodCallTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "LastMethodInputArguments" field.</summary>
  public const int LastMethodInputArgumentsFieldNumber = 6;
  private global::ListOfArgument lastMethodInputArguments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfArgument LastMethodInputArguments {
    get { return lastMethodInputArguments_; }
    set {
      lastMethodInputArguments_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodOutputArguments" field.</summary>
  public const int LastMethodOutputArgumentsFieldNumber = 7;
  private global::ListOfArgument lastMethodOutputArguments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfArgument LastMethodOutputArguments {
    get { return lastMethodOutputArguments_; }
    set {
      lastMethodOutputArguments_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodReturnStatus" field.</summary>
  public const int LastMethodReturnStatusFieldNumber = 8;
  private global::StatusResult lastMethodReturnStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusResult LastMethodReturnStatus {
    get { return lastMethodReturnStatus_; }
    set {
      lastMethodReturnStatus_ = value;
    }
  }

  /// <summary>Field number for the "LastMethodSessionId" field.</summary>
  public const int LastMethodSessionIdFieldNumber = 9;
  private global::NodeId lastMethodSessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId LastMethodSessionId {
    get { return lastMethodSessionId_; }
    set {
      lastMethodSessionId_ = value;
    }
  }

  /// <summary>Field number for the "LastTransitionTime" field.</summary>
  public const int LastTransitionTimeFieldNumber = 10;
  private readonly static long LastTransitionTimeDefaultValue = 0L;

  private long lastTransitionTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastTransitionTime {
    get { if ((_hasBits0 & 4) != 0) { return lastTransitionTime_; } else { return LastTransitionTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      lastTransitionTime_ = value;
    }
  }
  /// <summary>Gets whether the "LastTransitionTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastTransitionTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "LastTransitionTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastTransitionTime() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProgramDiagnosticDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProgramDiagnosticDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CreateClientName != other.CreateClientName) return false;
    if (!object.Equals(CreateSessionId, other.CreateSessionId)) return false;
    if (InvocationCreationTime != other.InvocationCreationTime) return false;
    if (LastMethodCall != other.LastMethodCall) return false;
    if (LastMethodCallTime != other.LastMethodCallTime) return false;
    if (!object.Equals(LastMethodInputArguments, other.LastMethodInputArguments)) return false;
    if (!object.Equals(LastMethodOutputArguments, other.LastMethodOutputArguments)) return false;
    if (!object.Equals(LastMethodReturnStatus, other.LastMethodReturnStatus)) return false;
    if (!object.Equals(LastMethodSessionId, other.LastMethodSessionId)) return false;
    if (LastTransitionTime != other.LastTransitionTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCreateClientName) hash ^= CreateClientName.GetHashCode();
    if (createSessionId_ != null) hash ^= CreateSessionId.GetHashCode();
    if (HasInvocationCreationTime) hash ^= InvocationCreationTime.GetHashCode();
    if (HasLastMethodCall) hash ^= LastMethodCall.GetHashCode();
    if (HasLastMethodCallTime) hash ^= LastMethodCallTime.GetHashCode();
    if (lastMethodInputArguments_ != null) hash ^= LastMethodInputArguments.GetHashCode();
    if (lastMethodOutputArguments_ != null) hash ^= LastMethodOutputArguments.GetHashCode();
    if (lastMethodReturnStatus_ != null) hash ^= LastMethodReturnStatus.GetHashCode();
    if (lastMethodSessionId_ != null) hash ^= LastMethodSessionId.GetHashCode();
    if (HasLastTransitionTime) hash ^= LastTransitionTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCreateClientName) {
      output.WriteRawTag(10);
      output.WriteString(CreateClientName);
    }
    if (createSessionId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CreateSessionId);
    }
    if (HasInvocationCreationTime) {
      output.WriteRawTag(24);
      output.WriteInt64(InvocationCreationTime);
    }
    if (HasLastMethodCall) {
      output.WriteRawTag(34);
      output.WriteString(LastMethodCall);
    }
    if (HasLastMethodCallTime) {
      output.WriteRawTag(40);
      output.WriteInt64(LastMethodCallTime);
    }
    if (lastMethodInputArguments_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(LastMethodInputArguments);
    }
    if (lastMethodOutputArguments_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(LastMethodOutputArguments);
    }
    if (lastMethodReturnStatus_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(LastMethodReturnStatus);
    }
    if (lastMethodSessionId_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(LastMethodSessionId);
    }
    if (HasLastTransitionTime) {
      output.WriteRawTag(80);
      output.WriteInt64(LastTransitionTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCreateClientName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateClientName);
    }
    if (createSessionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateSessionId);
    }
    if (HasInvocationCreationTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(InvocationCreationTime);
    }
    if (HasLastMethodCall) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastMethodCall);
    }
    if (HasLastMethodCallTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastMethodCallTime);
    }
    if (lastMethodInputArguments_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodInputArguments);
    }
    if (lastMethodOutputArguments_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodOutputArguments);
    }
    if (lastMethodReturnStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodReturnStatus);
    }
    if (lastMethodSessionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMethodSessionId);
    }
    if (HasLastTransitionTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastTransitionTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProgramDiagnosticDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasCreateClientName) {
      CreateClientName = other.CreateClientName;
    }
    if (other.createSessionId_ != null) {
      if (createSessionId_ == null) {
        CreateSessionId = new global::NodeId();
      }
      CreateSessionId.MergeFrom(other.CreateSessionId);
    }
    if (other.HasInvocationCreationTime) {
      InvocationCreationTime = other.InvocationCreationTime;
    }
    if (other.HasLastMethodCall) {
      LastMethodCall = other.LastMethodCall;
    }
    if (other.HasLastMethodCallTime) {
      LastMethodCallTime = other.LastMethodCallTime;
    }
    if (other.lastMethodInputArguments_ != null) {
      if (lastMethodInputArguments_ == null) {
        LastMethodInputArguments = new global::ListOfArgument();
      }
      LastMethodInputArguments.MergeFrom(other.LastMethodInputArguments);
    }
    if (other.lastMethodOutputArguments_ != null) {
      if (lastMethodOutputArguments_ == null) {
        LastMethodOutputArguments = new global::ListOfArgument();
      }
      LastMethodOutputArguments.MergeFrom(other.LastMethodOutputArguments);
    }
    if (other.lastMethodReturnStatus_ != null) {
      if (lastMethodReturnStatus_ == null) {
        LastMethodReturnStatus = new global::StatusResult();
      }
      LastMethodReturnStatus.MergeFrom(other.LastMethodReturnStatus);
    }
    if (other.lastMethodSessionId_ != null) {
      if (lastMethodSessionId_ == null) {
        LastMethodSessionId = new global::NodeId();
      }
      LastMethodSessionId.MergeFrom(other.LastMethodSessionId);
    }
    if (other.HasLastTransitionTime) {
      LastTransitionTime = other.LastTransitionTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CreateClientName = input.ReadString();
          break;
        }
        case 18: {
          if (createSessionId_ == null) {
            CreateSessionId = new global::NodeId();
          }
          input.ReadMessage(CreateSessionId);
          break;
        }
        case 24: {
          InvocationCreationTime = input.ReadInt64();
          break;
        }
        case 34: {
          LastMethodCall = input.ReadString();
          break;
        }
        case 40: {
          LastMethodCallTime = input.ReadInt64();
          break;
        }
        case 50: {
          if (lastMethodInputArguments_ == null) {
            LastMethodInputArguments = new global::ListOfArgument();
          }
          input.ReadMessage(LastMethodInputArguments);
          break;
        }
        case 58: {
          if (lastMethodOutputArguments_ == null) {
            LastMethodOutputArguments = new global::ListOfArgument();
          }
          input.ReadMessage(LastMethodOutputArguments);
          break;
        }
        case 66: {
          if (lastMethodReturnStatus_ == null) {
            LastMethodReturnStatus = new global::StatusResult();
          }
          input.ReadMessage(LastMethodReturnStatus);
          break;
        }
        case 74: {
          if (lastMethodSessionId_ == null) {
            LastMethodSessionId = new global::NodeId();
          }
          input.ReadMessage(LastMethodSessionId);
          break;
        }
        case 80: {
          LastTransitionTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PublishRequest : pb::IMessage<PublishRequest> {
  private static readonly pb::MessageParser<PublishRequest> _parser = new pb::MessageParser<PublishRequest>(() => new PublishRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[414]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishRequest(PublishRequest other) : this() {
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionAcknowledgements_ = other.subscriptionAcknowledgements_ != null ? other.subscriptionAcknowledgements_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishRequest Clone() {
    return new PublishRequest(this);
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionAcknowledgements" field.</summary>
  public const int SubscriptionAcknowledgementsFieldNumber = 2;
  private global::ListOfSubscriptionAcknowledgement subscriptionAcknowledgements_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSubscriptionAcknowledgement SubscriptionAcknowledgements {
    get { return subscriptionAcknowledgements_; }
    set {
      subscriptionAcknowledgements_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(SubscriptionAcknowledgements, other.SubscriptionAcknowledgements)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (subscriptionAcknowledgements_ != null) hash ^= SubscriptionAcknowledgements.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (subscriptionAcknowledgements_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SubscriptionAcknowledgements);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (subscriptionAcknowledgements_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscriptionAcknowledgements);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishRequest other) {
    if (other == null) {
      return;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.subscriptionAcknowledgements_ != null) {
      if (subscriptionAcknowledgements_ == null) {
        SubscriptionAcknowledgements = new global::ListOfSubscriptionAcknowledgement();
      }
      SubscriptionAcknowledgements.MergeFrom(other.SubscriptionAcknowledgements);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 18: {
          if (subscriptionAcknowledgements_ == null) {
            SubscriptionAcknowledgements = new global::ListOfSubscriptionAcknowledgement();
          }
          input.ReadMessage(SubscriptionAcknowledgements);
          break;
        }
      }
    }
  }

}

public sealed partial class PublishResponse : pb::IMessage<PublishResponse> {
  private static readonly pb::MessageParser<PublishResponse> _parser = new pb::MessageParser<PublishResponse>(() => new PublishResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[415]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishResponse(PublishResponse other) : this() {
    _hasBits0 = other._hasBits0;
    availableSequenceNumbers_ = other.availableSequenceNumbers_ != null ? other.availableSequenceNumbers_.Clone() : null;
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    moreNotifications_ = other.moreNotifications_;
    NotificationMessage_ = other.NotificationMessage_ != null ? other.NotificationMessage_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    subscriptionId_ = other.subscriptionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishResponse Clone() {
    return new PublishResponse(this);
  }

  /// <summary>Field number for the "AvailableSequenceNumbers" field.</summary>
  public const int AvailableSequenceNumbersFieldNumber = 1;
  private global::ListOfUInt32 availableSequenceNumbers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfUInt32 AvailableSequenceNumbers {
    get { return availableSequenceNumbers_; }
    set {
      availableSequenceNumbers_ = value;
    }
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 2;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "MoreNotifications" field.</summary>
  public const int MoreNotificationsFieldNumber = 3;
  private readonly static bool MoreNotificationsDefaultValue = false;

  private bool moreNotifications_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool MoreNotifications {
    get { if ((_hasBits0 & 1) != 0) { return moreNotifications_; } else { return MoreNotificationsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      moreNotifications_ = value;
    }
  }
  /// <summary>Gets whether the "MoreNotifications" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMoreNotifications {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MoreNotifications" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMoreNotifications() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_NotificationMessage" field.</summary>
  public const int NotificationMessageFieldNumber = 4;
  private global::NotificationMessage NotificationMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NotificationMessage NotificationMessage {
    get { return NotificationMessage_; }
    set {
      NotificationMessage_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 5;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 6;
  private global::ListOfStatusCode results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 7;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 2) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AvailableSequenceNumbers, other.AvailableSequenceNumbers)) return false;
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (MoreNotifications != other.MoreNotifications) return false;
    if (!object.Equals(NotificationMessage, other.NotificationMessage)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (availableSequenceNumbers_ != null) hash ^= AvailableSequenceNumbers.GetHashCode();
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (HasMoreNotifications) hash ^= MoreNotifications.GetHashCode();
    if (NotificationMessage_ != null) hash ^= NotificationMessage.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (availableSequenceNumbers_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AvailableSequenceNumbers);
    }
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DiagnosticInfos);
    }
    if (HasMoreNotifications) {
      output.WriteRawTag(24);
      output.WriteBool(MoreNotifications);
    }
    if (NotificationMessage_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NotificationMessage);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Results);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(56);
      output.WriteUInt32(SubscriptionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (availableSequenceNumbers_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvailableSequenceNumbers);
    }
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (HasMoreNotifications) {
      size += 1 + 1;
    }
    if (NotificationMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotificationMessage);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishResponse other) {
    if (other == null) {
      return;
    }
    if (other.availableSequenceNumbers_ != null) {
      if (availableSequenceNumbers_ == null) {
        AvailableSequenceNumbers = new global::ListOfUInt32();
      }
      AvailableSequenceNumbers.MergeFrom(other.AvailableSequenceNumbers);
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.HasMoreNotifications) {
      MoreNotifications = other.MoreNotifications;
    }
    if (other.NotificationMessage_ != null) {
      if (NotificationMessage_ == null) {
        NotificationMessage = new global::NotificationMessage();
      }
      NotificationMessage.MergeFrom(other.NotificationMessage);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfStatusCode();
      }
      Results.MergeFrom(other.Results);
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (availableSequenceNumbers_ == null) {
            AvailableSequenceNumbers = new global::ListOfUInt32();
          }
          input.ReadMessage(AvailableSequenceNumbers);
          break;
        }
        case 18: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 24: {
          MoreNotifications = input.ReadBool();
          break;
        }
        case 34: {
          if (NotificationMessage_ == null) {
            NotificationMessage = new global::NotificationMessage();
          }
          input.ReadMessage(NotificationMessage);
          break;
        }
        case 42: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 50: {
          if (results_ == null) {
            Results = new global::ListOfStatusCode();
          }
          input.ReadMessage(Results);
          break;
        }
        case 56: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PublishedDataItemsDataType : pb::IMessage<PublishedDataItemsDataType> {
  private static readonly pb::MessageParser<PublishedDataItemsDataType> _parser = new pb::MessageParser<PublishedDataItemsDataType>(() => new PublishedDataItemsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishedDataItemsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[416]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataItemsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataItemsDataType(PublishedDataItemsDataType other) : this() {
    publishedData_ = other.publishedData_ != null ? other.publishedData_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataItemsDataType Clone() {
    return new PublishedDataItemsDataType(this);
  }

  /// <summary>Field number for the "PublishedData" field.</summary>
  public const int PublishedDataFieldNumber = 1;
  private global::ListOfPublishedVariableDataType publishedData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfPublishedVariableDataType PublishedData {
    get { return publishedData_; }
    set {
      publishedData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishedDataItemsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishedDataItemsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PublishedData, other.PublishedData)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (publishedData_ != null) hash ^= PublishedData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (publishedData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PublishedData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (publishedData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishedData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishedDataItemsDataType other) {
    if (other == null) {
      return;
    }
    if (other.publishedData_ != null) {
      if (publishedData_ == null) {
        PublishedData = new global::ListOfPublishedVariableDataType();
      }
      PublishedData.MergeFrom(other.PublishedData);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (publishedData_ == null) {
            PublishedData = new global::ListOfPublishedVariableDataType();
          }
          input.ReadMessage(PublishedData);
          break;
        }
      }
    }
  }

}

public sealed partial class QueryDataDescription : pb::IMessage<QueryDataDescription> {
  private static readonly pb::MessageParser<QueryDataDescription> _parser = new pb::MessageParser<QueryDataDescription>(() => new QueryDataDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueryDataDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[417]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryDataDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryDataDescription(QueryDataDescription other) : this() {
    _hasBits0 = other._hasBits0;
    attributeId_ = other.attributeId_;
    indexRange_ = other.indexRange_;
    RelativePath_ = other.RelativePath_ != null ? other.RelativePath_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryDataDescription Clone() {
    return new QueryDataDescription(this);
  }

  /// <summary>Field number for the "AttributeId" field.</summary>
  public const int AttributeIdFieldNumber = 1;
  private readonly static uint AttributeIdDefaultValue = 0;

  private uint attributeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttributeId {
    get { if ((_hasBits0 & 1) != 0) { return attributeId_; } else { return AttributeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attributeId_ = value;
    }
  }
  /// <summary>Gets whether the "AttributeId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAttributeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "AttributeId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAttributeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "IndexRange" field.</summary>
  public const int IndexRangeFieldNumber = 2;
  private readonly static string IndexRangeDefaultValue = "";

  private string indexRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IndexRange {
    get { return indexRange_ ?? IndexRangeDefaultValue; }
    set {
      indexRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "IndexRange" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIndexRange {
    get { return indexRange_ != null; }
  }
  /// <summary>Clears the value of the "IndexRange" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIndexRange() {
    indexRange_ = null;
  }

  /// <summary>Field number for the "_RelativePath" field.</summary>
  public const int RelativePathFieldNumber = 3;
  private global::RelativePath RelativePath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RelativePath RelativePath {
    get { return RelativePath_; }
    set {
      RelativePath_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueryDataDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueryDataDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttributeId != other.AttributeId) return false;
    if (IndexRange != other.IndexRange) return false;
    if (!object.Equals(RelativePath, other.RelativePath)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAttributeId) hash ^= AttributeId.GetHashCode();
    if (HasIndexRange) hash ^= IndexRange.GetHashCode();
    if (RelativePath_ != null) hash ^= RelativePath.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAttributeId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AttributeId);
    }
    if (HasIndexRange) {
      output.WriteRawTag(18);
      output.WriteString(IndexRange);
    }
    if (RelativePath_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RelativePath);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAttributeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
    }
    if (HasIndexRange) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IndexRange);
    }
    if (RelativePath_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelativePath);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueryDataDescription other) {
    if (other == null) {
      return;
    }
    if (other.HasAttributeId) {
      AttributeId = other.AttributeId;
    }
    if (other.HasIndexRange) {
      IndexRange = other.IndexRange;
    }
    if (other.RelativePath_ != null) {
      if (RelativePath_ == null) {
        RelativePath = new global::RelativePath();
      }
      RelativePath.MergeFrom(other.RelativePath);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttributeId = input.ReadUInt32();
          break;
        }
        case 18: {
          IndexRange = input.ReadString();
          break;
        }
        case 26: {
          if (RelativePath_ == null) {
            RelativePath = new global::RelativePath();
          }
          input.ReadMessage(RelativePath);
          break;
        }
      }
    }
  }

}

public sealed partial class QueryNextRequest : pb::IMessage<QueryNextRequest> {
  private static readonly pb::MessageParser<QueryNextRequest> _parser = new pb::MessageParser<QueryNextRequest>(() => new QueryNextRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueryNextRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[418]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryNextRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryNextRequest(QueryNextRequest other) : this() {
    _hasBits0 = other._hasBits0;
    continuationPoint_ = other.continuationPoint_;
    releaseContinuationPoint_ = other.releaseContinuationPoint_;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryNextRequest Clone() {
    return new QueryNextRequest(this);
  }

  /// <summary>Field number for the "ContinuationPoint" field.</summary>
  public const int ContinuationPointFieldNumber = 1;
  private readonly static pb::ByteString ContinuationPointDefaultValue = pb::ByteString.Empty;

  private pb::ByteString continuationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ContinuationPoint {
    get { return continuationPoint_ ?? ContinuationPointDefaultValue; }
    set {
      continuationPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ContinuationPoint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContinuationPoint {
    get { return continuationPoint_ != null; }
  }
  /// <summary>Clears the value of the "ContinuationPoint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContinuationPoint() {
    continuationPoint_ = null;
  }

  /// <summary>Field number for the "ReleaseContinuationPoint" field.</summary>
  public const int ReleaseContinuationPointFieldNumber = 2;
  private readonly static bool ReleaseContinuationPointDefaultValue = false;

  private bool releaseContinuationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReleaseContinuationPoint {
    get { if ((_hasBits0 & 1) != 0) { return releaseContinuationPoint_; } else { return ReleaseContinuationPointDefaultValue; } }
    set {
      _hasBits0 |= 1;
      releaseContinuationPoint_ = value;
    }
  }
  /// <summary>Gets whether the "ReleaseContinuationPoint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReleaseContinuationPoint {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ReleaseContinuationPoint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReleaseContinuationPoint() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueryNextRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueryNextRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ContinuationPoint != other.ContinuationPoint) return false;
    if (ReleaseContinuationPoint != other.ReleaseContinuationPoint) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasContinuationPoint) hash ^= ContinuationPoint.GetHashCode();
    if (HasReleaseContinuationPoint) hash ^= ReleaseContinuationPoint.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasContinuationPoint) {
      output.WriteRawTag(10);
      output.WriteBytes(ContinuationPoint);
    }
    if (HasReleaseContinuationPoint) {
      output.WriteRawTag(16);
      output.WriteBool(ReleaseContinuationPoint);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasContinuationPoint) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationPoint);
    }
    if (HasReleaseContinuationPoint) {
      size += 1 + 1;
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueryNextRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasContinuationPoint) {
      ContinuationPoint = other.ContinuationPoint;
    }
    if (other.HasReleaseContinuationPoint) {
      ReleaseContinuationPoint = other.ReleaseContinuationPoint;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContinuationPoint = input.ReadBytes();
          break;
        }
        case 16: {
          ReleaseContinuationPoint = input.ReadBool();
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class QueryNextResponse : pb::IMessage<QueryNextResponse> {
  private static readonly pb::MessageParser<QueryNextResponse> _parser = new pb::MessageParser<QueryNextResponse>(() => new QueryNextResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueryNextResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[419]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryNextResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryNextResponse(QueryNextResponse other) : this() {
    queryDataSets_ = other.queryDataSets_ != null ? other.queryDataSets_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    revisedContinuationPoint_ = other.revisedContinuationPoint_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryNextResponse Clone() {
    return new QueryNextResponse(this);
  }

  /// <summary>Field number for the "QueryDataSets" field.</summary>
  public const int QueryDataSetsFieldNumber = 1;
  private global::ListOfQueryDataSet queryDataSets_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfQueryDataSet QueryDataSets {
    get { return queryDataSets_; }
    set {
      queryDataSets_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "RevisedContinuationPoint" field.</summary>
  public const int RevisedContinuationPointFieldNumber = 3;
  private readonly static pb::ByteString RevisedContinuationPointDefaultValue = pb::ByteString.Empty;

  private pb::ByteString revisedContinuationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RevisedContinuationPoint {
    get { return revisedContinuationPoint_ ?? RevisedContinuationPointDefaultValue; }
    set {
      revisedContinuationPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "RevisedContinuationPoint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedContinuationPoint {
    get { return revisedContinuationPoint_ != null; }
  }
  /// <summary>Clears the value of the "RevisedContinuationPoint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedContinuationPoint() {
    revisedContinuationPoint_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueryNextResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueryNextResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QueryDataSets, other.QueryDataSets)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (RevisedContinuationPoint != other.RevisedContinuationPoint) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (queryDataSets_ != null) hash ^= QueryDataSets.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (HasRevisedContinuationPoint) hash ^= RevisedContinuationPoint.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (queryDataSets_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QueryDataSets);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (HasRevisedContinuationPoint) {
      output.WriteRawTag(26);
      output.WriteBytes(RevisedContinuationPoint);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (queryDataSets_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryDataSets);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (HasRevisedContinuationPoint) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RevisedContinuationPoint);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueryNextResponse other) {
    if (other == null) {
      return;
    }
    if (other.queryDataSets_ != null) {
      if (queryDataSets_ == null) {
        QueryDataSets = new global::ListOfQueryDataSet();
      }
      QueryDataSets.MergeFrom(other.QueryDataSets);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.HasRevisedContinuationPoint) {
      RevisedContinuationPoint = other.RevisedContinuationPoint;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (queryDataSets_ == null) {
            QueryDataSets = new global::ListOfQueryDataSet();
          }
          input.ReadMessage(QueryDataSets);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          RevisedContinuationPoint = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class ReadRequest : pb::IMessage<ReadRequest> {
  private static readonly pb::MessageParser<ReadRequest> _parser = new pb::MessageParser<ReadRequest>(() => new ReadRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[420]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadRequest(ReadRequest other) : this() {
    _hasBits0 = other._hasBits0;
    maxAge_ = other.maxAge_;
    nodesToRead_ = other.nodesToRead_ != null ? other.nodesToRead_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    TimestampsToReturn_ = other.TimestampsToReturn_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadRequest Clone() {
    return new ReadRequest(this);
  }

  /// <summary>Field number for the "MaxAge" field.</summary>
  public const int MaxAgeFieldNumber = 1;
  private readonly static double MaxAgeDefaultValue = 0D;

  private double maxAge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MaxAge {
    get { if ((_hasBits0 & 1) != 0) { return maxAge_; } else { return MaxAgeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      maxAge_ = value;
    }
  }
  /// <summary>Gets whether the "MaxAge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxAge {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MaxAge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxAge() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "NodesToRead" field.</summary>
  public const int NodesToReadFieldNumber = 2;
  private global::ListOfReadValueId nodesToRead_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReadValueId NodesToRead {
    get { return nodesToRead_; }
    set {
      nodesToRead_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 3;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "_TimestampsToReturn" field.</summary>
  public const int TimestampsToReturnFieldNumber = 4;
  private readonly static global::ReadRequest.Types.TimestampsToReturn TimestampsToReturnDefaultValue = global::ReadRequest.Types.TimestampsToReturn.Both2;

  private global::ReadRequest.Types.TimestampsToReturn TimestampsToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReadRequest.Types.TimestampsToReturn TimestampsToReturn {
    get { if ((_hasBits0 & 2) != 0) { return TimestampsToReturn_; } else { return TimestampsToReturnDefaultValue; } }
    set {
      _hasBits0 |= 2;
      TimestampsToReturn_ = value;
    }
  }
  /// <summary>Gets whether the "_TimestampsToReturn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestampsToReturn {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "_TimestampsToReturn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestampsToReturn() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxAge, other.MaxAge)) return false;
    if (!object.Equals(NodesToRead, other.NodesToRead)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (TimestampsToReturn != other.TimestampsToReturn) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMaxAge) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxAge);
    if (nodesToRead_ != null) hash ^= NodesToRead.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasTimestampsToReturn) hash ^= TimestampsToReturn.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMaxAge) {
      output.WriteRawTag(9);
      output.WriteDouble(MaxAge);
    }
    if (nodesToRead_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NodesToRead);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RequestHeader);
    }
    if (HasTimestampsToReturn) {
      output.WriteRawTag(32);
      output.WriteEnum((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMaxAge) {
      size += 1 + 8;
    }
    if (nodesToRead_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToRead);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasTimestampsToReturn) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasMaxAge) {
      MaxAge = other.MaxAge;
    }
    if (other.nodesToRead_ != null) {
      if (nodesToRead_ == null) {
        NodesToRead = new global::ListOfReadValueId();
      }
      NodesToRead.MergeFrom(other.NodesToRead);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasTimestampsToReturn) {
      TimestampsToReturn = other.TimestampsToReturn;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          MaxAge = input.ReadDouble();
          break;
        }
        case 18: {
          if (nodesToRead_ == null) {
            NodesToRead = new global::ListOfReadValueId();
          }
          input.ReadMessage(NodesToRead);
          break;
        }
        case 26: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 32: {
          TimestampsToReturn = (global::ReadRequest.Types.TimestampsToReturn) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ReadRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TimestampsToReturn {
      [pbr::OriginalName("TimestampsToReturn_Both_2")] Both2 = 1,
      [pbr::OriginalName("TimestampsToReturn_Invalid_4")] Invalid4 = 2,
      [pbr::OriginalName("TimestampsToReturn_Neither_3")] Neither3 = 3,
      [pbr::OriginalName("TimestampsToReturn_Server_1")] Server1 = 4,
      [pbr::OriginalName("TimestampsToReturn_Source_0")] Source0 = 5,
    }

  }
  #endregion

}

public sealed partial class ReadResponse : pb::IMessage<ReadResponse> {
  private static readonly pb::MessageParser<ReadResponse> _parser = new pb::MessageParser<ReadResponse>(() => new ReadResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[421]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadResponse(ReadResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadResponse Clone() {
    return new ReadResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfDataValue results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataValue Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfDataValue();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfDataValue();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterNodesRequest : pb::IMessage<RegisterNodesRequest> {
  private static readonly pb::MessageParser<RegisterNodesRequest> _parser = new pb::MessageParser<RegisterNodesRequest>(() => new RegisterNodesRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterNodesRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[422]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterNodesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterNodesRequest(RegisterNodesRequest other) : this() {
    nodesToRegister_ = other.nodesToRegister_ != null ? other.nodesToRegister_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterNodesRequest Clone() {
    return new RegisterNodesRequest(this);
  }

  /// <summary>Field number for the "NodesToRegister" field.</summary>
  public const int NodesToRegisterFieldNumber = 1;
  private global::ListOfNodeId nodesToRegister_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfNodeId NodesToRegister {
    get { return nodesToRegister_; }
    set {
      nodesToRegister_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterNodesRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterNodesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodesToRegister, other.NodesToRegister)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nodesToRegister_ != null) hash ^= NodesToRegister.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nodesToRegister_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodesToRegister);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nodesToRegister_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToRegister);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterNodesRequest other) {
    if (other == null) {
      return;
    }
    if (other.nodesToRegister_ != null) {
      if (nodesToRegister_ == null) {
        NodesToRegister = new global::ListOfNodeId();
      }
      NodesToRegister.MergeFrom(other.NodesToRegister);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nodesToRegister_ == null) {
            NodesToRegister = new global::ListOfNodeId();
          }
          input.ReadMessage(NodesToRegister);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterNodesResponse : pb::IMessage<RegisterNodesResponse> {
  private static readonly pb::MessageParser<RegisterNodesResponse> _parser = new pb::MessageParser<RegisterNodesResponse>(() => new RegisterNodesResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterNodesResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[423]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterNodesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterNodesResponse(RegisterNodesResponse other) : this() {
    registeredNodeIds_ = other.registeredNodeIds_ != null ? other.registeredNodeIds_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterNodesResponse Clone() {
    return new RegisterNodesResponse(this);
  }

  /// <summary>Field number for the "RegisteredNodeIds" field.</summary>
  public const int RegisteredNodeIdsFieldNumber = 1;
  private global::ListOfNodeId registeredNodeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfNodeId RegisteredNodeIds {
    get { return registeredNodeIds_; }
    set {
      registeredNodeIds_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterNodesResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterNodesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RegisteredNodeIds, other.RegisteredNodeIds)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (registeredNodeIds_ != null) hash ^= RegisteredNodeIds.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (registeredNodeIds_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RegisteredNodeIds);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (registeredNodeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisteredNodeIds);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterNodesResponse other) {
    if (other == null) {
      return;
    }
    if (other.registeredNodeIds_ != null) {
      if (registeredNodeIds_ == null) {
        RegisteredNodeIds = new global::ListOfNodeId();
      }
      RegisteredNodeIds.MergeFrom(other.RegisteredNodeIds);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (registeredNodeIds_ == null) {
            RegisteredNodeIds = new global::ListOfNodeId();
          }
          input.ReadMessage(RegisteredNodeIds);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterServer2Request : pb::IMessage<RegisterServer2Request> {
  private static readonly pb::MessageParser<RegisterServer2Request> _parser = new pb::MessageParser<RegisterServer2Request>(() => new RegisterServer2Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterServer2Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[424]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServer2Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServer2Request(RegisterServer2Request other) : this() {
    discoveryConfiguration_ = other.discoveryConfiguration_ != null ? other.discoveryConfiguration_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    server_ = other.server_ != null ? other.server_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServer2Request Clone() {
    return new RegisterServer2Request(this);
  }

  /// <summary>Field number for the "DiscoveryConfiguration" field.</summary>
  public const int DiscoveryConfigurationFieldNumber = 1;
  private global::ListOfExtensionObject discoveryConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfExtensionObject DiscoveryConfiguration {
    get { return discoveryConfiguration_; }
    set {
      discoveryConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "Server" field.</summary>
  public const int ServerFieldNumber = 3;
  private global::RegisteredServer server_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RegisteredServer Server {
    get { return server_; }
    set {
      server_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterServer2Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterServer2Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiscoveryConfiguration, other.DiscoveryConfiguration)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(Server, other.Server)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (discoveryConfiguration_ != null) hash ^= DiscoveryConfiguration.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (server_ != null) hash ^= Server.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (discoveryConfiguration_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiscoveryConfiguration);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (server_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Server);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (discoveryConfiguration_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscoveryConfiguration);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (server_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterServer2Request other) {
    if (other == null) {
      return;
    }
    if (other.discoveryConfiguration_ != null) {
      if (discoveryConfiguration_ == null) {
        DiscoveryConfiguration = new global::ListOfExtensionObject();
      }
      DiscoveryConfiguration.MergeFrom(other.DiscoveryConfiguration);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.server_ != null) {
      if (server_ == null) {
        Server = new global::RegisteredServer();
      }
      Server.MergeFrom(other.Server);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (discoveryConfiguration_ == null) {
            DiscoveryConfiguration = new global::ListOfExtensionObject();
          }
          input.ReadMessage(DiscoveryConfiguration);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 26: {
          if (server_ == null) {
            Server = new global::RegisteredServer();
          }
          input.ReadMessage(Server);
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterServer2Response : pb::IMessage<RegisterServer2Response> {
  private static readonly pb::MessageParser<RegisterServer2Response> _parser = new pb::MessageParser<RegisterServer2Response>(() => new RegisterServer2Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterServer2Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[425]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServer2Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServer2Response(RegisterServer2Response other) : this() {
    configurationResults_ = other.configurationResults_ != null ? other.configurationResults_.Clone() : null;
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServer2Response Clone() {
    return new RegisterServer2Response(this);
  }

  /// <summary>Field number for the "ConfigurationResults" field.</summary>
  public const int ConfigurationResultsFieldNumber = 1;
  private global::ListOfStatusCode configurationResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode ConfigurationResults {
    get { return configurationResults_; }
    set {
      configurationResults_ = value;
    }
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 2;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 3;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterServer2Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterServer2Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConfigurationResults, other.ConfigurationResults)) return false;
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (configurationResults_ != null) hash ^= ConfigurationResults.GetHashCode();
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (configurationResults_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConfigurationResults);
    }
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (configurationResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigurationResults);
    }
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterServer2Response other) {
    if (other == null) {
      return;
    }
    if (other.configurationResults_ != null) {
      if (configurationResults_ == null) {
        ConfigurationResults = new global::ListOfStatusCode();
      }
      ConfigurationResults.MergeFrom(other.ConfigurationResults);
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (configurationResults_ == null) {
            ConfigurationResults = new global::ListOfStatusCode();
          }
          input.ReadMessage(ConfigurationResults);
          break;
        }
        case 18: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 26: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterServerRequest : pb::IMessage<RegisterServerRequest> {
  private static readonly pb::MessageParser<RegisterServerRequest> _parser = new pb::MessageParser<RegisterServerRequest>(() => new RegisterServerRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterServerRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[426]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerRequest(RegisterServerRequest other) : this() {
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    server_ = other.server_ != null ? other.server_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerRequest Clone() {
    return new RegisterServerRequest(this);
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "Server" field.</summary>
  public const int ServerFieldNumber = 2;
  private global::RegisteredServer server_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RegisteredServer Server {
    get { return server_; }
    set {
      server_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterServerRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterServerRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(Server, other.Server)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (server_ != null) hash ^= Server.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (server_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Server);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (server_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterServerRequest other) {
    if (other == null) {
      return;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.server_ != null) {
      if (server_ == null) {
        Server = new global::RegisteredServer();
      }
      Server.MergeFrom(other.Server);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 18: {
          if (server_ == null) {
            Server = new global::RegisteredServer();
          }
          input.ReadMessage(Server);
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterServerResponse : pb::IMessage<RegisterServerResponse> {
  private static readonly pb::MessageParser<RegisterServerResponse> _parser = new pb::MessageParser<RegisterServerResponse>(() => new RegisterServerResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterServerResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[427]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerResponse(RegisterServerResponse other) : this() {
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterServerResponse Clone() {
    return new RegisterServerResponse(this);
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterServerResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterServerResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResponseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterServerResponse other) {
    if (other == null) {
      return;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class RepublishRequest : pb::IMessage<RepublishRequest> {
  private static readonly pb::MessageParser<RepublishRequest> _parser = new pb::MessageParser<RepublishRequest>(() => new RepublishRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RepublishRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[428]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RepublishRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RepublishRequest(RepublishRequest other) : this() {
    _hasBits0 = other._hasBits0;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    retransmitSequenceNumber_ = other.retransmitSequenceNumber_;
    subscriptionId_ = other.subscriptionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RepublishRequest Clone() {
    return new RepublishRequest(this);
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "RetransmitSequenceNumber" field.</summary>
  public const int RetransmitSequenceNumberFieldNumber = 2;
  private readonly static uint RetransmitSequenceNumberDefaultValue = 0;

  private uint retransmitSequenceNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RetransmitSequenceNumber {
    get { if ((_hasBits0 & 1) != 0) { return retransmitSequenceNumber_; } else { return RetransmitSequenceNumberDefaultValue; } }
    set {
      _hasBits0 |= 1;
      retransmitSequenceNumber_ = value;
    }
  }
  /// <summary>Gets whether the "RetransmitSequenceNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRetransmitSequenceNumber {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RetransmitSequenceNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRetransmitSequenceNumber() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 3;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 2) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RepublishRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RepublishRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (RetransmitSequenceNumber != other.RetransmitSequenceNumber) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasRetransmitSequenceNumber) hash ^= RetransmitSequenceNumber.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (HasRetransmitSequenceNumber) {
      output.WriteRawTag(16);
      output.WriteUInt32(RetransmitSequenceNumber);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(24);
      output.WriteUInt32(SubscriptionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasRetransmitSequenceNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RetransmitSequenceNumber);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RepublishRequest other) {
    if (other == null) {
      return;
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasRetransmitSequenceNumber) {
      RetransmitSequenceNumber = other.RetransmitSequenceNumber;
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 16: {
          RetransmitSequenceNumber = input.ReadUInt32();
          break;
        }
        case 24: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RepublishResponse : pb::IMessage<RepublishResponse> {
  private static readonly pb::MessageParser<RepublishResponse> _parser = new pb::MessageParser<RepublishResponse>(() => new RepublishResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RepublishResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[429]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RepublishResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RepublishResponse(RepublishResponse other) : this() {
    NotificationMessage_ = other.NotificationMessage_ != null ? other.NotificationMessage_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RepublishResponse Clone() {
    return new RepublishResponse(this);
  }

  /// <summary>Field number for the "_NotificationMessage" field.</summary>
  public const int NotificationMessageFieldNumber = 1;
  private global::NotificationMessage NotificationMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NotificationMessage NotificationMessage {
    get { return NotificationMessage_; }
    set {
      NotificationMessage_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RepublishResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RepublishResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NotificationMessage, other.NotificationMessage)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NotificationMessage_ != null) hash ^= NotificationMessage.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NotificationMessage_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NotificationMessage);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NotificationMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotificationMessage);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RepublishResponse other) {
    if (other == null) {
      return;
    }
    if (other.NotificationMessage_ != null) {
      if (NotificationMessage_ == null) {
        NotificationMessage = new global::NotificationMessage();
      }
      NotificationMessage.MergeFrom(other.NotificationMessage);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (NotificationMessage_ == null) {
            NotificationMessage = new global::NotificationMessage();
          }
          input.ReadMessage(NotificationMessage);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class TranslateBrowsePathsToNodeIdsRequest : pb::IMessage<TranslateBrowsePathsToNodeIdsRequest> {
  private static readonly pb::MessageParser<TranslateBrowsePathsToNodeIdsRequest> _parser = new pb::MessageParser<TranslateBrowsePathsToNodeIdsRequest>(() => new TranslateBrowsePathsToNodeIdsRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TranslateBrowsePathsToNodeIdsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[430]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TranslateBrowsePathsToNodeIdsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TranslateBrowsePathsToNodeIdsRequest(TranslateBrowsePathsToNodeIdsRequest other) : this() {
    browsePaths_ = other.browsePaths_ != null ? other.browsePaths_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TranslateBrowsePathsToNodeIdsRequest Clone() {
    return new TranslateBrowsePathsToNodeIdsRequest(this);
  }

  /// <summary>Field number for the "BrowsePaths" field.</summary>
  public const int BrowsePathsFieldNumber = 1;
  private global::ListOfBrowsePath browsePaths_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfBrowsePath BrowsePaths {
    get { return browsePaths_; }
    set {
      browsePaths_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TranslateBrowsePathsToNodeIdsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TranslateBrowsePathsToNodeIdsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BrowsePaths, other.BrowsePaths)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (browsePaths_ != null) hash ^= BrowsePaths.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (browsePaths_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BrowsePaths);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (browsePaths_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrowsePaths);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TranslateBrowsePathsToNodeIdsRequest other) {
    if (other == null) {
      return;
    }
    if (other.browsePaths_ != null) {
      if (browsePaths_ == null) {
        BrowsePaths = new global::ListOfBrowsePath();
      }
      BrowsePaths.MergeFrom(other.BrowsePaths);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (browsePaths_ == null) {
            BrowsePaths = new global::ListOfBrowsePath();
          }
          input.ReadMessage(BrowsePaths);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class TranslateBrowsePathsToNodeIdsResponse : pb::IMessage<TranslateBrowsePathsToNodeIdsResponse> {
  private static readonly pb::MessageParser<TranslateBrowsePathsToNodeIdsResponse> _parser = new pb::MessageParser<TranslateBrowsePathsToNodeIdsResponse>(() => new TranslateBrowsePathsToNodeIdsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TranslateBrowsePathsToNodeIdsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[431]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TranslateBrowsePathsToNodeIdsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TranslateBrowsePathsToNodeIdsResponse(TranslateBrowsePathsToNodeIdsResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TranslateBrowsePathsToNodeIdsResponse Clone() {
    return new TranslateBrowsePathsToNodeIdsResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfBrowsePathResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfBrowsePathResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TranslateBrowsePathsToNodeIdsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TranslateBrowsePathsToNodeIdsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TranslateBrowsePathsToNodeIdsResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfBrowsePathResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfBrowsePathResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class UABinaryFileDataType : pb::IMessage<UABinaryFileDataType> {
  private static readonly pb::MessageParser<UABinaryFileDataType> _parser = new pb::MessageParser<UABinaryFileDataType>(() => new UABinaryFileDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UABinaryFileDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[432]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UABinaryFileDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UABinaryFileDataType(UABinaryFileDataType other) : this() {
    body_ = other.body_ != null ? other.body_.Clone() : null;
    enumDataTypes_ = other.enumDataTypes_ != null ? other.enumDataTypes_.Clone() : null;
    fileHeader_ = other.fileHeader_ != null ? other.fileHeader_.Clone() : null;
    namespaces_ = other.namespaces_ != null ? other.namespaces_.Clone() : null;
    schemaLocation_ = other.schemaLocation_;
    simpleDataTypes_ = other.simpleDataTypes_ != null ? other.simpleDataTypes_.Clone() : null;
    structureDataTypes_ = other.structureDataTypes_ != null ? other.structureDataTypes_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UABinaryFileDataType Clone() {
    return new UABinaryFileDataType(this);
  }

  /// <summary>Field number for the "Body" field.</summary>
  public const int BodyFieldNumber = 1;
  private global::Variant body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Body {
    get { return body_; }
    set {
      body_ = value;
    }
  }

  /// <summary>Field number for the "EnumDataTypes" field.</summary>
  public const int EnumDataTypesFieldNumber = 2;
  private global::ListOfEnumDescription enumDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEnumDescription EnumDataTypes {
    get { return enumDataTypes_; }
    set {
      enumDataTypes_ = value;
    }
  }

  /// <summary>Field number for the "FileHeader" field.</summary>
  public const int FileHeaderFieldNumber = 3;
  private global::ListOfKeyValuePair fileHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair FileHeader {
    get { return fileHeader_; }
    set {
      fileHeader_ = value;
    }
  }

  /// <summary>Field number for the "Namespaces" field.</summary>
  public const int NamespacesFieldNumber = 4;
  private global::ListOfString namespaces_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString Namespaces {
    get { return namespaces_; }
    set {
      namespaces_ = value;
    }
  }

  /// <summary>Field number for the "SchemaLocation" field.</summary>
  public const int SchemaLocationFieldNumber = 5;
  private readonly static string SchemaLocationDefaultValue = "";

  private string schemaLocation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SchemaLocation {
    get { return schemaLocation_ ?? SchemaLocationDefaultValue; }
    set {
      schemaLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SchemaLocation" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSchemaLocation {
    get { return schemaLocation_ != null; }
  }
  /// <summary>Clears the value of the "SchemaLocation" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSchemaLocation() {
    schemaLocation_ = null;
  }

  /// <summary>Field number for the "SimpleDataTypes" field.</summary>
  public const int SimpleDataTypesFieldNumber = 6;
  private global::ListOfSimpleTypeDescription simpleDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSimpleTypeDescription SimpleDataTypes {
    get { return simpleDataTypes_; }
    set {
      simpleDataTypes_ = value;
    }
  }

  /// <summary>Field number for the "StructureDataTypes" field.</summary>
  public const int StructureDataTypesFieldNumber = 7;
  private global::ListOfStructureDescription structureDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStructureDescription StructureDataTypes {
    get { return structureDataTypes_; }
    set {
      structureDataTypes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UABinaryFileDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UABinaryFileDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Body, other.Body)) return false;
    if (!object.Equals(EnumDataTypes, other.EnumDataTypes)) return false;
    if (!object.Equals(FileHeader, other.FileHeader)) return false;
    if (!object.Equals(Namespaces, other.Namespaces)) return false;
    if (SchemaLocation != other.SchemaLocation) return false;
    if (!object.Equals(SimpleDataTypes, other.SimpleDataTypes)) return false;
    if (!object.Equals(StructureDataTypes, other.StructureDataTypes)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (body_ != null) hash ^= Body.GetHashCode();
    if (enumDataTypes_ != null) hash ^= EnumDataTypes.GetHashCode();
    if (fileHeader_ != null) hash ^= FileHeader.GetHashCode();
    if (namespaces_ != null) hash ^= Namespaces.GetHashCode();
    if (HasSchemaLocation) hash ^= SchemaLocation.GetHashCode();
    if (simpleDataTypes_ != null) hash ^= SimpleDataTypes.GetHashCode();
    if (structureDataTypes_ != null) hash ^= StructureDataTypes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (body_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Body);
    }
    if (enumDataTypes_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(EnumDataTypes);
    }
    if (fileHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(FileHeader);
    }
    if (namespaces_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Namespaces);
    }
    if (HasSchemaLocation) {
      output.WriteRawTag(42);
      output.WriteString(SchemaLocation);
    }
    if (simpleDataTypes_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(SimpleDataTypes);
    }
    if (structureDataTypes_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(StructureDataTypes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (body_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
    }
    if (enumDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnumDataTypes);
    }
    if (fileHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileHeader);
    }
    if (namespaces_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Namespaces);
    }
    if (HasSchemaLocation) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaLocation);
    }
    if (simpleDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleDataTypes);
    }
    if (structureDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructureDataTypes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UABinaryFileDataType other) {
    if (other == null) {
      return;
    }
    if (other.body_ != null) {
      if (body_ == null) {
        Body = new global::Variant();
      }
      Body.MergeFrom(other.Body);
    }
    if (other.enumDataTypes_ != null) {
      if (enumDataTypes_ == null) {
        EnumDataTypes = new global::ListOfEnumDescription();
      }
      EnumDataTypes.MergeFrom(other.EnumDataTypes);
    }
    if (other.fileHeader_ != null) {
      if (fileHeader_ == null) {
        FileHeader = new global::ListOfKeyValuePair();
      }
      FileHeader.MergeFrom(other.FileHeader);
    }
    if (other.namespaces_ != null) {
      if (namespaces_ == null) {
        Namespaces = new global::ListOfString();
      }
      Namespaces.MergeFrom(other.Namespaces);
    }
    if (other.HasSchemaLocation) {
      SchemaLocation = other.SchemaLocation;
    }
    if (other.simpleDataTypes_ != null) {
      if (simpleDataTypes_ == null) {
        SimpleDataTypes = new global::ListOfSimpleTypeDescription();
      }
      SimpleDataTypes.MergeFrom(other.SimpleDataTypes);
    }
    if (other.structureDataTypes_ != null) {
      if (structureDataTypes_ == null) {
        StructureDataTypes = new global::ListOfStructureDescription();
      }
      StructureDataTypes.MergeFrom(other.StructureDataTypes);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (body_ == null) {
            Body = new global::Variant();
          }
          input.ReadMessage(Body);
          break;
        }
        case 18: {
          if (enumDataTypes_ == null) {
            EnumDataTypes = new global::ListOfEnumDescription();
          }
          input.ReadMessage(EnumDataTypes);
          break;
        }
        case 26: {
          if (fileHeader_ == null) {
            FileHeader = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(FileHeader);
          break;
        }
        case 34: {
          if (namespaces_ == null) {
            Namespaces = new global::ListOfString();
          }
          input.ReadMessage(Namespaces);
          break;
        }
        case 42: {
          SchemaLocation = input.ReadString();
          break;
        }
        case 50: {
          if (simpleDataTypes_ == null) {
            SimpleDataTypes = new global::ListOfSimpleTypeDescription();
          }
          input.ReadMessage(SimpleDataTypes);
          break;
        }
        case 58: {
          if (structureDataTypes_ == null) {
            StructureDataTypes = new global::ListOfStructureDescription();
          }
          input.ReadMessage(StructureDataTypes);
          break;
        }
      }
    }
  }

}

public sealed partial class WriteRequest : pb::IMessage<WriteRequest> {
  private static readonly pb::MessageParser<WriteRequest> _parser = new pb::MessageParser<WriteRequest>(() => new WriteRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WriteRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[433]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteRequest(WriteRequest other) : this() {
    nodesToWrite_ = other.nodesToWrite_ != null ? other.nodesToWrite_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriteRequest Clone() {
    return new WriteRequest(this);
  }

  /// <summary>Field number for the "NodesToWrite" field.</summary>
  public const int NodesToWriteFieldNumber = 1;
  private global::ListOfWriteValue nodesToWrite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfWriteValue NodesToWrite {
    get { return nodesToWrite_; }
    set {
      nodesToWrite_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WriteRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WriteRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodesToWrite, other.NodesToWrite)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nodesToWrite_ != null) hash ^= NodesToWrite.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nodesToWrite_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodesToWrite);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nodesToWrite_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToWrite);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WriteRequest other) {
    if (other == null) {
      return;
    }
    if (other.nodesToWrite_ != null) {
      if (nodesToWrite_ == null) {
        NodesToWrite = new global::ListOfWriteValue();
      }
      NodesToWrite.MergeFrom(other.NodesToWrite);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nodesToWrite_ == null) {
            NodesToWrite = new global::ListOfWriteValue();
          }
          input.ReadMessage(NodesToWrite);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class WriterGroupDataType : pb::IMessage<WriterGroupDataType> {
  private static readonly pb::MessageParser<WriterGroupDataType> _parser = new pb::MessageParser<WriterGroupDataType>(() => new WriterGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WriterGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[434]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupDataType(WriterGroupDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetWriters_ = other.dataSetWriters_ != null ? other.dataSetWriters_.Clone() : null;
    enabled_ = other.enabled_;
    groupProperties_ = other.groupProperties_ != null ? other.groupProperties_.Clone() : null;
    headerLayoutUri_ = other.headerLayoutUri_;
    keepAliveTime_ = other.keepAliveTime_;
    localeIds_ = other.localeIds_ != null ? other.localeIds_.Clone() : null;
    maxNetworkMessageSize_ = other.maxNetworkMessageSize_;
    messageSettings_ = other.messageSettings_ != null ? other.messageSettings_.Clone() : null;
    name_ = other.name_;
    priority_ = other.priority_;
    publishingInterval_ = other.publishingInterval_;
    securityGroupId_ = other.securityGroupId_;
    securityKeyServices_ = other.securityKeyServices_ != null ? other.securityKeyServices_.Clone() : null;
    securityMode_ = other.securityMode_;
    transportSettings_ = other.transportSettings_ != null ? other.transportSettings_.Clone() : null;
    writerGroupId_ = other.writerGroupId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WriterGroupDataType Clone() {
    return new WriterGroupDataType(this);
  }

  /// <summary>Field number for the "DataSetWriters" field.</summary>
  public const int DataSetWritersFieldNumber = 1;
  private global::ListOfDataSetWriterDataType dataSetWriters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataSetWriterDataType DataSetWriters {
    get { return dataSetWriters_; }
    set {
      dataSetWriters_ = value;
    }
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 2;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { if ((_hasBits0 & 1) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "Enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "GroupProperties" field.</summary>
  public const int GroupPropertiesFieldNumber = 3;
  private global::ListOfKeyValuePair groupProperties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair GroupProperties {
    get { return groupProperties_; }
    set {
      groupProperties_ = value;
    }
  }

  /// <summary>Field number for the "HeaderLayoutUri" field.</summary>
  public const int HeaderLayoutUriFieldNumber = 4;
  private readonly static string HeaderLayoutUriDefaultValue = "";

  private string headerLayoutUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeaderLayoutUri {
    get { return headerLayoutUri_ ?? HeaderLayoutUriDefaultValue; }
    set {
      headerLayoutUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "HeaderLayoutUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeaderLayoutUri {
    get { return headerLayoutUri_ != null; }
  }
  /// <summary>Clears the value of the "HeaderLayoutUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeaderLayoutUri() {
    headerLayoutUri_ = null;
  }

  /// <summary>Field number for the "KeepAliveTime" field.</summary>
  public const int KeepAliveTimeFieldNumber = 5;
  private readonly static double KeepAliveTimeDefaultValue = 0D;

  private double keepAliveTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double KeepAliveTime {
    get { if ((_hasBits0 & 2) != 0) { return keepAliveTime_; } else { return KeepAliveTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      keepAliveTime_ = value;
    }
  }
  /// <summary>Gets whether the "KeepAliveTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasKeepAliveTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "KeepAliveTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearKeepAliveTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "LocaleIds" field.</summary>
  public const int LocaleIdsFieldNumber = 6;
  private global::ListOfString localeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString LocaleIds {
    get { return localeIds_; }
    set {
      localeIds_ = value;
    }
  }

  /// <summary>Field number for the "MaxNetworkMessageSize" field.</summary>
  public const int MaxNetworkMessageSizeFieldNumber = 7;
  private readonly static uint MaxNetworkMessageSizeDefaultValue = 0;

  private uint maxNetworkMessageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxNetworkMessageSize {
    get { if ((_hasBits0 & 4) != 0) { return maxNetworkMessageSize_; } else { return MaxNetworkMessageSizeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      maxNetworkMessageSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxNetworkMessageSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxNetworkMessageSize {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "MaxNetworkMessageSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxNetworkMessageSize() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "MessageSettings" field.</summary>
  public const int MessageSettingsFieldNumber = 8;
  private global::ExtensionObject messageSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject MessageSettings {
    get { return messageSettings_; }
    set {
      messageSettings_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 9;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "Priority" field.</summary>
  public const int PriorityFieldNumber = 10;
  private readonly static uint PriorityDefaultValue = 0;

  private uint priority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Priority {
    get { if ((_hasBits0 & 8) != 0) { return priority_; } else { return PriorityDefaultValue; } }
    set {
      _hasBits0 |= 8;
      priority_ = value;
    }
  }
  /// <summary>Gets whether the "Priority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPriority {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Priority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPriority() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "PublishingInterval" field.</summary>
  public const int PublishingIntervalFieldNumber = 11;
  private readonly static double PublishingIntervalDefaultValue = 0D;

  private double publishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double PublishingInterval {
    get { if ((_hasBits0 & 16) != 0) { return publishingInterval_; } else { return PublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 16;
      publishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingInterval {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "PublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingInterval() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "SecurityGroupId" field.</summary>
  public const int SecurityGroupIdFieldNumber = 12;
  private readonly static string SecurityGroupIdDefaultValue = "";

  private string securityGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityGroupId {
    get { return securityGroupId_ ?? SecurityGroupIdDefaultValue; }
    set {
      securityGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityGroupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityGroupId {
    get { return securityGroupId_ != null; }
  }
  /// <summary>Clears the value of the "SecurityGroupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityGroupId() {
    securityGroupId_ = null;
  }

  /// <summary>Field number for the "SecurityKeyServices" field.</summary>
  public const int SecurityKeyServicesFieldNumber = 13;
  private global::ListOfEndpointDescription securityKeyServices_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEndpointDescription SecurityKeyServices {
    get { return securityKeyServices_; }
    set {
      securityKeyServices_ = value;
    }
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 14;
  private readonly static global::WriterGroupDataType.Types.MessageSecurityMode SecurityModeDefaultValue = global::WriterGroupDataType.Types.MessageSecurityMode.Invalid0;

  private global::WriterGroupDataType.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WriterGroupDataType.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 32) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "TransportSettings" field.</summary>
  public const int TransportSettingsFieldNumber = 15;
  private global::ExtensionObject transportSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject TransportSettings {
    get { return transportSettings_; }
    set {
      transportSettings_ = value;
    }
  }

  /// <summary>Field number for the "WriterGroupId" field.</summary>
  public const int WriterGroupIdFieldNumber = 16;
  private readonly static uint WriterGroupIdDefaultValue = 0;

  private uint writerGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriterGroupId {
    get { if ((_hasBits0 & 64) != 0) { return writerGroupId_; } else { return WriterGroupIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      writerGroupId_ = value;
    }
  }
  /// <summary>Gets whether the "WriterGroupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriterGroupId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "WriterGroupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriterGroupId() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WriterGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WriterGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataSetWriters, other.DataSetWriters)) return false;
    if (Enabled != other.Enabled) return false;
    if (!object.Equals(GroupProperties, other.GroupProperties)) return false;
    if (HeaderLayoutUri != other.HeaderLayoutUri) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(KeepAliveTime, other.KeepAliveTime)) return false;
    if (!object.Equals(LocaleIds, other.LocaleIds)) return false;
    if (MaxNetworkMessageSize != other.MaxNetworkMessageSize) return false;
    if (!object.Equals(MessageSettings, other.MessageSettings)) return false;
    if (Name != other.Name) return false;
    if (Priority != other.Priority) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PublishingInterval, other.PublishingInterval)) return false;
    if (SecurityGroupId != other.SecurityGroupId) return false;
    if (!object.Equals(SecurityKeyServices, other.SecurityKeyServices)) return false;
    if (SecurityMode != other.SecurityMode) return false;
    if (!object.Equals(TransportSettings, other.TransportSettings)) return false;
    if (WriterGroupId != other.WriterGroupId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataSetWriters_ != null) hash ^= DataSetWriters.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (groupProperties_ != null) hash ^= GroupProperties.GetHashCode();
    if (HasHeaderLayoutUri) hash ^= HeaderLayoutUri.GetHashCode();
    if (HasKeepAliveTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(KeepAliveTime);
    if (localeIds_ != null) hash ^= LocaleIds.GetHashCode();
    if (HasMaxNetworkMessageSize) hash ^= MaxNetworkMessageSize.GetHashCode();
    if (messageSettings_ != null) hash ^= MessageSettings.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasPriority) hash ^= Priority.GetHashCode();
    if (HasPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PublishingInterval);
    if (HasSecurityGroupId) hash ^= SecurityGroupId.GetHashCode();
    if (securityKeyServices_ != null) hash ^= SecurityKeyServices.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (transportSettings_ != null) hash ^= TransportSettings.GetHashCode();
    if (HasWriterGroupId) hash ^= WriterGroupId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataSetWriters_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataSetWriters);
    }
    if (HasEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
    if (groupProperties_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GroupProperties);
    }
    if (HasHeaderLayoutUri) {
      output.WriteRawTag(34);
      output.WriteString(HeaderLayoutUri);
    }
    if (HasKeepAliveTime) {
      output.WriteRawTag(41);
      output.WriteDouble(KeepAliveTime);
    }
    if (localeIds_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(LocaleIds);
    }
    if (HasMaxNetworkMessageSize) {
      output.WriteRawTag(56);
      output.WriteUInt32(MaxNetworkMessageSize);
    }
    if (messageSettings_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(MessageSettings);
    }
    if (HasName) {
      output.WriteRawTag(74);
      output.WriteString(Name);
    }
    if (HasPriority) {
      output.WriteRawTag(80);
      output.WriteUInt32(Priority);
    }
    if (HasPublishingInterval) {
      output.WriteRawTag(89);
      output.WriteDouble(PublishingInterval);
    }
    if (HasSecurityGroupId) {
      output.WriteRawTag(98);
      output.WriteString(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(112);
      output.WriteEnum((int) SecurityMode);
    }
    if (transportSettings_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(TransportSettings);
    }
    if (HasWriterGroupId) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(WriterGroupId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataSetWriters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetWriters);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (groupProperties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupProperties);
    }
    if (HasHeaderLayoutUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderLayoutUri);
    }
    if (HasKeepAliveTime) {
      size += 1 + 8;
    }
    if (localeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocaleIds);
    }
    if (HasMaxNetworkMessageSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNetworkMessageSize);
    }
    if (messageSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageSettings);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasPriority) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
    }
    if (HasPublishingInterval) {
      size += 1 + 8;
    }
    if (HasSecurityGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (transportSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportSettings);
    }
    if (HasWriterGroupId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriterGroupId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WriterGroupDataType other) {
    if (other == null) {
      return;
    }
    if (other.dataSetWriters_ != null) {
      if (dataSetWriters_ == null) {
        DataSetWriters = new global::ListOfDataSetWriterDataType();
      }
      DataSetWriters.MergeFrom(other.DataSetWriters);
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.groupProperties_ != null) {
      if (groupProperties_ == null) {
        GroupProperties = new global::ListOfKeyValuePair();
      }
      GroupProperties.MergeFrom(other.GroupProperties);
    }
    if (other.HasHeaderLayoutUri) {
      HeaderLayoutUri = other.HeaderLayoutUri;
    }
    if (other.HasKeepAliveTime) {
      KeepAliveTime = other.KeepAliveTime;
    }
    if (other.localeIds_ != null) {
      if (localeIds_ == null) {
        LocaleIds = new global::ListOfString();
      }
      LocaleIds.MergeFrom(other.LocaleIds);
    }
    if (other.HasMaxNetworkMessageSize) {
      MaxNetworkMessageSize = other.MaxNetworkMessageSize;
    }
    if (other.messageSettings_ != null) {
      if (messageSettings_ == null) {
        MessageSettings = new global::ExtensionObject();
      }
      MessageSettings.MergeFrom(other.MessageSettings);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasPriority) {
      Priority = other.Priority;
    }
    if (other.HasPublishingInterval) {
      PublishingInterval = other.PublishingInterval;
    }
    if (other.HasSecurityGroupId) {
      SecurityGroupId = other.SecurityGroupId;
    }
    if (other.securityKeyServices_ != null) {
      if (securityKeyServices_ == null) {
        SecurityKeyServices = new global::ListOfEndpointDescription();
      }
      SecurityKeyServices.MergeFrom(other.SecurityKeyServices);
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    if (other.transportSettings_ != null) {
      if (transportSettings_ == null) {
        TransportSettings = new global::ExtensionObject();
      }
      TransportSettings.MergeFrom(other.TransportSettings);
    }
    if (other.HasWriterGroupId) {
      WriterGroupId = other.WriterGroupId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataSetWriters_ == null) {
            DataSetWriters = new global::ListOfDataSetWriterDataType();
          }
          input.ReadMessage(DataSetWriters);
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
        case 26: {
          if (groupProperties_ == null) {
            GroupProperties = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(GroupProperties);
          break;
        }
        case 34: {
          HeaderLayoutUri = input.ReadString();
          break;
        }
        case 41: {
          KeepAliveTime = input.ReadDouble();
          break;
        }
        case 50: {
          if (localeIds_ == null) {
            LocaleIds = new global::ListOfString();
          }
          input.ReadMessage(LocaleIds);
          break;
        }
        case 56: {
          MaxNetworkMessageSize = input.ReadUInt32();
          break;
        }
        case 66: {
          if (messageSettings_ == null) {
            MessageSettings = new global::ExtensionObject();
          }
          input.ReadMessage(MessageSettings);
          break;
        }
        case 74: {
          Name = input.ReadString();
          break;
        }
        case 80: {
          Priority = input.ReadUInt32();
          break;
        }
        case 89: {
          PublishingInterval = input.ReadDouble();
          break;
        }
        case 98: {
          SecurityGroupId = input.ReadString();
          break;
        }
        case 106: {
          if (securityKeyServices_ == null) {
            SecurityKeyServices = new global::ListOfEndpointDescription();
          }
          input.ReadMessage(SecurityKeyServices);
          break;
        }
        case 112: {
          SecurityMode = (global::WriterGroupDataType.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
        case 122: {
          if (transportSettings_ == null) {
            TransportSettings = new global::ExtensionObject();
          }
          input.ReadMessage(TransportSettings);
          break;
        }
        case 128: {
          WriterGroupId = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the WriterGroupDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class AddNodesRequest : pb::IMessage<AddNodesRequest> {
  private static readonly pb::MessageParser<AddNodesRequest> _parser = new pb::MessageParser<AddNodesRequest>(() => new AddNodesRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddNodesRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[435]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesRequest(AddNodesRequest other) : this() {
    nodesToAdd_ = other.nodesToAdd_ != null ? other.nodesToAdd_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddNodesRequest Clone() {
    return new AddNodesRequest(this);
  }

  /// <summary>Field number for the "NodesToAdd" field.</summary>
  public const int NodesToAddFieldNumber = 1;
  private global::ListOfAddNodesItem nodesToAdd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfAddNodesItem NodesToAdd {
    get { return nodesToAdd_; }
    set {
      nodesToAdd_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddNodesRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddNodesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NodesToAdd, other.NodesToAdd)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (nodesToAdd_ != null) hash ^= NodesToAdd.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (nodesToAdd_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NodesToAdd);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (nodesToAdd_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodesToAdd);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddNodesRequest other) {
    if (other == null) {
      return;
    }
    if (other.nodesToAdd_ != null) {
      if (nodesToAdd_ == null) {
        NodesToAdd = new global::ListOfAddNodesItem();
      }
      NodesToAdd.MergeFrom(other.NodesToAdd);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (nodesToAdd_ == null) {
            NodesToAdd = new global::ListOfAddNodesItem();
          }
          input.ReadMessage(NodesToAdd);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class BrowseNextResponse : pb::IMessage<BrowseNextResponse> {
  private static readonly pb::MessageParser<BrowseNextResponse> _parser = new pb::MessageParser<BrowseNextResponse>(() => new BrowseNextResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowseNextResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[436]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseNextResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseNextResponse(BrowseNextResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseNextResponse Clone() {
    return new BrowseNextResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfBrowseResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfBrowseResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowseNextResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowseNextResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowseNextResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfBrowseResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfBrowseResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class BrowseResponse : pb::IMessage<BrowseResponse> {
  private static readonly pb::MessageParser<BrowseResponse> _parser = new pb::MessageParser<BrowseResponse>(() => new BrowseResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrowseResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[437]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseResponse(BrowseResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrowseResponse Clone() {
    return new BrowseResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfBrowseResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfBrowseResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrowseResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrowseResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrowseResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfBrowseResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfBrowseResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class CallRequest : pb::IMessage<CallRequest> {
  private static readonly pb::MessageParser<CallRequest> _parser = new pb::MessageParser<CallRequest>(() => new CallRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CallRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[438]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallRequest(CallRequest other) : this() {
    methodsToCall_ = other.methodsToCall_ != null ? other.methodsToCall_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallRequest Clone() {
    return new CallRequest(this);
  }

  /// <summary>Field number for the "MethodsToCall" field.</summary>
  public const int MethodsToCallFieldNumber = 1;
  private global::ListOfCallMethodRequest methodsToCall_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfCallMethodRequest MethodsToCall {
    get { return methodsToCall_; }
    set {
      methodsToCall_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CallRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CallRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MethodsToCall, other.MethodsToCall)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (methodsToCall_ != null) hash ^= MethodsToCall.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (methodsToCall_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MethodsToCall);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (methodsToCall_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MethodsToCall);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CallRequest other) {
    if (other == null) {
      return;
    }
    if (other.methodsToCall_ != null) {
      if (methodsToCall_ == null) {
        MethodsToCall = new global::ListOfCallMethodRequest();
      }
      MethodsToCall.MergeFrom(other.MethodsToCall);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (methodsToCall_ == null) {
            MethodsToCall = new global::ListOfCallMethodRequest();
          }
          input.ReadMessage(MethodsToCall);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class CallResponse : pb::IMessage<CallResponse> {
  private static readonly pb::MessageParser<CallResponse> _parser = new pb::MessageParser<CallResponse>(() => new CallResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CallResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[439]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallResponse(CallResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallResponse Clone() {
    return new CallResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfCallMethodResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfCallMethodResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CallResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CallResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CallResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfCallMethodResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfCallMethodResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class ContentFilter : pb::IMessage<ContentFilter> {
  private static readonly pb::MessageParser<ContentFilter> _parser = new pb::MessageParser<ContentFilter>(() => new ContentFilter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ContentFilter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[440]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilter(ContentFilter other) : this() {
    elements_ = other.elements_ != null ? other.elements_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilter Clone() {
    return new ContentFilter(this);
  }

  /// <summary>Field number for the "Elements" field.</summary>
  public const int ElementsFieldNumber = 1;
  private global::ListOfContentFilterElement elements_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfContentFilterElement Elements {
    get { return elements_; }
    set {
      elements_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ContentFilter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ContentFilter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Elements, other.Elements)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (elements_ != null) hash ^= Elements.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (elements_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Elements);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (elements_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Elements);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ContentFilter other) {
    if (other == null) {
      return;
    }
    if (other.elements_ != null) {
      if (elements_ == null) {
        Elements = new global::ListOfContentFilterElement();
      }
      Elements.MergeFrom(other.Elements);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (elements_ == null) {
            Elements = new global::ListOfContentFilterElement();
          }
          input.ReadMessage(Elements);
          break;
        }
      }
    }
  }

}

public sealed partial class ContentFilterResult : pb::IMessage<ContentFilterResult> {
  private static readonly pb::MessageParser<ContentFilterResult> _parser = new pb::MessageParser<ContentFilterResult>(() => new ContentFilterResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ContentFilterResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[441]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterResult(ContentFilterResult other) : this() {
    elementDiagnosticInfos_ = other.elementDiagnosticInfos_ != null ? other.elementDiagnosticInfos_.Clone() : null;
    elementResults_ = other.elementResults_ != null ? other.elementResults_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentFilterResult Clone() {
    return new ContentFilterResult(this);
  }

  /// <summary>Field number for the "ElementDiagnosticInfos" field.</summary>
  public const int ElementDiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo elementDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo ElementDiagnosticInfos {
    get { return elementDiagnosticInfos_; }
    set {
      elementDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "ElementResults" field.</summary>
  public const int ElementResultsFieldNumber = 2;
  private global::ListOfContentFilterElementResult elementResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfContentFilterElementResult ElementResults {
    get { return elementResults_; }
    set {
      elementResults_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ContentFilterResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ContentFilterResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ElementDiagnosticInfos, other.ElementDiagnosticInfos)) return false;
    if (!object.Equals(ElementResults, other.ElementResults)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (elementDiagnosticInfos_ != null) hash ^= ElementDiagnosticInfos.GetHashCode();
    if (elementResults_ != null) hash ^= ElementResults.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (elementDiagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ElementDiagnosticInfos);
    }
    if (elementResults_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ElementResults);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (elementDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementDiagnosticInfos);
    }
    if (elementResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementResults);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ContentFilterResult other) {
    if (other == null) {
      return;
    }
    if (other.elementDiagnosticInfos_ != null) {
      if (elementDiagnosticInfos_ == null) {
        ElementDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      ElementDiagnosticInfos.MergeFrom(other.ElementDiagnosticInfos);
    }
    if (other.elementResults_ != null) {
      if (elementResults_ == null) {
        ElementResults = new global::ListOfContentFilterElementResult();
      }
      ElementResults.MergeFrom(other.ElementResults);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (elementDiagnosticInfos_ == null) {
            ElementDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(ElementDiagnosticInfos);
          break;
        }
        case 18: {
          if (elementResults_ == null) {
            ElementResults = new global::ListOfContentFilterElementResult();
          }
          input.ReadMessage(ElementResults);
          break;
        }
      }
    }
  }

}

public sealed partial class CreateMonitoredItemsResponse : pb::IMessage<CreateMonitoredItemsResponse> {
  private static readonly pb::MessageParser<CreateMonitoredItemsResponse> _parser = new pb::MessageParser<CreateMonitoredItemsResponse>(() => new CreateMonitoredItemsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateMonitoredItemsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[442]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateMonitoredItemsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateMonitoredItemsResponse(CreateMonitoredItemsResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateMonitoredItemsResponse Clone() {
    return new CreateMonitoredItemsResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfMonitoredItemCreateResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfMonitoredItemCreateResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateMonitoredItemsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateMonitoredItemsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateMonitoredItemsResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfMonitoredItemCreateResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfMonitoredItemCreateResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class CreateSessionResponse : pb::IMessage<CreateSessionResponse> {
  private static readonly pb::MessageParser<CreateSessionResponse> _parser = new pb::MessageParser<CreateSessionResponse>(() => new CreateSessionResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateSessionResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[443]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSessionResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSessionResponse(CreateSessionResponse other) : this() {
    _hasBits0 = other._hasBits0;
    authenticationToken_ = other.authenticationToken_ != null ? other.authenticationToken_.Clone() : null;
    maxRequestMessageSize_ = other.maxRequestMessageSize_;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    revisedSessionTimeout_ = other.revisedSessionTimeout_;
    serverCertificate_ = other.serverCertificate_;
    serverEndpoints_ = other.serverEndpoints_ != null ? other.serverEndpoints_.Clone() : null;
    serverNonce_ = other.serverNonce_;
    serverSignature_ = other.serverSignature_ != null ? other.serverSignature_.Clone() : null;
    serverSoftwareCertificates_ = other.serverSoftwareCertificates_ != null ? other.serverSoftwareCertificates_.Clone() : null;
    sessionId_ = other.sessionId_ != null ? other.sessionId_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateSessionResponse Clone() {
    return new CreateSessionResponse(this);
  }

  /// <summary>Field number for the "AuthenticationToken" field.</summary>
  public const int AuthenticationTokenFieldNumber = 1;
  private global::NodeId authenticationToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId AuthenticationToken {
    get { return authenticationToken_; }
    set {
      authenticationToken_ = value;
    }
  }

  /// <summary>Field number for the "MaxRequestMessageSize" field.</summary>
  public const int MaxRequestMessageSizeFieldNumber = 2;
  private readonly static uint MaxRequestMessageSizeDefaultValue = 0;

  private uint maxRequestMessageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxRequestMessageSize {
    get { if ((_hasBits0 & 1) != 0) { return maxRequestMessageSize_; } else { return MaxRequestMessageSizeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      maxRequestMessageSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxRequestMessageSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxRequestMessageSize {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MaxRequestMessageSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxRequestMessageSize() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 3;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "RevisedSessionTimeout" field.</summary>
  public const int RevisedSessionTimeoutFieldNumber = 4;
  private readonly static double RevisedSessionTimeoutDefaultValue = 0D;

  private double revisedSessionTimeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RevisedSessionTimeout {
    get { if ((_hasBits0 & 2) != 0) { return revisedSessionTimeout_; } else { return RevisedSessionTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 2;
      revisedSessionTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedSessionTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedSessionTimeout {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RevisedSessionTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedSessionTimeout() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ServerCertificate" field.</summary>
  public const int ServerCertificateFieldNumber = 5;
  private readonly static pb::ByteString ServerCertificateDefaultValue = pb::ByteString.Empty;

  private pb::ByteString serverCertificate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ServerCertificate {
    get { return serverCertificate_ ?? ServerCertificateDefaultValue; }
    set {
      serverCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerCertificate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerCertificate {
    get { return serverCertificate_ != null; }
  }
  /// <summary>Clears the value of the "ServerCertificate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerCertificate() {
    serverCertificate_ = null;
  }

  /// <summary>Field number for the "ServerEndpoints" field.</summary>
  public const int ServerEndpointsFieldNumber = 6;
  private global::ListOfEndpointDescription serverEndpoints_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEndpointDescription ServerEndpoints {
    get { return serverEndpoints_; }
    set {
      serverEndpoints_ = value;
    }
  }

  /// <summary>Field number for the "ServerNonce" field.</summary>
  public const int ServerNonceFieldNumber = 7;
  private readonly static pb::ByteString ServerNonceDefaultValue = pb::ByteString.Empty;

  private pb::ByteString serverNonce_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ServerNonce {
    get { return serverNonce_ ?? ServerNonceDefaultValue; }
    set {
      serverNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ServerNonce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerNonce {
    get { return serverNonce_ != null; }
  }
  /// <summary>Clears the value of the "ServerNonce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerNonce() {
    serverNonce_ = null;
  }

  /// <summary>Field number for the "ServerSignature" field.</summary>
  public const int ServerSignatureFieldNumber = 8;
  private global::SignatureData serverSignature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SignatureData ServerSignature {
    get { return serverSignature_; }
    set {
      serverSignature_ = value;
    }
  }

  /// <summary>Field number for the "ServerSoftwareCertificates" field.</summary>
  public const int ServerSoftwareCertificatesFieldNumber = 9;
  private global::ListOfSignedSoftwareCertificate serverSoftwareCertificates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSignedSoftwareCertificate ServerSoftwareCertificates {
    get { return serverSoftwareCertificates_; }
    set {
      serverSoftwareCertificates_ = value;
    }
  }

  /// <summary>Field number for the "SessionId" field.</summary>
  public const int SessionIdFieldNumber = 10;
  private global::NodeId sessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateSessionResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateSessionResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AuthenticationToken, other.AuthenticationToken)) return false;
    if (MaxRequestMessageSize != other.MaxRequestMessageSize) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevisedSessionTimeout, other.RevisedSessionTimeout)) return false;
    if (ServerCertificate != other.ServerCertificate) return false;
    if (!object.Equals(ServerEndpoints, other.ServerEndpoints)) return false;
    if (ServerNonce != other.ServerNonce) return false;
    if (!object.Equals(ServerSignature, other.ServerSignature)) return false;
    if (!object.Equals(ServerSoftwareCertificates, other.ServerSoftwareCertificates)) return false;
    if (!object.Equals(SessionId, other.SessionId)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (authenticationToken_ != null) hash ^= AuthenticationToken.GetHashCode();
    if (HasMaxRequestMessageSize) hash ^= MaxRequestMessageSize.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (HasRevisedSessionTimeout) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevisedSessionTimeout);
    if (HasServerCertificate) hash ^= ServerCertificate.GetHashCode();
    if (serverEndpoints_ != null) hash ^= ServerEndpoints.GetHashCode();
    if (HasServerNonce) hash ^= ServerNonce.GetHashCode();
    if (serverSignature_ != null) hash ^= ServerSignature.GetHashCode();
    if (serverSoftwareCertificates_ != null) hash ^= ServerSoftwareCertificates.GetHashCode();
    if (sessionId_ != null) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (authenticationToken_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AuthenticationToken);
    }
    if (HasMaxRequestMessageSize) {
      output.WriteRawTag(16);
      output.WriteUInt32(MaxRequestMessageSize);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ResponseHeader);
    }
    if (HasRevisedSessionTimeout) {
      output.WriteRawTag(33);
      output.WriteDouble(RevisedSessionTimeout);
    }
    if (HasServerCertificate) {
      output.WriteRawTag(42);
      output.WriteBytes(ServerCertificate);
    }
    if (serverEndpoints_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(ServerEndpoints);
    }
    if (HasServerNonce) {
      output.WriteRawTag(58);
      output.WriteBytes(ServerNonce);
    }
    if (serverSignature_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(ServerSignature);
    }
    if (serverSoftwareCertificates_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(ServerSoftwareCertificates);
    }
    if (sessionId_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (authenticationToken_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthenticationToken);
    }
    if (HasMaxRequestMessageSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxRequestMessageSize);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (HasRevisedSessionTimeout) {
      size += 1 + 8;
    }
    if (HasServerCertificate) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerCertificate);
    }
    if (serverEndpoints_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerEndpoints);
    }
    if (HasServerNonce) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerNonce);
    }
    if (serverSignature_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerSignature);
    }
    if (serverSoftwareCertificates_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerSoftwareCertificates);
    }
    if (sessionId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateSessionResponse other) {
    if (other == null) {
      return;
    }
    if (other.authenticationToken_ != null) {
      if (authenticationToken_ == null) {
        AuthenticationToken = new global::NodeId();
      }
      AuthenticationToken.MergeFrom(other.AuthenticationToken);
    }
    if (other.HasMaxRequestMessageSize) {
      MaxRequestMessageSize = other.MaxRequestMessageSize;
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.HasRevisedSessionTimeout) {
      RevisedSessionTimeout = other.RevisedSessionTimeout;
    }
    if (other.HasServerCertificate) {
      ServerCertificate = other.ServerCertificate;
    }
    if (other.serverEndpoints_ != null) {
      if (serverEndpoints_ == null) {
        ServerEndpoints = new global::ListOfEndpointDescription();
      }
      ServerEndpoints.MergeFrom(other.ServerEndpoints);
    }
    if (other.HasServerNonce) {
      ServerNonce = other.ServerNonce;
    }
    if (other.serverSignature_ != null) {
      if (serverSignature_ == null) {
        ServerSignature = new global::SignatureData();
      }
      ServerSignature.MergeFrom(other.ServerSignature);
    }
    if (other.serverSoftwareCertificates_ != null) {
      if (serverSoftwareCertificates_ == null) {
        ServerSoftwareCertificates = new global::ListOfSignedSoftwareCertificate();
      }
      ServerSoftwareCertificates.MergeFrom(other.ServerSoftwareCertificates);
    }
    if (other.sessionId_ != null) {
      if (sessionId_ == null) {
        SessionId = new global::NodeId();
      }
      SessionId.MergeFrom(other.SessionId);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (authenticationToken_ == null) {
            AuthenticationToken = new global::NodeId();
          }
          input.ReadMessage(AuthenticationToken);
          break;
        }
        case 16: {
          MaxRequestMessageSize = input.ReadUInt32();
          break;
        }
        case 26: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 33: {
          RevisedSessionTimeout = input.ReadDouble();
          break;
        }
        case 42: {
          ServerCertificate = input.ReadBytes();
          break;
        }
        case 50: {
          if (serverEndpoints_ == null) {
            ServerEndpoints = new global::ListOfEndpointDescription();
          }
          input.ReadMessage(ServerEndpoints);
          break;
        }
        case 58: {
          ServerNonce = input.ReadBytes();
          break;
        }
        case 66: {
          if (serverSignature_ == null) {
            ServerSignature = new global::SignatureData();
          }
          input.ReadMessage(ServerSignature);
          break;
        }
        case 74: {
          if (serverSoftwareCertificates_ == null) {
            ServerSoftwareCertificates = new global::ListOfSignedSoftwareCertificate();
          }
          input.ReadMessage(ServerSoftwareCertificates);
          break;
        }
        case 82: {
          if (sessionId_ == null) {
            SessionId = new global::NodeId();
          }
          input.ReadMessage(SessionId);
          break;
        }
      }
    }
  }

}

public sealed partial class DataChangeNotification : pb::IMessage<DataChangeNotification> {
  private static readonly pb::MessageParser<DataChangeNotification> _parser = new pb::MessageParser<DataChangeNotification>(() => new DataChangeNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataChangeNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[444]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataChangeNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataChangeNotification(DataChangeNotification other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    monitoredItems_ = other.monitoredItems_ != null ? other.monitoredItems_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataChangeNotification Clone() {
    return new DataChangeNotification(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "MonitoredItems" field.</summary>
  public const int MonitoredItemsFieldNumber = 2;
  private global::ListOfMonitoredItemNotification monitoredItems_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfMonitoredItemNotification MonitoredItems {
    get { return monitoredItems_; }
    set {
      monitoredItems_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataChangeNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataChangeNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(MonitoredItems, other.MonitoredItems)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (monitoredItems_ != null) hash ^= MonitoredItems.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (monitoredItems_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MonitoredItems);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (monitoredItems_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonitoredItems);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataChangeNotification other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.monitoredItems_ != null) {
      if (monitoredItems_ == null) {
        MonitoredItems = new global::ListOfMonitoredItemNotification();
      }
      MonitoredItems.MergeFrom(other.MonitoredItems);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (monitoredItems_ == null) {
            MonitoredItems = new global::ListOfMonitoredItemNotification();
          }
          input.ReadMessage(MonitoredItems);
          break;
        }
      }
    }
  }

}

public sealed partial class DataSetMetaDataType : pb::IMessage<DataSetMetaDataType> {
  private static readonly pb::MessageParser<DataSetMetaDataType> _parser = new pb::MessageParser<DataSetMetaDataType>(() => new DataSetMetaDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSetMetaDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[445]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetMetaDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetMetaDataType(DataSetMetaDataType other) : this() {
    configurationVersion_ = other.configurationVersion_ != null ? other.configurationVersion_.Clone() : null;
    dataSetClassId_ = other.dataSetClassId_ != null ? other.dataSetClassId_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    enumDataTypes_ = other.enumDataTypes_ != null ? other.enumDataTypes_.Clone() : null;
    fields_ = other.fields_ != null ? other.fields_.Clone() : null;
    name_ = other.name_;
    namespaces_ = other.namespaces_ != null ? other.namespaces_.Clone() : null;
    simpleDataTypes_ = other.simpleDataTypes_ != null ? other.simpleDataTypes_.Clone() : null;
    structureDataTypes_ = other.structureDataTypes_ != null ? other.structureDataTypes_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetMetaDataType Clone() {
    return new DataSetMetaDataType(this);
  }

  /// <summary>Field number for the "ConfigurationVersion" field.</summary>
  public const int ConfigurationVersionFieldNumber = 1;
  private global::ConfigurationVersionDataType configurationVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConfigurationVersionDataType ConfigurationVersion {
    get { return configurationVersion_; }
    set {
      configurationVersion_ = value;
    }
  }

  /// <summary>Field number for the "DataSetClassId" field.</summary>
  public const int DataSetClassIdFieldNumber = 2;
  private global::Guid dataSetClassId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Guid DataSetClassId {
    get { return dataSetClassId_; }
    set {
      dataSetClassId_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "EnumDataTypes" field.</summary>
  public const int EnumDataTypesFieldNumber = 4;
  private global::ListOfEnumDescription enumDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEnumDescription EnumDataTypes {
    get { return enumDataTypes_; }
    set {
      enumDataTypes_ = value;
    }
  }

  /// <summary>Field number for the "Fields" field.</summary>
  public const int FieldsFieldNumber = 5;
  private global::ListOfFieldMetaData fields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfFieldMetaData Fields {
    get { return fields_; }
    set {
      fields_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 6;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "Namespaces" field.</summary>
  public const int NamespacesFieldNumber = 7;
  private global::ListOfString namespaces_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString Namespaces {
    get { return namespaces_; }
    set {
      namespaces_ = value;
    }
  }

  /// <summary>Field number for the "SimpleDataTypes" field.</summary>
  public const int SimpleDataTypesFieldNumber = 8;
  private global::ListOfSimpleTypeDescription simpleDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSimpleTypeDescription SimpleDataTypes {
    get { return simpleDataTypes_; }
    set {
      simpleDataTypes_ = value;
    }
  }

  /// <summary>Field number for the "StructureDataTypes" field.</summary>
  public const int StructureDataTypesFieldNumber = 9;
  private global::ListOfStructureDescription structureDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStructureDescription StructureDataTypes {
    get { return structureDataTypes_; }
    set {
      structureDataTypes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSetMetaDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSetMetaDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConfigurationVersion, other.ConfigurationVersion)) return false;
    if (!object.Equals(DataSetClassId, other.DataSetClassId)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(EnumDataTypes, other.EnumDataTypes)) return false;
    if (!object.Equals(Fields, other.Fields)) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(Namespaces, other.Namespaces)) return false;
    if (!object.Equals(SimpleDataTypes, other.SimpleDataTypes)) return false;
    if (!object.Equals(StructureDataTypes, other.StructureDataTypes)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (configurationVersion_ != null) hash ^= ConfigurationVersion.GetHashCode();
    if (dataSetClassId_ != null) hash ^= DataSetClassId.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (enumDataTypes_ != null) hash ^= EnumDataTypes.GetHashCode();
    if (fields_ != null) hash ^= Fields.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (namespaces_ != null) hash ^= Namespaces.GetHashCode();
    if (simpleDataTypes_ != null) hash ^= SimpleDataTypes.GetHashCode();
    if (structureDataTypes_ != null) hash ^= StructureDataTypes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (configurationVersion_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConfigurationVersion);
    }
    if (dataSetClassId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataSetClassId);
    }
    if (description_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Description);
    }
    if (enumDataTypes_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(EnumDataTypes);
    }
    if (fields_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Fields);
    }
    if (HasName) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (namespaces_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Namespaces);
    }
    if (simpleDataTypes_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SimpleDataTypes);
    }
    if (structureDataTypes_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(StructureDataTypes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (configurationVersion_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigurationVersion);
    }
    if (dataSetClassId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetClassId);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (enumDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnumDataTypes);
    }
    if (fields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fields);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (namespaces_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Namespaces);
    }
    if (simpleDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleDataTypes);
    }
    if (structureDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructureDataTypes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSetMetaDataType other) {
    if (other == null) {
      return;
    }
    if (other.configurationVersion_ != null) {
      if (configurationVersion_ == null) {
        ConfigurationVersion = new global::ConfigurationVersionDataType();
      }
      ConfigurationVersion.MergeFrom(other.ConfigurationVersion);
    }
    if (other.dataSetClassId_ != null) {
      if (dataSetClassId_ == null) {
        DataSetClassId = new global::Guid();
      }
      DataSetClassId.MergeFrom(other.DataSetClassId);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.enumDataTypes_ != null) {
      if (enumDataTypes_ == null) {
        EnumDataTypes = new global::ListOfEnumDescription();
      }
      EnumDataTypes.MergeFrom(other.EnumDataTypes);
    }
    if (other.fields_ != null) {
      if (fields_ == null) {
        Fields = new global::ListOfFieldMetaData();
      }
      Fields.MergeFrom(other.Fields);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.namespaces_ != null) {
      if (namespaces_ == null) {
        Namespaces = new global::ListOfString();
      }
      Namespaces.MergeFrom(other.Namespaces);
    }
    if (other.simpleDataTypes_ != null) {
      if (simpleDataTypes_ == null) {
        SimpleDataTypes = new global::ListOfSimpleTypeDescription();
      }
      SimpleDataTypes.MergeFrom(other.SimpleDataTypes);
    }
    if (other.structureDataTypes_ != null) {
      if (structureDataTypes_ == null) {
        StructureDataTypes = new global::ListOfStructureDescription();
      }
      StructureDataTypes.MergeFrom(other.StructureDataTypes);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (configurationVersion_ == null) {
            ConfigurationVersion = new global::ConfigurationVersionDataType();
          }
          input.ReadMessage(ConfigurationVersion);
          break;
        }
        case 18: {
          if (dataSetClassId_ == null) {
            DataSetClassId = new global::Guid();
          }
          input.ReadMessage(DataSetClassId);
          break;
        }
        case 26: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 34: {
          if (enumDataTypes_ == null) {
            EnumDataTypes = new global::ListOfEnumDescription();
          }
          input.ReadMessage(EnumDataTypes);
          break;
        }
        case 42: {
          if (fields_ == null) {
            Fields = new global::ListOfFieldMetaData();
          }
          input.ReadMessage(Fields);
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 58: {
          if (namespaces_ == null) {
            Namespaces = new global::ListOfString();
          }
          input.ReadMessage(Namespaces);
          break;
        }
        case 66: {
          if (simpleDataTypes_ == null) {
            SimpleDataTypes = new global::ListOfSimpleTypeDescription();
          }
          input.ReadMessage(SimpleDataTypes);
          break;
        }
        case 74: {
          if (structureDataTypes_ == null) {
            StructureDataTypes = new global::ListOfStructureDescription();
          }
          input.ReadMessage(StructureDataTypes);
          break;
        }
      }
    }
  }

}

public sealed partial class DataSetReaderDataType : pb::IMessage<DataSetReaderDataType> {
  private static readonly pb::MessageParser<DataSetReaderDataType> _parser = new pb::MessageParser<DataSetReaderDataType>(() => new DataSetReaderDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSetReaderDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[446]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderDataType(DataSetReaderDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetFieldContentMask_ = other.dataSetFieldContentMask_;
    dataSetMetaData_ = other.dataSetMetaData_ != null ? other.dataSetMetaData_.Clone() : null;
    dataSetReaderProperties_ = other.dataSetReaderProperties_ != null ? other.dataSetReaderProperties_.Clone() : null;
    dataSetWriterId_ = other.dataSetWriterId_;
    enabled_ = other.enabled_;
    headerLayoutUri_ = other.headerLayoutUri_;
    keyFrameCount_ = other.keyFrameCount_;
    messageReceiveTimeout_ = other.messageReceiveTimeout_;
    messageSettings_ = other.messageSettings_ != null ? other.messageSettings_.Clone() : null;
    name_ = other.name_;
    publisherId_ = other.publisherId_ != null ? other.publisherId_.Clone() : null;
    securityGroupId_ = other.securityGroupId_;
    securityKeyServices_ = other.securityKeyServices_ != null ? other.securityKeyServices_.Clone() : null;
    securityMode_ = other.securityMode_;
    subscribedDataSet_ = other.subscribedDataSet_ != null ? other.subscribedDataSet_.Clone() : null;
    transportSettings_ = other.transportSettings_ != null ? other.transportSettings_.Clone() : null;
    writerGroupId_ = other.writerGroupId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSetReaderDataType Clone() {
    return new DataSetReaderDataType(this);
  }

  /// <summary>Field number for the "DataSetFieldContentMask" field.</summary>
  public const int DataSetFieldContentMaskFieldNumber = 1;
  private readonly static uint DataSetFieldContentMaskDefaultValue = 0;

  private uint dataSetFieldContentMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetFieldContentMask {
    get { if ((_hasBits0 & 1) != 0) { return dataSetFieldContentMask_; } else { return DataSetFieldContentMaskDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dataSetFieldContentMask_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetFieldContentMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetFieldContentMask {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DataSetFieldContentMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetFieldContentMask() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataSetMetaData" field.</summary>
  public const int DataSetMetaDataFieldNumber = 2;
  private global::DataSetMetaDataType dataSetMetaData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataSetMetaDataType DataSetMetaData {
    get { return dataSetMetaData_; }
    set {
      dataSetMetaData_ = value;
    }
  }

  /// <summary>Field number for the "DataSetReaderProperties" field.</summary>
  public const int DataSetReaderPropertiesFieldNumber = 3;
  private global::ListOfKeyValuePair dataSetReaderProperties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair DataSetReaderProperties {
    get { return dataSetReaderProperties_; }
    set {
      dataSetReaderProperties_ = value;
    }
  }

  /// <summary>Field number for the "DataSetWriterId" field.</summary>
  public const int DataSetWriterIdFieldNumber = 4;
  private readonly static uint DataSetWriterIdDefaultValue = 0;

  private uint dataSetWriterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DataSetWriterId {
    get { if ((_hasBits0 & 2) != 0) { return dataSetWriterId_; } else { return DataSetWriterIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      dataSetWriterId_ = value;
    }
  }
  /// <summary>Gets whether the "DataSetWriterId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDataSetWriterId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DataSetWriterId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDataSetWriterId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 5;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { if ((_hasBits0 & 4) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "Enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "HeaderLayoutUri" field.</summary>
  public const int HeaderLayoutUriFieldNumber = 6;
  private readonly static string HeaderLayoutUriDefaultValue = "";

  private string headerLayoutUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeaderLayoutUri {
    get { return headerLayoutUri_ ?? HeaderLayoutUriDefaultValue; }
    set {
      headerLayoutUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "HeaderLayoutUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeaderLayoutUri {
    get { return headerLayoutUri_ != null; }
  }
  /// <summary>Clears the value of the "HeaderLayoutUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeaderLayoutUri() {
    headerLayoutUri_ = null;
  }

  /// <summary>Field number for the "KeyFrameCount" field.</summary>
  public const int KeyFrameCountFieldNumber = 7;
  private readonly static uint KeyFrameCountDefaultValue = 0;

  private uint keyFrameCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KeyFrameCount {
    get { if ((_hasBits0 & 8) != 0) { return keyFrameCount_; } else { return KeyFrameCountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      keyFrameCount_ = value;
    }
  }
  /// <summary>Gets whether the "KeyFrameCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasKeyFrameCount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "KeyFrameCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearKeyFrameCount() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "MessageReceiveTimeout" field.</summary>
  public const int MessageReceiveTimeoutFieldNumber = 8;
  private readonly static double MessageReceiveTimeoutDefaultValue = 0D;

  private double messageReceiveTimeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MessageReceiveTimeout {
    get { if ((_hasBits0 & 16) != 0) { return messageReceiveTimeout_; } else { return MessageReceiveTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 16;
      messageReceiveTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "MessageReceiveTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessageReceiveTimeout {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "MessageReceiveTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessageReceiveTimeout() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "MessageSettings" field.</summary>
  public const int MessageSettingsFieldNumber = 9;
  private global::ExtensionObject messageSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject MessageSettings {
    get { return messageSettings_; }
    set {
      messageSettings_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 10;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "PublisherId" field.</summary>
  public const int PublisherIdFieldNumber = 11;
  private global::Variant publisherId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant PublisherId {
    get { return publisherId_; }
    set {
      publisherId_ = value;
    }
  }

  /// <summary>Field number for the "SecurityGroupId" field.</summary>
  public const int SecurityGroupIdFieldNumber = 12;
  private readonly static string SecurityGroupIdDefaultValue = "";

  private string securityGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityGroupId {
    get { return securityGroupId_ ?? SecurityGroupIdDefaultValue; }
    set {
      securityGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityGroupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityGroupId {
    get { return securityGroupId_ != null; }
  }
  /// <summary>Clears the value of the "SecurityGroupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityGroupId() {
    securityGroupId_ = null;
  }

  /// <summary>Field number for the "SecurityKeyServices" field.</summary>
  public const int SecurityKeyServicesFieldNumber = 13;
  private global::ListOfEndpointDescription securityKeyServices_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEndpointDescription SecurityKeyServices {
    get { return securityKeyServices_; }
    set {
      securityKeyServices_ = value;
    }
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 14;
  private readonly static global::DataSetReaderDataType.Types.MessageSecurityMode SecurityModeDefaultValue = global::DataSetReaderDataType.Types.MessageSecurityMode.Invalid0;

  private global::DataSetReaderDataType.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataSetReaderDataType.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 32) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "SubscribedDataSet" field.</summary>
  public const int SubscribedDataSetFieldNumber = 15;
  private global::ExtensionObject subscribedDataSet_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject SubscribedDataSet {
    get { return subscribedDataSet_; }
    set {
      subscribedDataSet_ = value;
    }
  }

  /// <summary>Field number for the "TransportSettings" field.</summary>
  public const int TransportSettingsFieldNumber = 16;
  private global::ExtensionObject transportSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject TransportSettings {
    get { return transportSettings_; }
    set {
      transportSettings_ = value;
    }
  }

  /// <summary>Field number for the "WriterGroupId" field.</summary>
  public const int WriterGroupIdFieldNumber = 17;
  private readonly static uint WriterGroupIdDefaultValue = 0;

  private uint writerGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriterGroupId {
    get { if ((_hasBits0 & 64) != 0) { return writerGroupId_; } else { return WriterGroupIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      writerGroupId_ = value;
    }
  }
  /// <summary>Gets whether the "WriterGroupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriterGroupId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "WriterGroupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriterGroupId() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSetReaderDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSetReaderDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataSetFieldContentMask != other.DataSetFieldContentMask) return false;
    if (!object.Equals(DataSetMetaData, other.DataSetMetaData)) return false;
    if (!object.Equals(DataSetReaderProperties, other.DataSetReaderProperties)) return false;
    if (DataSetWriterId != other.DataSetWriterId) return false;
    if (Enabled != other.Enabled) return false;
    if (HeaderLayoutUri != other.HeaderLayoutUri) return false;
    if (KeyFrameCount != other.KeyFrameCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MessageReceiveTimeout, other.MessageReceiveTimeout)) return false;
    if (!object.Equals(MessageSettings, other.MessageSettings)) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(PublisherId, other.PublisherId)) return false;
    if (SecurityGroupId != other.SecurityGroupId) return false;
    if (!object.Equals(SecurityKeyServices, other.SecurityKeyServices)) return false;
    if (SecurityMode != other.SecurityMode) return false;
    if (!object.Equals(SubscribedDataSet, other.SubscribedDataSet)) return false;
    if (!object.Equals(TransportSettings, other.TransportSettings)) return false;
    if (WriterGroupId != other.WriterGroupId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDataSetFieldContentMask) hash ^= DataSetFieldContentMask.GetHashCode();
    if (dataSetMetaData_ != null) hash ^= DataSetMetaData.GetHashCode();
    if (dataSetReaderProperties_ != null) hash ^= DataSetReaderProperties.GetHashCode();
    if (HasDataSetWriterId) hash ^= DataSetWriterId.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasHeaderLayoutUri) hash ^= HeaderLayoutUri.GetHashCode();
    if (HasKeyFrameCount) hash ^= KeyFrameCount.GetHashCode();
    if (HasMessageReceiveTimeout) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MessageReceiveTimeout);
    if (messageSettings_ != null) hash ^= MessageSettings.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (publisherId_ != null) hash ^= PublisherId.GetHashCode();
    if (HasSecurityGroupId) hash ^= SecurityGroupId.GetHashCode();
    if (securityKeyServices_ != null) hash ^= SecurityKeyServices.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (subscribedDataSet_ != null) hash ^= SubscribedDataSet.GetHashCode();
    if (transportSettings_ != null) hash ^= TransportSettings.GetHashCode();
    if (HasWriterGroupId) hash ^= WriterGroupId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDataSetFieldContentMask) {
      output.WriteRawTag(8);
      output.WriteUInt32(DataSetFieldContentMask);
    }
    if (dataSetMetaData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataSetMetaData);
    }
    if (dataSetReaderProperties_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataSetReaderProperties);
    }
    if (HasDataSetWriterId) {
      output.WriteRawTag(32);
      output.WriteUInt32(DataSetWriterId);
    }
    if (HasEnabled) {
      output.WriteRawTag(40);
      output.WriteBool(Enabled);
    }
    if (HasHeaderLayoutUri) {
      output.WriteRawTag(50);
      output.WriteString(HeaderLayoutUri);
    }
    if (HasKeyFrameCount) {
      output.WriteRawTag(56);
      output.WriteUInt32(KeyFrameCount);
    }
    if (HasMessageReceiveTimeout) {
      output.WriteRawTag(65);
      output.WriteDouble(MessageReceiveTimeout);
    }
    if (messageSettings_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(MessageSettings);
    }
    if (HasName) {
      output.WriteRawTag(82);
      output.WriteString(Name);
    }
    if (publisherId_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(PublisherId);
    }
    if (HasSecurityGroupId) {
      output.WriteRawTag(98);
      output.WriteString(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(112);
      output.WriteEnum((int) SecurityMode);
    }
    if (subscribedDataSet_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(SubscribedDataSet);
    }
    if (transportSettings_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(TransportSettings);
    }
    if (HasWriterGroupId) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(WriterGroupId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDataSetFieldContentMask) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetFieldContentMask);
    }
    if (dataSetMetaData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetMetaData);
    }
    if (dataSetReaderProperties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetReaderProperties);
    }
    if (HasDataSetWriterId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSetWriterId);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasHeaderLayoutUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderLayoutUri);
    }
    if (HasKeyFrameCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyFrameCount);
    }
    if (HasMessageReceiveTimeout) {
      size += 1 + 8;
    }
    if (messageSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageSettings);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (publisherId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublisherId);
    }
    if (HasSecurityGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (subscribedDataSet_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscribedDataSet);
    }
    if (transportSettings_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransportSettings);
    }
    if (HasWriterGroupId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriterGroupId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSetReaderDataType other) {
    if (other == null) {
      return;
    }
    if (other.HasDataSetFieldContentMask) {
      DataSetFieldContentMask = other.DataSetFieldContentMask;
    }
    if (other.dataSetMetaData_ != null) {
      if (dataSetMetaData_ == null) {
        DataSetMetaData = new global::DataSetMetaDataType();
      }
      DataSetMetaData.MergeFrom(other.DataSetMetaData);
    }
    if (other.dataSetReaderProperties_ != null) {
      if (dataSetReaderProperties_ == null) {
        DataSetReaderProperties = new global::ListOfKeyValuePair();
      }
      DataSetReaderProperties.MergeFrom(other.DataSetReaderProperties);
    }
    if (other.HasDataSetWriterId) {
      DataSetWriterId = other.DataSetWriterId;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasHeaderLayoutUri) {
      HeaderLayoutUri = other.HeaderLayoutUri;
    }
    if (other.HasKeyFrameCount) {
      KeyFrameCount = other.KeyFrameCount;
    }
    if (other.HasMessageReceiveTimeout) {
      MessageReceiveTimeout = other.MessageReceiveTimeout;
    }
    if (other.messageSettings_ != null) {
      if (messageSettings_ == null) {
        MessageSettings = new global::ExtensionObject();
      }
      MessageSettings.MergeFrom(other.MessageSettings);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.publisherId_ != null) {
      if (publisherId_ == null) {
        PublisherId = new global::Variant();
      }
      PublisherId.MergeFrom(other.PublisherId);
    }
    if (other.HasSecurityGroupId) {
      SecurityGroupId = other.SecurityGroupId;
    }
    if (other.securityKeyServices_ != null) {
      if (securityKeyServices_ == null) {
        SecurityKeyServices = new global::ListOfEndpointDescription();
      }
      SecurityKeyServices.MergeFrom(other.SecurityKeyServices);
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    if (other.subscribedDataSet_ != null) {
      if (subscribedDataSet_ == null) {
        SubscribedDataSet = new global::ExtensionObject();
      }
      SubscribedDataSet.MergeFrom(other.SubscribedDataSet);
    }
    if (other.transportSettings_ != null) {
      if (transportSettings_ == null) {
        TransportSettings = new global::ExtensionObject();
      }
      TransportSettings.MergeFrom(other.TransportSettings);
    }
    if (other.HasWriterGroupId) {
      WriterGroupId = other.WriterGroupId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DataSetFieldContentMask = input.ReadUInt32();
          break;
        }
        case 18: {
          if (dataSetMetaData_ == null) {
            DataSetMetaData = new global::DataSetMetaDataType();
          }
          input.ReadMessage(DataSetMetaData);
          break;
        }
        case 26: {
          if (dataSetReaderProperties_ == null) {
            DataSetReaderProperties = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(DataSetReaderProperties);
          break;
        }
        case 32: {
          DataSetWriterId = input.ReadUInt32();
          break;
        }
        case 40: {
          Enabled = input.ReadBool();
          break;
        }
        case 50: {
          HeaderLayoutUri = input.ReadString();
          break;
        }
        case 56: {
          KeyFrameCount = input.ReadUInt32();
          break;
        }
        case 65: {
          MessageReceiveTimeout = input.ReadDouble();
          break;
        }
        case 74: {
          if (messageSettings_ == null) {
            MessageSettings = new global::ExtensionObject();
          }
          input.ReadMessage(MessageSettings);
          break;
        }
        case 82: {
          Name = input.ReadString();
          break;
        }
        case 90: {
          if (publisherId_ == null) {
            PublisherId = new global::Variant();
          }
          input.ReadMessage(PublisherId);
          break;
        }
        case 98: {
          SecurityGroupId = input.ReadString();
          break;
        }
        case 106: {
          if (securityKeyServices_ == null) {
            SecurityKeyServices = new global::ListOfEndpointDescription();
          }
          input.ReadMessage(SecurityKeyServices);
          break;
        }
        case 112: {
          SecurityMode = (global::DataSetReaderDataType.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
        case 122: {
          if (subscribedDataSet_ == null) {
            SubscribedDataSet = new global::ExtensionObject();
          }
          input.ReadMessage(SubscribedDataSet);
          break;
        }
        case 130: {
          if (transportSettings_ == null) {
            TransportSettings = new global::ExtensionObject();
          }
          input.ReadMessage(TransportSettings);
          break;
        }
        case 136: {
          WriterGroupId = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DataSetReaderDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class DataTypeDescription : pb::IMessage<DataTypeDescription> {
  private static readonly pb::MessageParser<DataTypeDescription> _parser = new pb::MessageParser<DataTypeDescription>(() => new DataTypeDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataTypeDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[447]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeDescription(DataTypeDescription other) : this() {
    _hasBits0 = other._hasBits0;
    baseDataType_ = other.baseDataType_ != null ? other.baseDataType_.Clone() : null;
    builtInType_ = other.builtInType_;
    dataTypeId_ = other.dataTypeId_ != null ? other.dataTypeId_.Clone() : null;
    EnumDefinition_ = other.EnumDefinition_ != null ? other.EnumDefinition_.Clone() : null;
    name_ = other.name_ != null ? other.name_.Clone() : null;
    StructureDefinition_ = other.StructureDefinition_ != null ? other.StructureDefinition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeDescription Clone() {
    return new DataTypeDescription(this);
  }

  /// <summary>Field number for the "BaseDataType" field.</summary>
  public const int BaseDataTypeFieldNumber = 1;
  private global::NodeId baseDataType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId BaseDataType {
    get { return baseDataType_; }
    set {
      baseDataType_ = value;
    }
  }

  /// <summary>Field number for the "BuiltInType" field.</summary>
  public const int BuiltInTypeFieldNumber = 2;
  private readonly static uint BuiltInTypeDefaultValue = 0;

  private uint builtInType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BuiltInType {
    get { if ((_hasBits0 & 1) != 0) { return builtInType_; } else { return BuiltInTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      builtInType_ = value;
    }
  }
  /// <summary>Gets whether the "BuiltInType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBuiltInType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "BuiltInType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBuiltInType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DataTypeId" field.</summary>
  public const int DataTypeIdFieldNumber = 3;
  private global::NodeId dataTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId DataTypeId {
    get { return dataTypeId_; }
    set {
      dataTypeId_ = value;
    }
  }

  /// <summary>Field number for the "_EnumDefinition" field.</summary>
  public const int EnumDefinitionFieldNumber = 4;
  private global::EnumDefinition EnumDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnumDefinition EnumDefinition {
    get { return EnumDefinition_; }
    set {
      EnumDefinition_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 5;
  private global::QualifiedName name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QualifiedName Name {
    get { return name_; }
    set {
      name_ = value;
    }
  }

  /// <summary>Field number for the "_StructureDefinition" field.</summary>
  public const int StructureDefinitionFieldNumber = 6;
  private global::StructureDefinition StructureDefinition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StructureDefinition StructureDefinition {
    get { return StructureDefinition_; }
    set {
      StructureDefinition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataTypeDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataTypeDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseDataType, other.BaseDataType)) return false;
    if (BuiltInType != other.BuiltInType) return false;
    if (!object.Equals(DataTypeId, other.DataTypeId)) return false;
    if (!object.Equals(EnumDefinition, other.EnumDefinition)) return false;
    if (!object.Equals(Name, other.Name)) return false;
    if (!object.Equals(StructureDefinition, other.StructureDefinition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseDataType_ != null) hash ^= BaseDataType.GetHashCode();
    if (HasBuiltInType) hash ^= BuiltInType.GetHashCode();
    if (dataTypeId_ != null) hash ^= DataTypeId.GetHashCode();
    if (EnumDefinition_ != null) hash ^= EnumDefinition.GetHashCode();
    if (name_ != null) hash ^= Name.GetHashCode();
    if (StructureDefinition_ != null) hash ^= StructureDefinition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseDataType_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseDataType);
    }
    if (HasBuiltInType) {
      output.WriteRawTag(16);
      output.WriteUInt32(BuiltInType);
    }
    if (dataTypeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataTypeId);
    }
    if (EnumDefinition_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(EnumDefinition);
    }
    if (name_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Name);
    }
    if (StructureDefinition_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(StructureDefinition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseDataType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseDataType);
    }
    if (HasBuiltInType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuiltInType);
    }
    if (dataTypeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTypeId);
    }
    if (EnumDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnumDefinition);
    }
    if (name_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
    }
    if (StructureDefinition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructureDefinition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataTypeDescription other) {
    if (other == null) {
      return;
    }
    if (other.baseDataType_ != null) {
      if (baseDataType_ == null) {
        BaseDataType = new global::NodeId();
      }
      BaseDataType.MergeFrom(other.BaseDataType);
    }
    if (other.HasBuiltInType) {
      BuiltInType = other.BuiltInType;
    }
    if (other.dataTypeId_ != null) {
      if (dataTypeId_ == null) {
        DataTypeId = new global::NodeId();
      }
      DataTypeId.MergeFrom(other.DataTypeId);
    }
    if (other.EnumDefinition_ != null) {
      if (EnumDefinition_ == null) {
        EnumDefinition = new global::EnumDefinition();
      }
      EnumDefinition.MergeFrom(other.EnumDefinition);
    }
    if (other.name_ != null) {
      if (name_ == null) {
        Name = new global::QualifiedName();
      }
      Name.MergeFrom(other.Name);
    }
    if (other.StructureDefinition_ != null) {
      if (StructureDefinition_ == null) {
        StructureDefinition = new global::StructureDefinition();
      }
      StructureDefinition.MergeFrom(other.StructureDefinition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (baseDataType_ == null) {
            BaseDataType = new global::NodeId();
          }
          input.ReadMessage(BaseDataType);
          break;
        }
        case 16: {
          BuiltInType = input.ReadUInt32();
          break;
        }
        case 26: {
          if (dataTypeId_ == null) {
            DataTypeId = new global::NodeId();
          }
          input.ReadMessage(DataTypeId);
          break;
        }
        case 34: {
          if (EnumDefinition_ == null) {
            EnumDefinition = new global::EnumDefinition();
          }
          input.ReadMessage(EnumDefinition);
          break;
        }
        case 42: {
          if (name_ == null) {
            Name = new global::QualifiedName();
          }
          input.ReadMessage(Name);
          break;
        }
        case 50: {
          if (StructureDefinition_ == null) {
            StructureDefinition = new global::StructureDefinition();
          }
          input.ReadMessage(StructureDefinition);
          break;
        }
      }
    }
  }

}

public sealed partial class DataTypeSchemaHeader : pb::IMessage<DataTypeSchemaHeader> {
  private static readonly pb::MessageParser<DataTypeSchemaHeader> _parser = new pb::MessageParser<DataTypeSchemaHeader>(() => new DataTypeSchemaHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataTypeSchemaHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[448]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeSchemaHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeSchemaHeader(DataTypeSchemaHeader other) : this() {
    body_ = other.body_ != null ? other.body_.Clone() : null;
    configurationVersion_ = other.configurationVersion_ != null ? other.configurationVersion_.Clone() : null;
    dataSetClassId_ = other.dataSetClassId_ != null ? other.dataSetClassId_.Clone() : null;
    description_ = other.description_ != null ? other.description_.Clone() : null;
    enumDataTypes_ = other.enumDataTypes_ != null ? other.enumDataTypes_.Clone() : null;
    fields_ = other.fields_ != null ? other.fields_.Clone() : null;
    fileHeader_ = other.fileHeader_ != null ? other.fileHeader_.Clone() : null;
    name_ = other.name_;
    namespaces_ = other.namespaces_ != null ? other.namespaces_.Clone() : null;
    schemaLocation_ = other.schemaLocation_;
    simpleDataTypes_ = other.simpleDataTypes_ != null ? other.simpleDataTypes_.Clone() : null;
    structureDataTypes_ = other.structureDataTypes_ != null ? other.structureDataTypes_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataTypeSchemaHeader Clone() {
    return new DataTypeSchemaHeader(this);
  }

  /// <summary>Field number for the "Body" field.</summary>
  public const int BodyFieldNumber = 1;
  private global::Variant body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant Body {
    get { return body_; }
    set {
      body_ = value;
    }
  }

  /// <summary>Field number for the "ConfigurationVersion" field.</summary>
  public const int ConfigurationVersionFieldNumber = 2;
  private global::ConfigurationVersionDataType configurationVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConfigurationVersionDataType ConfigurationVersion {
    get { return configurationVersion_; }
    set {
      configurationVersion_ = value;
    }
  }

  /// <summary>Field number for the "DataSetClassId" field.</summary>
  public const int DataSetClassIdFieldNumber = 3;
  private global::Guid dataSetClassId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Guid DataSetClassId {
    get { return dataSetClassId_; }
    set {
      dataSetClassId_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private global::LocalizedText description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalizedText Description {
    get { return description_; }
    set {
      description_ = value;
    }
  }

  /// <summary>Field number for the "EnumDataTypes" field.</summary>
  public const int EnumDataTypesFieldNumber = 5;
  private global::ListOfEnumDescription enumDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEnumDescription EnumDataTypes {
    get { return enumDataTypes_; }
    set {
      enumDataTypes_ = value;
    }
  }

  /// <summary>Field number for the "Fields" field.</summary>
  public const int FieldsFieldNumber = 6;
  private global::ListOfFieldMetaData fields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfFieldMetaData Fields {
    get { return fields_; }
    set {
      fields_ = value;
    }
  }

  /// <summary>Field number for the "FileHeader" field.</summary>
  public const int FileHeaderFieldNumber = 7;
  private global::ListOfKeyValuePair fileHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair FileHeader {
    get { return fileHeader_; }
    set {
      fileHeader_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 8;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "Namespaces" field.</summary>
  public const int NamespacesFieldNumber = 9;
  private global::ListOfString namespaces_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString Namespaces {
    get { return namespaces_; }
    set {
      namespaces_ = value;
    }
  }

  /// <summary>Field number for the "SchemaLocation" field.</summary>
  public const int SchemaLocationFieldNumber = 10;
  private readonly static string SchemaLocationDefaultValue = "";

  private string schemaLocation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SchemaLocation {
    get { return schemaLocation_ ?? SchemaLocationDefaultValue; }
    set {
      schemaLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SchemaLocation" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSchemaLocation {
    get { return schemaLocation_ != null; }
  }
  /// <summary>Clears the value of the "SchemaLocation" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSchemaLocation() {
    schemaLocation_ = null;
  }

  /// <summary>Field number for the "SimpleDataTypes" field.</summary>
  public const int SimpleDataTypesFieldNumber = 11;
  private global::ListOfSimpleTypeDescription simpleDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSimpleTypeDescription SimpleDataTypes {
    get { return simpleDataTypes_; }
    set {
      simpleDataTypes_ = value;
    }
  }

  /// <summary>Field number for the "StructureDataTypes" field.</summary>
  public const int StructureDataTypesFieldNumber = 12;
  private global::ListOfStructureDescription structureDataTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStructureDescription StructureDataTypes {
    get { return structureDataTypes_; }
    set {
      structureDataTypes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataTypeSchemaHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataTypeSchemaHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Body, other.Body)) return false;
    if (!object.Equals(ConfigurationVersion, other.ConfigurationVersion)) return false;
    if (!object.Equals(DataSetClassId, other.DataSetClassId)) return false;
    if (!object.Equals(Description, other.Description)) return false;
    if (!object.Equals(EnumDataTypes, other.EnumDataTypes)) return false;
    if (!object.Equals(Fields, other.Fields)) return false;
    if (!object.Equals(FileHeader, other.FileHeader)) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(Namespaces, other.Namespaces)) return false;
    if (SchemaLocation != other.SchemaLocation) return false;
    if (!object.Equals(SimpleDataTypes, other.SimpleDataTypes)) return false;
    if (!object.Equals(StructureDataTypes, other.StructureDataTypes)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (body_ != null) hash ^= Body.GetHashCode();
    if (configurationVersion_ != null) hash ^= ConfigurationVersion.GetHashCode();
    if (dataSetClassId_ != null) hash ^= DataSetClassId.GetHashCode();
    if (description_ != null) hash ^= Description.GetHashCode();
    if (enumDataTypes_ != null) hash ^= EnumDataTypes.GetHashCode();
    if (fields_ != null) hash ^= Fields.GetHashCode();
    if (fileHeader_ != null) hash ^= FileHeader.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (namespaces_ != null) hash ^= Namespaces.GetHashCode();
    if (HasSchemaLocation) hash ^= SchemaLocation.GetHashCode();
    if (simpleDataTypes_ != null) hash ^= SimpleDataTypes.GetHashCode();
    if (structureDataTypes_ != null) hash ^= StructureDataTypes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (body_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Body);
    }
    if (configurationVersion_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConfigurationVersion);
    }
    if (dataSetClassId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataSetClassId);
    }
    if (description_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Description);
    }
    if (enumDataTypes_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(EnumDataTypes);
    }
    if (fields_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Fields);
    }
    if (fileHeader_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(FileHeader);
    }
    if (HasName) {
      output.WriteRawTag(66);
      output.WriteString(Name);
    }
    if (namespaces_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Namespaces);
    }
    if (HasSchemaLocation) {
      output.WriteRawTag(82);
      output.WriteString(SchemaLocation);
    }
    if (simpleDataTypes_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(SimpleDataTypes);
    }
    if (structureDataTypes_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(StructureDataTypes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (body_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
    }
    if (configurationVersion_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigurationVersion);
    }
    if (dataSetClassId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetClassId);
    }
    if (description_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
    }
    if (enumDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnumDataTypes);
    }
    if (fields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fields);
    }
    if (fileHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileHeader);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (namespaces_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Namespaces);
    }
    if (HasSchemaLocation) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaLocation);
    }
    if (simpleDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleDataTypes);
    }
    if (structureDataTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructureDataTypes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataTypeSchemaHeader other) {
    if (other == null) {
      return;
    }
    if (other.body_ != null) {
      if (body_ == null) {
        Body = new global::Variant();
      }
      Body.MergeFrom(other.Body);
    }
    if (other.configurationVersion_ != null) {
      if (configurationVersion_ == null) {
        ConfigurationVersion = new global::ConfigurationVersionDataType();
      }
      ConfigurationVersion.MergeFrom(other.ConfigurationVersion);
    }
    if (other.dataSetClassId_ != null) {
      if (dataSetClassId_ == null) {
        DataSetClassId = new global::Guid();
      }
      DataSetClassId.MergeFrom(other.DataSetClassId);
    }
    if (other.description_ != null) {
      if (description_ == null) {
        Description = new global::LocalizedText();
      }
      Description.MergeFrom(other.Description);
    }
    if (other.enumDataTypes_ != null) {
      if (enumDataTypes_ == null) {
        EnumDataTypes = new global::ListOfEnumDescription();
      }
      EnumDataTypes.MergeFrom(other.EnumDataTypes);
    }
    if (other.fields_ != null) {
      if (fields_ == null) {
        Fields = new global::ListOfFieldMetaData();
      }
      Fields.MergeFrom(other.Fields);
    }
    if (other.fileHeader_ != null) {
      if (fileHeader_ == null) {
        FileHeader = new global::ListOfKeyValuePair();
      }
      FileHeader.MergeFrom(other.FileHeader);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.namespaces_ != null) {
      if (namespaces_ == null) {
        Namespaces = new global::ListOfString();
      }
      Namespaces.MergeFrom(other.Namespaces);
    }
    if (other.HasSchemaLocation) {
      SchemaLocation = other.SchemaLocation;
    }
    if (other.simpleDataTypes_ != null) {
      if (simpleDataTypes_ == null) {
        SimpleDataTypes = new global::ListOfSimpleTypeDescription();
      }
      SimpleDataTypes.MergeFrom(other.SimpleDataTypes);
    }
    if (other.structureDataTypes_ != null) {
      if (structureDataTypes_ == null) {
        StructureDataTypes = new global::ListOfStructureDescription();
      }
      StructureDataTypes.MergeFrom(other.StructureDataTypes);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (body_ == null) {
            Body = new global::Variant();
          }
          input.ReadMessage(Body);
          break;
        }
        case 18: {
          if (configurationVersion_ == null) {
            ConfigurationVersion = new global::ConfigurationVersionDataType();
          }
          input.ReadMessage(ConfigurationVersion);
          break;
        }
        case 26: {
          if (dataSetClassId_ == null) {
            DataSetClassId = new global::Guid();
          }
          input.ReadMessage(DataSetClassId);
          break;
        }
        case 34: {
          if (description_ == null) {
            Description = new global::LocalizedText();
          }
          input.ReadMessage(Description);
          break;
        }
        case 42: {
          if (enumDataTypes_ == null) {
            EnumDataTypes = new global::ListOfEnumDescription();
          }
          input.ReadMessage(EnumDataTypes);
          break;
        }
        case 50: {
          if (fields_ == null) {
            Fields = new global::ListOfFieldMetaData();
          }
          input.ReadMessage(Fields);
          break;
        }
        case 58: {
          if (fileHeader_ == null) {
            FileHeader = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(FileHeader);
          break;
        }
        case 66: {
          Name = input.ReadString();
          break;
        }
        case 74: {
          if (namespaces_ == null) {
            Namespaces = new global::ListOfString();
          }
          input.ReadMessage(Namespaces);
          break;
        }
        case 82: {
          SchemaLocation = input.ReadString();
          break;
        }
        case 90: {
          if (simpleDataTypes_ == null) {
            SimpleDataTypes = new global::ListOfSimpleTypeDescription();
          }
          input.ReadMessage(SimpleDataTypes);
          break;
        }
        case 98: {
          if (structureDataTypes_ == null) {
            StructureDataTypes = new global::ListOfStructureDescription();
          }
          input.ReadMessage(StructureDataTypes);
          break;
        }
      }
    }
  }

}

public sealed partial class EventFilter : pb::IMessage<EventFilter> {
  private static readonly pb::MessageParser<EventFilter> _parser = new pb::MessageParser<EventFilter>(() => new EventFilter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventFilter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[449]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilter(EventFilter other) : this() {
    selectClauses_ = other.selectClauses_ != null ? other.selectClauses_.Clone() : null;
    whereClause_ = other.whereClause_ != null ? other.whereClause_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilter Clone() {
    return new EventFilter(this);
  }

  /// <summary>Field number for the "SelectClauses" field.</summary>
  public const int SelectClausesFieldNumber = 1;
  private global::ListOfSimpleAttributeOperand selectClauses_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSimpleAttributeOperand SelectClauses {
    get { return selectClauses_; }
    set {
      selectClauses_ = value;
    }
  }

  /// <summary>Field number for the "WhereClause" field.</summary>
  public const int WhereClauseFieldNumber = 2;
  private global::ContentFilter whereClause_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilter WhereClause {
    get { return whereClause_; }
    set {
      whereClause_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventFilter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventFilter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SelectClauses, other.SelectClauses)) return false;
    if (!object.Equals(WhereClause, other.WhereClause)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (selectClauses_ != null) hash ^= SelectClauses.GetHashCode();
    if (whereClause_ != null) hash ^= WhereClause.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (selectClauses_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SelectClauses);
    }
    if (whereClause_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(WhereClause);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (selectClauses_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectClauses);
    }
    if (whereClause_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhereClause);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventFilter other) {
    if (other == null) {
      return;
    }
    if (other.selectClauses_ != null) {
      if (selectClauses_ == null) {
        SelectClauses = new global::ListOfSimpleAttributeOperand();
      }
      SelectClauses.MergeFrom(other.SelectClauses);
    }
    if (other.whereClause_ != null) {
      if (whereClause_ == null) {
        WhereClause = new global::ContentFilter();
      }
      WhereClause.MergeFrom(other.WhereClause);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (selectClauses_ == null) {
            SelectClauses = new global::ListOfSimpleAttributeOperand();
          }
          input.ReadMessage(SelectClauses);
          break;
        }
        case 18: {
          if (whereClause_ == null) {
            WhereClause = new global::ContentFilter();
          }
          input.ReadMessage(WhereClause);
          break;
        }
      }
    }
  }

}

public sealed partial class EventFilterResult : pb::IMessage<EventFilterResult> {
  private static readonly pb::MessageParser<EventFilterResult> _parser = new pb::MessageParser<EventFilterResult>(() => new EventFilterResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventFilterResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[450]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilterResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilterResult(EventFilterResult other) : this() {
    selectClauseDiagnosticInfos_ = other.selectClauseDiagnosticInfos_ != null ? other.selectClauseDiagnosticInfos_.Clone() : null;
    selectClauseResults_ = other.selectClauseResults_ != null ? other.selectClauseResults_.Clone() : null;
    whereClauseResult_ = other.whereClauseResult_ != null ? other.whereClauseResult_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventFilterResult Clone() {
    return new EventFilterResult(this);
  }

  /// <summary>Field number for the "SelectClauseDiagnosticInfos" field.</summary>
  public const int SelectClauseDiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo selectClauseDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo SelectClauseDiagnosticInfos {
    get { return selectClauseDiagnosticInfos_; }
    set {
      selectClauseDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "SelectClauseResults" field.</summary>
  public const int SelectClauseResultsFieldNumber = 2;
  private global::ListOfStatusCode selectClauseResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode SelectClauseResults {
    get { return selectClauseResults_; }
    set {
      selectClauseResults_ = value;
    }
  }

  /// <summary>Field number for the "WhereClauseResult" field.</summary>
  public const int WhereClauseResultFieldNumber = 3;
  private global::ContentFilterResult whereClauseResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilterResult WhereClauseResult {
    get { return whereClauseResult_; }
    set {
      whereClauseResult_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventFilterResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventFilterResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SelectClauseDiagnosticInfos, other.SelectClauseDiagnosticInfos)) return false;
    if (!object.Equals(SelectClauseResults, other.SelectClauseResults)) return false;
    if (!object.Equals(WhereClauseResult, other.WhereClauseResult)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (selectClauseDiagnosticInfos_ != null) hash ^= SelectClauseDiagnosticInfos.GetHashCode();
    if (selectClauseResults_ != null) hash ^= SelectClauseResults.GetHashCode();
    if (whereClauseResult_ != null) hash ^= WhereClauseResult.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (selectClauseDiagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SelectClauseDiagnosticInfos);
    }
    if (selectClauseResults_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SelectClauseResults);
    }
    if (whereClauseResult_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(WhereClauseResult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (selectClauseDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectClauseDiagnosticInfos);
    }
    if (selectClauseResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectClauseResults);
    }
    if (whereClauseResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhereClauseResult);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventFilterResult other) {
    if (other == null) {
      return;
    }
    if (other.selectClauseDiagnosticInfos_ != null) {
      if (selectClauseDiagnosticInfos_ == null) {
        SelectClauseDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      SelectClauseDiagnosticInfos.MergeFrom(other.SelectClauseDiagnosticInfos);
    }
    if (other.selectClauseResults_ != null) {
      if (selectClauseResults_ == null) {
        SelectClauseResults = new global::ListOfStatusCode();
      }
      SelectClauseResults.MergeFrom(other.SelectClauseResults);
    }
    if (other.whereClauseResult_ != null) {
      if (whereClauseResult_ == null) {
        WhereClauseResult = new global::ContentFilterResult();
      }
      WhereClauseResult.MergeFrom(other.WhereClauseResult);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (selectClauseDiagnosticInfos_ == null) {
            SelectClauseDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(SelectClauseDiagnosticInfos);
          break;
        }
        case 18: {
          if (selectClauseResults_ == null) {
            SelectClauseResults = new global::ListOfStatusCode();
          }
          input.ReadMessage(SelectClauseResults);
          break;
        }
        case 26: {
          if (whereClauseResult_ == null) {
            WhereClauseResult = new global::ContentFilterResult();
          }
          input.ReadMessage(WhereClauseResult);
          break;
        }
      }
    }
  }

}

public sealed partial class EventNotificationList : pb::IMessage<EventNotificationList> {
  private static readonly pb::MessageParser<EventNotificationList> _parser = new pb::MessageParser<EventNotificationList>(() => new EventNotificationList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventNotificationList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[451]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventNotificationList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventNotificationList(EventNotificationList other) : this() {
    events_ = other.events_ != null ? other.events_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventNotificationList Clone() {
    return new EventNotificationList(this);
  }

  /// <summary>Field number for the "Events" field.</summary>
  public const int EventsFieldNumber = 1;
  private global::ListOfEventFieldList events_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEventFieldList Events {
    get { return events_; }
    set {
      events_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventNotificationList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventNotificationList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Events, other.Events)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (events_ != null) hash ^= Events.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (events_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Events);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (events_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Events);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventNotificationList other) {
    if (other == null) {
      return;
    }
    if (other.events_ != null) {
      if (events_ == null) {
        Events = new global::ListOfEventFieldList();
      }
      Events.MergeFrom(other.Events);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (events_ == null) {
            Events = new global::ListOfEventFieldList();
          }
          input.ReadMessage(Events);
          break;
        }
      }
    }
  }

}

public sealed partial class GetEndpointsResponse : pb::IMessage<GetEndpointsResponse> {
  private static readonly pb::MessageParser<GetEndpointsResponse> _parser = new pb::MessageParser<GetEndpointsResponse>(() => new GetEndpointsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetEndpointsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[452]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetEndpointsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetEndpointsResponse(GetEndpointsResponse other) : this() {
    endpoints_ = other.endpoints_ != null ? other.endpoints_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetEndpointsResponse Clone() {
    return new GetEndpointsResponse(this);
  }

  /// <summary>Field number for the "Endpoints" field.</summary>
  public const int EndpointsFieldNumber = 1;
  private global::ListOfEndpointDescription endpoints_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEndpointDescription Endpoints {
    get { return endpoints_; }
    set {
      endpoints_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetEndpointsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetEndpointsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Endpoints, other.Endpoints)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (endpoints_ != null) hash ^= Endpoints.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (endpoints_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Endpoints);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (endpoints_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Endpoints);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetEndpointsResponse other) {
    if (other == null) {
      return;
    }
    if (other.endpoints_ != null) {
      if (endpoints_ == null) {
        Endpoints = new global::ListOfEndpointDescription();
      }
      Endpoints.MergeFrom(other.Endpoints);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (endpoints_ == null) {
            Endpoints = new global::ListOfEndpointDescription();
          }
          input.ReadMessage(Endpoints);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryEvent : pb::IMessage<HistoryEvent> {
  private static readonly pb::MessageParser<HistoryEvent> _parser = new pb::MessageParser<HistoryEvent>(() => new HistoryEvent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[453]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryEvent(HistoryEvent other) : this() {
    events_ = other.events_ != null ? other.events_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryEvent Clone() {
    return new HistoryEvent(this);
  }

  /// <summary>Field number for the "Events" field.</summary>
  public const int EventsFieldNumber = 1;
  private global::ListOfHistoryEventFieldList events_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfHistoryEventFieldList Events {
    get { return events_; }
    set {
      events_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Events, other.Events)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (events_ != null) hash ^= Events.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (events_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Events);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (events_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Events);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryEvent other) {
    if (other == null) {
      return;
    }
    if (other.events_ != null) {
      if (events_ == null) {
        Events = new global::ListOfHistoryEventFieldList();
      }
      Events.MergeFrom(other.Events);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (events_ == null) {
            Events = new global::ListOfHistoryEventFieldList();
          }
          input.ReadMessage(Events);
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryReadDetails : pb::IMessage<HistoryReadDetails> {
  private static readonly pb::MessageParser<HistoryReadDetails> _parser = new pb::MessageParser<HistoryReadDetails>(() => new HistoryReadDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryReadDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[454]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadDetails(HistoryReadDetails other) : this() {
    _hasBits0 = other._hasBits0;
    AggregateConfiguration_ = other.AggregateConfiguration_ != null ? other.AggregateConfiguration_.Clone() : null;
    aggregateType_ = other.aggregateType_ != null ? other.aggregateType_.Clone() : null;
    endTime_ = other.endTime_;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    isReadModified_ = other.isReadModified_;
    numValuesPerNode_ = other.numValuesPerNode_;
    processingInterval_ = other.processingInterval_;
    reqTimes_ = other.reqTimes_ != null ? other.reqTimes_.Clone() : null;
    returnBounds_ = other.returnBounds_;
    startTime_ = other.startTime_;
    useSimpleBounds_ = other.useSimpleBounds_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryReadDetails Clone() {
    return new HistoryReadDetails(this);
  }

  /// <summary>Field number for the "_AggregateConfiguration" field.</summary>
  public const int AggregateConfigurationFieldNumber = 1;
  private global::AggregateConfiguration AggregateConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AggregateConfiguration AggregateConfiguration {
    get { return AggregateConfiguration_; }
    set {
      AggregateConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "AggregateType" field.</summary>
  public const int AggregateTypeFieldNumber = 2;
  private global::ListOfNodeId aggregateType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfNodeId AggregateType {
    get { return aggregateType_; }
    set {
      aggregateType_ = value;
    }
  }

  /// <summary>Field number for the "EndTime" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private readonly static long EndTimeDefaultValue = 0L;

  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { if ((_hasBits0 & 1) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      endTime_ = value;
    }
  }
  /// <summary>Gets whether the "EndTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "EndTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 4;
  private global::EventFilter filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EventFilter Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "IsReadModified" field.</summary>
  public const int IsReadModifiedFieldNumber = 5;
  private readonly static bool IsReadModifiedDefaultValue = false;

  private bool isReadModified_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReadModified {
    get { if ((_hasBits0 & 2) != 0) { return isReadModified_; } else { return IsReadModifiedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isReadModified_ = value;
    }
  }
  /// <summary>Gets whether the "IsReadModified" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsReadModified {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsReadModified" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsReadModified() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NumValuesPerNode" field.</summary>
  public const int NumValuesPerNodeFieldNumber = 6;
  private readonly static uint NumValuesPerNodeDefaultValue = 0;

  private uint numValuesPerNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NumValuesPerNode {
    get { if ((_hasBits0 & 4) != 0) { return numValuesPerNode_; } else { return NumValuesPerNodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      numValuesPerNode_ = value;
    }
  }
  /// <summary>Gets whether the "NumValuesPerNode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNumValuesPerNode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "NumValuesPerNode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNumValuesPerNode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ProcessingInterval" field.</summary>
  public const int ProcessingIntervalFieldNumber = 7;
  private readonly static double ProcessingIntervalDefaultValue = 0D;

  private double processingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ProcessingInterval {
    get { if ((_hasBits0 & 8) != 0) { return processingInterval_; } else { return ProcessingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 8;
      processingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "ProcessingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessingInterval {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ProcessingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessingInterval() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ReqTimes" field.</summary>
  public const int ReqTimesFieldNumber = 8;
  private global::ListOfDateTime reqTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDateTime ReqTimes {
    get { return reqTimes_; }
    set {
      reqTimes_ = value;
    }
  }

  /// <summary>Field number for the "ReturnBounds" field.</summary>
  public const int ReturnBoundsFieldNumber = 9;
  private readonly static bool ReturnBoundsDefaultValue = false;

  private bool returnBounds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReturnBounds {
    get { if ((_hasBits0 & 16) != 0) { return returnBounds_; } else { return ReturnBoundsDefaultValue; } }
    set {
      _hasBits0 |= 16;
      returnBounds_ = value;
    }
  }
  /// <summary>Gets whether the "ReturnBounds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReturnBounds {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ReturnBounds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReturnBounds() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 10;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 32) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "UseSimpleBounds" field.</summary>
  public const int UseSimpleBoundsFieldNumber = 11;
  private readonly static bool UseSimpleBoundsDefaultValue = false;

  private bool useSimpleBounds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseSimpleBounds {
    get { if ((_hasBits0 & 64) != 0) { return useSimpleBounds_; } else { return UseSimpleBoundsDefaultValue; } }
    set {
      _hasBits0 |= 64;
      useSimpleBounds_ = value;
    }
  }
  /// <summary>Gets whether the "UseSimpleBounds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUseSimpleBounds {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "UseSimpleBounds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUseSimpleBounds() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryReadDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryReadDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AggregateConfiguration, other.AggregateConfiguration)) return false;
    if (!object.Equals(AggregateType, other.AggregateType)) return false;
    if (EndTime != other.EndTime) return false;
    if (!object.Equals(Filter, other.Filter)) return false;
    if (IsReadModified != other.IsReadModified) return false;
    if (NumValuesPerNode != other.NumValuesPerNode) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProcessingInterval, other.ProcessingInterval)) return false;
    if (!object.Equals(ReqTimes, other.ReqTimes)) return false;
    if (ReturnBounds != other.ReturnBounds) return false;
    if (StartTime != other.StartTime) return false;
    if (UseSimpleBounds != other.UseSimpleBounds) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AggregateConfiguration_ != null) hash ^= AggregateConfiguration.GetHashCode();
    if (aggregateType_ != null) hash ^= AggregateType.GetHashCode();
    if (HasEndTime) hash ^= EndTime.GetHashCode();
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (HasIsReadModified) hash ^= IsReadModified.GetHashCode();
    if (HasNumValuesPerNode) hash ^= NumValuesPerNode.GetHashCode();
    if (HasProcessingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProcessingInterval);
    if (reqTimes_ != null) hash ^= ReqTimes.GetHashCode();
    if (HasReturnBounds) hash ^= ReturnBounds.GetHashCode();
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (HasUseSimpleBounds) hash ^= UseSimpleBounds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AggregateConfiguration_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AggregateType);
    }
    if (HasEndTime) {
      output.WriteRawTag(24);
      output.WriteInt64(EndTime);
    }
    if (filter_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Filter);
    }
    if (HasIsReadModified) {
      output.WriteRawTag(40);
      output.WriteBool(IsReadModified);
    }
    if (HasNumValuesPerNode) {
      output.WriteRawTag(48);
      output.WriteUInt32(NumValuesPerNode);
    }
    if (HasProcessingInterval) {
      output.WriteRawTag(57);
      output.WriteDouble(ProcessingInterval);
    }
    if (reqTimes_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(ReqTimes);
    }
    if (HasReturnBounds) {
      output.WriteRawTag(72);
      output.WriteBool(ReturnBounds);
    }
    if (HasStartTime) {
      output.WriteRawTag(80);
      output.WriteInt64(StartTime);
    }
    if (HasUseSimpleBounds) {
      output.WriteRawTag(88);
      output.WriteBool(UseSimpleBounds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AggregateConfiguration_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateType);
    }
    if (HasEndTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (HasIsReadModified) {
      size += 1 + 1;
    }
    if (HasNumValuesPerNode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumValuesPerNode);
    }
    if (HasProcessingInterval) {
      size += 1 + 8;
    }
    if (reqTimes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqTimes);
    }
    if (HasReturnBounds) {
      size += 1 + 1;
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (HasUseSimpleBounds) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryReadDetails other) {
    if (other == null) {
      return;
    }
    if (other.AggregateConfiguration_ != null) {
      if (AggregateConfiguration_ == null) {
        AggregateConfiguration = new global::AggregateConfiguration();
      }
      AggregateConfiguration.MergeFrom(other.AggregateConfiguration);
    }
    if (other.aggregateType_ != null) {
      if (aggregateType_ == null) {
        AggregateType = new global::ListOfNodeId();
      }
      AggregateType.MergeFrom(other.AggregateType);
    }
    if (other.HasEndTime) {
      EndTime = other.EndTime;
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::EventFilter();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.HasIsReadModified) {
      IsReadModified = other.IsReadModified;
    }
    if (other.HasNumValuesPerNode) {
      NumValuesPerNode = other.NumValuesPerNode;
    }
    if (other.HasProcessingInterval) {
      ProcessingInterval = other.ProcessingInterval;
    }
    if (other.reqTimes_ != null) {
      if (reqTimes_ == null) {
        ReqTimes = new global::ListOfDateTime();
      }
      ReqTimes.MergeFrom(other.ReqTimes);
    }
    if (other.HasReturnBounds) {
      ReturnBounds = other.ReturnBounds;
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    if (other.HasUseSimpleBounds) {
      UseSimpleBounds = other.UseSimpleBounds;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (AggregateConfiguration_ == null) {
            AggregateConfiguration = new global::AggregateConfiguration();
          }
          input.ReadMessage(AggregateConfiguration);
          break;
        }
        case 18: {
          if (aggregateType_ == null) {
            AggregateType = new global::ListOfNodeId();
          }
          input.ReadMessage(AggregateType);
          break;
        }
        case 24: {
          EndTime = input.ReadInt64();
          break;
        }
        case 34: {
          if (filter_ == null) {
            Filter = new global::EventFilter();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 40: {
          IsReadModified = input.ReadBool();
          break;
        }
        case 48: {
          NumValuesPerNode = input.ReadUInt32();
          break;
        }
        case 57: {
          ProcessingInterval = input.ReadDouble();
          break;
        }
        case 66: {
          if (reqTimes_ == null) {
            ReqTimes = new global::ListOfDateTime();
          }
          input.ReadMessage(ReqTimes);
          break;
        }
        case 72: {
          ReturnBounds = input.ReadBool();
          break;
        }
        case 80: {
          StartTime = input.ReadInt64();
          break;
        }
        case 88: {
          UseSimpleBounds = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class HistoryUpdateDetails : pb::IMessage<HistoryUpdateDetails> {
  private static readonly pb::MessageParser<HistoryUpdateDetails> _parser = new pb::MessageParser<HistoryUpdateDetails>(() => new HistoryUpdateDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryUpdateDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[455]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateDetails(HistoryUpdateDetails other) : this() {
    _hasBits0 = other._hasBits0;
    endTime_ = other.endTime_;
    eventData_ = other.eventData_ != null ? other.eventData_.Clone() : null;
    eventIds_ = other.eventIds_ != null ? other.eventIds_.Clone() : null;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    isDeleteModified_ = other.isDeleteModified_;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    performInsertReplace_ = other.performInsertReplace_;
    reqTimes_ = other.reqTimes_ != null ? other.reqTimes_.Clone() : null;
    startTime_ = other.startTime_;
    updateValues_ = other.updateValues_ != null ? other.updateValues_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateDetails Clone() {
    return new HistoryUpdateDetails(this);
  }

  /// <summary>Field number for the "EndTime" field.</summary>
  public const int EndTimeFieldNumber = 1;
  private readonly static long EndTimeDefaultValue = 0L;

  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { if ((_hasBits0 & 1) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      endTime_ = value;
    }
  }
  /// <summary>Gets whether the "EndTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "EndTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "EventData" field.</summary>
  public const int EventDataFieldNumber = 2;
  private global::ListOfHistoryEventFieldList eventData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfHistoryEventFieldList EventData {
    get { return eventData_; }
    set {
      eventData_ = value;
    }
  }

  /// <summary>Field number for the "EventIds" field.</summary>
  public const int EventIdsFieldNumber = 3;
  private global::ListOfByteString eventIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfByteString EventIds {
    get { return eventIds_; }
    set {
      eventIds_ = value;
    }
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 4;
  private global::EventFilter filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EventFilter Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "IsDeleteModified" field.</summary>
  public const int IsDeleteModifiedFieldNumber = 5;
  private readonly static bool IsDeleteModifiedDefaultValue = false;

  private bool isDeleteModified_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDeleteModified {
    get { if ((_hasBits0 & 2) != 0) { return isDeleteModified_; } else { return IsDeleteModifiedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isDeleteModified_ = value;
    }
  }
  /// <summary>Gets whether the "IsDeleteModified" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsDeleteModified {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "IsDeleteModified" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsDeleteModified() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 6;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "PerformInsertReplace" field.</summary>
  public const int PerformInsertReplaceFieldNumber = 7;
  private readonly static global::HistoryUpdateDetails.Types.PerformUpdateType PerformInsertReplaceDefaultValue = global::HistoryUpdateDetails.Types.PerformUpdateType.Insert1;

  private global::HistoryUpdateDetails.Types.PerformUpdateType performInsertReplace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HistoryUpdateDetails.Types.PerformUpdateType PerformInsertReplace {
    get { if ((_hasBits0 & 4) != 0) { return performInsertReplace_; } else { return PerformInsertReplaceDefaultValue; } }
    set {
      _hasBits0 |= 4;
      performInsertReplace_ = value;
    }
  }
  /// <summary>Gets whether the "PerformInsertReplace" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPerformInsertReplace {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "PerformInsertReplace" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPerformInsertReplace() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ReqTimes" field.</summary>
  public const int ReqTimesFieldNumber = 8;
  private global::ListOfDateTime reqTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDateTime ReqTimes {
    get { return reqTimes_; }
    set {
      reqTimes_ = value;
    }
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 9;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 8) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "UpdateValues" field.</summary>
  public const int UpdateValuesFieldNumber = 10;
  private global::ListOfDataValue updateValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataValue UpdateValues {
    get { return updateValues_; }
    set {
      updateValues_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryUpdateDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryUpdateDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndTime != other.EndTime) return false;
    if (!object.Equals(EventData, other.EventData)) return false;
    if (!object.Equals(EventIds, other.EventIds)) return false;
    if (!object.Equals(Filter, other.Filter)) return false;
    if (IsDeleteModified != other.IsDeleteModified) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (PerformInsertReplace != other.PerformInsertReplace) return false;
    if (!object.Equals(ReqTimes, other.ReqTimes)) return false;
    if (StartTime != other.StartTime) return false;
    if (!object.Equals(UpdateValues, other.UpdateValues)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndTime) hash ^= EndTime.GetHashCode();
    if (eventData_ != null) hash ^= EventData.GetHashCode();
    if (eventIds_ != null) hash ^= EventIds.GetHashCode();
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (HasIsDeleteModified) hash ^= IsDeleteModified.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (HasPerformInsertReplace) hash ^= PerformInsertReplace.GetHashCode();
    if (reqTimes_ != null) hash ^= ReqTimes.GetHashCode();
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (updateValues_ != null) hash ^= UpdateValues.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndTime) {
      output.WriteRawTag(8);
      output.WriteInt64(EndTime);
    }
    if (eventData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(EventData);
    }
    if (eventIds_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(EventIds);
    }
    if (filter_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Filter);
    }
    if (HasIsDeleteModified) {
      output.WriteRawTag(40);
      output.WriteBool(IsDeleteModified);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(NodeId);
    }
    if (HasPerformInsertReplace) {
      output.WriteRawTag(56);
      output.WriteEnum((int) PerformInsertReplace);
    }
    if (reqTimes_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(ReqTimes);
    }
    if (HasStartTime) {
      output.WriteRawTag(72);
      output.WriteInt64(StartTime);
    }
    if (updateValues_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(UpdateValues);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (eventData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventData);
    }
    if (eventIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventIds);
    }
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (HasIsDeleteModified) {
      size += 1 + 1;
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (HasPerformInsertReplace) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerformInsertReplace);
    }
    if (reqTimes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqTimes);
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (updateValues_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateValues);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryUpdateDetails other) {
    if (other == null) {
      return;
    }
    if (other.HasEndTime) {
      EndTime = other.EndTime;
    }
    if (other.eventData_ != null) {
      if (eventData_ == null) {
        EventData = new global::ListOfHistoryEventFieldList();
      }
      EventData.MergeFrom(other.EventData);
    }
    if (other.eventIds_ != null) {
      if (eventIds_ == null) {
        EventIds = new global::ListOfByteString();
      }
      EventIds.MergeFrom(other.EventIds);
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::EventFilter();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.HasIsDeleteModified) {
      IsDeleteModified = other.IsDeleteModified;
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.HasPerformInsertReplace) {
      PerformInsertReplace = other.PerformInsertReplace;
    }
    if (other.reqTimes_ != null) {
      if (reqTimes_ == null) {
        ReqTimes = new global::ListOfDateTime();
      }
      ReqTimes.MergeFrom(other.ReqTimes);
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    if (other.updateValues_ != null) {
      if (updateValues_ == null) {
        UpdateValues = new global::ListOfDataValue();
      }
      UpdateValues.MergeFrom(other.UpdateValues);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EndTime = input.ReadInt64();
          break;
        }
        case 18: {
          if (eventData_ == null) {
            EventData = new global::ListOfHistoryEventFieldList();
          }
          input.ReadMessage(EventData);
          break;
        }
        case 26: {
          if (eventIds_ == null) {
            EventIds = new global::ListOfByteString();
          }
          input.ReadMessage(EventIds);
          break;
        }
        case 34: {
          if (filter_ == null) {
            Filter = new global::EventFilter();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 40: {
          IsDeleteModified = input.ReadBool();
          break;
        }
        case 50: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 56: {
          PerformInsertReplace = (global::HistoryUpdateDetails.Types.PerformUpdateType) input.ReadEnum();
          break;
        }
        case 66: {
          if (reqTimes_ == null) {
            ReqTimes = new global::ListOfDateTime();
          }
          input.ReadMessage(ReqTimes);
          break;
        }
        case 72: {
          StartTime = input.ReadInt64();
          break;
        }
        case 82: {
          if (updateValues_ == null) {
            UpdateValues = new global::ListOfDataValue();
          }
          input.ReadMessage(UpdateValues);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the HistoryUpdateDetails message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PerformUpdateType {
      [pbr::OriginalName("PerformUpdateType_Insert_1")] Insert1 = 1,
      [pbr::OriginalName("PerformUpdateType_Remove_4")] Remove4 = 2,
      [pbr::OriginalName("PerformUpdateType_Replace_2")] Replace2 = 3,
      [pbr::OriginalName("PerformUpdateType_Update_3")] Update3 = 4,
    }

  }
  #endregion

}

public sealed partial class HistoryUpdateResponse : pb::IMessage<HistoryUpdateResponse> {
  private static readonly pb::MessageParser<HistoryUpdateResponse> _parser = new pb::MessageParser<HistoryUpdateResponse>(() => new HistoryUpdateResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryUpdateResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[456]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateResponse(HistoryUpdateResponse other) : this() {
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    results_ = other.results_ != null ? other.results_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryUpdateResponse Clone() {
    return new HistoryUpdateResponse(this);
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 1;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 2;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private global::ListOfHistoryUpdateResult results_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfHistoryUpdateResult Results {
    get { return results_; }
    set {
      results_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryUpdateResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryUpdateResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Results, other.Results)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (results_ != null) hash ^= Results.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseHeader);
    }
    if (results_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Results);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (results_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Results);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryUpdateResponse other) {
    if (other == null) {
      return;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.results_ != null) {
      if (results_ == null) {
        Results = new global::ListOfHistoryUpdateResult();
      }
      Results.MergeFrom(other.Results);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 18: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
        case 26: {
          if (results_ == null) {
            Results = new global::ListOfHistoryUpdateResult();
          }
          input.ReadMessage(Results);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfContentFilter : pb::IMessage<ListOfContentFilter> {
  private static readonly pb::MessageParser<ListOfContentFilter> _parser = new pb::MessageParser<ListOfContentFilter>(() => new ListOfContentFilter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfContentFilter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[457]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilter(ListOfContentFilter other) : this() {
    ContentFilter_ = other.ContentFilter_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfContentFilter Clone() {
    return new ListOfContentFilter(this);
  }

  /// <summary>Field number for the "_ContentFilter" field.</summary>
  public const int ContentFilterFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ContentFilter> _repeated_ContentFilter_codec
      = pb::FieldCodec.ForMessage(10, global::ContentFilter.Parser);
  private readonly pbc::RepeatedField<global::ContentFilter> ContentFilter_ = new pbc::RepeatedField<global::ContentFilter>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ContentFilter> ContentFilter {
    get { return ContentFilter_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfContentFilter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfContentFilter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ContentFilter_.Equals(other.ContentFilter_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ContentFilter_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ContentFilter_.WriteTo(output, _repeated_ContentFilter_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ContentFilter_.CalculateSize(_repeated_ContentFilter_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfContentFilter other) {
    if (other == null) {
      return;
    }
    ContentFilter_.Add(other.ContentFilter_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContentFilter_.AddEntriesFrom(input, _repeated_ContentFilter_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetMetaDataType : pb::IMessage<ListOfDataSetMetaDataType> {
  private static readonly pb::MessageParser<ListOfDataSetMetaDataType> _parser = new pb::MessageParser<ListOfDataSetMetaDataType>(() => new ListOfDataSetMetaDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetMetaDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[458]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetMetaDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetMetaDataType(ListOfDataSetMetaDataType other) : this() {
    DataSetMetaDataType_ = other.DataSetMetaDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetMetaDataType Clone() {
    return new ListOfDataSetMetaDataType(this);
  }

  /// <summary>Field number for the "_DataSetMetaDataType" field.</summary>
  public const int DataSetMetaDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataSetMetaDataType> _repeated_DataSetMetaDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DataSetMetaDataType.Parser);
  private readonly pbc::RepeatedField<global::DataSetMetaDataType> DataSetMetaDataType_ = new pbc::RepeatedField<global::DataSetMetaDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataSetMetaDataType> DataSetMetaDataType {
    get { return DataSetMetaDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetMetaDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetMetaDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetMetaDataType_.Equals(other.DataSetMetaDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetMetaDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetMetaDataType_.WriteTo(output, _repeated_DataSetMetaDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetMetaDataType_.CalculateSize(_repeated_DataSetMetaDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetMetaDataType other) {
    if (other == null) {
      return;
    }
    DataSetMetaDataType_.Add(other.DataSetMetaDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataSetMetaDataType_.AddEntriesFrom(input, _repeated_DataSetMetaDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataSetReaderDataType : pb::IMessage<ListOfDataSetReaderDataType> {
  private static readonly pb::MessageParser<ListOfDataSetReaderDataType> _parser = new pb::MessageParser<ListOfDataSetReaderDataType>(() => new ListOfDataSetReaderDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataSetReaderDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[459]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderDataType(ListOfDataSetReaderDataType other) : this() {
    DataSetReaderDataType_ = other.DataSetReaderDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataSetReaderDataType Clone() {
    return new ListOfDataSetReaderDataType(this);
  }

  /// <summary>Field number for the "_DataSetReaderDataType" field.</summary>
  public const int DataSetReaderDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataSetReaderDataType> _repeated_DataSetReaderDataType_codec
      = pb::FieldCodec.ForMessage(10, global::DataSetReaderDataType.Parser);
  private readonly pbc::RepeatedField<global::DataSetReaderDataType> DataSetReaderDataType_ = new pbc::RepeatedField<global::DataSetReaderDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataSetReaderDataType> DataSetReaderDataType {
    get { return DataSetReaderDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataSetReaderDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataSetReaderDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataSetReaderDataType_.Equals(other.DataSetReaderDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataSetReaderDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataSetReaderDataType_.WriteTo(output, _repeated_DataSetReaderDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataSetReaderDataType_.CalculateSize(_repeated_DataSetReaderDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataSetReaderDataType other) {
    if (other == null) {
      return;
    }
    DataSetReaderDataType_.Add(other.DataSetReaderDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataSetReaderDataType_.AddEntriesFrom(input, _repeated_DataSetReaderDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataTypeDescription : pb::IMessage<ListOfDataTypeDescription> {
  private static readonly pb::MessageParser<ListOfDataTypeDescription> _parser = new pb::MessageParser<ListOfDataTypeDescription>(() => new ListOfDataTypeDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataTypeDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[460]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeDescription(ListOfDataTypeDescription other) : this() {
    DataTypeDescription_ = other.DataTypeDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeDescription Clone() {
    return new ListOfDataTypeDescription(this);
  }

  /// <summary>Field number for the "_DataTypeDescription" field.</summary>
  public const int DataTypeDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataTypeDescription> _repeated_DataTypeDescription_codec
      = pb::FieldCodec.ForMessage(10, global::DataTypeDescription.Parser);
  private readonly pbc::RepeatedField<global::DataTypeDescription> DataTypeDescription_ = new pbc::RepeatedField<global::DataTypeDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataTypeDescription> DataTypeDescription {
    get { return DataTypeDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataTypeDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataTypeDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataTypeDescription_.Equals(other.DataTypeDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataTypeDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataTypeDescription_.WriteTo(output, _repeated_DataTypeDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataTypeDescription_.CalculateSize(_repeated_DataTypeDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataTypeDescription other) {
    if (other == null) {
      return;
    }
    DataTypeDescription_.Add(other.DataTypeDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataTypeDescription_.AddEntriesFrom(input, _repeated_DataTypeDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfDataTypeSchemaHeader : pb::IMessage<ListOfDataTypeSchemaHeader> {
  private static readonly pb::MessageParser<ListOfDataTypeSchemaHeader> _parser = new pb::MessageParser<ListOfDataTypeSchemaHeader>(() => new ListOfDataTypeSchemaHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfDataTypeSchemaHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[461]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeSchemaHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeSchemaHeader(ListOfDataTypeSchemaHeader other) : this() {
    DataTypeSchemaHeader_ = other.DataTypeSchemaHeader_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfDataTypeSchemaHeader Clone() {
    return new ListOfDataTypeSchemaHeader(this);
  }

  /// <summary>Field number for the "_DataTypeSchemaHeader" field.</summary>
  public const int DataTypeSchemaHeaderFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DataTypeSchemaHeader> _repeated_DataTypeSchemaHeader_codec
      = pb::FieldCodec.ForMessage(10, global::DataTypeSchemaHeader.Parser);
  private readonly pbc::RepeatedField<global::DataTypeSchemaHeader> DataTypeSchemaHeader_ = new pbc::RepeatedField<global::DataTypeSchemaHeader>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DataTypeSchemaHeader> DataTypeSchemaHeader {
    get { return DataTypeSchemaHeader_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfDataTypeSchemaHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfDataTypeSchemaHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!DataTypeSchemaHeader_.Equals(other.DataTypeSchemaHeader_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= DataTypeSchemaHeader_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    DataTypeSchemaHeader_.WriteTo(output, _repeated_DataTypeSchemaHeader_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += DataTypeSchemaHeader_.CalculateSize(_repeated_DataTypeSchemaHeader_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfDataTypeSchemaHeader other) {
    if (other == null) {
      return;
    }
    DataTypeSchemaHeader_.Add(other.DataTypeSchemaHeader_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataTypeSchemaHeader_.AddEntriesFrom(input, _repeated_DataTypeSchemaHeader_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfMonitoredItemCreateRequest : pb::IMessage<ListOfMonitoredItemCreateRequest> {
  private static readonly pb::MessageParser<ListOfMonitoredItemCreateRequest> _parser = new pb::MessageParser<ListOfMonitoredItemCreateRequest>(() => new ListOfMonitoredItemCreateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfMonitoredItemCreateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[462]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemCreateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemCreateRequest(ListOfMonitoredItemCreateRequest other) : this() {
    MonitoredItemCreateRequest_ = other.MonitoredItemCreateRequest_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemCreateRequest Clone() {
    return new ListOfMonitoredItemCreateRequest(this);
  }

  /// <summary>Field number for the "_MonitoredItemCreateRequest" field.</summary>
  public const int MonitoredItemCreateRequestFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MonitoredItemCreateRequest> _repeated_MonitoredItemCreateRequest_codec
      = pb::FieldCodec.ForMessage(10, global::MonitoredItemCreateRequest.Parser);
  private readonly pbc::RepeatedField<global::MonitoredItemCreateRequest> MonitoredItemCreateRequest_ = new pbc::RepeatedField<global::MonitoredItemCreateRequest>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MonitoredItemCreateRequest> MonitoredItemCreateRequest {
    get { return MonitoredItemCreateRequest_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfMonitoredItemCreateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfMonitoredItemCreateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!MonitoredItemCreateRequest_.Equals(other.MonitoredItemCreateRequest_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= MonitoredItemCreateRequest_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    MonitoredItemCreateRequest_.WriteTo(output, _repeated_MonitoredItemCreateRequest_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += MonitoredItemCreateRequest_.CalculateSize(_repeated_MonitoredItemCreateRequest_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfMonitoredItemCreateRequest other) {
    if (other == null) {
      return;
    }
    MonitoredItemCreateRequest_.Add(other.MonitoredItemCreateRequest_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MonitoredItemCreateRequest_.AddEntriesFrom(input, _repeated_MonitoredItemCreateRequest_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfMonitoredItemModifyRequest : pb::IMessage<ListOfMonitoredItemModifyRequest> {
  private static readonly pb::MessageParser<ListOfMonitoredItemModifyRequest> _parser = new pb::MessageParser<ListOfMonitoredItemModifyRequest>(() => new ListOfMonitoredItemModifyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfMonitoredItemModifyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[463]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemModifyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemModifyRequest(ListOfMonitoredItemModifyRequest other) : this() {
    MonitoredItemModifyRequest_ = other.MonitoredItemModifyRequest_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfMonitoredItemModifyRequest Clone() {
    return new ListOfMonitoredItemModifyRequest(this);
  }

  /// <summary>Field number for the "_MonitoredItemModifyRequest" field.</summary>
  public const int MonitoredItemModifyRequestFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MonitoredItemModifyRequest> _repeated_MonitoredItemModifyRequest_codec
      = pb::FieldCodec.ForMessage(10, global::MonitoredItemModifyRequest.Parser);
  private readonly pbc::RepeatedField<global::MonitoredItemModifyRequest> MonitoredItemModifyRequest_ = new pbc::RepeatedField<global::MonitoredItemModifyRequest>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MonitoredItemModifyRequest> MonitoredItemModifyRequest {
    get { return MonitoredItemModifyRequest_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfMonitoredItemModifyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfMonitoredItemModifyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!MonitoredItemModifyRequest_.Equals(other.MonitoredItemModifyRequest_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= MonitoredItemModifyRequest_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    MonitoredItemModifyRequest_.WriteTo(output, _repeated_MonitoredItemModifyRequest_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += MonitoredItemModifyRequest_.CalculateSize(_repeated_MonitoredItemModifyRequest_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfMonitoredItemModifyRequest other) {
    if (other == null) {
      return;
    }
    MonitoredItemModifyRequest_.Add(other.MonitoredItemModifyRequest_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MonitoredItemModifyRequest_.AddEntriesFrom(input, _repeated_MonitoredItemModifyRequest_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPublishedDataItemsDataType : pb::IMessage<ListOfPublishedDataItemsDataType> {
  private static readonly pb::MessageParser<ListOfPublishedDataItemsDataType> _parser = new pb::MessageParser<ListOfPublishedDataItemsDataType>(() => new ListOfPublishedDataItemsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPublishedDataItemsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[464]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataItemsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataItemsDataType(ListOfPublishedDataItemsDataType other) : this() {
    PublishedDataItemsDataType_ = other.PublishedDataItemsDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataItemsDataType Clone() {
    return new ListOfPublishedDataItemsDataType(this);
  }

  /// <summary>Field number for the "_PublishedDataItemsDataType" field.</summary>
  public const int PublishedDataItemsDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PublishedDataItemsDataType> _repeated_PublishedDataItemsDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PublishedDataItemsDataType.Parser);
  private readonly pbc::RepeatedField<global::PublishedDataItemsDataType> PublishedDataItemsDataType_ = new pbc::RepeatedField<global::PublishedDataItemsDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PublishedDataItemsDataType> PublishedDataItemsDataType {
    get { return PublishedDataItemsDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPublishedDataItemsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPublishedDataItemsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PublishedDataItemsDataType_.Equals(other.PublishedDataItemsDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PublishedDataItemsDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PublishedDataItemsDataType_.WriteTo(output, _repeated_PublishedDataItemsDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PublishedDataItemsDataType_.CalculateSize(_repeated_PublishedDataItemsDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPublishedDataItemsDataType other) {
    if (other == null) {
      return;
    }
    PublishedDataItemsDataType_.Add(other.PublishedDataItemsDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublishedDataItemsDataType_.AddEntriesFrom(input, _repeated_PublishedDataItemsDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfQueryDataDescription : pb::IMessage<ListOfQueryDataDescription> {
  private static readonly pb::MessageParser<ListOfQueryDataDescription> _parser = new pb::MessageParser<ListOfQueryDataDescription>(() => new ListOfQueryDataDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfQueryDataDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[465]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQueryDataDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQueryDataDescription(ListOfQueryDataDescription other) : this() {
    QueryDataDescription_ = other.QueryDataDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfQueryDataDescription Clone() {
    return new ListOfQueryDataDescription(this);
  }

  /// <summary>Field number for the "_QueryDataDescription" field.</summary>
  public const int QueryDataDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::QueryDataDescription> _repeated_QueryDataDescription_codec
      = pb::FieldCodec.ForMessage(10, global::QueryDataDescription.Parser);
  private readonly pbc::RepeatedField<global::QueryDataDescription> QueryDataDescription_ = new pbc::RepeatedField<global::QueryDataDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::QueryDataDescription> QueryDataDescription {
    get { return QueryDataDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfQueryDataDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfQueryDataDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!QueryDataDescription_.Equals(other.QueryDataDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= QueryDataDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    QueryDataDescription_.WriteTo(output, _repeated_QueryDataDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += QueryDataDescription_.CalculateSize(_repeated_QueryDataDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfQueryDataDescription other) {
    if (other == null) {
      return;
    }
    QueryDataDescription_.Add(other.QueryDataDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          QueryDataDescription_.AddEntriesFrom(input, _repeated_QueryDataDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfUABinaryFileDataType : pb::IMessage<ListOfUABinaryFileDataType> {
  private static readonly pb::MessageParser<ListOfUABinaryFileDataType> _parser = new pb::MessageParser<ListOfUABinaryFileDataType>(() => new ListOfUABinaryFileDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfUABinaryFileDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[466]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUABinaryFileDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUABinaryFileDataType(ListOfUABinaryFileDataType other) : this() {
    UABinaryFileDataType_ = other.UABinaryFileDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfUABinaryFileDataType Clone() {
    return new ListOfUABinaryFileDataType(this);
  }

  /// <summary>Field number for the "_UABinaryFileDataType" field.</summary>
  public const int UABinaryFileDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UABinaryFileDataType> _repeated_UABinaryFileDataType_codec
      = pb::FieldCodec.ForMessage(10, global::UABinaryFileDataType.Parser);
  private readonly pbc::RepeatedField<global::UABinaryFileDataType> UABinaryFileDataType_ = new pbc::RepeatedField<global::UABinaryFileDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UABinaryFileDataType> UABinaryFileDataType {
    get { return UABinaryFileDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfUABinaryFileDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfUABinaryFileDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!UABinaryFileDataType_.Equals(other.UABinaryFileDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= UABinaryFileDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    UABinaryFileDataType_.WriteTo(output, _repeated_UABinaryFileDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += UABinaryFileDataType_.CalculateSize(_repeated_UABinaryFileDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfUABinaryFileDataType other) {
    if (other == null) {
      return;
    }
    UABinaryFileDataType_.Add(other.UABinaryFileDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UABinaryFileDataType_.AddEntriesFrom(input, _repeated_UABinaryFileDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfWriterGroupDataType : pb::IMessage<ListOfWriterGroupDataType> {
  private static readonly pb::MessageParser<ListOfWriterGroupDataType> _parser = new pb::MessageParser<ListOfWriterGroupDataType>(() => new ListOfWriterGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfWriterGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[467]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupDataType(ListOfWriterGroupDataType other) : this() {
    WriterGroupDataType_ = other.WriterGroupDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfWriterGroupDataType Clone() {
    return new ListOfWriterGroupDataType(this);
  }

  /// <summary>Field number for the "_WriterGroupDataType" field.</summary>
  public const int WriterGroupDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::WriterGroupDataType> _repeated_WriterGroupDataType_codec
      = pb::FieldCodec.ForMessage(10, global::WriterGroupDataType.Parser);
  private readonly pbc::RepeatedField<global::WriterGroupDataType> WriterGroupDataType_ = new pbc::RepeatedField<global::WriterGroupDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::WriterGroupDataType> WriterGroupDataType {
    get { return WriterGroupDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfWriterGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfWriterGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!WriterGroupDataType_.Equals(other.WriterGroupDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= WriterGroupDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    WriterGroupDataType_.WriteTo(output, _repeated_WriterGroupDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += WriterGroupDataType_.CalculateSize(_repeated_WriterGroupDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfWriterGroupDataType other) {
    if (other == null) {
      return;
    }
    WriterGroupDataType_.Add(other.WriterGroupDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          WriterGroupDataType_.AddEntriesFrom(input, _repeated_WriterGroupDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ModifyMonitoredItemsRequest : pb::IMessage<ModifyMonitoredItemsRequest> {
  private static readonly pb::MessageParser<ModifyMonitoredItemsRequest> _parser = new pb::MessageParser<ModifyMonitoredItemsRequest>(() => new ModifyMonitoredItemsRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModifyMonitoredItemsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[468]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifyMonitoredItemsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifyMonitoredItemsRequest(ModifyMonitoredItemsRequest other) : this() {
    _hasBits0 = other._hasBits0;
    itemsToModify_ = other.itemsToModify_ != null ? other.itemsToModify_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionId_ = other.subscriptionId_;
    TimestampsToReturn_ = other.TimestampsToReturn_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModifyMonitoredItemsRequest Clone() {
    return new ModifyMonitoredItemsRequest(this);
  }

  /// <summary>Field number for the "ItemsToModify" field.</summary>
  public const int ItemsToModifyFieldNumber = 1;
  private global::ListOfMonitoredItemModifyRequest itemsToModify_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfMonitoredItemModifyRequest ItemsToModify {
    get { return itemsToModify_; }
    set {
      itemsToModify_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 3;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 1) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_TimestampsToReturn" field.</summary>
  public const int TimestampsToReturnFieldNumber = 4;
  private readonly static global::ModifyMonitoredItemsRequest.Types.TimestampsToReturn TimestampsToReturnDefaultValue = global::ModifyMonitoredItemsRequest.Types.TimestampsToReturn.Both2;

  private global::ModifyMonitoredItemsRequest.Types.TimestampsToReturn TimestampsToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModifyMonitoredItemsRequest.Types.TimestampsToReturn TimestampsToReturn {
    get { if ((_hasBits0 & 2) != 0) { return TimestampsToReturn_; } else { return TimestampsToReturnDefaultValue; } }
    set {
      _hasBits0 |= 2;
      TimestampsToReturn_ = value;
    }
  }
  /// <summary>Gets whether the "_TimestampsToReturn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestampsToReturn {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "_TimestampsToReturn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestampsToReturn() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModifyMonitoredItemsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModifyMonitoredItemsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ItemsToModify, other.ItemsToModify)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    if (TimestampsToReturn != other.TimestampsToReturn) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (itemsToModify_ != null) hash ^= ItemsToModify.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (HasTimestampsToReturn) hash ^= TimestampsToReturn.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (itemsToModify_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ItemsToModify);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(24);
      output.WriteUInt32(SubscriptionId);
    }
    if (HasTimestampsToReturn) {
      output.WriteRawTag(32);
      output.WriteEnum((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (itemsToModify_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemsToModify);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (HasTimestampsToReturn) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModifyMonitoredItemsRequest other) {
    if (other == null) {
      return;
    }
    if (other.itemsToModify_ != null) {
      if (itemsToModify_ == null) {
        ItemsToModify = new global::ListOfMonitoredItemModifyRequest();
      }
      ItemsToModify.MergeFrom(other.ItemsToModify);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    if (other.HasTimestampsToReturn) {
      TimestampsToReturn = other.TimestampsToReturn;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (itemsToModify_ == null) {
            ItemsToModify = new global::ListOfMonitoredItemModifyRequest();
          }
          input.ReadMessage(ItemsToModify);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 24: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
        case 32: {
          TimestampsToReturn = (global::ModifyMonitoredItemsRequest.Types.TimestampsToReturn) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ModifyMonitoredItemsRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TimestampsToReturn {
      [pbr::OriginalName("TimestampsToReturn_Both_2")] Both2 = 1,
      [pbr::OriginalName("TimestampsToReturn_Invalid_4")] Invalid4 = 2,
      [pbr::OriginalName("TimestampsToReturn_Neither_3")] Neither3 = 3,
      [pbr::OriginalName("TimestampsToReturn_Server_1")] Server1 = 4,
      [pbr::OriginalName("TimestampsToReturn_Source_0")] Source0 = 5,
    }

  }
  #endregion

}

public sealed partial class MonitoringFilter : pb::IMessage<MonitoringFilter> {
  private static readonly pb::MessageParser<MonitoringFilter> _parser = new pb::MessageParser<MonitoringFilter>(() => new MonitoringFilter());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoringFilter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[469]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringFilter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringFilter(MonitoringFilter other) : this() {
    _hasBits0 = other._hasBits0;
    AggregateConfiguration_ = other.AggregateConfiguration_ != null ? other.AggregateConfiguration_.Clone() : null;
    aggregateType_ = other.aggregateType_ != null ? other.aggregateType_.Clone() : null;
    deadbandType_ = other.deadbandType_;
    deadbandValue_ = other.deadbandValue_;
    processingInterval_ = other.processingInterval_;
    selectClauses_ = other.selectClauses_ != null ? other.selectClauses_.Clone() : null;
    startTime_ = other.startTime_;
    trigger_ = other.trigger_;
    whereClause_ = other.whereClause_ != null ? other.whereClause_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringFilter Clone() {
    return new MonitoringFilter(this);
  }

  /// <summary>Field number for the "_AggregateConfiguration" field.</summary>
  public const int AggregateConfigurationFieldNumber = 1;
  private global::AggregateConfiguration AggregateConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AggregateConfiguration AggregateConfiguration {
    get { return AggregateConfiguration_; }
    set {
      AggregateConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "AggregateType" field.</summary>
  public const int AggregateTypeFieldNumber = 2;
  private global::NodeId aggregateType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId AggregateType {
    get { return aggregateType_; }
    set {
      aggregateType_ = value;
    }
  }

  /// <summary>Field number for the "DeadbandType" field.</summary>
  public const int DeadbandTypeFieldNumber = 3;
  private readonly static uint DeadbandTypeDefaultValue = 0;

  private uint deadbandType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DeadbandType {
    get { if ((_hasBits0 & 1) != 0) { return deadbandType_; } else { return DeadbandTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deadbandType_ = value;
    }
  }
  /// <summary>Gets whether the "DeadbandType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeadbandType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "DeadbandType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeadbandType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "DeadbandValue" field.</summary>
  public const int DeadbandValueFieldNumber = 4;
  private readonly static double DeadbandValueDefaultValue = 0D;

  private double deadbandValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double DeadbandValue {
    get { if ((_hasBits0 & 2) != 0) { return deadbandValue_; } else { return DeadbandValueDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deadbandValue_ = value;
    }
  }
  /// <summary>Gets whether the "DeadbandValue" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeadbandValue {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "DeadbandValue" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeadbandValue() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ProcessingInterval" field.</summary>
  public const int ProcessingIntervalFieldNumber = 5;
  private readonly static double ProcessingIntervalDefaultValue = 0D;

  private double processingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ProcessingInterval {
    get { if ((_hasBits0 & 4) != 0) { return processingInterval_; } else { return ProcessingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 4;
      processingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "ProcessingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessingInterval {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ProcessingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessingInterval() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "SelectClauses" field.</summary>
  public const int SelectClausesFieldNumber = 6;
  private global::ListOfSimpleAttributeOperand selectClauses_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSimpleAttributeOperand SelectClauses {
    get { return selectClauses_; }
    set {
      selectClauses_ = value;
    }
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 7;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 8) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "Trigger" field.</summary>
  public const int TriggerFieldNumber = 8;
  private readonly static global::MonitoringFilter.Types.DataChangeTrigger TriggerDefaultValue = global::MonitoringFilter.Types.DataChangeTrigger.StatusValueTimestamp2;

  private global::MonitoringFilter.Types.DataChangeTrigger trigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MonitoringFilter.Types.DataChangeTrigger Trigger {
    get { if ((_hasBits0 & 16) != 0) { return trigger_; } else { return TriggerDefaultValue; } }
    set {
      _hasBits0 |= 16;
      trigger_ = value;
    }
  }
  /// <summary>Gets whether the "Trigger" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTrigger {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "Trigger" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTrigger() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "WhereClause" field.</summary>
  public const int WhereClauseFieldNumber = 9;
  private global::ContentFilter whereClause_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilter WhereClause {
    get { return whereClause_; }
    set {
      whereClause_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoringFilter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoringFilter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AggregateConfiguration, other.AggregateConfiguration)) return false;
    if (!object.Equals(AggregateType, other.AggregateType)) return false;
    if (DeadbandType != other.DeadbandType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeadbandValue, other.DeadbandValue)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProcessingInterval, other.ProcessingInterval)) return false;
    if (!object.Equals(SelectClauses, other.SelectClauses)) return false;
    if (StartTime != other.StartTime) return false;
    if (Trigger != other.Trigger) return false;
    if (!object.Equals(WhereClause, other.WhereClause)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AggregateConfiguration_ != null) hash ^= AggregateConfiguration.GetHashCode();
    if (aggregateType_ != null) hash ^= AggregateType.GetHashCode();
    if (HasDeadbandType) hash ^= DeadbandType.GetHashCode();
    if (HasDeadbandValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeadbandValue);
    if (HasProcessingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProcessingInterval);
    if (selectClauses_ != null) hash ^= SelectClauses.GetHashCode();
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (HasTrigger) hash ^= Trigger.GetHashCode();
    if (whereClause_ != null) hash ^= WhereClause.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AggregateConfiguration_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AggregateType);
    }
    if (HasDeadbandType) {
      output.WriteRawTag(24);
      output.WriteUInt32(DeadbandType);
    }
    if (HasDeadbandValue) {
      output.WriteRawTag(33);
      output.WriteDouble(DeadbandValue);
    }
    if (HasProcessingInterval) {
      output.WriteRawTag(41);
      output.WriteDouble(ProcessingInterval);
    }
    if (selectClauses_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(SelectClauses);
    }
    if (HasStartTime) {
      output.WriteRawTag(56);
      output.WriteInt64(StartTime);
    }
    if (HasTrigger) {
      output.WriteRawTag(64);
      output.WriteEnum((int) Trigger);
    }
    if (whereClause_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(WhereClause);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AggregateConfiguration_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateConfiguration);
    }
    if (aggregateType_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregateType);
    }
    if (HasDeadbandType) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadbandType);
    }
    if (HasDeadbandValue) {
      size += 1 + 8;
    }
    if (HasProcessingInterval) {
      size += 1 + 8;
    }
    if (selectClauses_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectClauses);
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (HasTrigger) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trigger);
    }
    if (whereClause_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhereClause);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoringFilter other) {
    if (other == null) {
      return;
    }
    if (other.AggregateConfiguration_ != null) {
      if (AggregateConfiguration_ == null) {
        AggregateConfiguration = new global::AggregateConfiguration();
      }
      AggregateConfiguration.MergeFrom(other.AggregateConfiguration);
    }
    if (other.aggregateType_ != null) {
      if (aggregateType_ == null) {
        AggregateType = new global::NodeId();
      }
      AggregateType.MergeFrom(other.AggregateType);
    }
    if (other.HasDeadbandType) {
      DeadbandType = other.DeadbandType;
    }
    if (other.HasDeadbandValue) {
      DeadbandValue = other.DeadbandValue;
    }
    if (other.HasProcessingInterval) {
      ProcessingInterval = other.ProcessingInterval;
    }
    if (other.selectClauses_ != null) {
      if (selectClauses_ == null) {
        SelectClauses = new global::ListOfSimpleAttributeOperand();
      }
      SelectClauses.MergeFrom(other.SelectClauses);
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    if (other.HasTrigger) {
      Trigger = other.Trigger;
    }
    if (other.whereClause_ != null) {
      if (whereClause_ == null) {
        WhereClause = new global::ContentFilter();
      }
      WhereClause.MergeFrom(other.WhereClause);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (AggregateConfiguration_ == null) {
            AggregateConfiguration = new global::AggregateConfiguration();
          }
          input.ReadMessage(AggregateConfiguration);
          break;
        }
        case 18: {
          if (aggregateType_ == null) {
            AggregateType = new global::NodeId();
          }
          input.ReadMessage(AggregateType);
          break;
        }
        case 24: {
          DeadbandType = input.ReadUInt32();
          break;
        }
        case 33: {
          DeadbandValue = input.ReadDouble();
          break;
        }
        case 41: {
          ProcessingInterval = input.ReadDouble();
          break;
        }
        case 50: {
          if (selectClauses_ == null) {
            SelectClauses = new global::ListOfSimpleAttributeOperand();
          }
          input.ReadMessage(SelectClauses);
          break;
        }
        case 56: {
          StartTime = input.ReadInt64();
          break;
        }
        case 64: {
          Trigger = (global::MonitoringFilter.Types.DataChangeTrigger) input.ReadEnum();
          break;
        }
        case 74: {
          if (whereClause_ == null) {
            WhereClause = new global::ContentFilter();
          }
          input.ReadMessage(WhereClause);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the MonitoringFilter message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DataChangeTrigger {
      [pbr::OriginalName("DataChangeTrigger_StatusValueTimestamp_2")] StatusValueTimestamp2 = 1,
      [pbr::OriginalName("DataChangeTrigger_StatusValue_1")] StatusValue1 = 2,
      [pbr::OriginalName("DataChangeTrigger_Status_0")] Status0 = 3,
    }

  }
  #endregion

}

public sealed partial class MonitoringFilterResult : pb::IMessage<MonitoringFilterResult> {
  private static readonly pb::MessageParser<MonitoringFilterResult> _parser = new pb::MessageParser<MonitoringFilterResult>(() => new MonitoringFilterResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonitoringFilterResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[470]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringFilterResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringFilterResult(MonitoringFilterResult other) : this() {
    _hasBits0 = other._hasBits0;
    revisedAggregateConfiguration_ = other.revisedAggregateConfiguration_ != null ? other.revisedAggregateConfiguration_.Clone() : null;
    revisedProcessingInterval_ = other.revisedProcessingInterval_;
    revisedStartTime_ = other.revisedStartTime_;
    selectClauseDiagnosticInfos_ = other.selectClauseDiagnosticInfos_ != null ? other.selectClauseDiagnosticInfos_.Clone() : null;
    selectClauseResults_ = other.selectClauseResults_ != null ? other.selectClauseResults_.Clone() : null;
    whereClauseResult_ = other.whereClauseResult_ != null ? other.whereClauseResult_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonitoringFilterResult Clone() {
    return new MonitoringFilterResult(this);
  }

  /// <summary>Field number for the "RevisedAggregateConfiguration" field.</summary>
  public const int RevisedAggregateConfigurationFieldNumber = 1;
  private global::AggregateConfiguration revisedAggregateConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AggregateConfiguration RevisedAggregateConfiguration {
    get { return revisedAggregateConfiguration_; }
    set {
      revisedAggregateConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "RevisedProcessingInterval" field.</summary>
  public const int RevisedProcessingIntervalFieldNumber = 2;
  private readonly static double RevisedProcessingIntervalDefaultValue = 0D;

  private double revisedProcessingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RevisedProcessingInterval {
    get { if ((_hasBits0 & 1) != 0) { return revisedProcessingInterval_; } else { return RevisedProcessingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 1;
      revisedProcessingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedProcessingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedProcessingInterval {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "RevisedProcessingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedProcessingInterval() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "RevisedStartTime" field.</summary>
  public const int RevisedStartTimeFieldNumber = 3;
  private readonly static long RevisedStartTimeDefaultValue = 0L;

  private long revisedStartTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RevisedStartTime {
    get { if ((_hasBits0 & 2) != 0) { return revisedStartTime_; } else { return RevisedStartTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      revisedStartTime_ = value;
    }
  }
  /// <summary>Gets whether the "RevisedStartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRevisedStartTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "RevisedStartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRevisedStartTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "SelectClauseDiagnosticInfos" field.</summary>
  public const int SelectClauseDiagnosticInfosFieldNumber = 4;
  private global::ListOfDiagnosticInfo selectClauseDiagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo SelectClauseDiagnosticInfos {
    get { return selectClauseDiagnosticInfos_; }
    set {
      selectClauseDiagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "SelectClauseResults" field.</summary>
  public const int SelectClauseResultsFieldNumber = 5;
  private global::ListOfStatusCode selectClauseResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfStatusCode SelectClauseResults {
    get { return selectClauseResults_; }
    set {
      selectClauseResults_ = value;
    }
  }

  /// <summary>Field number for the "WhereClauseResult" field.</summary>
  public const int WhereClauseResultFieldNumber = 6;
  private global::ContentFilterResult whereClauseResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilterResult WhereClauseResult {
    get { return whereClauseResult_; }
    set {
      whereClauseResult_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonitoringFilterResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonitoringFilterResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RevisedAggregateConfiguration, other.RevisedAggregateConfiguration)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RevisedProcessingInterval, other.RevisedProcessingInterval)) return false;
    if (RevisedStartTime != other.RevisedStartTime) return false;
    if (!object.Equals(SelectClauseDiagnosticInfos, other.SelectClauseDiagnosticInfos)) return false;
    if (!object.Equals(SelectClauseResults, other.SelectClauseResults)) return false;
    if (!object.Equals(WhereClauseResult, other.WhereClauseResult)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (revisedAggregateConfiguration_ != null) hash ^= RevisedAggregateConfiguration.GetHashCode();
    if (HasRevisedProcessingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RevisedProcessingInterval);
    if (HasRevisedStartTime) hash ^= RevisedStartTime.GetHashCode();
    if (selectClauseDiagnosticInfos_ != null) hash ^= SelectClauseDiagnosticInfos.GetHashCode();
    if (selectClauseResults_ != null) hash ^= SelectClauseResults.GetHashCode();
    if (whereClauseResult_ != null) hash ^= WhereClauseResult.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (revisedAggregateConfiguration_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RevisedAggregateConfiguration);
    }
    if (HasRevisedProcessingInterval) {
      output.WriteRawTag(17);
      output.WriteDouble(RevisedProcessingInterval);
    }
    if (HasRevisedStartTime) {
      output.WriteRawTag(24);
      output.WriteInt64(RevisedStartTime);
    }
    if (selectClauseDiagnosticInfos_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SelectClauseDiagnosticInfos);
    }
    if (selectClauseResults_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(SelectClauseResults);
    }
    if (whereClauseResult_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(WhereClauseResult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (revisedAggregateConfiguration_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevisedAggregateConfiguration);
    }
    if (HasRevisedProcessingInterval) {
      size += 1 + 8;
    }
    if (HasRevisedStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RevisedStartTime);
    }
    if (selectClauseDiagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectClauseDiagnosticInfos);
    }
    if (selectClauseResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectClauseResults);
    }
    if (whereClauseResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhereClauseResult);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonitoringFilterResult other) {
    if (other == null) {
      return;
    }
    if (other.revisedAggregateConfiguration_ != null) {
      if (revisedAggregateConfiguration_ == null) {
        RevisedAggregateConfiguration = new global::AggregateConfiguration();
      }
      RevisedAggregateConfiguration.MergeFrom(other.RevisedAggregateConfiguration);
    }
    if (other.HasRevisedProcessingInterval) {
      RevisedProcessingInterval = other.RevisedProcessingInterval;
    }
    if (other.HasRevisedStartTime) {
      RevisedStartTime = other.RevisedStartTime;
    }
    if (other.selectClauseDiagnosticInfos_ != null) {
      if (selectClauseDiagnosticInfos_ == null) {
        SelectClauseDiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      SelectClauseDiagnosticInfos.MergeFrom(other.SelectClauseDiagnosticInfos);
    }
    if (other.selectClauseResults_ != null) {
      if (selectClauseResults_ == null) {
        SelectClauseResults = new global::ListOfStatusCode();
      }
      SelectClauseResults.MergeFrom(other.SelectClauseResults);
    }
    if (other.whereClauseResult_ != null) {
      if (whereClauseResult_ == null) {
        WhereClauseResult = new global::ContentFilterResult();
      }
      WhereClauseResult.MergeFrom(other.WhereClauseResult);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (revisedAggregateConfiguration_ == null) {
            RevisedAggregateConfiguration = new global::AggregateConfiguration();
          }
          input.ReadMessage(RevisedAggregateConfiguration);
          break;
        }
        case 17: {
          RevisedProcessingInterval = input.ReadDouble();
          break;
        }
        case 24: {
          RevisedStartTime = input.ReadInt64();
          break;
        }
        case 34: {
          if (selectClauseDiagnosticInfos_ == null) {
            SelectClauseDiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(SelectClauseDiagnosticInfos);
          break;
        }
        case 42: {
          if (selectClauseResults_ == null) {
            SelectClauseResults = new global::ListOfStatusCode();
          }
          input.ReadMessage(SelectClauseResults);
          break;
        }
        case 50: {
          if (whereClauseResult_ == null) {
            WhereClauseResult = new global::ContentFilterResult();
          }
          input.ReadMessage(WhereClauseResult);
          break;
        }
      }
    }
  }

}

public sealed partial class NodeTypeDescription : pb::IMessage<NodeTypeDescription> {
  private static readonly pb::MessageParser<NodeTypeDescription> _parser = new pb::MessageParser<NodeTypeDescription>(() => new NodeTypeDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NodeTypeDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[471]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeTypeDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeTypeDescription(NodeTypeDescription other) : this() {
    _hasBits0 = other._hasBits0;
    dataToReturn_ = other.dataToReturn_ != null ? other.dataToReturn_.Clone() : null;
    includeSubTypes_ = other.includeSubTypes_;
    typeDefinitionNode_ = other.typeDefinitionNode_ != null ? other.typeDefinitionNode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeTypeDescription Clone() {
    return new NodeTypeDescription(this);
  }

  /// <summary>Field number for the "DataToReturn" field.</summary>
  public const int DataToReturnFieldNumber = 1;
  private global::ListOfQueryDataDescription dataToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfQueryDataDescription DataToReturn {
    get { return dataToReturn_; }
    set {
      dataToReturn_ = value;
    }
  }

  /// <summary>Field number for the "IncludeSubTypes" field.</summary>
  public const int IncludeSubTypesFieldNumber = 2;
  private readonly static bool IncludeSubTypesDefaultValue = false;

  private bool includeSubTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IncludeSubTypes {
    get { if ((_hasBits0 & 1) != 0) { return includeSubTypes_; } else { return IncludeSubTypesDefaultValue; } }
    set {
      _hasBits0 |= 1;
      includeSubTypes_ = value;
    }
  }
  /// <summary>Gets whether the "IncludeSubTypes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIncludeSubTypes {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "IncludeSubTypes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIncludeSubTypes() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "TypeDefinitionNode" field.</summary>
  public const int TypeDefinitionNodeFieldNumber = 3;
  private global::ExpandedNodeId typeDefinitionNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExpandedNodeId TypeDefinitionNode {
    get { return typeDefinitionNode_; }
    set {
      typeDefinitionNode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NodeTypeDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NodeTypeDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataToReturn, other.DataToReturn)) return false;
    if (IncludeSubTypes != other.IncludeSubTypes) return false;
    if (!object.Equals(TypeDefinitionNode, other.TypeDefinitionNode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataToReturn_ != null) hash ^= DataToReturn.GetHashCode();
    if (HasIncludeSubTypes) hash ^= IncludeSubTypes.GetHashCode();
    if (typeDefinitionNode_ != null) hash ^= TypeDefinitionNode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataToReturn_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataToReturn);
    }
    if (HasIncludeSubTypes) {
      output.WriteRawTag(16);
      output.WriteBool(IncludeSubTypes);
    }
    if (typeDefinitionNode_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TypeDefinitionNode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataToReturn_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataToReturn);
    }
    if (HasIncludeSubTypes) {
      size += 1 + 1;
    }
    if (typeDefinitionNode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeDefinitionNode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NodeTypeDescription other) {
    if (other == null) {
      return;
    }
    if (other.dataToReturn_ != null) {
      if (dataToReturn_ == null) {
        DataToReturn = new global::ListOfQueryDataDescription();
      }
      DataToReturn.MergeFrom(other.DataToReturn);
    }
    if (other.HasIncludeSubTypes) {
      IncludeSubTypes = other.IncludeSubTypes;
    }
    if (other.typeDefinitionNode_ != null) {
      if (typeDefinitionNode_ == null) {
        TypeDefinitionNode = new global::ExpandedNodeId();
      }
      TypeDefinitionNode.MergeFrom(other.TypeDefinitionNode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataToReturn_ == null) {
            DataToReturn = new global::ListOfQueryDataDescription();
          }
          input.ReadMessage(DataToReturn);
          break;
        }
        case 16: {
          IncludeSubTypes = input.ReadBool();
          break;
        }
        case 26: {
          if (typeDefinitionNode_ == null) {
            TypeDefinitionNode = new global::ExpandedNodeId();
          }
          input.ReadMessage(TypeDefinitionNode);
          break;
        }
      }
    }
  }

}

public sealed partial class PubSubGroupDataType : pb::IMessage<PubSubGroupDataType> {
  private static readonly pb::MessageParser<PubSubGroupDataType> _parser = new pb::MessageParser<PubSubGroupDataType>(() => new PubSubGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PubSubGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[472]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubGroupDataType(PubSubGroupDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetReaders_ = other.dataSetReaders_ != null ? other.dataSetReaders_.Clone() : null;
    dataSetWriters_ = other.dataSetWriters_ != null ? other.dataSetWriters_.Clone() : null;
    enabled_ = other.enabled_;
    groupProperties_ = other.groupProperties_ != null ? other.groupProperties_.Clone() : null;
    headerLayoutUri_ = other.headerLayoutUri_;
    keepAliveTime_ = other.keepAliveTime_;
    localeIds_ = other.localeIds_ != null ? other.localeIds_.Clone() : null;
    maxNetworkMessageSize_ = other.maxNetworkMessageSize_;
    messageSettings_ = other.messageSettings_ != null ? other.messageSettings_.Clone() : null;
    name_ = other.name_;
    priority_ = other.priority_;
    publishingInterval_ = other.publishingInterval_;
    securityGroupId_ = other.securityGroupId_;
    securityKeyServices_ = other.securityKeyServices_ != null ? other.securityKeyServices_.Clone() : null;
    securityMode_ = other.securityMode_;
    transportSettings_ = other.transportSettings_ != null ? other.transportSettings_.Clone() : null;
    writerGroupId_ = other.writerGroupId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubGroupDataType Clone() {
    return new PubSubGroupDataType(this);
  }

  /// <summary>Field number for the "DataSetReaders" field.</summary>
  public const int DataSetReadersFieldNumber = 1;
  private global::ListOfDataSetReaderDataType dataSetReaders_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataSetReaderDataType DataSetReaders {
    get { return dataSetReaders_; }
    set {
      dataSetReaders_ = value;
    }
  }

  /// <summary>Field number for the "DataSetWriters" field.</summary>
  public const int DataSetWritersFieldNumber = 2;
  private global::ListOfDataSetWriterDataType dataSetWriters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataSetWriterDataType DataSetWriters {
    get { return dataSetWriters_; }
    set {
      dataSetWriters_ = value;
    }
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 3;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { if ((_hasBits0 & 1) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "Enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "GroupProperties" field.</summary>
  public const int GroupPropertiesFieldNumber = 4;
  private global::ListOfKeyValuePair groupProperties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair GroupProperties {
    get { return groupProperties_; }
    set {
      groupProperties_ = value;
    }
  }

  /// <summary>Field number for the "HeaderLayoutUri" field.</summary>
  public const int HeaderLayoutUriFieldNumber = 5;
  private readonly static string HeaderLayoutUriDefaultValue = "";

  private string headerLayoutUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeaderLayoutUri {
    get { return headerLayoutUri_ ?? HeaderLayoutUriDefaultValue; }
    set {
      headerLayoutUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "HeaderLayoutUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHeaderLayoutUri {
    get { return headerLayoutUri_ != null; }
  }
  /// <summary>Clears the value of the "HeaderLayoutUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHeaderLayoutUri() {
    headerLayoutUri_ = null;
  }

  /// <summary>Field number for the "KeepAliveTime" field.</summary>
  public const int KeepAliveTimeFieldNumber = 6;
  private readonly static double KeepAliveTimeDefaultValue = 0D;

  private double keepAliveTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double KeepAliveTime {
    get { if ((_hasBits0 & 2) != 0) { return keepAliveTime_; } else { return KeepAliveTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      keepAliveTime_ = value;
    }
  }
  /// <summary>Gets whether the "KeepAliveTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasKeepAliveTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "KeepAliveTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearKeepAliveTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "LocaleIds" field.</summary>
  public const int LocaleIdsFieldNumber = 7;
  private global::ListOfString localeIds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString LocaleIds {
    get { return localeIds_; }
    set {
      localeIds_ = value;
    }
  }

  /// <summary>Field number for the "MaxNetworkMessageSize" field.</summary>
  public const int MaxNetworkMessageSizeFieldNumber = 8;
  private readonly static uint MaxNetworkMessageSizeDefaultValue = 0;

  private uint maxNetworkMessageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxNetworkMessageSize {
    get { if ((_hasBits0 & 4) != 0) { return maxNetworkMessageSize_; } else { return MaxNetworkMessageSizeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      maxNetworkMessageSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxNetworkMessageSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxNetworkMessageSize {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "MaxNetworkMessageSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxNetworkMessageSize() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "MessageSettings" field.</summary>
  public const int MessageSettingsFieldNumber = 9;
  private global::ExtensionObject messageSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject MessageSettings {
    get { return messageSettings_; }
    set {
      messageSettings_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 10;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "Priority" field.</summary>
  public const int PriorityFieldNumber = 11;
  private readonly static uint PriorityDefaultValue = 0;

  private uint priority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Priority {
    get { if ((_hasBits0 & 8) != 0) { return priority_; } else { return PriorityDefaultValue; } }
    set {
      _hasBits0 |= 8;
      priority_ = value;
    }
  }
  /// <summary>Gets whether the "Priority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPriority {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Priority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPriority() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "PublishingInterval" field.</summary>
  public const int PublishingIntervalFieldNumber = 12;
  private readonly static double PublishingIntervalDefaultValue = 0D;

  private double publishingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double PublishingInterval {
    get { if ((_hasBits0 & 16) != 0) { return publishingInterval_; } else { return PublishingIntervalDefaultValue; } }
    set {
      _hasBits0 |= 16;
      publishingInterval_ = value;
    }
  }
  /// <summary>Gets whether the "PublishingInterval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublishingInterval {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "PublishingInterval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublishingInterval() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "SecurityGroupId" field.</summary>
  public const int SecurityGroupIdFieldNumber = 13;
  private readonly static string SecurityGroupIdDefaultValue = "";

  private string securityGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityGroupId {
    get { return securityGroupId_ ?? SecurityGroupIdDefaultValue; }
    set {
      securityGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityGroupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityGroupId {
    get { return securityGroupId_ != null; }
  }
  /// <summary>Clears the value of the "SecurityGroupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityGroupId() {
    securityGroupId_ = null;
  }

  /// <summary>Field number for the "SecurityKeyServices" field.</summary>
  public const int SecurityKeyServicesFieldNumber = 14;
  private global::ListOfEndpointDescription securityKeyServices_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEndpointDescription SecurityKeyServices {
    get { return securityKeyServices_; }
    set {
      securityKeyServices_ = value;
    }
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 15;
  private readonly static global::PubSubGroupDataType.Types.MessageSecurityMode SecurityModeDefaultValue = global::PubSubGroupDataType.Types.MessageSecurityMode.Invalid0;

  private global::PubSubGroupDataType.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PubSubGroupDataType.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 32) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "TransportSettings" field.</summary>
  public const int TransportSettingsFieldNumber = 16;
  private global::ExtensionObject transportSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject TransportSettings {
    get { return transportSettings_; }
    set {
      transportSettings_ = value;
    }
  }

  /// <summary>Field number for the "WriterGroupId" field.</summary>
  public const int WriterGroupIdFieldNumber = 17;
  private readonly static uint WriterGroupIdDefaultValue = 0;

  private uint writerGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WriterGroupId {
    get { if ((_hasBits0 & 64) != 0) { return writerGroupId_; } else { return WriterGroupIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      writerGroupId_ = value;
    }
  }
  /// <summary>Gets whether the "WriterGroupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasWriterGroupId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "WriterGroupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearWriterGroupId() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PubSubGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PubSubGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataSetReaders, other.DataSetReaders)) return false;
    if (!object.Equals(DataSetWriters, other.DataSetWriters)) return false;
    if (Enabled != other.Enabled) return false;
    if (!object.Equals(GroupProperties, other.GroupProperties)) return false;
    if (HeaderLayoutUri != other.HeaderLayoutUri) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(KeepAliveTime, other.KeepAliveTime)) return false;
    if (!object.Equals(LocaleIds, other.LocaleIds)) return false;
    if (MaxNetworkMessageSize != other.MaxNetworkMessageSize) return false;
    if (!object.Equals(MessageSettings, other.MessageSettings)) return false;
    if (Name != other.Name) return false;
    if (Priority != other.Priority) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PublishingInterval, other.PublishingInterval)) return false;
    if (SecurityGroupId != other.SecurityGroupId) return false;
    if (!object.Equals(SecurityKeyServices, other.SecurityKeyServices)) return false;
    if (SecurityMode != other.SecurityMode) return false;
    if (!object.Equals(TransportSettings, other.TransportSettings)) return false;
    if (WriterGroupId != other.WriterGroupId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataSetReaders_ != null) hash ^= DataSetReaders.GetHashCode();
    if (dataSetWriters_ != null) hash ^= DataSetWriters.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (groupProperties_ != null) hash ^= GroupProperties.GetHashCode();
    if (HasHeaderLayoutUri) hash ^= HeaderLayoutUri.GetHashCode();
    if (HasKeepAliveTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(KeepAliveTime);
    if (localeIds_ != null) hash ^= LocaleIds.GetHashCode();
    if (HasMaxNetworkMessageSize) hash ^= MaxNetworkMessageSize.GetHashCode();
    if (messageSettings_ != null) hash ^= MessageSettings.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasPriority) hash ^= Priority.GetHashCode();
    if (HasPublishingInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PublishingInterval);
    if (HasSecurityGroupId) hash ^= SecurityGroupId.GetHashCode();
    if (securityKeyServices_ != null) hash ^= SecurityKeyServices.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (transportSettings_ != null) hash ^= TransportSettings.GetHashCode();
    if (HasWriterGroupId) hash ^= WriterGroupId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataSetReaders_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataSetReaders);
    }
    if (dataSetWriters_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataSetWriters);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (groupProperties_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(GroupProperties);
    }
    if (HasHeaderLayoutUri) {
      output.WriteRawTag(42);
      output.WriteString(HeaderLayoutUri);
    }
    if (HasKeepAliveTime) {
      output.WriteRawTag(49);
      output.WriteDouble(KeepAliveTime);
    }
    if (localeIds_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(LocaleIds);
    }
    if (HasMaxNetworkMessageSize) {
      output.WriteRawTag(64);
      output.WriteUInt32(MaxNetworkMessageSize);
    }
    if (messageSettings_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(MessageSettings);
    }
    if (HasName) {
      output.WriteRawTag(82);
      output.WriteString(Name);
    }
    if (HasPriority) {
      output.WriteRawTag(88);
      output.WriteUInt32(Priority);
    }
    if (HasPublishingInterval) {
      output.WriteRawTag(97);
      output.WriteDouble(PublishingInterval);
    }
    if (HasSecurityGroupId) {
      output.WriteRawTag(106);
      output.WriteString(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(120);
      output.WriteEnum((int) SecurityMode);
    }
    if (transportSettings_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(TransportSettings);
    }
    if (HasWriterGroupId) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(WriterGroupId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataSetReaders_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetReaders);
    }
    if (dataSetWriters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetWriters);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (groupProperties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupProperties);
    }
    if (HasHeaderLayoutUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderLayoutUri);
    }
    if (HasKeepAliveTime) {
      size += 1 + 8;
    }
    if (localeIds_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocaleIds);
    }
    if (HasMaxNetworkMessageSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNetworkMessageSize);
    }
    if (messageSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageSettings);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasPriority) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
    }
    if (HasPublishingInterval) {
      size += 1 + 8;
    }
    if (HasSecurityGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (transportSettings_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransportSettings);
    }
    if (HasWriterGroupId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WriterGroupId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PubSubGroupDataType other) {
    if (other == null) {
      return;
    }
    if (other.dataSetReaders_ != null) {
      if (dataSetReaders_ == null) {
        DataSetReaders = new global::ListOfDataSetReaderDataType();
      }
      DataSetReaders.MergeFrom(other.DataSetReaders);
    }
    if (other.dataSetWriters_ != null) {
      if (dataSetWriters_ == null) {
        DataSetWriters = new global::ListOfDataSetWriterDataType();
      }
      DataSetWriters.MergeFrom(other.DataSetWriters);
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.groupProperties_ != null) {
      if (groupProperties_ == null) {
        GroupProperties = new global::ListOfKeyValuePair();
      }
      GroupProperties.MergeFrom(other.GroupProperties);
    }
    if (other.HasHeaderLayoutUri) {
      HeaderLayoutUri = other.HeaderLayoutUri;
    }
    if (other.HasKeepAliveTime) {
      KeepAliveTime = other.KeepAliveTime;
    }
    if (other.localeIds_ != null) {
      if (localeIds_ == null) {
        LocaleIds = new global::ListOfString();
      }
      LocaleIds.MergeFrom(other.LocaleIds);
    }
    if (other.HasMaxNetworkMessageSize) {
      MaxNetworkMessageSize = other.MaxNetworkMessageSize;
    }
    if (other.messageSettings_ != null) {
      if (messageSettings_ == null) {
        MessageSettings = new global::ExtensionObject();
      }
      MessageSettings.MergeFrom(other.MessageSettings);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasPriority) {
      Priority = other.Priority;
    }
    if (other.HasPublishingInterval) {
      PublishingInterval = other.PublishingInterval;
    }
    if (other.HasSecurityGroupId) {
      SecurityGroupId = other.SecurityGroupId;
    }
    if (other.securityKeyServices_ != null) {
      if (securityKeyServices_ == null) {
        SecurityKeyServices = new global::ListOfEndpointDescription();
      }
      SecurityKeyServices.MergeFrom(other.SecurityKeyServices);
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    if (other.transportSettings_ != null) {
      if (transportSettings_ == null) {
        TransportSettings = new global::ExtensionObject();
      }
      TransportSettings.MergeFrom(other.TransportSettings);
    }
    if (other.HasWriterGroupId) {
      WriterGroupId = other.WriterGroupId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataSetReaders_ == null) {
            DataSetReaders = new global::ListOfDataSetReaderDataType();
          }
          input.ReadMessage(DataSetReaders);
          break;
        }
        case 18: {
          if (dataSetWriters_ == null) {
            DataSetWriters = new global::ListOfDataSetWriterDataType();
          }
          input.ReadMessage(DataSetWriters);
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 34: {
          if (groupProperties_ == null) {
            GroupProperties = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(GroupProperties);
          break;
        }
        case 42: {
          HeaderLayoutUri = input.ReadString();
          break;
        }
        case 49: {
          KeepAliveTime = input.ReadDouble();
          break;
        }
        case 58: {
          if (localeIds_ == null) {
            LocaleIds = new global::ListOfString();
          }
          input.ReadMessage(LocaleIds);
          break;
        }
        case 64: {
          MaxNetworkMessageSize = input.ReadUInt32();
          break;
        }
        case 74: {
          if (messageSettings_ == null) {
            MessageSettings = new global::ExtensionObject();
          }
          input.ReadMessage(MessageSettings);
          break;
        }
        case 82: {
          Name = input.ReadString();
          break;
        }
        case 88: {
          Priority = input.ReadUInt32();
          break;
        }
        case 97: {
          PublishingInterval = input.ReadDouble();
          break;
        }
        case 106: {
          SecurityGroupId = input.ReadString();
          break;
        }
        case 114: {
          if (securityKeyServices_ == null) {
            SecurityKeyServices = new global::ListOfEndpointDescription();
          }
          input.ReadMessage(SecurityKeyServices);
          break;
        }
        case 120: {
          SecurityMode = (global::PubSubGroupDataType.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
        case 130: {
          if (transportSettings_ == null) {
            TransportSettings = new global::ExtensionObject();
          }
          input.ReadMessage(TransportSettings);
          break;
        }
        case 136: {
          WriterGroupId = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the PubSubGroupDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class PublishedDataSetDataType : pb::IMessage<PublishedDataSetDataType> {
  private static readonly pb::MessageParser<PublishedDataSetDataType> _parser = new pb::MessageParser<PublishedDataSetDataType>(() => new PublishedDataSetDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishedDataSetDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[473]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataSetDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataSetDataType(PublishedDataSetDataType other) : this() {
    dataSetFolder_ = other.dataSetFolder_ != null ? other.dataSetFolder_.Clone() : null;
    dataSetMetaData_ = other.dataSetMetaData_ != null ? other.dataSetMetaData_.Clone() : null;
    dataSetSource_ = other.dataSetSource_ != null ? other.dataSetSource_.Clone() : null;
    extensionFields_ = other.extensionFields_ != null ? other.extensionFields_.Clone() : null;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataSetDataType Clone() {
    return new PublishedDataSetDataType(this);
  }

  /// <summary>Field number for the "DataSetFolder" field.</summary>
  public const int DataSetFolderFieldNumber = 1;
  private global::ListOfString dataSetFolder_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfString DataSetFolder {
    get { return dataSetFolder_; }
    set {
      dataSetFolder_ = value;
    }
  }

  /// <summary>Field number for the "DataSetMetaData" field.</summary>
  public const int DataSetMetaDataFieldNumber = 2;
  private global::DataSetMetaDataType dataSetMetaData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataSetMetaDataType DataSetMetaData {
    get { return dataSetMetaData_; }
    set {
      dataSetMetaData_ = value;
    }
  }

  /// <summary>Field number for the "DataSetSource" field.</summary>
  public const int DataSetSourceFieldNumber = 3;
  private global::ExtensionObject dataSetSource_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject DataSetSource {
    get { return dataSetSource_; }
    set {
      dataSetSource_ = value;
    }
  }

  /// <summary>Field number for the "ExtensionFields" field.</summary>
  public const int ExtensionFieldsFieldNumber = 4;
  private global::ListOfKeyValuePair extensionFields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair ExtensionFields {
    get { return extensionFields_; }
    set {
      extensionFields_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 5;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishedDataSetDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishedDataSetDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataSetFolder, other.DataSetFolder)) return false;
    if (!object.Equals(DataSetMetaData, other.DataSetMetaData)) return false;
    if (!object.Equals(DataSetSource, other.DataSetSource)) return false;
    if (!object.Equals(ExtensionFields, other.ExtensionFields)) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataSetFolder_ != null) hash ^= DataSetFolder.GetHashCode();
    if (dataSetMetaData_ != null) hash ^= DataSetMetaData.GetHashCode();
    if (dataSetSource_ != null) hash ^= DataSetSource.GetHashCode();
    if (extensionFields_ != null) hash ^= ExtensionFields.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataSetFolder_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataSetFolder);
    }
    if (dataSetMetaData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DataSetMetaData);
    }
    if (dataSetSource_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DataSetSource);
    }
    if (extensionFields_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ExtensionFields);
    }
    if (HasName) {
      output.WriteRawTag(42);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataSetFolder_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetFolder);
    }
    if (dataSetMetaData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetMetaData);
    }
    if (dataSetSource_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetSource);
    }
    if (extensionFields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtensionFields);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishedDataSetDataType other) {
    if (other == null) {
      return;
    }
    if (other.dataSetFolder_ != null) {
      if (dataSetFolder_ == null) {
        DataSetFolder = new global::ListOfString();
      }
      DataSetFolder.MergeFrom(other.DataSetFolder);
    }
    if (other.dataSetMetaData_ != null) {
      if (dataSetMetaData_ == null) {
        DataSetMetaData = new global::DataSetMetaDataType();
      }
      DataSetMetaData.MergeFrom(other.DataSetMetaData);
    }
    if (other.dataSetSource_ != null) {
      if (dataSetSource_ == null) {
        DataSetSource = new global::ExtensionObject();
      }
      DataSetSource.MergeFrom(other.DataSetSource);
    }
    if (other.extensionFields_ != null) {
      if (extensionFields_ == null) {
        ExtensionFields = new global::ListOfKeyValuePair();
      }
      ExtensionFields.MergeFrom(other.ExtensionFields);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataSetFolder_ == null) {
            DataSetFolder = new global::ListOfString();
          }
          input.ReadMessage(DataSetFolder);
          break;
        }
        case 18: {
          if (dataSetMetaData_ == null) {
            DataSetMetaData = new global::DataSetMetaDataType();
          }
          input.ReadMessage(DataSetMetaData);
          break;
        }
        case 26: {
          if (dataSetSource_ == null) {
            DataSetSource = new global::ExtensionObject();
          }
          input.ReadMessage(DataSetSource);
          break;
        }
        case 34: {
          if (extensionFields_ == null) {
            ExtensionFields = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(ExtensionFields);
          break;
        }
        case 42: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PublishedDataSetSourceDataType : pb::IMessage<PublishedDataSetSourceDataType> {
  private static readonly pb::MessageParser<PublishedDataSetSourceDataType> _parser = new pb::MessageParser<PublishedDataSetSourceDataType>(() => new PublishedDataSetSourceDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishedDataSetSourceDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[474]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataSetSourceDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataSetSourceDataType(PublishedDataSetSourceDataType other) : this() {
    eventNotifier_ = other.eventNotifier_ != null ? other.eventNotifier_.Clone() : null;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    publishedData_ = other.publishedData_ != null ? other.publishedData_.Clone() : null;
    selectedFields_ = other.selectedFields_ != null ? other.selectedFields_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedDataSetSourceDataType Clone() {
    return new PublishedDataSetSourceDataType(this);
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 1;
  private global::NodeId eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId EventNotifier {
    get { return eventNotifier_; }
    set {
      eventNotifier_ = value;
    }
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 2;
  private global::ContentFilter filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilter Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "PublishedData" field.</summary>
  public const int PublishedDataFieldNumber = 3;
  private global::ListOfPublishedVariableDataType publishedData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfPublishedVariableDataType PublishedData {
    get { return publishedData_; }
    set {
      publishedData_ = value;
    }
  }

  /// <summary>Field number for the "SelectedFields" field.</summary>
  public const int SelectedFieldsFieldNumber = 4;
  private global::ListOfSimpleAttributeOperand selectedFields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSimpleAttributeOperand SelectedFields {
    get { return selectedFields_; }
    set {
      selectedFields_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishedDataSetSourceDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishedDataSetSourceDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(EventNotifier, other.EventNotifier)) return false;
    if (!object.Equals(Filter, other.Filter)) return false;
    if (!object.Equals(PublishedData, other.PublishedData)) return false;
    if (!object.Equals(SelectedFields, other.SelectedFields)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (eventNotifier_ != null) hash ^= EventNotifier.GetHashCode();
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (publishedData_ != null) hash ^= PublishedData.GetHashCode();
    if (selectedFields_ != null) hash ^= SelectedFields.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (eventNotifier_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EventNotifier);
    }
    if (filter_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Filter);
    }
    if (publishedData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PublishedData);
    }
    if (selectedFields_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SelectedFields);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (eventNotifier_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventNotifier);
    }
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (publishedData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishedData);
    }
    if (selectedFields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedFields);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishedDataSetSourceDataType other) {
    if (other == null) {
      return;
    }
    if (other.eventNotifier_ != null) {
      if (eventNotifier_ == null) {
        EventNotifier = new global::NodeId();
      }
      EventNotifier.MergeFrom(other.EventNotifier);
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::ContentFilter();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.publishedData_ != null) {
      if (publishedData_ == null) {
        PublishedData = new global::ListOfPublishedVariableDataType();
      }
      PublishedData.MergeFrom(other.PublishedData);
    }
    if (other.selectedFields_ != null) {
      if (selectedFields_ == null) {
        SelectedFields = new global::ListOfSimpleAttributeOperand();
      }
      SelectedFields.MergeFrom(other.SelectedFields);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (eventNotifier_ == null) {
            EventNotifier = new global::NodeId();
          }
          input.ReadMessage(EventNotifier);
          break;
        }
        case 18: {
          if (filter_ == null) {
            Filter = new global::ContentFilter();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 26: {
          if (publishedData_ == null) {
            PublishedData = new global::ListOfPublishedVariableDataType();
          }
          input.ReadMessage(PublishedData);
          break;
        }
        case 34: {
          if (selectedFields_ == null) {
            SelectedFields = new global::ListOfSimpleAttributeOperand();
          }
          input.ReadMessage(SelectedFields);
          break;
        }
      }
    }
  }

}

public sealed partial class PublishedEventsDataType : pb::IMessage<PublishedEventsDataType> {
  private static readonly pb::MessageParser<PublishedEventsDataType> _parser = new pb::MessageParser<PublishedEventsDataType>(() => new PublishedEventsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PublishedEventsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[475]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedEventsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedEventsDataType(PublishedEventsDataType other) : this() {
    eventNotifier_ = other.eventNotifier_ != null ? other.eventNotifier_.Clone() : null;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    selectedFields_ = other.selectedFields_ != null ? other.selectedFields_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PublishedEventsDataType Clone() {
    return new PublishedEventsDataType(this);
  }

  /// <summary>Field number for the "EventNotifier" field.</summary>
  public const int EventNotifierFieldNumber = 1;
  private global::NodeId eventNotifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId EventNotifier {
    get { return eventNotifier_; }
    set {
      eventNotifier_ = value;
    }
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 2;
  private global::ContentFilter filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilter Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "SelectedFields" field.</summary>
  public const int SelectedFieldsFieldNumber = 3;
  private global::ListOfSimpleAttributeOperand selectedFields_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfSimpleAttributeOperand SelectedFields {
    get { return selectedFields_; }
    set {
      selectedFields_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PublishedEventsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PublishedEventsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(EventNotifier, other.EventNotifier)) return false;
    if (!object.Equals(Filter, other.Filter)) return false;
    if (!object.Equals(SelectedFields, other.SelectedFields)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (eventNotifier_ != null) hash ^= EventNotifier.GetHashCode();
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (selectedFields_ != null) hash ^= SelectedFields.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (eventNotifier_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EventNotifier);
    }
    if (filter_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Filter);
    }
    if (selectedFields_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SelectedFields);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (eventNotifier_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventNotifier);
    }
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (selectedFields_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedFields);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PublishedEventsDataType other) {
    if (other == null) {
      return;
    }
    if (other.eventNotifier_ != null) {
      if (eventNotifier_ == null) {
        EventNotifier = new global::NodeId();
      }
      EventNotifier.MergeFrom(other.EventNotifier);
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::ContentFilter();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.selectedFields_ != null) {
      if (selectedFields_ == null) {
        SelectedFields = new global::ListOfSimpleAttributeOperand();
      }
      SelectedFields.MergeFrom(other.SelectedFields);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (eventNotifier_ == null) {
            EventNotifier = new global::NodeId();
          }
          input.ReadMessage(EventNotifier);
          break;
        }
        case 18: {
          if (filter_ == null) {
            Filter = new global::ContentFilter();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 26: {
          if (selectedFields_ == null) {
            SelectedFields = new global::ListOfSimpleAttributeOperand();
          }
          input.ReadMessage(SelectedFields);
          break;
        }
      }
    }
  }

}

public sealed partial class QueryFirstResponse : pb::IMessage<QueryFirstResponse> {
  private static readonly pb::MessageParser<QueryFirstResponse> _parser = new pb::MessageParser<QueryFirstResponse>(() => new QueryFirstResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueryFirstResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[476]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFirstResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFirstResponse(QueryFirstResponse other) : this() {
    continuationPoint_ = other.continuationPoint_;
    diagnosticInfos_ = other.diagnosticInfos_ != null ? other.diagnosticInfos_.Clone() : null;
    filterResult_ = other.filterResult_ != null ? other.filterResult_.Clone() : null;
    parsingResults_ = other.parsingResults_ != null ? other.parsingResults_.Clone() : null;
    queryDataSets_ = other.queryDataSets_ != null ? other.queryDataSets_.Clone() : null;
    ResponseHeader_ = other.ResponseHeader_ != null ? other.ResponseHeader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFirstResponse Clone() {
    return new QueryFirstResponse(this);
  }

  /// <summary>Field number for the "ContinuationPoint" field.</summary>
  public const int ContinuationPointFieldNumber = 1;
  private readonly static pb::ByteString ContinuationPointDefaultValue = pb::ByteString.Empty;

  private pb::ByteString continuationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ContinuationPoint {
    get { return continuationPoint_ ?? ContinuationPointDefaultValue; }
    set {
      continuationPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ContinuationPoint" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContinuationPoint {
    get { return continuationPoint_ != null; }
  }
  /// <summary>Clears the value of the "ContinuationPoint" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContinuationPoint() {
    continuationPoint_ = null;
  }

  /// <summary>Field number for the "DiagnosticInfos" field.</summary>
  public const int DiagnosticInfosFieldNumber = 2;
  private global::ListOfDiagnosticInfo diagnosticInfos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDiagnosticInfo DiagnosticInfos {
    get { return diagnosticInfos_; }
    set {
      diagnosticInfos_ = value;
    }
  }

  /// <summary>Field number for the "FilterResult" field.</summary>
  public const int FilterResultFieldNumber = 3;
  private global::ContentFilterResult filterResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilterResult FilterResult {
    get { return filterResult_; }
    set {
      filterResult_ = value;
    }
  }

  /// <summary>Field number for the "ParsingResults" field.</summary>
  public const int ParsingResultsFieldNumber = 4;
  private global::ListOfParsingResult parsingResults_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfParsingResult ParsingResults {
    get { return parsingResults_; }
    set {
      parsingResults_ = value;
    }
  }

  /// <summary>Field number for the "QueryDataSets" field.</summary>
  public const int QueryDataSetsFieldNumber = 5;
  private global::ListOfQueryDataSet queryDataSets_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfQueryDataSet QueryDataSets {
    get { return queryDataSets_; }
    set {
      queryDataSets_ = value;
    }
  }

  /// <summary>Field number for the "_ResponseHeader" field.</summary>
  public const int ResponseHeaderFieldNumber = 6;
  private global::ResponseHeader ResponseHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseHeader ResponseHeader {
    get { return ResponseHeader_; }
    set {
      ResponseHeader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueryFirstResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueryFirstResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ContinuationPoint != other.ContinuationPoint) return false;
    if (!object.Equals(DiagnosticInfos, other.DiagnosticInfos)) return false;
    if (!object.Equals(FilterResult, other.FilterResult)) return false;
    if (!object.Equals(ParsingResults, other.ParsingResults)) return false;
    if (!object.Equals(QueryDataSets, other.QueryDataSets)) return false;
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasContinuationPoint) hash ^= ContinuationPoint.GetHashCode();
    if (diagnosticInfos_ != null) hash ^= DiagnosticInfos.GetHashCode();
    if (filterResult_ != null) hash ^= FilterResult.GetHashCode();
    if (parsingResults_ != null) hash ^= ParsingResults.GetHashCode();
    if (queryDataSets_ != null) hash ^= QueryDataSets.GetHashCode();
    if (ResponseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasContinuationPoint) {
      output.WriteRawTag(10);
      output.WriteBytes(ContinuationPoint);
    }
    if (diagnosticInfos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DiagnosticInfos);
    }
    if (filterResult_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(FilterResult);
    }
    if (parsingResults_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ParsingResults);
    }
    if (queryDataSets_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(QueryDataSets);
    }
    if (ResponseHeader_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(ResponseHeader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasContinuationPoint) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationPoint);
    }
    if (diagnosticInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticInfos);
    }
    if (filterResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterResult);
    }
    if (parsingResults_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParsingResults);
    }
    if (queryDataSets_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryDataSets);
    }
    if (ResponseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueryFirstResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasContinuationPoint) {
      ContinuationPoint = other.ContinuationPoint;
    }
    if (other.diagnosticInfos_ != null) {
      if (diagnosticInfos_ == null) {
        DiagnosticInfos = new global::ListOfDiagnosticInfo();
      }
      DiagnosticInfos.MergeFrom(other.DiagnosticInfos);
    }
    if (other.filterResult_ != null) {
      if (filterResult_ == null) {
        FilterResult = new global::ContentFilterResult();
      }
      FilterResult.MergeFrom(other.FilterResult);
    }
    if (other.parsingResults_ != null) {
      if (parsingResults_ == null) {
        ParsingResults = new global::ListOfParsingResult();
      }
      ParsingResults.MergeFrom(other.ParsingResults);
    }
    if (other.queryDataSets_ != null) {
      if (queryDataSets_ == null) {
        QueryDataSets = new global::ListOfQueryDataSet();
      }
      QueryDataSets.MergeFrom(other.QueryDataSets);
    }
    if (other.ResponseHeader_ != null) {
      if (ResponseHeader_ == null) {
        ResponseHeader = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ContinuationPoint = input.ReadBytes();
          break;
        }
        case 18: {
          if (diagnosticInfos_ == null) {
            DiagnosticInfos = new global::ListOfDiagnosticInfo();
          }
          input.ReadMessage(DiagnosticInfos);
          break;
        }
        case 26: {
          if (filterResult_ == null) {
            FilterResult = new global::ContentFilterResult();
          }
          input.ReadMessage(FilterResult);
          break;
        }
        case 34: {
          if (parsingResults_ == null) {
            ParsingResults = new global::ListOfParsingResult();
          }
          input.ReadMessage(ParsingResults);
          break;
        }
        case 42: {
          if (queryDataSets_ == null) {
            QueryDataSets = new global::ListOfQueryDataSet();
          }
          input.ReadMessage(QueryDataSets);
          break;
        }
        case 50: {
          if (ResponseHeader_ == null) {
            ResponseHeader = new global::ResponseHeader();
          }
          input.ReadMessage(ResponseHeader);
          break;
        }
      }
    }
  }

}

public sealed partial class ReadEventDetails : pb::IMessage<ReadEventDetails> {
  private static readonly pb::MessageParser<ReadEventDetails> _parser = new pb::MessageParser<ReadEventDetails>(() => new ReadEventDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadEventDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[477]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadEventDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadEventDetails(ReadEventDetails other) : this() {
    _hasBits0 = other._hasBits0;
    endTime_ = other.endTime_;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    numValuesPerNode_ = other.numValuesPerNode_;
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadEventDetails Clone() {
    return new ReadEventDetails(this);
  }

  /// <summary>Field number for the "EndTime" field.</summary>
  public const int EndTimeFieldNumber = 1;
  private readonly static long EndTimeDefaultValue = 0L;

  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { if ((_hasBits0 & 1) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      endTime_ = value;
    }
  }
  /// <summary>Gets whether the "EndTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEndTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "EndTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEndTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 2;
  private global::EventFilter filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EventFilter Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "NumValuesPerNode" field.</summary>
  public const int NumValuesPerNodeFieldNumber = 3;
  private readonly static uint NumValuesPerNodeDefaultValue = 0;

  private uint numValuesPerNode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NumValuesPerNode {
    get { if ((_hasBits0 & 2) != 0) { return numValuesPerNode_; } else { return NumValuesPerNodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      numValuesPerNode_ = value;
    }
  }
  /// <summary>Gets whether the "NumValuesPerNode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNumValuesPerNode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "NumValuesPerNode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNumValuesPerNode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 4;
  private readonly static long StartTimeDefaultValue = 0L;

  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { if ((_hasBits0 & 4) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "StartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStartTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "StartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStartTime() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadEventDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadEventDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndTime != other.EndTime) return false;
    if (!object.Equals(Filter, other.Filter)) return false;
    if (NumValuesPerNode != other.NumValuesPerNode) return false;
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEndTime) hash ^= EndTime.GetHashCode();
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (HasNumValuesPerNode) hash ^= NumValuesPerNode.GetHashCode();
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasEndTime) {
      output.WriteRawTag(8);
      output.WriteInt64(EndTime);
    }
    if (filter_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Filter);
    }
    if (HasNumValuesPerNode) {
      output.WriteRawTag(24);
      output.WriteUInt32(NumValuesPerNode);
    }
    if (HasStartTime) {
      output.WriteRawTag(32);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasEndTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (HasNumValuesPerNode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumValuesPerNode);
    }
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadEventDetails other) {
    if (other == null) {
      return;
    }
    if (other.HasEndTime) {
      EndTime = other.EndTime;
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::EventFilter();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.HasNumValuesPerNode) {
      NumValuesPerNode = other.NumValuesPerNode;
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EndTime = input.ReadInt64();
          break;
        }
        case 18: {
          if (filter_ == null) {
            Filter = new global::EventFilter();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 24: {
          NumValuesPerNode = input.ReadUInt32();
          break;
        }
        case 32: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ReaderGroupDataType : pb::IMessage<ReaderGroupDataType> {
  private static readonly pb::MessageParser<ReaderGroupDataType> _parser = new pb::MessageParser<ReaderGroupDataType>(() => new ReaderGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReaderGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[478]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupDataType(ReaderGroupDataType other) : this() {
    _hasBits0 = other._hasBits0;
    dataSetReaders_ = other.dataSetReaders_ != null ? other.dataSetReaders_.Clone() : null;
    enabled_ = other.enabled_;
    groupProperties_ = other.groupProperties_ != null ? other.groupProperties_.Clone() : null;
    maxNetworkMessageSize_ = other.maxNetworkMessageSize_;
    messageSettings_ = other.messageSettings_ != null ? other.messageSettings_.Clone() : null;
    name_ = other.name_;
    securityGroupId_ = other.securityGroupId_;
    securityKeyServices_ = other.securityKeyServices_ != null ? other.securityKeyServices_.Clone() : null;
    securityMode_ = other.securityMode_;
    transportSettings_ = other.transportSettings_ != null ? other.transportSettings_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReaderGroupDataType Clone() {
    return new ReaderGroupDataType(this);
  }

  /// <summary>Field number for the "DataSetReaders" field.</summary>
  public const int DataSetReadersFieldNumber = 1;
  private global::ListOfDataSetReaderDataType dataSetReaders_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfDataSetReaderDataType DataSetReaders {
    get { return dataSetReaders_; }
    set {
      dataSetReaders_ = value;
    }
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 2;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { if ((_hasBits0 & 1) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "Enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "GroupProperties" field.</summary>
  public const int GroupPropertiesFieldNumber = 3;
  private global::ListOfKeyValuePair groupProperties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair GroupProperties {
    get { return groupProperties_; }
    set {
      groupProperties_ = value;
    }
  }

  /// <summary>Field number for the "MaxNetworkMessageSize" field.</summary>
  public const int MaxNetworkMessageSizeFieldNumber = 4;
  private readonly static uint MaxNetworkMessageSizeDefaultValue = 0;

  private uint maxNetworkMessageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxNetworkMessageSize {
    get { if ((_hasBits0 & 2) != 0) { return maxNetworkMessageSize_; } else { return MaxNetworkMessageSizeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      maxNetworkMessageSize_ = value;
    }
  }
  /// <summary>Gets whether the "MaxNetworkMessageSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxNetworkMessageSize {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MaxNetworkMessageSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxNetworkMessageSize() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "MessageSettings" field.</summary>
  public const int MessageSettingsFieldNumber = 5;
  private global::ExtensionObject messageSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject MessageSettings {
    get { return messageSettings_; }
    set {
      messageSettings_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 6;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "SecurityGroupId" field.</summary>
  public const int SecurityGroupIdFieldNumber = 7;
  private readonly static string SecurityGroupIdDefaultValue = "";

  private string securityGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecurityGroupId {
    get { return securityGroupId_ ?? SecurityGroupIdDefaultValue; }
    set {
      securityGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "SecurityGroupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityGroupId {
    get { return securityGroupId_ != null; }
  }
  /// <summary>Clears the value of the "SecurityGroupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityGroupId() {
    securityGroupId_ = null;
  }

  /// <summary>Field number for the "SecurityKeyServices" field.</summary>
  public const int SecurityKeyServicesFieldNumber = 8;
  private global::ListOfEndpointDescription securityKeyServices_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfEndpointDescription SecurityKeyServices {
    get { return securityKeyServices_; }
    set {
      securityKeyServices_ = value;
    }
  }

  /// <summary>Field number for the "SecurityMode" field.</summary>
  public const int SecurityModeFieldNumber = 9;
  private readonly static global::ReaderGroupDataType.Types.MessageSecurityMode SecurityModeDefaultValue = global::ReaderGroupDataType.Types.MessageSecurityMode.Invalid0;

  private global::ReaderGroupDataType.Types.MessageSecurityMode securityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReaderGroupDataType.Types.MessageSecurityMode SecurityMode {
    get { if ((_hasBits0 & 4) != 0) { return securityMode_; } else { return SecurityModeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      securityMode_ = value;
    }
  }
  /// <summary>Gets whether the "SecurityMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSecurityMode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "SecurityMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSecurityMode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "TransportSettings" field.</summary>
  public const int TransportSettingsFieldNumber = 10;
  private global::ExtensionObject transportSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject TransportSettings {
    get { return transportSettings_; }
    set {
      transportSettings_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReaderGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReaderGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DataSetReaders, other.DataSetReaders)) return false;
    if (Enabled != other.Enabled) return false;
    if (!object.Equals(GroupProperties, other.GroupProperties)) return false;
    if (MaxNetworkMessageSize != other.MaxNetworkMessageSize) return false;
    if (!object.Equals(MessageSettings, other.MessageSettings)) return false;
    if (Name != other.Name) return false;
    if (SecurityGroupId != other.SecurityGroupId) return false;
    if (!object.Equals(SecurityKeyServices, other.SecurityKeyServices)) return false;
    if (SecurityMode != other.SecurityMode) return false;
    if (!object.Equals(TransportSettings, other.TransportSettings)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataSetReaders_ != null) hash ^= DataSetReaders.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (groupProperties_ != null) hash ^= GroupProperties.GetHashCode();
    if (HasMaxNetworkMessageSize) hash ^= MaxNetworkMessageSize.GetHashCode();
    if (messageSettings_ != null) hash ^= MessageSettings.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasSecurityGroupId) hash ^= SecurityGroupId.GetHashCode();
    if (securityKeyServices_ != null) hash ^= SecurityKeyServices.GetHashCode();
    if (HasSecurityMode) hash ^= SecurityMode.GetHashCode();
    if (transportSettings_ != null) hash ^= TransportSettings.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataSetReaders_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DataSetReaders);
    }
    if (HasEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
    if (groupProperties_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GroupProperties);
    }
    if (HasMaxNetworkMessageSize) {
      output.WriteRawTag(32);
      output.WriteUInt32(MaxNetworkMessageSize);
    }
    if (messageSettings_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(MessageSettings);
    }
    if (HasName) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (HasSecurityGroupId) {
      output.WriteRawTag(58);
      output.WriteString(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      output.WriteRawTag(72);
      output.WriteEnum((int) SecurityMode);
    }
    if (transportSettings_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(TransportSettings);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataSetReaders_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSetReaders);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (groupProperties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupProperties);
    }
    if (HasMaxNetworkMessageSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNetworkMessageSize);
    }
    if (messageSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageSettings);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasSecurityGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityGroupId);
    }
    if (securityKeyServices_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecurityKeyServices);
    }
    if (HasSecurityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityMode);
    }
    if (transportSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportSettings);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReaderGroupDataType other) {
    if (other == null) {
      return;
    }
    if (other.dataSetReaders_ != null) {
      if (dataSetReaders_ == null) {
        DataSetReaders = new global::ListOfDataSetReaderDataType();
      }
      DataSetReaders.MergeFrom(other.DataSetReaders);
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.groupProperties_ != null) {
      if (groupProperties_ == null) {
        GroupProperties = new global::ListOfKeyValuePair();
      }
      GroupProperties.MergeFrom(other.GroupProperties);
    }
    if (other.HasMaxNetworkMessageSize) {
      MaxNetworkMessageSize = other.MaxNetworkMessageSize;
    }
    if (other.messageSettings_ != null) {
      if (messageSettings_ == null) {
        MessageSettings = new global::ExtensionObject();
      }
      MessageSettings.MergeFrom(other.MessageSettings);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasSecurityGroupId) {
      SecurityGroupId = other.SecurityGroupId;
    }
    if (other.securityKeyServices_ != null) {
      if (securityKeyServices_ == null) {
        SecurityKeyServices = new global::ListOfEndpointDescription();
      }
      SecurityKeyServices.MergeFrom(other.SecurityKeyServices);
    }
    if (other.HasSecurityMode) {
      SecurityMode = other.SecurityMode;
    }
    if (other.transportSettings_ != null) {
      if (transportSettings_ == null) {
        TransportSettings = new global::ExtensionObject();
      }
      TransportSettings.MergeFrom(other.TransportSettings);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dataSetReaders_ == null) {
            DataSetReaders = new global::ListOfDataSetReaderDataType();
          }
          input.ReadMessage(DataSetReaders);
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
        case 26: {
          if (groupProperties_ == null) {
            GroupProperties = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(GroupProperties);
          break;
        }
        case 32: {
          MaxNetworkMessageSize = input.ReadUInt32();
          break;
        }
        case 42: {
          if (messageSettings_ == null) {
            MessageSettings = new global::ExtensionObject();
          }
          input.ReadMessage(MessageSettings);
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 58: {
          SecurityGroupId = input.ReadString();
          break;
        }
        case 66: {
          if (securityKeyServices_ == null) {
            SecurityKeyServices = new global::ListOfEndpointDescription();
          }
          input.ReadMessage(SecurityKeyServices);
          break;
        }
        case 72: {
          SecurityMode = (global::ReaderGroupDataType.Types.MessageSecurityMode) input.ReadEnum();
          break;
        }
        case 82: {
          if (transportSettings_ == null) {
            TransportSettings = new global::ExtensionObject();
          }
          input.ReadMessage(TransportSettings);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ReaderGroupDataType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageSecurityMode {
      [pbr::OriginalName("MessageSecurityMode_Invalid_0")] Invalid0 = 1,
      [pbr::OriginalName("MessageSecurityMode_None_1")] None1 = 2,
      [pbr::OriginalName("MessageSecurityMode_SignAndEncrypt_3")] SignAndEncrypt3 = 3,
      [pbr::OriginalName("MessageSecurityMode_Sign_2")] Sign2 = 4,
    }

  }
  #endregion

}

public sealed partial class UpdateEventDetails : pb::IMessage<UpdateEventDetails> {
  private static readonly pb::MessageParser<UpdateEventDetails> _parser = new pb::MessageParser<UpdateEventDetails>(() => new UpdateEventDetails());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateEventDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[479]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateEventDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateEventDetails(UpdateEventDetails other) : this() {
    _hasBits0 = other._hasBits0;
    eventData_ = other.eventData_ != null ? other.eventData_.Clone() : null;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    NodeId_ = other.NodeId_ != null ? other.NodeId_.Clone() : null;
    performInsertReplace_ = other.performInsertReplace_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateEventDetails Clone() {
    return new UpdateEventDetails(this);
  }

  /// <summary>Field number for the "EventData" field.</summary>
  public const int EventDataFieldNumber = 1;
  private global::ListOfHistoryEventFieldList eventData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfHistoryEventFieldList EventData {
    get { return eventData_; }
    set {
      eventData_ = value;
    }
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 2;
  private global::EventFilter filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EventFilter Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "_NodeId" field.</summary>
  public const int NodeIdFieldNumber = 3;
  private global::NodeId NodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId NodeId {
    get { return NodeId_; }
    set {
      NodeId_ = value;
    }
  }

  /// <summary>Field number for the "PerformInsertReplace" field.</summary>
  public const int PerformInsertReplaceFieldNumber = 4;
  private readonly static global::UpdateEventDetails.Types.PerformUpdateType PerformInsertReplaceDefaultValue = global::UpdateEventDetails.Types.PerformUpdateType.Insert1;

  private global::UpdateEventDetails.Types.PerformUpdateType performInsertReplace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateEventDetails.Types.PerformUpdateType PerformInsertReplace {
    get { if ((_hasBits0 & 1) != 0) { return performInsertReplace_; } else { return PerformInsertReplaceDefaultValue; } }
    set {
      _hasBits0 |= 1;
      performInsertReplace_ = value;
    }
  }
  /// <summary>Gets whether the "PerformInsertReplace" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPerformInsertReplace {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "PerformInsertReplace" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPerformInsertReplace() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateEventDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateEventDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(EventData, other.EventData)) return false;
    if (!object.Equals(Filter, other.Filter)) return false;
    if (!object.Equals(NodeId, other.NodeId)) return false;
    if (PerformInsertReplace != other.PerformInsertReplace) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (eventData_ != null) hash ^= EventData.GetHashCode();
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (NodeId_ != null) hash ^= NodeId.GetHashCode();
    if (HasPerformInsertReplace) hash ^= PerformInsertReplace.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (eventData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EventData);
    }
    if (filter_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Filter);
    }
    if (NodeId_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(NodeId);
    }
    if (HasPerformInsertReplace) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PerformInsertReplace);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (eventData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventData);
    }
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (NodeId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeId);
    }
    if (HasPerformInsertReplace) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerformInsertReplace);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateEventDetails other) {
    if (other == null) {
      return;
    }
    if (other.eventData_ != null) {
      if (eventData_ == null) {
        EventData = new global::ListOfHistoryEventFieldList();
      }
      EventData.MergeFrom(other.EventData);
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::EventFilter();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.NodeId_ != null) {
      if (NodeId_ == null) {
        NodeId = new global::NodeId();
      }
      NodeId.MergeFrom(other.NodeId);
    }
    if (other.HasPerformInsertReplace) {
      PerformInsertReplace = other.PerformInsertReplace;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (eventData_ == null) {
            EventData = new global::ListOfHistoryEventFieldList();
          }
          input.ReadMessage(EventData);
          break;
        }
        case 18: {
          if (filter_ == null) {
            Filter = new global::EventFilter();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 26: {
          if (NodeId_ == null) {
            NodeId = new global::NodeId();
          }
          input.ReadMessage(NodeId);
          break;
        }
        case 32: {
          PerformInsertReplace = (global::UpdateEventDetails.Types.PerformUpdateType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the UpdateEventDetails message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PerformUpdateType {
      [pbr::OriginalName("PerformUpdateType_Insert_1")] Insert1 = 1,
      [pbr::OriginalName("PerformUpdateType_Remove_4")] Remove4 = 2,
      [pbr::OriginalName("PerformUpdateType_Replace_2")] Replace2 = 3,
      [pbr::OriginalName("PerformUpdateType_Update_3")] Update3 = 4,
    }

  }
  #endregion

}

public sealed partial class CreateMonitoredItemsRequest : pb::IMessage<CreateMonitoredItemsRequest> {
  private static readonly pb::MessageParser<CreateMonitoredItemsRequest> _parser = new pb::MessageParser<CreateMonitoredItemsRequest>(() => new CreateMonitoredItemsRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateMonitoredItemsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[480]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateMonitoredItemsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateMonitoredItemsRequest(CreateMonitoredItemsRequest other) : this() {
    _hasBits0 = other._hasBits0;
    itemsToCreate_ = other.itemsToCreate_ != null ? other.itemsToCreate_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    subscriptionId_ = other.subscriptionId_;
    TimestampsToReturn_ = other.TimestampsToReturn_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateMonitoredItemsRequest Clone() {
    return new CreateMonitoredItemsRequest(this);
  }

  /// <summary>Field number for the "ItemsToCreate" field.</summary>
  public const int ItemsToCreateFieldNumber = 1;
  private global::ListOfMonitoredItemCreateRequest itemsToCreate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfMonitoredItemCreateRequest ItemsToCreate {
    get { return itemsToCreate_; }
    set {
      itemsToCreate_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 2;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "SubscriptionId" field.</summary>
  public const int SubscriptionIdFieldNumber = 3;
  private readonly static uint SubscriptionIdDefaultValue = 0;

  private uint subscriptionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubscriptionId {
    get { if ((_hasBits0 & 1) != 0) { return subscriptionId_; } else { return SubscriptionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      subscriptionId_ = value;
    }
  }
  /// <summary>Gets whether the "SubscriptionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubscriptionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SubscriptionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubscriptionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "_TimestampsToReturn" field.</summary>
  public const int TimestampsToReturnFieldNumber = 4;
  private readonly static global::CreateMonitoredItemsRequest.Types.TimestampsToReturn TimestampsToReturnDefaultValue = global::CreateMonitoredItemsRequest.Types.TimestampsToReturn.Both2;

  private global::CreateMonitoredItemsRequest.Types.TimestampsToReturn TimestampsToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CreateMonitoredItemsRequest.Types.TimestampsToReturn TimestampsToReturn {
    get { if ((_hasBits0 & 2) != 0) { return TimestampsToReturn_; } else { return TimestampsToReturnDefaultValue; } }
    set {
      _hasBits0 |= 2;
      TimestampsToReturn_ = value;
    }
  }
  /// <summary>Gets whether the "_TimestampsToReturn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestampsToReturn {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "_TimestampsToReturn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestampsToReturn() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateMonitoredItemsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateMonitoredItemsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ItemsToCreate, other.ItemsToCreate)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (SubscriptionId != other.SubscriptionId) return false;
    if (TimestampsToReturn != other.TimestampsToReturn) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (itemsToCreate_ != null) hash ^= ItemsToCreate.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (HasSubscriptionId) hash ^= SubscriptionId.GetHashCode();
    if (HasTimestampsToReturn) hash ^= TimestampsToReturn.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (itemsToCreate_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ItemsToCreate);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RequestHeader);
    }
    if (HasSubscriptionId) {
      output.WriteRawTag(24);
      output.WriteUInt32(SubscriptionId);
    }
    if (HasTimestampsToReturn) {
      output.WriteRawTag(32);
      output.WriteEnum((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (itemsToCreate_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemsToCreate);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (HasSubscriptionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscriptionId);
    }
    if (HasTimestampsToReturn) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimestampsToReturn);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateMonitoredItemsRequest other) {
    if (other == null) {
      return;
    }
    if (other.itemsToCreate_ != null) {
      if (itemsToCreate_ == null) {
        ItemsToCreate = new global::ListOfMonitoredItemCreateRequest();
      }
      ItemsToCreate.MergeFrom(other.ItemsToCreate);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.HasSubscriptionId) {
      SubscriptionId = other.SubscriptionId;
    }
    if (other.HasTimestampsToReturn) {
      TimestampsToReturn = other.TimestampsToReturn;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (itemsToCreate_ == null) {
            ItemsToCreate = new global::ListOfMonitoredItemCreateRequest();
          }
          input.ReadMessage(ItemsToCreate);
          break;
        }
        case 18: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 24: {
          SubscriptionId = input.ReadUInt32();
          break;
        }
        case 32: {
          TimestampsToReturn = (global::CreateMonitoredItemsRequest.Types.TimestampsToReturn) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CreateMonitoredItemsRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TimestampsToReturn {
      [pbr::OriginalName("TimestampsToReturn_Both_2")] Both2 = 1,
      [pbr::OriginalName("TimestampsToReturn_Invalid_4")] Invalid4 = 2,
      [pbr::OriginalName("TimestampsToReturn_Neither_3")] Neither3 = 3,
      [pbr::OriginalName("TimestampsToReturn_Server_1")] Server1 = 4,
      [pbr::OriginalName("TimestampsToReturn_Source_0")] Source0 = 5,
    }

  }
  #endregion

}

public sealed partial class ListOfNodeTypeDescription : pb::IMessage<ListOfNodeTypeDescription> {
  private static readonly pb::MessageParser<ListOfNodeTypeDescription> _parser = new pb::MessageParser<ListOfNodeTypeDescription>(() => new ListOfNodeTypeDescription());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfNodeTypeDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[481]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeTypeDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeTypeDescription(ListOfNodeTypeDescription other) : this() {
    NodeTypeDescription_ = other.NodeTypeDescription_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfNodeTypeDescription Clone() {
    return new ListOfNodeTypeDescription(this);
  }

  /// <summary>Field number for the "_NodeTypeDescription" field.</summary>
  public const int NodeTypeDescriptionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NodeTypeDescription> _repeated_NodeTypeDescription_codec
      = pb::FieldCodec.ForMessage(10, global::NodeTypeDescription.Parser);
  private readonly pbc::RepeatedField<global::NodeTypeDescription> NodeTypeDescription_ = new pbc::RepeatedField<global::NodeTypeDescription>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NodeTypeDescription> NodeTypeDescription {
    get { return NodeTypeDescription_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfNodeTypeDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfNodeTypeDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!NodeTypeDescription_.Equals(other.NodeTypeDescription_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= NodeTypeDescription_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    NodeTypeDescription_.WriteTo(output, _repeated_NodeTypeDescription_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += NodeTypeDescription_.CalculateSize(_repeated_NodeTypeDescription_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfNodeTypeDescription other) {
    if (other == null) {
      return;
    }
    NodeTypeDescription_.Add(other.NodeTypeDescription_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NodeTypeDescription_.AddEntriesFrom(input, _repeated_NodeTypeDescription_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPubSubGroupDataType : pb::IMessage<ListOfPubSubGroupDataType> {
  private static readonly pb::MessageParser<ListOfPubSubGroupDataType> _parser = new pb::MessageParser<ListOfPubSubGroupDataType>(() => new ListOfPubSubGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPubSubGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[482]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubGroupDataType(ListOfPubSubGroupDataType other) : this() {
    PubSubGroupDataType_ = other.PubSubGroupDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubGroupDataType Clone() {
    return new ListOfPubSubGroupDataType(this);
  }

  /// <summary>Field number for the "_PubSubGroupDataType" field.</summary>
  public const int PubSubGroupDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PubSubGroupDataType> _repeated_PubSubGroupDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PubSubGroupDataType.Parser);
  private readonly pbc::RepeatedField<global::PubSubGroupDataType> PubSubGroupDataType_ = new pbc::RepeatedField<global::PubSubGroupDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PubSubGroupDataType> PubSubGroupDataType {
    get { return PubSubGroupDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPubSubGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPubSubGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PubSubGroupDataType_.Equals(other.PubSubGroupDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PubSubGroupDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PubSubGroupDataType_.WriteTo(output, _repeated_PubSubGroupDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PubSubGroupDataType_.CalculateSize(_repeated_PubSubGroupDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPubSubGroupDataType other) {
    if (other == null) {
      return;
    }
    PubSubGroupDataType_.Add(other.PubSubGroupDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PubSubGroupDataType_.AddEntriesFrom(input, _repeated_PubSubGroupDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPublishedDataSetDataType : pb::IMessage<ListOfPublishedDataSetDataType> {
  private static readonly pb::MessageParser<ListOfPublishedDataSetDataType> _parser = new pb::MessageParser<ListOfPublishedDataSetDataType>(() => new ListOfPublishedDataSetDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPublishedDataSetDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[483]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataSetDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataSetDataType(ListOfPublishedDataSetDataType other) : this() {
    PublishedDataSetDataType_ = other.PublishedDataSetDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataSetDataType Clone() {
    return new ListOfPublishedDataSetDataType(this);
  }

  /// <summary>Field number for the "_PublishedDataSetDataType" field.</summary>
  public const int PublishedDataSetDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PublishedDataSetDataType> _repeated_PublishedDataSetDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PublishedDataSetDataType.Parser);
  private readonly pbc::RepeatedField<global::PublishedDataSetDataType> PublishedDataSetDataType_ = new pbc::RepeatedField<global::PublishedDataSetDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PublishedDataSetDataType> PublishedDataSetDataType {
    get { return PublishedDataSetDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPublishedDataSetDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPublishedDataSetDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PublishedDataSetDataType_.Equals(other.PublishedDataSetDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PublishedDataSetDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PublishedDataSetDataType_.WriteTo(output, _repeated_PublishedDataSetDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PublishedDataSetDataType_.CalculateSize(_repeated_PublishedDataSetDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPublishedDataSetDataType other) {
    if (other == null) {
      return;
    }
    PublishedDataSetDataType_.Add(other.PublishedDataSetDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublishedDataSetDataType_.AddEntriesFrom(input, _repeated_PublishedDataSetDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPublishedDataSetSourceDataType : pb::IMessage<ListOfPublishedDataSetSourceDataType> {
  private static readonly pb::MessageParser<ListOfPublishedDataSetSourceDataType> _parser = new pb::MessageParser<ListOfPublishedDataSetSourceDataType>(() => new ListOfPublishedDataSetSourceDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPublishedDataSetSourceDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[484]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataSetSourceDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataSetSourceDataType(ListOfPublishedDataSetSourceDataType other) : this() {
    PublishedDataSetSourceDataType_ = other.PublishedDataSetSourceDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedDataSetSourceDataType Clone() {
    return new ListOfPublishedDataSetSourceDataType(this);
  }

  /// <summary>Field number for the "_PublishedDataSetSourceDataType" field.</summary>
  public const int PublishedDataSetSourceDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PublishedDataSetSourceDataType> _repeated_PublishedDataSetSourceDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PublishedDataSetSourceDataType.Parser);
  private readonly pbc::RepeatedField<global::PublishedDataSetSourceDataType> PublishedDataSetSourceDataType_ = new pbc::RepeatedField<global::PublishedDataSetSourceDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PublishedDataSetSourceDataType> PublishedDataSetSourceDataType {
    get { return PublishedDataSetSourceDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPublishedDataSetSourceDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPublishedDataSetSourceDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PublishedDataSetSourceDataType_.Equals(other.PublishedDataSetSourceDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PublishedDataSetSourceDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PublishedDataSetSourceDataType_.WriteTo(output, _repeated_PublishedDataSetSourceDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PublishedDataSetSourceDataType_.CalculateSize(_repeated_PublishedDataSetSourceDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPublishedDataSetSourceDataType other) {
    if (other == null) {
      return;
    }
    PublishedDataSetSourceDataType_.Add(other.PublishedDataSetSourceDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublishedDataSetSourceDataType_.AddEntriesFrom(input, _repeated_PublishedDataSetSourceDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPublishedEventsDataType : pb::IMessage<ListOfPublishedEventsDataType> {
  private static readonly pb::MessageParser<ListOfPublishedEventsDataType> _parser = new pb::MessageParser<ListOfPublishedEventsDataType>(() => new ListOfPublishedEventsDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPublishedEventsDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[485]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedEventsDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedEventsDataType(ListOfPublishedEventsDataType other) : this() {
    PublishedEventsDataType_ = other.PublishedEventsDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPublishedEventsDataType Clone() {
    return new ListOfPublishedEventsDataType(this);
  }

  /// <summary>Field number for the "_PublishedEventsDataType" field.</summary>
  public const int PublishedEventsDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PublishedEventsDataType> _repeated_PublishedEventsDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PublishedEventsDataType.Parser);
  private readonly pbc::RepeatedField<global::PublishedEventsDataType> PublishedEventsDataType_ = new pbc::RepeatedField<global::PublishedEventsDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PublishedEventsDataType> PublishedEventsDataType {
    get { return PublishedEventsDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPublishedEventsDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPublishedEventsDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PublishedEventsDataType_.Equals(other.PublishedEventsDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PublishedEventsDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PublishedEventsDataType_.WriteTo(output, _repeated_PublishedEventsDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PublishedEventsDataType_.CalculateSize(_repeated_PublishedEventsDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPublishedEventsDataType other) {
    if (other == null) {
      return;
    }
    PublishedEventsDataType_.Add(other.PublishedEventsDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublishedEventsDataType_.AddEntriesFrom(input, _repeated_PublishedEventsDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfReaderGroupDataType : pb::IMessage<ListOfReaderGroupDataType> {
  private static readonly pb::MessageParser<ListOfReaderGroupDataType> _parser = new pb::MessageParser<ListOfReaderGroupDataType>(() => new ListOfReaderGroupDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfReaderGroupDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[486]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupDataType(ListOfReaderGroupDataType other) : this() {
    ReaderGroupDataType_ = other.ReaderGroupDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfReaderGroupDataType Clone() {
    return new ListOfReaderGroupDataType(this);
  }

  /// <summary>Field number for the "_ReaderGroupDataType" field.</summary>
  public const int ReaderGroupDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ReaderGroupDataType> _repeated_ReaderGroupDataType_codec
      = pb::FieldCodec.ForMessage(10, global::ReaderGroupDataType.Parser);
  private readonly pbc::RepeatedField<global::ReaderGroupDataType> ReaderGroupDataType_ = new pbc::RepeatedField<global::ReaderGroupDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ReaderGroupDataType> ReaderGroupDataType {
    get { return ReaderGroupDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfReaderGroupDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfReaderGroupDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ReaderGroupDataType_.Equals(other.ReaderGroupDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ReaderGroupDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ReaderGroupDataType_.WriteTo(output, _repeated_ReaderGroupDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ReaderGroupDataType_.CalculateSize(_repeated_ReaderGroupDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfReaderGroupDataType other) {
    if (other == null) {
      return;
    }
    ReaderGroupDataType_.Add(other.ReaderGroupDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ReaderGroupDataType_.AddEntriesFrom(input, _repeated_ReaderGroupDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PubSubConnectionDataType : pb::IMessage<PubSubConnectionDataType> {
  private static readonly pb::MessageParser<PubSubConnectionDataType> _parser = new pb::MessageParser<PubSubConnectionDataType>(() => new PubSubConnectionDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PubSubConnectionDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[487]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubConnectionDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubConnectionDataType(PubSubConnectionDataType other) : this() {
    _hasBits0 = other._hasBits0;
    address_ = other.address_ != null ? other.address_.Clone() : null;
    connectionProperties_ = other.connectionProperties_ != null ? other.connectionProperties_.Clone() : null;
    enabled_ = other.enabled_;
    name_ = other.name_;
    publisherId_ = other.publisherId_ != null ? other.publisherId_.Clone() : null;
    readerGroups_ = other.readerGroups_ != null ? other.readerGroups_.Clone() : null;
    transportProfileUri_ = other.transportProfileUri_;
    transportSettings_ = other.transportSettings_ != null ? other.transportSettings_.Clone() : null;
    writerGroups_ = other.writerGroups_ != null ? other.writerGroups_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubConnectionDataType Clone() {
    return new PubSubConnectionDataType(this);
  }

  /// <summary>Field number for the "Address" field.</summary>
  public const int AddressFieldNumber = 1;
  private global::ExtensionObject address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "ConnectionProperties" field.</summary>
  public const int ConnectionPropertiesFieldNumber = 2;
  private global::ListOfKeyValuePair connectionProperties_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfKeyValuePair ConnectionProperties {
    get { return connectionProperties_; }
    set {
      connectionProperties_ = value;
    }
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 3;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { if ((_hasBits0 & 1) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "Enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 4;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "Name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "Name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "PublisherId" field.</summary>
  public const int PublisherIdFieldNumber = 5;
  private global::Variant publisherId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Variant PublisherId {
    get { return publisherId_; }
    set {
      publisherId_ = value;
    }
  }

  /// <summary>Field number for the "ReaderGroups" field.</summary>
  public const int ReaderGroupsFieldNumber = 6;
  private global::ListOfReaderGroupDataType readerGroups_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfReaderGroupDataType ReaderGroups {
    get { return readerGroups_; }
    set {
      readerGroups_ = value;
    }
  }

  /// <summary>Field number for the "TransportProfileUri" field.</summary>
  public const int TransportProfileUriFieldNumber = 7;
  private readonly static string TransportProfileUriDefaultValue = "";

  private string transportProfileUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TransportProfileUri {
    get { return transportProfileUri_ ?? TransportProfileUriDefaultValue; }
    set {
      transportProfileUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "TransportProfileUri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransportProfileUri {
    get { return transportProfileUri_ != null; }
  }
  /// <summary>Clears the value of the "TransportProfileUri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransportProfileUri() {
    transportProfileUri_ = null;
  }

  /// <summary>Field number for the "TransportSettings" field.</summary>
  public const int TransportSettingsFieldNumber = 8;
  private global::ExtensionObject transportSettings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtensionObject TransportSettings {
    get { return transportSettings_; }
    set {
      transportSettings_ = value;
    }
  }

  /// <summary>Field number for the "WriterGroups" field.</summary>
  public const int WriterGroupsFieldNumber = 9;
  private global::ListOfWriterGroupDataType writerGroups_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfWriterGroupDataType WriterGroups {
    get { return writerGroups_; }
    set {
      writerGroups_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PubSubConnectionDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PubSubConnectionDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Address, other.Address)) return false;
    if (!object.Equals(ConnectionProperties, other.ConnectionProperties)) return false;
    if (Enabled != other.Enabled) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(PublisherId, other.PublisherId)) return false;
    if (!object.Equals(ReaderGroups, other.ReaderGroups)) return false;
    if (TransportProfileUri != other.TransportProfileUri) return false;
    if (!object.Equals(TransportSettings, other.TransportSettings)) return false;
    if (!object.Equals(WriterGroups, other.WriterGroups)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (address_ != null) hash ^= Address.GetHashCode();
    if (connectionProperties_ != null) hash ^= ConnectionProperties.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (publisherId_ != null) hash ^= PublisherId.GetHashCode();
    if (readerGroups_ != null) hash ^= ReaderGroups.GetHashCode();
    if (HasTransportProfileUri) hash ^= TransportProfileUri.GetHashCode();
    if (transportSettings_ != null) hash ^= TransportSettings.GetHashCode();
    if (writerGroups_ != null) hash ^= WriterGroups.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (address_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Address);
    }
    if (connectionProperties_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConnectionProperties);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (HasName) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (publisherId_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(PublisherId);
    }
    if (readerGroups_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(ReaderGroups);
    }
    if (HasTransportProfileUri) {
      output.WriteRawTag(58);
      output.WriteString(TransportProfileUri);
    }
    if (transportSettings_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(TransportSettings);
    }
    if (writerGroups_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(WriterGroups);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (address_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
    }
    if (connectionProperties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionProperties);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (publisherId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublisherId);
    }
    if (readerGroups_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReaderGroups);
    }
    if (HasTransportProfileUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TransportProfileUri);
    }
    if (transportSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportSettings);
    }
    if (writerGroups_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WriterGroups);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PubSubConnectionDataType other) {
    if (other == null) {
      return;
    }
    if (other.address_ != null) {
      if (address_ == null) {
        Address = new global::ExtensionObject();
      }
      Address.MergeFrom(other.Address);
    }
    if (other.connectionProperties_ != null) {
      if (connectionProperties_ == null) {
        ConnectionProperties = new global::ListOfKeyValuePair();
      }
      ConnectionProperties.MergeFrom(other.ConnectionProperties);
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.publisherId_ != null) {
      if (publisherId_ == null) {
        PublisherId = new global::Variant();
      }
      PublisherId.MergeFrom(other.PublisherId);
    }
    if (other.readerGroups_ != null) {
      if (readerGroups_ == null) {
        ReaderGroups = new global::ListOfReaderGroupDataType();
      }
      ReaderGroups.MergeFrom(other.ReaderGroups);
    }
    if (other.HasTransportProfileUri) {
      TransportProfileUri = other.TransportProfileUri;
    }
    if (other.transportSettings_ != null) {
      if (transportSettings_ == null) {
        TransportSettings = new global::ExtensionObject();
      }
      TransportSettings.MergeFrom(other.TransportSettings);
    }
    if (other.writerGroups_ != null) {
      if (writerGroups_ == null) {
        WriterGroups = new global::ListOfWriterGroupDataType();
      }
      WriterGroups.MergeFrom(other.WriterGroups);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (address_ == null) {
            Address = new global::ExtensionObject();
          }
          input.ReadMessage(Address);
          break;
        }
        case 18: {
          if (connectionProperties_ == null) {
            ConnectionProperties = new global::ListOfKeyValuePair();
          }
          input.ReadMessage(ConnectionProperties);
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          if (publisherId_ == null) {
            PublisherId = new global::Variant();
          }
          input.ReadMessage(PublisherId);
          break;
        }
        case 50: {
          if (readerGroups_ == null) {
            ReaderGroups = new global::ListOfReaderGroupDataType();
          }
          input.ReadMessage(ReaderGroups);
          break;
        }
        case 58: {
          TransportProfileUri = input.ReadString();
          break;
        }
        case 66: {
          if (transportSettings_ == null) {
            TransportSettings = new global::ExtensionObject();
          }
          input.ReadMessage(TransportSettings);
          break;
        }
        case 74: {
          if (writerGroups_ == null) {
            WriterGroups = new global::ListOfWriterGroupDataType();
          }
          input.ReadMessage(WriterGroups);
          break;
        }
      }
    }
  }

}

public sealed partial class QueryFirstRequest : pb::IMessage<QueryFirstRequest> {
  private static readonly pb::MessageParser<QueryFirstRequest> _parser = new pb::MessageParser<QueryFirstRequest>(() => new QueryFirstRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueryFirstRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[488]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFirstRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFirstRequest(QueryFirstRequest other) : this() {
    _hasBits0 = other._hasBits0;
    filter_ = other.filter_ != null ? other.filter_.Clone() : null;
    maxDataSetsToReturn_ = other.maxDataSetsToReturn_;
    maxReferencesToReturn_ = other.maxReferencesToReturn_;
    nodeTypes_ = other.nodeTypes_ != null ? other.nodeTypes_.Clone() : null;
    RequestHeader_ = other.RequestHeader_ != null ? other.RequestHeader_.Clone() : null;
    view_ = other.view_ != null ? other.view_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFirstRequest Clone() {
    return new QueryFirstRequest(this);
  }

  /// <summary>Field number for the "Filter" field.</summary>
  public const int FilterFieldNumber = 1;
  private global::ContentFilter filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ContentFilter Filter {
    get { return filter_; }
    set {
      filter_ = value;
    }
  }

  /// <summary>Field number for the "MaxDataSetsToReturn" field.</summary>
  public const int MaxDataSetsToReturnFieldNumber = 2;
  private readonly static uint MaxDataSetsToReturnDefaultValue = 0;

  private uint maxDataSetsToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxDataSetsToReturn {
    get { if ((_hasBits0 & 1) != 0) { return maxDataSetsToReturn_; } else { return MaxDataSetsToReturnDefaultValue; } }
    set {
      _hasBits0 |= 1;
      maxDataSetsToReturn_ = value;
    }
  }
  /// <summary>Gets whether the "MaxDataSetsToReturn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxDataSetsToReturn {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "MaxDataSetsToReturn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxDataSetsToReturn() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "MaxReferencesToReturn" field.</summary>
  public const int MaxReferencesToReturnFieldNumber = 3;
  private readonly static uint MaxReferencesToReturnDefaultValue = 0;

  private uint maxReferencesToReturn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxReferencesToReturn {
    get { if ((_hasBits0 & 2) != 0) { return maxReferencesToReturn_; } else { return MaxReferencesToReturnDefaultValue; } }
    set {
      _hasBits0 |= 2;
      maxReferencesToReturn_ = value;
    }
  }
  /// <summary>Gets whether the "MaxReferencesToReturn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxReferencesToReturn {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "MaxReferencesToReturn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxReferencesToReturn() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "NodeTypes" field.</summary>
  public const int NodeTypesFieldNumber = 4;
  private global::ListOfNodeTypeDescription nodeTypes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfNodeTypeDescription NodeTypes {
    get { return nodeTypes_; }
    set {
      nodeTypes_ = value;
    }
  }

  /// <summary>Field number for the "_RequestHeader" field.</summary>
  public const int RequestHeaderFieldNumber = 5;
  private global::RequestHeader RequestHeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestHeader RequestHeader {
    get { return RequestHeader_; }
    set {
      RequestHeader_ = value;
    }
  }

  /// <summary>Field number for the "View" field.</summary>
  public const int ViewFieldNumber = 6;
  private global::ViewDescription view_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ViewDescription View {
    get { return view_; }
    set {
      view_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueryFirstRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueryFirstRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Filter, other.Filter)) return false;
    if (MaxDataSetsToReturn != other.MaxDataSetsToReturn) return false;
    if (MaxReferencesToReturn != other.MaxReferencesToReturn) return false;
    if (!object.Equals(NodeTypes, other.NodeTypes)) return false;
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(View, other.View)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (filter_ != null) hash ^= Filter.GetHashCode();
    if (HasMaxDataSetsToReturn) hash ^= MaxDataSetsToReturn.GetHashCode();
    if (HasMaxReferencesToReturn) hash ^= MaxReferencesToReturn.GetHashCode();
    if (nodeTypes_ != null) hash ^= NodeTypes.GetHashCode();
    if (RequestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (view_ != null) hash ^= View.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (filter_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Filter);
    }
    if (HasMaxDataSetsToReturn) {
      output.WriteRawTag(16);
      output.WriteUInt32(MaxDataSetsToReturn);
    }
    if (HasMaxReferencesToReturn) {
      output.WriteRawTag(24);
      output.WriteUInt32(MaxReferencesToReturn);
    }
    if (nodeTypes_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NodeTypes);
    }
    if (RequestHeader_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(RequestHeader);
    }
    if (view_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(View);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (filter_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
    }
    if (HasMaxDataSetsToReturn) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDataSetsToReturn);
    }
    if (HasMaxReferencesToReturn) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxReferencesToReturn);
    }
    if (nodeTypes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeTypes);
    }
    if (RequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (view_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(View);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueryFirstRequest other) {
    if (other == null) {
      return;
    }
    if (other.filter_ != null) {
      if (filter_ == null) {
        Filter = new global::ContentFilter();
      }
      Filter.MergeFrom(other.Filter);
    }
    if (other.HasMaxDataSetsToReturn) {
      MaxDataSetsToReturn = other.MaxDataSetsToReturn;
    }
    if (other.HasMaxReferencesToReturn) {
      MaxReferencesToReturn = other.MaxReferencesToReturn;
    }
    if (other.nodeTypes_ != null) {
      if (nodeTypes_ == null) {
        NodeTypes = new global::ListOfNodeTypeDescription();
      }
      NodeTypes.MergeFrom(other.NodeTypes);
    }
    if (other.RequestHeader_ != null) {
      if (RequestHeader_ == null) {
        RequestHeader = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.view_ != null) {
      if (view_ == null) {
        View = new global::ViewDescription();
      }
      View.MergeFrom(other.View);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (filter_ == null) {
            Filter = new global::ContentFilter();
          }
          input.ReadMessage(Filter);
          break;
        }
        case 16: {
          MaxDataSetsToReturn = input.ReadUInt32();
          break;
        }
        case 24: {
          MaxReferencesToReturn = input.ReadUInt32();
          break;
        }
        case 34: {
          if (nodeTypes_ == null) {
            NodeTypes = new global::ListOfNodeTypeDescription();
          }
          input.ReadMessage(NodeTypes);
          break;
        }
        case 42: {
          if (RequestHeader_ == null) {
            RequestHeader = new global::RequestHeader();
          }
          input.ReadMessage(RequestHeader);
          break;
        }
        case 50: {
          if (view_ == null) {
            View = new global::ViewDescription();
          }
          input.ReadMessage(View);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPubSubConnectionDataType : pb::IMessage<ListOfPubSubConnectionDataType> {
  private static readonly pb::MessageParser<ListOfPubSubConnectionDataType> _parser = new pb::MessageParser<ListOfPubSubConnectionDataType>(() => new ListOfPubSubConnectionDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPubSubConnectionDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[489]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubConnectionDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubConnectionDataType(ListOfPubSubConnectionDataType other) : this() {
    PubSubConnectionDataType_ = other.PubSubConnectionDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubConnectionDataType Clone() {
    return new ListOfPubSubConnectionDataType(this);
  }

  /// <summary>Field number for the "_PubSubConnectionDataType" field.</summary>
  public const int PubSubConnectionDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PubSubConnectionDataType> _repeated_PubSubConnectionDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PubSubConnectionDataType.Parser);
  private readonly pbc::RepeatedField<global::PubSubConnectionDataType> PubSubConnectionDataType_ = new pbc::RepeatedField<global::PubSubConnectionDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PubSubConnectionDataType> PubSubConnectionDataType {
    get { return PubSubConnectionDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPubSubConnectionDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPubSubConnectionDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PubSubConnectionDataType_.Equals(other.PubSubConnectionDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PubSubConnectionDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PubSubConnectionDataType_.WriteTo(output, _repeated_PubSubConnectionDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PubSubConnectionDataType_.CalculateSize(_repeated_PubSubConnectionDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPubSubConnectionDataType other) {
    if (other == null) {
      return;
    }
    PubSubConnectionDataType_.Add(other.PubSubConnectionDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PubSubConnectionDataType_.AddEntriesFrom(input, _repeated_PubSubConnectionDataType_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PubSubConfigurationDataType : pb::IMessage<PubSubConfigurationDataType> {
  private static readonly pb::MessageParser<PubSubConfigurationDataType> _parser = new pb::MessageParser<PubSubConfigurationDataType>(() => new PubSubConfigurationDataType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PubSubConfigurationDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[490]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubConfigurationDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubConfigurationDataType(PubSubConfigurationDataType other) : this() {
    _hasBits0 = other._hasBits0;
    connections_ = other.connections_ != null ? other.connections_.Clone() : null;
    enabled_ = other.enabled_;
    publishedDataSets_ = other.publishedDataSets_ != null ? other.publishedDataSets_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PubSubConfigurationDataType Clone() {
    return new PubSubConfigurationDataType(this);
  }

  /// <summary>Field number for the "Connections" field.</summary>
  public const int ConnectionsFieldNumber = 1;
  private global::ListOfPubSubConnectionDataType connections_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfPubSubConnectionDataType Connections {
    get { return connections_; }
    set {
      connections_ = value;
    }
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 2;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { if ((_hasBits0 & 1) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "Enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "Enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "PublishedDataSets" field.</summary>
  public const int PublishedDataSetsFieldNumber = 3;
  private global::ListOfPublishedDataSetDataType publishedDataSets_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListOfPublishedDataSetDataType PublishedDataSets {
    get { return publishedDataSets_; }
    set {
      publishedDataSets_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PubSubConfigurationDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PubSubConfigurationDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Connections, other.Connections)) return false;
    if (Enabled != other.Enabled) return false;
    if (!object.Equals(PublishedDataSets, other.PublishedDataSets)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (connections_ != null) hash ^= Connections.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (publishedDataSets_ != null) hash ^= PublishedDataSets.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (connections_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Connections);
    }
    if (HasEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
    if (publishedDataSets_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PublishedDataSets);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (connections_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connections);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (publishedDataSets_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishedDataSets);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PubSubConfigurationDataType other) {
    if (other == null) {
      return;
    }
    if (other.connections_ != null) {
      if (connections_ == null) {
        Connections = new global::ListOfPubSubConnectionDataType();
      }
      Connections.MergeFrom(other.Connections);
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.publishedDataSets_ != null) {
      if (publishedDataSets_ == null) {
        PublishedDataSets = new global::ListOfPublishedDataSetDataType();
      }
      PublishedDataSets.MergeFrom(other.PublishedDataSets);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (connections_ == null) {
            Connections = new global::ListOfPubSubConnectionDataType();
          }
          input.ReadMessage(Connections);
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
        case 26: {
          if (publishedDataSets_ == null) {
            PublishedDataSets = new global::ListOfPublishedDataSetDataType();
          }
          input.ReadMessage(PublishedDataSets);
          break;
        }
      }
    }
  }

}

public sealed partial class ListOfPubSubConfigurationDataType : pb::IMessage<ListOfPubSubConfigurationDataType> {
  private static readonly pb::MessageParser<ListOfPubSubConfigurationDataType> _parser = new pb::MessageParser<ListOfPubSubConfigurationDataType>(() => new ListOfPubSubConfigurationDataType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListOfPubSubConfigurationDataType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpcReflection.Descriptor.MessageTypes[491]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubConfigurationDataType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubConfigurationDataType(ListOfPubSubConfigurationDataType other) : this() {
    PubSubConfigurationDataType_ = other.PubSubConfigurationDataType_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListOfPubSubConfigurationDataType Clone() {
    return new ListOfPubSubConfigurationDataType(this);
  }

  /// <summary>Field number for the "_PubSubConfigurationDataType" field.</summary>
  public const int PubSubConfigurationDataTypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PubSubConfigurationDataType> _repeated_PubSubConfigurationDataType_codec
      = pb::FieldCodec.ForMessage(10, global::PubSubConfigurationDataType.Parser);
  private readonly pbc::RepeatedField<global::PubSubConfigurationDataType> PubSubConfigurationDataType_ = new pbc::RepeatedField<global::PubSubConfigurationDataType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PubSubConfigurationDataType> PubSubConfigurationDataType {
    get { return PubSubConfigurationDataType_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListOfPubSubConfigurationDataType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListOfPubSubConfigurationDataType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!PubSubConfigurationDataType_.Equals(other.PubSubConfigurationDataType_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PubSubConfigurationDataType_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    PubSubConfigurationDataType_.WriteTo(output, _repeated_PubSubConfigurationDataType_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += PubSubConfigurationDataType_.CalculateSize(_repeated_PubSubConfigurationDataType_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListOfPubSubConfigurationDataType other) {
    if (other == null) {
      return;
    }
    PubSubConfigurationDataType_.Add(other.PubSubConfigurationDataType_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PubSubConfigurationDataType_.AddEntriesFrom(input, _repeated_PubSubConfigurationDataType_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
